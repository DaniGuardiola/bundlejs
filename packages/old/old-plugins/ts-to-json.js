import * as TJS from "typescript-json-schema";
import glob from "tiny-glob";

// optionally pass a base path
const basePath = ".";
const files = Promise.all([
    glob(`${basePath}/node_modules/esbuild-wasm/**/*.ts`), 
    glob(`${basePath}/src/ts/configs/bundle-options.ts`)
]);

let cacheResult;
const generateSchema = async () => {
    if (cacheResult) return cacheResult;
    const program = TJS.getProgramFromFiles((await files).flat(), {}, basePath + "/");

    // We can either get the schema for one file and one type...
    const schema = TJS.generateSchema(program, "BundleConfigOptions");
    cacheResult = schema;
    return schema;
};

export const TS_TO_JSON = () => {
    /**
     * @type {import('esbuild').Plugin}
     */
    return {
        name: "ts-to-json-schema",
        setup(build) {
            build.onResolve({ filter: /^schema\:/ }, async (args) => {
                // Feel free to remove this logline once you verify that the plugin works for your setup
                console.debug(
                    `The \`ts-to-json-schema\` plugin matched an import to ${args.path} from ${args.importer}`
                );
                return {
                    path: args.path.replace(/^schema\:/, ""),
                    namespace: "ts-to-json-schema",
                    pluginData: { importer: args.importer, schema: await generateSchema() },
                };
            });

            build.onLoad(
                { filter: /.*/, namespace: "ts-to-json-schema" },
                async (args) => {
                    return {
                        contents: `
// This file is generated by esbuild to expose the schema script as a class, like Webpack's schema-loader
export default ${JSON.stringify(args.pluginData.schema)}`,
                    };
                }
            );
        },
    };
};