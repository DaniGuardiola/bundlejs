{"version":3,"file":"index.js","sources":["../src/utils/ansi.ts","../src/utils/debounce.ts","../src/utils/deep-equal.ts","../src/utils/encode-decode.ts","../src/utils/fetch-and-cache.ts","../src/deno/path/_constants.ts","../src/deno/path/_util.ts","../src/deno/path/posix.ts","../src/deno/path/mod.ts","../src/utils/filesystem.ts","../src/utils/loader.ts","../../../node_modules/.pnpm/@amoutonbrady+lz-string@0.0.1/node_modules/@amoutonbrady/lz-string/dist/esm/index.js","../src/configs/options.ts","../src/utils/util-cdn.ts","../src/utils/parse-query.ts","../../../node_modules/.pnpm/parse-package-name@1.0.0/node_modules/parse-package-name/dist/index.mjs","../src/utils/npm-search.ts"],"sourcesContent":["// Based off of @hyrious esbuild-repl https://github.com/hyrious/esbuild-repl/blob/main/src/helpers/ansi.ts\n// https://github.com/evanw/esbuild/blob/master/internal/logger/logger.go\nexport const ESCAPE_TO_COLOR = {\n  \"37\": \"dim\",\n  \"31\": \"red\",\n  \"32\": \"green\",\n  \"34\": \"blue\",\n  \"36\": \"cyan\",\n  \"35\": \"magenta\",\n  \"33\": \"yellow\",\n  \"41;31\": \"red-bg-red\",\n  \"41;97\": \"red-bg-white\",\n  \"42;32\": \"green-bg-green\",\n  \"42;97\": \"green-bg-white\",\n  \"44;34\": \"blue-bg-blue\",\n  \"44;97\": \"blue-bg-white\",\n  \"46;36\": \"cyan-bg-cyan\",\n  \"46;30\": \"cyan-bg-black\",\n  \"45;35\": \"magenta-bg-magenta\",\n  \"45;30\": \"magenta-bg-black\",\n  \"43;33\": \"yellow-bg-yellow\",\n  \"43;30\": \"yellow-bg-black\",\n} as const;\n\nexport type Escape = \"0\" | \"1\" | \"4\" | keyof typeof ESCAPE_TO_COLOR;\nexport type Color = typeof ESCAPE_TO_COLOR[keyof typeof ESCAPE_TO_COLOR];\n\n// https://github.com/sindresorhus/escape-goat\nexport function htmlEscape(string: string) {\n  return string\n    .replace(/\\<br\\>/g, \"\\n\")\n    .replace(/\\&/g, \"&amp;\")\n    .replace(/\\\"/g, \"&quot;\")\n    .replace(/\\'/g, \"&#39;\")\n    .replace(/\\</g, \"&lt;\")\n    .replace(/\\>/g, \"&gt;\");\n}\n\nexport class AnsiBuffer {\n  result = \"\";\n  _stack: string[] = [];\n  _bold = false;\n  _underline = false;\n  _link = false;\n  text(text: string) {\n    this.result += htmlEscape(text);\n  }\n  reset() {\n    let close: string | undefined;\n    while ((close = this._stack.pop())) {\n      this.result += close;\n    }\n  }\n  bold() {\n    if (!this._bold) {\n      this._bold = true;\n      this.result += \"<strong>\";\n      this._stack.push(\"</strong>\");\n    }\n  }\n  underline() {\n    if (!this._underline) {\n      this._underline = true;\n      this.result += \"<ins>\";\n      this._stack.push(\"</ins>\");\n    }\n  }\n  last() {\n    return this._stack[this._stack.length - 1];\n  }\n  color(color: Color) {\n    let close: string | undefined;\n    while ((close = this.last()) === \"</span>\") {\n      this._stack.pop();\n      this.result += close;\n    }\n    this.result += `<span class=\"color-${color}\">`;\n    this._stack.push(\"</span>\");\n  }\n  done() {\n    this.reset();\n    return this.result;\n  }\n}\n\nexport function render(ansi: string) {\n  ansi = ansi.trimEnd();\n  let i = 0;\n  const buffer = new AnsiBuffer();\n  for (let m of ansi.matchAll(/\\x1B\\[([\\d;]+)m/g)) {\n    const escape = m[1] as Escape;\n    buffer.text(ansi.slice(i, m.index));\n    i = m.index! + m[0].length;\n      /*  */ if (escape === \"0\") {\n      buffer.reset();\n    } else if (escape === \"1\") {\n      buffer.bold();\n    } else if (escape === \"4\") {\n      buffer.underline();\n    } else if (ESCAPE_TO_COLOR[escape]) {\n      buffer.color(ESCAPE_TO_COLOR[escape]);\n    }\n  }\n  if (i < ansi.length) {\n    buffer.text(ansi.slice(i));\n  }\n  return buffer.done();\n}","// Based on https://davidwalsh.name/javascript-debounce-function\n// Returns a function, that, as long as it continues to be invoked, will not\n// be triggered. The function will be called after it stops being called for\n// N milliseconds. If `immediate` is passed, trigger the function on the\n// leading edge, instead of the trailing.\nexport const debounce = (func: (...args: any[]) => any, wait: number = 300, immediate?: boolean) => {\n  let timeout: number | null;\n  return function (...args: any[]) {\n    let context = this;\n    let later = () => {\n      timeout = null;\n      if (!immediate) func.apply(context, args);\n    };\n\n    let callNow = immediate && !timeout;\n    clearTimeout(timeout);\n\n    // @ts-ignore\n    timeout = setTimeout(later, wait);\n    if (callNow) func.apply(context, args);\n  };\n};","export const isObject = (obj: any) => typeof obj === \"object\" && obj != null;\nexport const isPrimitive = (val) => (typeof val === 'object' ? val === null : typeof val !== 'function');\nexport const isValidKey = key => {\n  return key !== '__proto__' && key !== 'constructor' && key !== 'prototype';\n};\n\n// Based on https://gist.github.com/egardner/efd34f270cc33db67c0246e837689cb9\n// Deep Equality comparison example\n//\n// This is an example of how to implement an object-comparison function in \n// JavaScript (ES5+). A few points of interest here:\n//\n// * You can get an array of all an object's properties in ES5+ by calling\n//   the class method Object.keys(obj). \n// * The function recursively calls itself in the for / in loop when it\n//   compares the contents of each property\n// * You can hide a \"private\" function inside a function of this kind by\n//   placing one function declaration inside of another. The inner function\n//   is not hoisted out into the global scope, so it is only visible inside\n//   of the parent function.\n// * The reason this nested helper function is necessary is that \n//   `typeof null` is still \"object\" in JS, a major \"gotcha\" to watch out for.\n//\nexport const deepEqual = (obj1: any, obj2: any) => {\n  if (obj1 === obj2) {\n    return true;\n  } else if (isObject(obj1) && isObject(obj2)) {\n    if (Object.keys(obj1).length !== Object.keys(obj2).length) { return false; }\n    for (var prop in obj1) {\n      if (!deepEqual(obj1[prop], obj2[prop])) return false;\n    }\n\n    return true;\n  }\n};\n\n/** Compares 2 objects and only keep the keys that are different in both objects */\nexport const deepDiff = (obj1: any, obj2: any) => {\n  let keys = Object.keys(obj2);\n  let result = {};\n  let i = 0;\n  for (; i < keys.length; i++) {\n    let key = keys[i];\n    let value = obj2[key];\n\n    if (key in obj1) {\n      let bothAreArrays = Array.isArray(obj1[key]) && Array.isArray(value);\n      if (obj1[key] == value) {\n        continue;\n      } else if (bothAreArrays) {\n        if (!deepEqual(obj1[key], value))\n          result[key] = value;\n        else continue;\n      } else if (isObject(obj1[key]) && isObject(value)) {\n        // Remove empty objects\n        let diff = deepDiff(obj1[key], value);\n        if (Object.keys(diff).length)\n          result[key] = diff;\n      } else {\n        result[key] = value;\n      }\n    } else {\n      result[key] = value;\n    }\n  }\n\n  return result;\n};\n\n/*!\n * Based on assign-deep <https://github.com/jonschlinkert/assign-deep>\n *\n * Copyright (c) 2017-present, Jon Schlinkert.\n * Released under the MIT License.\n */\nexport const deepAssign = (target, ...args) => {\n  let i = 0;\n  if (isPrimitive(target)) target = args[i++];\n  if (!target) target = {};\n  for (; i < args.length; i++) {\n    if (isObject(args[i])) {\n      for (const key of Object.keys(args[i])) {\n        if (isValidKey(key)) {\n          if (isObject(target[key]) && isObject(args[i][key])) {\n            target[key] = deepAssign(Array.isArray(target[key]) ? [] : {}, target[key], args[i][key]);\n          } else {\n            target[key] = args[i][key];\n          }\n        }\n      }\n    }\n  }\n\n  return target;\n};\n","// export const { encode } = new TextEncoder();\n// export const { decode } = new TextDecoder();\n\nexport const encode = (str: string) => new TextEncoder().encode(str);\nexport const decode = (buf: BufferSource) => new TextDecoder().decode(buf);","export const CACHE = new Map();\nexport const CACHE_NAME = 'EXTERNAL_FETCHES';\nexport const newRequest = async (cache: Cache, request: Request, fetchOpts?: RequestInit) => {\n  let networkResponse: Response = await fetch(request, fetchOpts);\n\n  let clonedResponse = networkResponse.clone();\n  if (\"caches\" in globalThis)\n    cache.put(request, clonedResponse);\n  else\n    CACHE.set(request, clonedResponse);\n\n  return networkResponse;\n};\n\nexport const getRequest = async (url: RequestInfo | URL, permanent: boolean = false, fetchOpts?: RequestInit) => {\n  let request = new Request(url.toString());\n  let response: Response;\n\n  let cache: Cache;\n  let cacheResponse: Response;\n\n  // In specific situations the browser will sometimes disable access to cache storage, \n  // so, I create my own in memory cache\n  if (\"caches\" in globalThis) {\n    cache = await caches.open(CACHE_NAME);\n    cacheResponse = await cache.match(request);\n  } else {\n    cacheResponse = CACHE.get(request);\n  }\n\n  response = cacheResponse;\n\n  // If permanent is true, use the cache first and only go to the network if there is nothing in the cache, \n  // otherwise, still use cache first, but in the background queue up a network request\n  if (!cacheResponse)\n    response = await newRequest(cache, request, fetchOpts);\n  else if (!permanent)\n    newRequest(cache, request, fetchOpts);\n\n  return response.clone();\n}\n","// Copyright 2018-2022 the Deno authors. All rights reserved. MIT license.\n// Copyright the Browserify authors. MIT License.\n// Ported from https://github.com/browserify/path-browserify/\n// This module is browser compatible.\n\n// Alphabet chars.\nexport const CHAR_UPPERCASE_A = 65; /* A */\nexport const CHAR_LOWERCASE_A = 97; /* a */\nexport const CHAR_UPPERCASE_Z = 90; /* Z */\nexport const CHAR_LOWERCASE_Z = 122; /* z */\n\n// Non-alphabetic chars.\nexport const CHAR_DOT = 46; /* . */\nexport const CHAR_FORWARD_SLASH = 47; /* / */\nexport const CHAR_BACKWARD_SLASH = 92; /* \\ */\nexport const CHAR_VERTICAL_LINE = 124; /* | */\nexport const CHAR_COLON = 58; /* : */\nexport const CHAR_QUESTION_MARK = 63; /* ? */\nexport const CHAR_UNDERSCORE = 95; /* _ */\nexport const CHAR_LINE_FEED = 10; /* \\n */\nexport const CHAR_CARRIAGE_RETURN = 13; /* \\r */\nexport const CHAR_TAB = 9; /* \\t */\nexport const CHAR_FORM_FEED = 12; /* \\f */\nexport const CHAR_EXCLAMATION_MARK = 33; /* ! */\nexport const CHAR_HASH = 35; /* # */\nexport const CHAR_SPACE = 32; /*   */\nexport const CHAR_NO_BREAK_SPACE = 160; /* \\u00A0 */\nexport const CHAR_ZERO_WIDTH_NOBREAK_SPACE = 65279; /* \\uFEFF */\nexport const CHAR_LEFT_SQUARE_BRACKET = 91; /* [ */\nexport const CHAR_RIGHT_SQUARE_BRACKET = 93; /* ] */\nexport const CHAR_LEFT_ANGLE_BRACKET = 60; /* < */\nexport const CHAR_RIGHT_ANGLE_BRACKET = 62; /* > */\nexport const CHAR_LEFT_CURLY_BRACKET = 123; /* { */\nexport const CHAR_RIGHT_CURLY_BRACKET = 125; /* } */\nexport const CHAR_HYPHEN_MINUS = 45; /* - */\nexport const CHAR_PLUS = 43; /* + */\nexport const CHAR_DOUBLE_QUOTE = 34; /* \" */\nexport const CHAR_SINGLE_QUOTE = 39; /* ' */\nexport const CHAR_PERCENT = 37; /* % */\nexport const CHAR_SEMICOLON = 59; /* ; */\nexport const CHAR_CIRCUMFLEX_ACCENT = 94; /* ^ */\nexport const CHAR_GRAVE_ACCENT = 96; /* ` */\nexport const CHAR_AT = 64; /* @ */\nexport const CHAR_AMPERSAND = 38; /* & */\nexport const CHAR_EQUAL = 61; /* = */\n\n// Digits\nexport const CHAR_0 = 48; /* 0 */\nexport const CHAR_9 = 57; /* 9 */\n\nexport const SEP = \"/\";\nexport const SEP_PATTERN = /\\/+/;\n\nexport type OSType = \"windows\" | \"linux\" | \"darwin\";","// Copyright 2018-2022 the Deno authors. All rights reserved. MIT license.\n// Copyright the Browserify authors. MIT License.\n// Ported from https://github.com/browserify/path-browserify/\n// This module is browser compatible.\n\nimport type { FormatInputPathObject } from \"./_interface\";\nimport {\n  CHAR_BACKWARD_SLASH,\n  CHAR_DOT,\n  CHAR_FORWARD_SLASH,\n  CHAR_LOWERCASE_A,\n  CHAR_LOWERCASE_Z,\n  CHAR_UPPERCASE_A,\n  CHAR_UPPERCASE_Z,\n} from \"./_constants\";\n\nexport function assertPath(path: string): void {\n  if (typeof path !== \"string\") {\n    throw new TypeError(\n      `Path must be a string. Received ${JSON.stringify(path)}`,\n    );\n  }\n}\n\nexport function isPosixPathSeparator(code: number): boolean {\n  return code === CHAR_FORWARD_SLASH;\n}\n\nexport function isPathSeparator(code: number): boolean {\n  return isPosixPathSeparator(code) || code === CHAR_BACKWARD_SLASH;\n}\n\nexport function isWindowsDeviceRoot(code: number): boolean {\n  return (\n    (code >= CHAR_LOWERCASE_A && code <= CHAR_LOWERCASE_Z) ||\n    (code >= CHAR_UPPERCASE_A && code <= CHAR_UPPERCASE_Z)\n  );\n}\n\n// Resolves . and .. elements in a path with directory names\nexport function normalizeString(\n  path: string,\n  allowAboveRoot: boolean,\n  separator: string,\n  isPathSeparator: (code: number) => boolean,\n): string {\n  let res = \"\";\n  let lastSegmentLength = 0;\n  let lastSlash = -1;\n  let dots = 0;\n  let code: number | undefined;\n  for (let i = 0, len = path.length; i <= len; ++i) {\n    if (i < len) code = path.charCodeAt(i);\n    else if (isPathSeparator(code!)) break;\n    else code = CHAR_FORWARD_SLASH;\n\n    if (isPathSeparator(code!)) {\n      if (lastSlash === i - 1 || dots === 1) {\n        // NOOP\n      } else if (lastSlash !== i - 1 && dots === 2) {\n        if (\n          res.length < 2 ||\n          lastSegmentLength !== 2 ||\n          res.charCodeAt(res.length - 1) !== CHAR_DOT ||\n          res.charCodeAt(res.length - 2) !== CHAR_DOT\n        ) {\n          if (res.length > 2) {\n            const lastSlashIndex = res.lastIndexOf(separator);\n            if (lastSlashIndex === -1) {\n              res = \"\";\n              lastSegmentLength = 0;\n            } else {\n              res = res.slice(0, lastSlashIndex);\n              lastSegmentLength = res.length - 1 - res.lastIndexOf(separator);\n            }\n            lastSlash = i;\n            dots = 0;\n            continue;\n          } else if (res.length === 2 || res.length === 1) {\n            res = \"\";\n            lastSegmentLength = 0;\n            lastSlash = i;\n            dots = 0;\n            continue;\n          }\n        }\n        if (allowAboveRoot) {\n          if (res.length > 0) res += `${separator}..`;\n          else res = \"..\";\n          lastSegmentLength = 2;\n        }\n      } else {\n        if (res.length > 0) res += separator + path.slice(lastSlash + 1, i);\n        else res = path.slice(lastSlash + 1, i);\n        lastSegmentLength = i - lastSlash - 1;\n      }\n      lastSlash = i;\n      dots = 0;\n    } else if (code === CHAR_DOT && dots !== -1) {\n      ++dots;\n    } else {\n      dots = -1;\n    }\n  }\n  return res;\n}\n\nexport function _format(\n  sep: string,\n  pathObject: FormatInputPathObject,\n): string {\n  const dir: string | undefined = pathObject.dir || pathObject.root;\n  const base: string = pathObject.base ||\n    (pathObject.name || \"\") + (pathObject.ext || \"\");\n  if (!dir) return base;\n  if (dir === pathObject.root) return dir + base;\n  return dir + sep + base;\n}\n\nconst WHITESPACE_ENCODINGS: Record<string, string> = {\n  \"\\u0009\": \"%09\",\n  \"\\u000A\": \"%0A\",\n  \"\\u000B\": \"%0B\",\n  \"\\u000C\": \"%0C\",\n  \"\\u000D\": \"%0D\",\n  \"\\u0020\": \"%20\",\n};\n\nexport function encodeWhitespace(string: string): string {\n  return string.replaceAll(/[\\s]/g, (c) => {\n    return WHITESPACE_ENCODINGS[c] ?? c;\n  });\n}","// Copyright 2018-2022 the Deno authors. All rights reserved. MIT license.\n// Copyright the Browserify authors. MIT License.\n// Ported from https://github.com/browserify/path-browserify/\n// This module is browser compatible.\n\nimport type { FormatInputPathObject, ParsedPath } from \"./_interface\";\nimport { CHAR_DOT, CHAR_FORWARD_SLASH } from \"./_constants\";\n\nimport {\n  _format,\n  assertPath,\n  encodeWhitespace,\n  isPosixPathSeparator,\n  normalizeString,\n} from \"./_util\";\n\nexport const sep = \"/\";\nexport const delimiter = \":\";\n\n// path.resolve([from ...], to)\n/**\n * Resolves `pathSegments` into an absolute path.\n * @param pathSegments an array of path segments\n */\nexport function resolve(...pathSegments: string[]): string {\n  let resolvedPath = \"\";\n  let resolvedAbsolute = false;\n\n  for (let i = pathSegments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n    let path: string;\n\n    if (i >= 0) path = pathSegments[i];\n    else {\n      // deno-lint-ignore no-explicit-any\n      const { Deno } = globalThis as any;\n      if (typeof Deno?.cwd !== \"function\") {\n        throw new TypeError(\"Resolved a relative path without a CWD.\");\n      }\n      path = Deno?.cwd?.() ?? \"/\";\n    }\n\n    assertPath(path);\n\n    // Skip empty entries\n    if (path.length === 0) {\n      continue;\n    }\n\n    resolvedPath = `${path}/${resolvedPath}`;\n    resolvedAbsolute = path.charCodeAt(0) === CHAR_FORWARD_SLASH;\n  }\n\n  // At this point the path should be resolved to a full absolute path, but\n  // handle relative paths to be safe (might happen when process.cwd() fails)\n\n  // Normalize the path\n  resolvedPath = normalizeString(\n    resolvedPath,\n    !resolvedAbsolute,\n    \"/\",\n    isPosixPathSeparator,\n  );\n\n  if (resolvedAbsolute) {\n    if (resolvedPath.length > 0) return `/${resolvedPath}`;\n    else return \"/\";\n  } else if (resolvedPath.length > 0) return resolvedPath;\n  else return \".\";\n}\n\n/**\n * Normalize the `path`, resolving `'..'` and `'.'` segments.\n * @param path to be normalized\n */\nexport function normalize(path: string): string {\n  assertPath(path);\n\n  if (path.length === 0) return \".\";\n\n  const isAbsolute = path.charCodeAt(0) === CHAR_FORWARD_SLASH;\n  const trailingSeparator =\n    path.charCodeAt(path.length - 1) === CHAR_FORWARD_SLASH;\n\n  // Normalize the path\n  path = normalizeString(path, !isAbsolute, \"/\", isPosixPathSeparator);\n\n  if (path.length === 0 && !isAbsolute) path = \".\";\n  if (path.length > 0 && trailingSeparator) path += \"/\";\n\n  if (isAbsolute) return `/${path}`;\n  return path;\n}\n\n/**\n * Verifies whether provided path is absolute\n * @param path to be verified as absolute\n */\nexport function isAbsolute(path: string): boolean {\n  assertPath(path);\n  return path.length > 0 && path.charCodeAt(0) === CHAR_FORWARD_SLASH;\n}\n\n/**\n * Join all given a sequence of `paths`,then normalizes the resulting path.\n * @param paths to be joined and normalized\n */\nexport function join(...paths: string[]): string {\n  if (paths.length === 0) return \".\";\n  let joined: string | undefined;\n  for (let i = 0, len = paths.length; i < len; ++i) {\n    const path = paths[i];\n    assertPath(path);\n    if (path.length > 0) {\n      if (!joined) joined = path;\n      else joined += `/${path}`;\n    }\n  }\n  if (!joined) return \".\";\n  return normalize(joined);\n}\n\n/**\n * Return the relative path from `from` to `to` based on current working directory.\n * @param from path in current working directory\n * @param to path in current working directory\n */\nexport function relative(from: string, to: string): string {\n  assertPath(from);\n  assertPath(to);\n\n  if (from === to) return \"\";\n\n  from = resolve(from);\n  to = resolve(to);\n\n  if (from === to) return \"\";\n\n  // Trim any leading backslashes\n  let fromStart = 1;\n  const fromEnd = from.length;\n  for (; fromStart < fromEnd; ++fromStart) {\n    if (from.charCodeAt(fromStart) !== CHAR_FORWARD_SLASH) break;\n  }\n  const fromLen = fromEnd - fromStart;\n\n  // Trim any leading backslashes\n  let toStart = 1;\n  const toEnd = to.length;\n  for (; toStart < toEnd; ++toStart) {\n    if (to.charCodeAt(toStart) !== CHAR_FORWARD_SLASH) break;\n  }\n  const toLen = toEnd - toStart;\n\n  // Compare paths to find the longest common path from root\n  const length = fromLen < toLen ? fromLen : toLen;\n  let lastCommonSep = -1;\n  let i = 0;\n  for (; i <= length; ++i) {\n    if (i === length) {\n      if (toLen > length) {\n        if (to.charCodeAt(toStart + i) === CHAR_FORWARD_SLASH) {\n          // We get here if `from` is the exact base path for `to`.\n          // For example: from='/foo/bar'; to='/foo/bar/baz'\n          return to.slice(toStart + i + 1);\n        } else if (i === 0) {\n          // We get here if `from` is the root\n          // For example: from='/'; to='/foo'\n          return to.slice(toStart + i);\n        }\n      } else if (fromLen > length) {\n        if (from.charCodeAt(fromStart + i) === CHAR_FORWARD_SLASH) {\n          // We get here if `to` is the exact base path for `from`.\n          // For example: from='/foo/bar/baz'; to='/foo/bar'\n          lastCommonSep = i;\n        } else if (i === 0) {\n          // We get here if `to` is the root.\n          // For example: from='/foo'; to='/'\n          lastCommonSep = 0;\n        }\n      }\n      break;\n    }\n    const fromCode = from.charCodeAt(fromStart + i);\n    const toCode = to.charCodeAt(toStart + i);\n    if (fromCode !== toCode) break;\n    else if (fromCode === CHAR_FORWARD_SLASH) lastCommonSep = i;\n  }\n\n  let out = \"\";\n  // Generate the relative path based on the path difference between `to`\n  // and `from`\n  for (i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i) {\n    if (i === fromEnd || from.charCodeAt(i) === CHAR_FORWARD_SLASH) {\n      if (out.length === 0) out += \"..\";\n      else out += \"/..\";\n    }\n  }\n\n  // Lastly, append the rest of the destination (`to`) path that comes after\n  // the common path parts\n  if (out.length > 0) return out + to.slice(toStart + lastCommonSep);\n  else {\n    toStart += lastCommonSep;\n    if (to.charCodeAt(toStart) === CHAR_FORWARD_SLASH) ++toStart;\n    return to.slice(toStart);\n  }\n}\n\n/**\n * Resolves path to a namespace path\n * @param path to resolve to namespace\n */\nexport function toNamespacedPath(path: string): string {\n  // Non-op on posix systems\n  return path;\n}\n\n/**\n * Return the directory name of a `path`.\n * @param path to determine name for\n */\nexport function dirname(path: string): string {\n  assertPath(path);\n  if (path.length === 0) return \".\";\n  const hasRoot = path.charCodeAt(0) === CHAR_FORWARD_SLASH;\n  let end = -1;\n  let matchedSlash = true;\n  for (let i = path.length - 1; i >= 1; --i) {\n    if (path.charCodeAt(i) === CHAR_FORWARD_SLASH) {\n      if (!matchedSlash) {\n        end = i;\n        break;\n      }\n    } else {\n      // We saw the first non-path separator\n      matchedSlash = false;\n    }\n  }\n\n  if (end === -1) return hasRoot ? \"/\" : \".\";\n  if (hasRoot && end === 1) return \"//\";\n  return path.slice(0, end);\n}\n\n/**\n * Return the last portion of a `path`. Trailing directory separators are ignored.\n * @param path to process\n * @param ext of path directory\n */\nexport function basename(path: string, ext = \"\"): string {\n  if (ext !== undefined && typeof ext !== \"string\") {\n    throw new TypeError('\"ext\" argument must be a string');\n  }\n  assertPath(path);\n\n  let start = 0;\n  let end = -1;\n  let matchedSlash = true;\n  let i: number;\n\n  if (ext !== undefined && ext.length > 0 && ext.length <= path.length) {\n    if (ext.length === path.length && ext === path) return \"\";\n    let extIdx = ext.length - 1;\n    let firstNonSlashEnd = -1;\n    for (i = path.length - 1; i >= 0; --i) {\n      const code = path.charCodeAt(i);\n      if (code === CHAR_FORWARD_SLASH) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now\n        if (!matchedSlash) {\n          start = i + 1;\n          break;\n        }\n      } else {\n        if (firstNonSlashEnd === -1) {\n          // We saw the first non-path separator, remember this index in case\n          // we need it if the extension ends up not matching\n          matchedSlash = false;\n          firstNonSlashEnd = i + 1;\n        }\n        if (extIdx >= 0) {\n          // Try to match the explicit extension\n          if (code === ext.charCodeAt(extIdx)) {\n            if (--extIdx === -1) {\n              // We matched the extension, so mark this as the end of our path\n              // component\n              end = i;\n            }\n          } else {\n            // Extension does not match, so our result is the entire path\n            // component\n            extIdx = -1;\n            end = firstNonSlashEnd;\n          }\n        }\n      }\n    }\n\n    if (start === end) end = firstNonSlashEnd;\n    else if (end === -1) end = path.length;\n    return path.slice(start, end);\n  } else {\n    for (i = path.length - 1; i >= 0; --i) {\n      if (path.charCodeAt(i) === CHAR_FORWARD_SLASH) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now\n        if (!matchedSlash) {\n          start = i + 1;\n          break;\n        }\n      } else if (end === -1) {\n        // We saw the first non-path separator, mark this as the end of our\n        // path component\n        matchedSlash = false;\n        end = i + 1;\n      }\n    }\n\n    if (end === -1) return \"\";\n    return path.slice(start, end);\n  }\n}\n\n/**\n * Return the extension of the `path`.\n * @param path with extension\n */\nexport function extname(path: string): string {\n  assertPath(path);\n  let startDot = -1;\n  let startPart = 0;\n  let end = -1;\n  let matchedSlash = true;\n  // Track the state of characters (if any) we see before our first dot and\n  // after any path separator we find\n  let preDotState = 0;\n  for (let i = path.length - 1; i >= 0; --i) {\n    const code = path.charCodeAt(i);\n    if (code === CHAR_FORWARD_SLASH) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now\n      if (!matchedSlash) {\n        startPart = i + 1;\n        break;\n      }\n      continue;\n    }\n    if (end === -1) {\n      // We saw the first non-path separator, mark this as the end of our\n      // extension\n      matchedSlash = false;\n      end = i + 1;\n    }\n    if (code === CHAR_DOT) {\n      // If this is our first dot, mark it as the start of our extension\n      if (startDot === -1) startDot = i;\n      else if (preDotState !== 1) preDotState = 1;\n    } else if (startDot !== -1) {\n      // We saw a non-dot and non-path separator before our dot, so we should\n      // have a good chance at having a non-empty extension\n      preDotState = -1;\n    }\n  }\n\n  if (\n    startDot === -1 ||\n    end === -1 ||\n    // We saw a non-dot character immediately before the dot\n    preDotState === 0 ||\n    // The (right-most) trimmed path component is exactly '..'\n    (preDotState === 1 && startDot === end - 1 && startDot === startPart + 1)\n  ) {\n    return \"\";\n  }\n  return path.slice(startDot, end);\n}\n\n/**\n * Generate a path from `FormatInputPathObject` object.\n * @param pathObject with path\n */\nexport function format(pathObject: FormatInputPathObject): string {\n  if (pathObject === null || typeof pathObject !== \"object\") {\n    throw new TypeError(\n      `The \"pathObject\" argument must be of type Object. Received type ${typeof pathObject}`,\n    );\n  }\n  return _format(\"/\", pathObject);\n}\n\n/**\n * Return a `ParsedPath` object of the `path`.\n * @param path to process\n */\nexport function parse(path: string): ParsedPath {\n  assertPath(path);\n\n  const ret: ParsedPath = { root: \"\", dir: \"\", base: \"\", ext: \"\", name: \"\" };\n  if (path.length === 0) return ret;\n  const isAbsolute = path.charCodeAt(0) === CHAR_FORWARD_SLASH;\n  let start: number;\n  if (isAbsolute) {\n    ret.root = \"/\";\n    start = 1;\n  } else {\n    start = 0;\n  }\n  let startDot = -1;\n  let startPart = 0;\n  let end = -1;\n  let matchedSlash = true;\n  let i = path.length - 1;\n\n  // Track the state of characters (if any) we see before our first dot and\n  // after any path separator we find\n  let preDotState = 0;\n\n  // Get non-dir info\n  for (; i >= start; --i) {\n    const code = path.charCodeAt(i);\n    if (code === CHAR_FORWARD_SLASH) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now\n      if (!matchedSlash) {\n        startPart = i + 1;\n        break;\n      }\n      continue;\n    }\n    if (end === -1) {\n      // We saw the first non-path separator, mark this as the end of our\n      // extension\n      matchedSlash = false;\n      end = i + 1;\n    }\n    if (code === CHAR_DOT) {\n      // If this is our first dot, mark it as the start of our extension\n      if (startDot === -1) startDot = i;\n      else if (preDotState !== 1) preDotState = 1;\n    } else if (startDot !== -1) {\n      // We saw a non-dot and non-path separator before our dot, so we should\n      // have a good chance at having a non-empty extension\n      preDotState = -1;\n    }\n  }\n\n  if (\n    startDot === -1 ||\n    end === -1 ||\n    // We saw a non-dot character immediately before the dot\n    preDotState === 0 ||\n    // The (right-most) trimmed path component is exactly '..'\n    (preDotState === 1 && startDot === end - 1 && startDot === startPart + 1)\n  ) {\n    if (end !== -1) {\n      if (startPart === 0 && isAbsolute) {\n        ret.base = ret.name = path.slice(1, end);\n      } else {\n        ret.base = ret.name = path.slice(startPart, end);\n      }\n    }\n  } else {\n    if (startPart === 0 && isAbsolute) {\n      ret.name = path.slice(1, startDot);\n      ret.base = path.slice(1, end);\n    } else {\n      ret.name = path.slice(startPart, startDot);\n      ret.base = path.slice(startPart, end);\n    }\n    ret.ext = path.slice(startDot, end);\n  }\n\n  if (startPart > 0) ret.dir = path.slice(0, startPart - 1);\n  else if (isAbsolute) ret.dir = \"/\";\n\n  return ret;\n}\n\n/**\n * Converts a file URL to a path string.\n *\n * ```ts\n *      import { fromFileUrl } from \"./posix.ts\";\n *      fromFileUrl(\"file:///home/foo\"); // \"/home/foo\"\n * ```\n * @param url of a file URL\n */\nexport function fromFileUrl(url: string | URL): string {\n  url = url instanceof URL ? url : new URL(url);\n  if (url.protocol != \"file:\") {\n    throw new TypeError(\"Must be a file URL.\");\n  }\n  return decodeURIComponent(\n    url.pathname.replace(/%(?![0-9A-Fa-f]{2})/g, \"%25\"),\n  );\n}\n\n/**\n * Converts a path string to a file URL.\n *\n * ```ts\n *      import { toFileUrl } from \"./posix.ts\";\n *      toFileUrl(\"/home/foo\"); // new URL(\"file:///home/foo\")\n * ```\n * @param path to convert to file URL\n */\nexport function toFileUrl(path: string): URL {\n  if (!isAbsolute(path)) {\n    throw new TypeError(\"Must be an absolute path.\");\n  }\n  const url = new URL(\"file:///\");\n  url.pathname = encodeWhitespace(\n    path.replace(/%/g, \"%25\").replace(/\\\\/g, \"%5C\"),\n  );\n  return url;\n}","// Copyright 2018-2022 the Deno authors. All rights reserved. MIT license.\n// Copyright the Browserify authors. MIT License.\n// Ported mostly from https://github.com/browserify/path-browserify/\n// This module is browser compatible.\n\nimport * as _posix from \"./posix\";\n\nconst path = _posix;\nexport const posix = _posix;\nexport const {\n  basename,\n  delimiter,\n  dirname,\n  extname,\n  format,\n  fromFileUrl,\n  isAbsolute,\n  join,\n  normalize,\n  parse,\n  relative,\n  resolve,\n  sep,\n  toFileUrl,\n  toNamespacedPath,\n} = path;\n\nexport { SEP, SEP_PATTERN } from \"./_constants\";\nexport * from \"./_interface\";\nexport * from \"./glob\";","import { dirname, resolve } from \"../deno/path/mod\";\nimport { decode, encode } from \"./encode-decode\";\n\n/** Filesystem Storage */\nexport const FileSystem = new Map<string, Uint8Array>();\n\n/**\n * Resolves path to a format the works with the virtual file system storage\n * \n * @param path the relative or absolute path to resolve to\n * @param importer an absolute path to use to determine relative file paths\n * @returns resolved final path\n */\nexport const getResolvedPath = (path: string, importer?: string) => {\n  let resolvedPath = path;\n  if (importer && path.startsWith('.'))\n    resolvedPath = resolve(dirname(importer), path);\n\n  if (FileSystem.has(resolvedPath)) return resolvedPath;\n  throw `File \"${resolvedPath}\" does not exist`;\n}\n\n/**\n * Retrevies file from virtual file system storage\n * \n * @param path path of file in virtual file system storage\n * @param type format to retrieve file in, buffer and string are the 2 option available\n * @param importer an absolute path to use to determine a relative file path\n * @returns file from file system storage in either string format or as a Uint8Array buffer\n */\nexport const getFile = (path: string, type: 'string' | 'buffer' = \"buffer\", importer?: string) => {\n  let resolvedPath = getResolvedPath(path, importer);\n\n  if (FileSystem.has(resolvedPath)) {\n    let file = FileSystem.get(resolvedPath);\n    return type == \"string\" ? decode(file) : file;\n  }\n}\n\n/**\n * Writes file to filesystem in either string or uint8array buffer format\n * @param path path of file in virtual file system storage\n * @param content contents of file to store, you can store buffers and/or strings\n * @param importer an absolute path to use to determine a relative file path\n */\nexport const setFile = (path: string, content: Uint8Array | string, importer?: string) => {\n  let resolvedPath = path;\n  if (importer && path.startsWith('.'))\n    resolvedPath = resolve(dirname(importer), path);\n\n  try {\n    FileSystem.set(resolvedPath, content instanceof Uint8Array ? content : encode(content));\n  } catch (e) {\n    throw `Error occurred while writing to \"${resolvedPath}\"`;\n  }\n}","import type { Loader } from 'esbuild-wasm';\nimport { extname } from './path';\n\n/** Based on https://github.com/egoist/play-esbuild/blob/main/src/lib/esbuild.ts */\nexport const RESOLVE_EXTENSIONS = [\".tsx\", \".ts\", \".jsx\", \".js\", \".css\", \".json\"];\n\n/**\n * Based on the file extention determine the esbuild loader to use\n */\nexport const inferLoader = (urlStr: string): Loader => {\n  const ext = extname(urlStr);\n  if (RESOLVE_EXTENSIONS.includes(ext))\n    // Resolve all .js and .jsx files to .ts and .tsx files\n    return (/\\.js(x)?$/.test(ext) ? ext.replace(/^\\.js/, \".ts\") : ext).slice(1) as Loader;\n\n  if (ext === \".mjs\" || ext === \".cjs\") return \"ts\"; // \"js\"\n  if (ext === \".mts\" || ext === \".cts\") return \"ts\";\n\n  if (ext == \".scss\") return \"css\";\n\n  if (ext == \".png\" || ext == \".jpeg\" || ext == \".ttf\") return \"dataurl\";\n  if (ext == \".svg\" || ext == \".html\" || ext == \".txt\") return \"text\";\n  if (ext == \".wasm\") return \"file\";\n\n  return ext.length ? \"text\" : \"ts\";\n}","var v=\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\",y=\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+-$\",x={};function M(r,s){if(!x[r]){x[r]={};for(let f=0;f<r.length;f++)x[r][r.charAt(f)]=f}return x[r][s]}function S(r){if(r==null)return\"\";let s=b(r,6,f=>v.charAt(f));switch(s.length%4){default:case 0:return s;case 1:return s+\"===\";case 2:return s+\"==\";case 3:return s+\"=\"}}function O(r){return r==null?\"\":r==\"\"?null:A(r.length,32,s=>M(v,r.charAt(s)))}function j(r){return r==null?\"\":b(r,6,s=>y.charAt(s))}function k(r){return r==null?\"\":r==\"\"?null:(r=r.replaceAll(\" \",\"+\"),A(r.length,32,s=>M(y,r.charAt(s))))}function D(r){return b(r,16,String.fromCharCode)}function R(r){return r==null?\"\":r==\"\"?null:A(r.length,32768,s=>r.charCodeAt(s))}function b(r,s,f){if(r==null)return\"\";let p=[],m={},h={},i,w,o,g=\"\",u=\"\",d=\"\",l=2,a=3,c=2,e=0,t=0;for(w=0;w<r.length;w+=1)if(g=r.charAt(w),Object.prototype.hasOwnProperty.call(m,g)||(m[g]=a++,h[g]=!0),d=u+g,Object.prototype.hasOwnProperty.call(m,d))u=d;else{if(Object.prototype.hasOwnProperty.call(h,u)){if(u.charCodeAt(0)<256){for(i=0;i<c;i++)e=e<<1,t==s-1?(t=0,p.push(f(e)),e=0):t++;for(o=u.charCodeAt(0),i=0;i<8;i++)e=e<<1|o&1,t==s-1?(t=0,p.push(f(e)),e=0):t++,o=o>>1}else{for(o=1,i=0;i<c;i++)e=e<<1|o,t==s-1?(t=0,p.push(f(e)),e=0):t++,o=0;for(o=u.charCodeAt(0),i=0;i<16;i++)e=e<<1|o&1,t==s-1?(t=0,p.push(f(e)),e=0):t++,o=o>>1}l--,l==0&&(l=Math.pow(2,c),c++),delete h[u]}else for(o=m[u],i=0;i<c;i++)e=e<<1|o&1,t==s-1?(t=0,p.push(f(e)),e=0):t++,o=o>>1;l--,l==0&&(l=Math.pow(2,c),c++),m[d]=a++,u=String(g)}if(u!==\"\"){if(Object.prototype.hasOwnProperty.call(h,u)){if(u.charCodeAt(0)<256){for(i=0;i<c;i++)e=e<<1,t==s-1?(t=0,p.push(f(e)),e=0):t++;for(o=u.charCodeAt(0),i=0;i<8;i++)e=e<<1|o&1,t==s-1?(t=0,p.push(f(e)),e=0):t++,o=o>>1}else{for(o=1,i=0;i<c;i++)e=e<<1|o,t==s-1?(t=0,p.push(f(e)),e=0):t++,o=0;for(o=u.charCodeAt(0),i=0;i<16;i++)e=e<<1|o&1,t==s-1?(t=0,p.push(f(e)),e=0):t++,o=o>>1}l--,l==0&&(l=Math.pow(2,c),c++),delete h[u]}else for(o=m[u],i=0;i<c;i++)e=e<<1|o&1,t==s-1?(t=0,p.push(f(e)),e=0):t++,o=o>>1;l--,l==0&&(l=Math.pow(2,c),c++)}for(o=2,i=0;i<c;i++)e=e<<1|o&1,t==s-1?(t=0,p.push(f(e)),e=0):t++,o=o>>1;for(;;)if(e=e<<1,t==s-1){p.push(f(e));break}else t++;return p.join(\"\")}function A(r,s,f){let p=[],m,h=4,i=4,w=3,o=\"\",g=[],u,d,l,a,c,e,t,n={val:f(0),position:s,index:1};for(u=0;u<3;u+=1)p[u]=u;for(l=0,c=Math.pow(2,2),e=1;e!=c;)a=n.val&n.position,n.position>>=1,n.position==0&&(n.position=s,n.val=f(n.index++)),l|=(a>0?1:0)*e,e<<=1;switch(m=l){case 0:for(l=0,c=Math.pow(2,8),e=1;e!=c;)a=n.val&n.position,n.position>>=1,n.position==0&&(n.position=s,n.val=f(n.index++)),l|=(a>0?1:0)*e,e<<=1;t=String.fromCharCode(l);break;case 1:for(l=0,c=Math.pow(2,16),e=1;e!=c;)a=n.val&n.position,n.position>>=1,n.position==0&&(n.position=s,n.val=f(n.index++)),l|=(a>0?1:0)*e,e<<=1;t=String.fromCharCode(l);break;case 2:return\"\"}for(p[3]=t,d=t,g.push(t);;){if(n.index>r)return\"\";for(l=0,c=Math.pow(2,w),e=1;e!=c;)a=n.val&n.position,n.position>>=1,n.position==0&&(n.position=s,n.val=f(n.index++)),l|=(a>0?1:0)*e,e<<=1;switch(t=l){case 0:for(l=0,c=Math.pow(2,8),e=1;e!=c;)a=n.val&n.position,n.position>>=1,n.position==0&&(n.position=s,n.val=f(n.index++)),l|=(a>0?1:0)*e,e<<=1;p[i++]=String.fromCharCode(l),t=i-1,h--;break;case 1:for(l=0,c=Math.pow(2,16),e=1;e!=c;)a=n.val&n.position,n.position>>=1,n.position==0&&(n.position=s,n.val=f(n.index++)),l|=(a>0?1:0)*e,e<<=1;p[i++]=String.fromCharCode(l),t=i-1,h--;break;case 2:return g.join(\"\")}if(h==0&&(h=Math.pow(2,w),w++),p[t])o=p[t];else if(t===i&&typeof d==\"string\")o=d+d.charAt(0);else return null;g.push(o),p[i++]=d+o.charAt(0),h--,d=o,h==0&&(h=Math.pow(2,w),w++)}}export{D as compress,S as compressToBase64,j as compressToURL,R as decompress,O as decompressFromBase64,k as decompressFromURL};\n","import type { BuildOptions } from \"esbuild-wasm/esm/browser\";\nimport type { OutputOptions } from \"rollup/dist/es/rollup.browser\";\nimport type { TemplateType } from \"../plugins/analyzer/types/template-types\";\n\nimport { deepAssign } from \"../utils/deep-equal\";\nimport { DEFAULT_CDN_HOST } from \"../utils/util-cdn\";\n\n/** The compression algorithim to use, there are currently 3 options \"gzip\", \"brotli\", and \"lz4\" */\nexport type CompressionType = \"gzip\" | \"brotli\" | \"lz4\";\n\n/** \n* You can configure the quality of the compression using an object, \n* e.g.\n* ```ts\n* {\n*  ...\n*  \"compression\": {\n*    \"type\": \"brotli\",\n*    \"quality\": 5\n*  }\n* }\n* ```\n*/\nexport type CompressionOptions = {\n  /** The compression algorithim to use, there are currently 3 options \"gzip\", \"brotli\", and \"lz4\" */\n  type: CompressionType,\n\n  /** Compression quality ranging from 1 to 11 */\n  quality: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11\n};\n\nexport type BundleConfigOptions = {\n  /** Enable using rollup for treeshaking. Only works while the `esbuild.treeShaking` option is true */\n  rollup?: OutputOptions | boolean,\n\n  /** esbuild config options https://esbuild.github.io/api/#build-api */\n  esbuild?: BuildOptions,\n\n  /** The default CDN to import packages from */\n  cdn?: \"https://unpkg.com\" | \"https://esm.run\" | \"https://cdn.esm.sh\" | \"https://cdn.esm.sh\" | \"https://cdn.skypack.dev\" | \"https://cdn.jsdelivr.net/npm\" | \"https://cdn.jsdelivr.net/gh\" | \"https://deno.land/x\" | \"https://raw.githubusercontent.com\" | \"unpkg\" | \"esm.run\" | \"esm.sh\" | \"esm\" | \"skypack\" | \"jsdelivr\" | \"jsdelivr.gh\" | \"github\" | \"deno\" | (string & {}),\n\n  /** Aliases for replacing packages with different ones, e.g. replace \"fs\" with \"memfs\", so, it can work on the web, etc... */\n  alias?: Record<string, string>,\n\n  /** \n   * The compression algorithim to use, there are currently 3 options \"gzip\", \"brotli\", and \"lz4\".\n   * You can also configure the quality of the compression using an object, \n   * e.g.\n   * ```ts\n   * {\n   *  ...\n   *  \"compression\": {\n   *    \"type\": \"brotli\",\n   *    \"quality\": 5\n   *  }\n   * }\n   * ```\n  */\n  compression?: CompressionOptions | CompressionType\n\n  /**\n   * Generates interactive zoomable charts displaing the size of output files. \n   * It's a great way to determine what causes the bundle size to be so large. \n   */\n  analysis?: TemplateType | boolean\n};\n\nexport const EasyDefaultConfig: BundleConfigOptions = {\n  \"cdn\": DEFAULT_CDN_HOST,\n  \"compression\": \"gzip\",\n  \"analysis\": false,\n  \"esbuild\": {\n    \"target\": [\"esnext\"],\n    \"format\": \"esm\",\n    \"bundle\": true,\n    \"minify\": true,\n\n    \"treeShaking\": true,\n    \"platform\": \"browser\"\n  }\n};\n\nexport const DefaultConfig: BundleConfigOptions = deepAssign({}, EasyDefaultConfig, {\n  \"esbuild\": {\n    \"color\": true,\n    \"globalName\": \"BundledCode\",\n\n    \"logLevel\": \"info\",\n    \"sourcemap\": false,\n    \"incremental\": false,\n  }\n});","/**\n * The default CDN host\n */\nexport const DEFAULT_CDN_HOST = 'https://unpkg.com';\n\n/**\n * Returns the CDN style supported by certain CDN's\n * e.g. \n * - `npm` - unpkg, skypack, esm.sh, and jsdelivr all support `npm` style imports for example they support adding versions to their URLs like this `https://unpkg.com/@okikio/animate@beta`\n * - `github` - github, and jsdelivr.gh both support `github` style imports, as in they don't support adding versions to their URLs like this `https://cdn.jsdelivr.net/gh/jquery/jquery/dist/jquery.min.js`\n * - `deno` - deno supports `deno` style imports, as in they don't support adding versions to their URLs like this `https://deno.land/x/brotli/mod.ts`\n * - `other` - CDNs that haven't been added to the list\n */\nexport const getCDNStyle = (urlStr: string) => {\n  if (\n    /^(skypack|esm|esm\\.sh|unpkg|jsdelivr|esm\\.run)\\:?/.test(urlStr) ||\n    /^https?:\\/\\/(cdn\\.skypack\\.dev|cdn\\.esm\\.sh|cdn\\.jsdelivr\\.net\\/npm|unpkg\\.com)/.test(urlStr)\n  ) return \"npm\";\n\n  else if (\n    /^(jsdelivr\\.gh|github)\\:?/.test(urlStr) ||\n    /^https?:\\/\\/(cdn\\.jsdelivr\\.net\\/gh|raw\\.githubusercontent\\.com)/.test(urlStr)\n  ) return \"github\";\n\n  else if (\n    /^(deno)\\:?/.test(urlStr) ||\n    /^https?:\\/\\/(deno\\.land\\/x)/.test(urlStr)\n  ) return \"deno\";\n\n  return \"other\";\n}\n\n/**\n * Based on the URL scheme of the import, this method will return an actual CDN host origin to use,\n * e.g. \n * ```ts\n * getCDNHost(\"react\") //= https://unpkg.com\n * getCDNHost(\"react\", \"https://cdn.skypack.dev\") //= https://cdn.skypack.dev/\n * \n * // CDN URL Schemes take precedence above everything\n * getCDNHost(\"esm:react\", \"https://cdn.skypack.dev\") //= https://cdn.esm.sh/\n * ```\n * \n * > _**Note**: The returned CDN URL string will end with a '/' e.g. `https://cdn.esm.sh/`_\n * \n * @param importStr imports to find a CDN for\n * @param cdn The default CDN host to use. This can change based on the config of the user. This may be diregarded if the `importStr` has a CDN URL Scheme\n * @returns CDN URL host string\n */\nexport const getCDNOrigin = (importStr: string, cdn = DEFAULT_CDN_HOST) => {\n  // `skypack:` --> `https://cdn.skypack.dev`\n  if (/^skypack\\:/.test(importStr))\n    cdn = `https://cdn.skypack.dev`;\n\n  // `esm.sh:` or `esm:` --> `https://cdn.esm.sh`\n  else if (/^(esm\\.sh|esm)\\:/.test(importStr))\n    cdn = `https://cdn.esm.sh`;\n\n  // `unpkg:` --> `https://unpkg.com`\n  else if (/^unpkg\\:/.test(importStr))\n    cdn = `https://unpkg.com`;\n\n  // (NPM) `jsdelivr:` or `esm.run:` --> `https://cdn.jsdelivr.net/npm`\n  else if (/^(jsdelivr|esm\\.run)\\:/.test(importStr))\n    cdn = `https://cdn.jsdelivr.net/npm`;\n\n  // (GitHub) `jsdelivr.gh:` --> `https://cdn.jsdelivr.net/gh`\n  else if (/^(jsdelivr\\.gh)\\:/.test(importStr))\n    cdn = `https://cdn.jsdelivr.net/gh`;\n\n  // `deno:` --> `https://deno.land/x`\n  else if (/^(deno)\\:/.test(importStr))\n    cdn = `https://deno.land/x`;\n\n  // `github:` --> `https://raw.githubusercontent.com`\n  else if (/^(github)\\:/.test(importStr))\n    cdn = `https://raw.githubusercontent.com`;\n\n  return /\\/$/.test(cdn) ? cdn : `${cdn}/`;\n}\n\n/**\n * Remove CDN URL Schemes like `deno:...`, `unpkg:...`, etc... and known CDN hosts, e.g. `https://raw.githubusercontent.com/...`, `https://cdn.skypack.dev/...`, etc...  Leaving only the import path\n */\nexport const getPureImportPath = (importStr: string) =>\n  importStr\n    .replace(/^(skypack|esm|esm\\.sh|unpkg|jsdelivr|jsdelivr\\.gh|esm\\.run|deno|github)\\:/, \"\")\n    .replace(/^https?:\\/\\/(cdn\\.skypack\\.dev|cdn\\.esm\\.sh|cdn\\.jsdelivr\\.net\\/npm|unpkg\\.com|cdn\\.jsdelivr\\.net\\/gh|raw\\.githubusercontent\\.com|deno\\.land\\/x)/, \"\")\n    .replace(/^\\//, \"\");\n\n/**\n * Generates a CDN URL for an import, taking advantage of CDN URL Schemes in imports and the default CDN hosts parameter to decide the CDN host\n * Read through {@link getCDNOrigin} and {@link getPureImportPath}\n */\nexport const getCDNUrl = (importStr: string, cdn = DEFAULT_CDN_HOST) => {\n  let origin = getCDNOrigin(importStr, cdn);\n  let path = getPureImportPath(importStr);\n  let url = new URL(path, origin);\n  return { import: importStr, path, origin, cdn, url };\n}\n\n","import { decompressFromURL } from \"@amoutonbrady/lz-string\";\nimport { EasyDefaultConfig } from \"../configs/options\";\nimport { deepAssign } from \"./deep-equal\";\n\n/**\n * Treeshake exports/imports. It allows for specifing multiple exports per package, through this syntax\n * ```ts\n * \"[{ x,y,z }],[*],[* as X],[{ type xyz }]\" \n * // to\n * export { x, y, z } from \"...\";\n * export * from \"...\";\n * export * as X from \"...\";\n * export { type xyz } from \"...\";\n * ```\n * where the square brackets represent seperate packages, and everything inside the squarebrackets,\n * are the exported methods, types, etc...\n */\nexport const parseTreeshakeExports = (str: string) =>\n  (str ?? \"\").split(/\\],/).map((str) => str.replace(/\\[|\\]/g, \"\"));\n\n// Inspired by https://github.com/solidjs/solid-playground\n/**\n* Converts URL's into code. It allows for specifing multiple exports per package, through this syntax\n* ```ts\n* \"/?q=(import)@okikio/emitter,(import)@okikio/animate,(import)@okikio/animate,(import)@okikio/animate,(import)@okikio/animate,@okikio/animate,@okikio/animate,@okikio/animate,@okikio/animate&treeshake=[T],[{+animate+}],[{+animate+as+B+}],[*+as+TR],[{+type+animate+}],[*],[{+animate+as+A+}],[*+as+PR],[{+animate+}]&share=MYewdgziA2CmB00QHMAUAiAwiG6CUQA\" \n* // to\n* // Click Build for the Bundled, Minified & Gzipped package size\n* import T from \"@okikio/emitter\";\n* import { animate } from \"@okikio/animate\";\n* import { animate as B } from \"@okikio/animate\";\n* import * as TR from \"@okikio/animate\";\n* import { type animate } from \"@okikio/animate\";\n* export * from \"@okikio/animate\";\n* export { animate as A } from \"@okikio/animate\";\n* export * as PR from \"@okikio/animate\";\n* export { animate } from \"@okikio/animate\";\n* console.log(\"Cool\")\n* ```\n* - `q` represents the module, e.g. react, vue, etc... You can add `(import)` in-front of a specific module to make it an import instead of an export\n* - `treeshake` represents the exports to treeshake. Read more about this here, {@link parseTreeshakeExports}\n* - `share` represents all other code that isn't export/import\n*/\nexport const parseShareQuery = (shareURL: URL) => {\n  try {\n    const searchParams = shareURL.searchParams;\n    let result = \"\";\n    let query = searchParams.get(\"query\") || searchParams.get(\"q\");\n    let treeshake = searchParams.get(\"treeshake\");\n    if (query) {\n      let queryArr = query.trim().split(\",\");\n      let treeshakeArr = parseTreeshakeExports((treeshake ?? \"\").trim());\n      result += (\n        \"// Click Build for the Bundled, Minified & Compressed package size\\n\" +\n        queryArr\n          .map((q, i) => {\n            let treeshakeExports =\n              treeshakeArr[i] && treeshakeArr[i].trim() !== \"*\"\n                ? treeshakeArr[i].trim().split(\",\").join(\", \")\n                : \"*\";\n            let [, ,\n              declaration = \"export\",\n              module\n            ] = /^(\\((.*)\\))?(.*)/.exec(q);\n            return `${declaration} ${treeshakeExports} from ${JSON.stringify(\n              module\n            )};`;\n          })\n          .join(\"\\n\")\n      );\n    }\n\n    let share = searchParams.get(\"share\");\n    if (share) result += \"\\n\" + decompressFromURL(share.trim());\n\n    let plaintext = searchParams.get(\"text\");\n    if (plaintext) {\n      result += \"\\n\" + JSON.parse(\n        /**    \n         * Support users wrapping/not-wrapping plaintext in a string, \n         * e.g. \n         * ```md\n         * \n         * \n         * /?text=\"console.log(document)\\nconsole.log(window)\"\n         * and\n         * /?text=console.log(document)\\nconsole.log(window)\n         * \n         * \n         * are the same, they result in \n         * ```ts\n         * console.log(document)\n         * console.log(window)\n         * ```\n        */\n        /^[\"']/.test(plaintext) && /[\"']$/.test(plaintext) ? plaintext : JSON.stringify(\"\" + plaintext).replace(/\\\\\\\\/g, \"\\\\\")\n      );\n    }\n\n    return result.trim();\n  } catch (e) { }\n};\n\n/**\n* Converts URL's into config. \n* - `config` represents the JSON config\n*/\nexport const parseConfig = (shareURL: URL) => {\n  try {\n    const searchParams = shareURL.searchParams;\n    const config = searchParams.get(\"config\") ?? \"{}\";\n    return deepAssign({}, EasyDefaultConfig, JSON.parse(config ? config : \"{}\"));\n  } catch (e) { }\n};","// src/index.ts\nvar RE_SCOPED = /^(@[^\\/]+\\/[^@\\/]+)(?:@([^\\/]+))?(\\/.*)?$/;\nvar RE_NON_SCOPED = /^([^@\\/]+)(?:@([^\\/]+))?(\\/.*)?$/;\nfunction parse(input) {\n  const m = RE_SCOPED.exec(input) || RE_NON_SCOPED.exec(input);\n  if (!m) {\n    throw new Error(`[parse-package-name] invalid package name: ${input}`);\n  }\n  return {\n    name: m[1] || \"\",\n    version: m[2] || \"latest\",\n    path: m[3] || \"\"\n  };\n}\nexport {\n  parse\n};\n","import { getRequest } from \"./fetch-and-cache\";\nimport { parse as parsePackageName } from \"parse-package-name\";\n\n/**\n * Returns registry url for packages which have the input string\n * \n * @param input package to generate npm registry url for\n * @returns the proper npm registry url with package input package versions etc...\n */\nexport const getRegistryURL = (input: string) => {\n  const host = \"https://registry.npmjs.com\";\n\n  let { name, version, path } = parsePackageName(input);\n  let searchURL = `${host}/-/v1/search?text=${encodeURIComponent(name)}&popularity=0.5&size=30`;\n  let packageURL = `${host}/${name}/${version}`;\n\n  return { searchURL, packageURL, version, name, path };\n};\n\n/**\n * Searches the npm registry for packages with matching names\n * \n * @param input package name to search for\n * @returns resulting package info.\n */\nexport const getPackages = async (input: string) => {\n  let { searchURL } = getRegistryURL(input);\n  let result: any;\n\n  try {\n    let response = await getRequest(searchURL, false);\n    result = await response.json();\n  } catch (e) {\n    console.warn(e);\n    throw e;\n  }\n\n  let packages = result?.objects;\n  return { packages, info: result };\n}\n\n/**\n * Searches the npm registry for packages with matching names\n * \n * @param input package name to search for\n * @returns resulting package info.\n */\nexport const getPackage = async (input: string) => {\n  let { packageURL } = getRegistryURL(input);\n  let result: any;\n\n  try {\n    let response = await getRequest(packageURL, false);\n    result = await response.json();\n  } catch (e) {\n    console.warn(e);\n    throw e;\n  }\n\n  return result;\n}"],"names":["sep","delimiter","normalize","resolve","isAbsolute","parse","decompressFromURL","parsePackageName"],"mappings":"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"}