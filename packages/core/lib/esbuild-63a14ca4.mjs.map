{"version":3,"file":"esbuild-63a14ca4.mjs","sources":["../../../node_modules/.pnpm/esbuild-wasm@0.15.3/node_modules/esbuild-wasm/lib/browser.js"],"sourcesContent":["\"use strict\";\n(module=>{\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar __async = (__this, __arguments, generator) => {\n  return new Promise((resolve, reject) => {\n    var fulfilled = (value) => {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var rejected = (value) => {\n      try {\n        step(generator.throw(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);\n    step((generator = generator.apply(__this, __arguments)).next());\n  });\n};\n\n// lib/npm/browser.ts\nvar browser_exports = {};\n__export(browser_exports, {\n  analyzeMetafile: () => analyzeMetafile,\n  analyzeMetafileSync: () => analyzeMetafileSync,\n  build: () => build,\n  buildSync: () => buildSync,\n  default: () => browser_default,\n  formatMessages: () => formatMessages,\n  formatMessagesSync: () => formatMessagesSync,\n  initialize: () => initialize,\n  serve: () => serve,\n  transform: () => transform,\n  transformSync: () => transformSync,\n  version: () => version\n});\nmodule.exports = __toCommonJS(browser_exports);\n\n// lib/shared/stdio_protocol.ts\nfunction encodePacket(packet) {\n  let visit = (value) => {\n    if (value === null) {\n      bb.write8(0);\n    } else if (typeof value === \"boolean\") {\n      bb.write8(1);\n      bb.write8(+value);\n    } else if (typeof value === \"number\") {\n      bb.write8(2);\n      bb.write32(value | 0);\n    } else if (typeof value === \"string\") {\n      bb.write8(3);\n      bb.write(encodeUTF8(value));\n    } else if (value instanceof Uint8Array) {\n      bb.write8(4);\n      bb.write(value);\n    } else if (value instanceof Array) {\n      bb.write8(5);\n      bb.write32(value.length);\n      for (let item of value) {\n        visit(item);\n      }\n    } else {\n      let keys = Object.keys(value);\n      bb.write8(6);\n      bb.write32(keys.length);\n      for (let key of keys) {\n        bb.write(encodeUTF8(key));\n        visit(value[key]);\n      }\n    }\n  };\n  let bb = new ByteBuffer();\n  bb.write32(0);\n  bb.write32(packet.id << 1 | +!packet.isRequest);\n  visit(packet.value);\n  writeUInt32LE(bb.buf, bb.len - 4, 0);\n  return bb.buf.subarray(0, bb.len);\n}\nfunction decodePacket(bytes) {\n  let visit = () => {\n    switch (bb.read8()) {\n      case 0:\n        return null;\n      case 1:\n        return !!bb.read8();\n      case 2:\n        return bb.read32();\n      case 3:\n        return decodeUTF8(bb.read());\n      case 4:\n        return bb.read();\n      case 5: {\n        let count = bb.read32();\n        let value2 = [];\n        for (let i = 0; i < count; i++) {\n          value2.push(visit());\n        }\n        return value2;\n      }\n      case 6: {\n        let count = bb.read32();\n        let value2 = {};\n        for (let i = 0; i < count; i++) {\n          value2[decodeUTF8(bb.read())] = visit();\n        }\n        return value2;\n      }\n      default:\n        throw new Error(\"Invalid packet\");\n    }\n  };\n  let bb = new ByteBuffer(bytes);\n  let id = bb.read32();\n  let isRequest = (id & 1) === 0;\n  id >>>= 1;\n  let value = visit();\n  if (bb.ptr !== bytes.length) {\n    throw new Error(\"Invalid packet\");\n  }\n  return { id, isRequest, value };\n}\nvar ByteBuffer = class {\n  constructor(buf = new Uint8Array(1024)) {\n    this.buf = buf;\n    this.len = 0;\n    this.ptr = 0;\n  }\n  _write(delta) {\n    if (this.len + delta > this.buf.length) {\n      let clone = new Uint8Array((this.len + delta) * 2);\n      clone.set(this.buf);\n      this.buf = clone;\n    }\n    this.len += delta;\n    return this.len - delta;\n  }\n  write8(value) {\n    let offset = this._write(1);\n    this.buf[offset] = value;\n  }\n  write32(value) {\n    let offset = this._write(4);\n    writeUInt32LE(this.buf, value, offset);\n  }\n  write(bytes) {\n    let offset = this._write(4 + bytes.length);\n    writeUInt32LE(this.buf, bytes.length, offset);\n    this.buf.set(bytes, offset + 4);\n  }\n  _read(delta) {\n    if (this.ptr + delta > this.buf.length) {\n      throw new Error(\"Invalid packet\");\n    }\n    this.ptr += delta;\n    return this.ptr - delta;\n  }\n  read8() {\n    return this.buf[this._read(1)];\n  }\n  read32() {\n    return readUInt32LE(this.buf, this._read(4));\n  }\n  read() {\n    let length = this.read32();\n    let bytes = new Uint8Array(length);\n    let ptr = this._read(bytes.length);\n    bytes.set(this.buf.subarray(ptr, ptr + length));\n    return bytes;\n  }\n};\nvar encodeUTF8;\nvar decodeUTF8;\nif (typeof TextEncoder !== \"undefined\" && typeof TextDecoder !== \"undefined\") {\n  let encoder = new TextEncoder();\n  let decoder = new TextDecoder();\n  encodeUTF8 = (text) => encoder.encode(text);\n  decodeUTF8 = (bytes) => decoder.decode(bytes);\n} else if (typeof Buffer !== \"undefined\") {\n  encodeUTF8 = (text) => {\n    let buffer = Buffer.from(text);\n    if (!(buffer instanceof Uint8Array)) {\n      buffer = new Uint8Array(buffer);\n    }\n    return buffer;\n  };\n  decodeUTF8 = (bytes) => {\n    let { buffer, byteOffset, byteLength } = bytes;\n    return Buffer.from(buffer, byteOffset, byteLength).toString();\n  };\n} else {\n  throw new Error(\"No UTF-8 codec found\");\n}\nfunction readUInt32LE(buffer, offset) {\n  return buffer[offset++] | buffer[offset++] << 8 | buffer[offset++] << 16 | buffer[offset++] << 24;\n}\nfunction writeUInt32LE(buffer, value, offset) {\n  buffer[offset++] = value;\n  buffer[offset++] = value >> 8;\n  buffer[offset++] = value >> 16;\n  buffer[offset++] = value >> 24;\n}\n\n// lib/shared/common.ts\nfunction validateTarget(target) {\n  target += \"\";\n  if (target.indexOf(\",\") >= 0)\n    throw new Error(`Invalid target: ${target}`);\n  return target;\n}\nvar canBeAnything = () => null;\nvar mustBeBoolean = (value) => typeof value === \"boolean\" ? null : \"a boolean\";\nvar mustBeBooleanOrObject = (value) => typeof value === \"boolean\" || typeof value === \"object\" && !Array.isArray(value) ? null : \"a boolean or an object\";\nvar mustBeString = (value) => typeof value === \"string\" ? null : \"a string\";\nvar mustBeRegExp = (value) => value instanceof RegExp ? null : \"a RegExp object\";\nvar mustBeInteger = (value) => typeof value === \"number\" && value === (value | 0) ? null : \"an integer\";\nvar mustBeFunction = (value) => typeof value === \"function\" ? null : \"a function\";\nvar mustBeArray = (value) => Array.isArray(value) ? null : \"an array\";\nvar mustBeObject = (value) => typeof value === \"object\" && value !== null && !Array.isArray(value) ? null : \"an object\";\nvar mustBeWebAssemblyModule = (value) => value instanceof WebAssembly.Module ? null : \"a WebAssembly.Module\";\nvar mustBeArrayOrRecord = (value) => typeof value === \"object\" && value !== null ? null : \"an array or an object\";\nvar mustBeObjectOrNull = (value) => typeof value === \"object\" && !Array.isArray(value) ? null : \"an object or null\";\nvar mustBeStringOrBoolean = (value) => typeof value === \"string\" || typeof value === \"boolean\" ? null : \"a string or a boolean\";\nvar mustBeStringOrObject = (value) => typeof value === \"string\" || typeof value === \"object\" && value !== null && !Array.isArray(value) ? null : \"a string or an object\";\nvar mustBeStringOrArray = (value) => typeof value === \"string\" || Array.isArray(value) ? null : \"a string or an array\";\nvar mustBeStringOrUint8Array = (value) => typeof value === \"string\" || value instanceof Uint8Array ? null : \"a string or a Uint8Array\";\nfunction getFlag(object, keys, key, mustBeFn) {\n  let value = object[key];\n  keys[key + \"\"] = true;\n  if (value === void 0)\n    return void 0;\n  let mustBe = mustBeFn(value);\n  if (mustBe !== null)\n    throw new Error(`\"${key}\" must be ${mustBe}`);\n  return value;\n}\nfunction checkForInvalidFlags(object, keys, where) {\n  for (let key in object) {\n    if (!(key in keys)) {\n      throw new Error(`Invalid option ${where}: \"${key}\"`);\n    }\n  }\n}\nfunction validateInitializeOptions(options) {\n  let keys = /* @__PURE__ */ Object.create(null);\n  let wasmURL = getFlag(options, keys, \"wasmURL\", mustBeString);\n  let wasmModule = getFlag(options, keys, \"wasmModule\", mustBeWebAssemblyModule);\n  let worker = getFlag(options, keys, \"worker\", mustBeBoolean);\n  checkForInvalidFlags(options, keys, \"in initialize() call\");\n  return {\n    wasmURL,\n    wasmModule,\n    worker\n  };\n}\nfunction validateMangleCache(mangleCache) {\n  let validated;\n  if (mangleCache !== void 0) {\n    validated = /* @__PURE__ */ Object.create(null);\n    for (let key of Object.keys(mangleCache)) {\n      let value = mangleCache[key];\n      if (typeof value === \"string\" || value === false) {\n        validated[key] = value;\n      } else {\n        throw new Error(`Expected ${JSON.stringify(key)} in mangle cache to map to either a string or false`);\n      }\n    }\n  }\n  return validated;\n}\nfunction pushLogFlags(flags, options, keys, isTTY, logLevelDefault) {\n  let color = getFlag(options, keys, \"color\", mustBeBoolean);\n  let logLevel = getFlag(options, keys, \"logLevel\", mustBeString);\n  let logLimit = getFlag(options, keys, \"logLimit\", mustBeInteger);\n  if (color !== void 0)\n    flags.push(`--color=${color}`);\n  else if (isTTY)\n    flags.push(`--color=true`);\n  flags.push(`--log-level=${logLevel || logLevelDefault}`);\n  flags.push(`--log-limit=${logLimit || 0}`);\n}\nfunction pushCommonFlags(flags, options, keys) {\n  let legalComments = getFlag(options, keys, \"legalComments\", mustBeString);\n  let sourceRoot = getFlag(options, keys, \"sourceRoot\", mustBeString);\n  let sourcesContent = getFlag(options, keys, \"sourcesContent\", mustBeBoolean);\n  let target = getFlag(options, keys, \"target\", mustBeStringOrArray);\n  let format = getFlag(options, keys, \"format\", mustBeString);\n  let globalName = getFlag(options, keys, \"globalName\", mustBeString);\n  let mangleProps = getFlag(options, keys, \"mangleProps\", mustBeRegExp);\n  let reserveProps = getFlag(options, keys, \"reserveProps\", mustBeRegExp);\n  let mangleQuoted = getFlag(options, keys, \"mangleQuoted\", mustBeBoolean);\n  let minify = getFlag(options, keys, \"minify\", mustBeBoolean);\n  let minifySyntax = getFlag(options, keys, \"minifySyntax\", mustBeBoolean);\n  let minifyWhitespace = getFlag(options, keys, \"minifyWhitespace\", mustBeBoolean);\n  let minifyIdentifiers = getFlag(options, keys, \"minifyIdentifiers\", mustBeBoolean);\n  let drop = getFlag(options, keys, \"drop\", mustBeArray);\n  let charset = getFlag(options, keys, \"charset\", mustBeString);\n  let treeShaking = getFlag(options, keys, \"treeShaking\", mustBeBoolean);\n  let ignoreAnnotations = getFlag(options, keys, \"ignoreAnnotations\", mustBeBoolean);\n  let jsx = getFlag(options, keys, \"jsx\", mustBeString);\n  let jsxFactory = getFlag(options, keys, \"jsxFactory\", mustBeString);\n  let jsxFragment = getFlag(options, keys, \"jsxFragment\", mustBeString);\n  let jsxImportSource = getFlag(options, keys, \"jsxImportSource\", mustBeString);\n  let jsxDev = getFlag(options, keys, \"jsxDev\", mustBeBoolean);\n  let define = getFlag(options, keys, \"define\", mustBeObject);\n  let logOverride = getFlag(options, keys, \"logOverride\", mustBeObject);\n  let supported = getFlag(options, keys, \"supported\", mustBeObject);\n  let pure = getFlag(options, keys, \"pure\", mustBeArray);\n  let keepNames = getFlag(options, keys, \"keepNames\", mustBeBoolean);\n  let platform = getFlag(options, keys, \"platform\", mustBeString);\n  if (legalComments)\n    flags.push(`--legal-comments=${legalComments}`);\n  if (sourceRoot !== void 0)\n    flags.push(`--source-root=${sourceRoot}`);\n  if (sourcesContent !== void 0)\n    flags.push(`--sources-content=${sourcesContent}`);\n  if (target) {\n    if (Array.isArray(target))\n      flags.push(`--target=${Array.from(target).map(validateTarget).join(\",\")}`);\n    else\n      flags.push(`--target=${validateTarget(target)}`);\n  }\n  if (format)\n    flags.push(`--format=${format}`);\n  if (globalName)\n    flags.push(`--global-name=${globalName}`);\n  if (platform)\n    flags.push(`--platform=${platform}`);\n  if (minify)\n    flags.push(\"--minify\");\n  if (minifySyntax)\n    flags.push(\"--minify-syntax\");\n  if (minifyWhitespace)\n    flags.push(\"--minify-whitespace\");\n  if (minifyIdentifiers)\n    flags.push(\"--minify-identifiers\");\n  if (charset)\n    flags.push(`--charset=${charset}`);\n  if (treeShaking !== void 0)\n    flags.push(`--tree-shaking=${treeShaking}`);\n  if (ignoreAnnotations)\n    flags.push(`--ignore-annotations`);\n  if (drop)\n    for (let what of drop)\n      flags.push(`--drop:${what}`);\n  if (mangleProps)\n    flags.push(`--mangle-props=${mangleProps.source}`);\n  if (reserveProps)\n    flags.push(`--reserve-props=${reserveProps.source}`);\n  if (mangleQuoted !== void 0)\n    flags.push(`--mangle-quoted=${mangleQuoted}`);\n  if (jsx)\n    flags.push(`--jsx=${jsx}`);\n  if (jsxFactory)\n    flags.push(`--jsx-factory=${jsxFactory}`);\n  if (jsxFragment)\n    flags.push(`--jsx-fragment=${jsxFragment}`);\n  if (jsxImportSource)\n    flags.push(`--jsx-import-source=${jsxImportSource}`);\n  if (jsxDev)\n    flags.push(`--jsx-dev`);\n  if (define) {\n    for (let key in define) {\n      if (key.indexOf(\"=\") >= 0)\n        throw new Error(`Invalid define: ${key}`);\n      flags.push(`--define:${key}=${define[key]}`);\n    }\n  }\n  if (logOverride) {\n    for (let key in logOverride) {\n      if (key.indexOf(\"=\") >= 0)\n        throw new Error(`Invalid log override: ${key}`);\n      flags.push(`--log-override:${key}=${logOverride[key]}`);\n    }\n  }\n  if (supported) {\n    for (let key in supported) {\n      if (key.indexOf(\"=\") >= 0)\n        throw new Error(`Invalid supported: ${key}`);\n      flags.push(`--supported:${key}=${supported[key]}`);\n    }\n  }\n  if (pure)\n    for (let fn of pure)\n      flags.push(`--pure:${fn}`);\n  if (keepNames)\n    flags.push(`--keep-names`);\n}\nfunction flagsForBuildOptions(callName, options, isTTY, logLevelDefault, writeDefault) {\n  var _a;\n  let flags = [];\n  let entries = [];\n  let keys = /* @__PURE__ */ Object.create(null);\n  let stdinContents = null;\n  let stdinResolveDir = null;\n  let watchMode = null;\n  pushLogFlags(flags, options, keys, isTTY, logLevelDefault);\n  pushCommonFlags(flags, options, keys);\n  let sourcemap = getFlag(options, keys, \"sourcemap\", mustBeStringOrBoolean);\n  let bundle = getFlag(options, keys, \"bundle\", mustBeBoolean);\n  let watch = getFlag(options, keys, \"watch\", mustBeBooleanOrObject);\n  let splitting = getFlag(options, keys, \"splitting\", mustBeBoolean);\n  let preserveSymlinks = getFlag(options, keys, \"preserveSymlinks\", mustBeBoolean);\n  let metafile = getFlag(options, keys, \"metafile\", mustBeBoolean);\n  let outfile = getFlag(options, keys, \"outfile\", mustBeString);\n  let outdir = getFlag(options, keys, \"outdir\", mustBeString);\n  let outbase = getFlag(options, keys, \"outbase\", mustBeString);\n  let tsconfig = getFlag(options, keys, \"tsconfig\", mustBeString);\n  let resolveExtensions = getFlag(options, keys, \"resolveExtensions\", mustBeArray);\n  let nodePathsInput = getFlag(options, keys, \"nodePaths\", mustBeArray);\n  let mainFields = getFlag(options, keys, \"mainFields\", mustBeArray);\n  let conditions = getFlag(options, keys, \"conditions\", mustBeArray);\n  let external = getFlag(options, keys, \"external\", mustBeArray);\n  let loader = getFlag(options, keys, \"loader\", mustBeObject);\n  let outExtension = getFlag(options, keys, \"outExtension\", mustBeObject);\n  let publicPath = getFlag(options, keys, \"publicPath\", mustBeString);\n  let entryNames = getFlag(options, keys, \"entryNames\", mustBeString);\n  let chunkNames = getFlag(options, keys, \"chunkNames\", mustBeString);\n  let assetNames = getFlag(options, keys, \"assetNames\", mustBeString);\n  let inject = getFlag(options, keys, \"inject\", mustBeArray);\n  let banner = getFlag(options, keys, \"banner\", mustBeObject);\n  let footer = getFlag(options, keys, \"footer\", mustBeObject);\n  let entryPoints = getFlag(options, keys, \"entryPoints\", mustBeArrayOrRecord);\n  let absWorkingDir = getFlag(options, keys, \"absWorkingDir\", mustBeString);\n  let stdin = getFlag(options, keys, \"stdin\", mustBeObject);\n  let write = (_a = getFlag(options, keys, \"write\", mustBeBoolean)) != null ? _a : writeDefault;\n  let allowOverwrite = getFlag(options, keys, \"allowOverwrite\", mustBeBoolean);\n  let incremental = getFlag(options, keys, \"incremental\", mustBeBoolean) === true;\n  let mangleCache = getFlag(options, keys, \"mangleCache\", mustBeObject);\n  keys.plugins = true;\n  checkForInvalidFlags(options, keys, `in ${callName}() call`);\n  if (sourcemap)\n    flags.push(`--sourcemap${sourcemap === true ? \"\" : `=${sourcemap}`}`);\n  if (bundle)\n    flags.push(\"--bundle\");\n  if (allowOverwrite)\n    flags.push(\"--allow-overwrite\");\n  if (watch) {\n    flags.push(\"--watch\");\n    if (typeof watch === \"boolean\") {\n      watchMode = {};\n    } else {\n      let watchKeys = /* @__PURE__ */ Object.create(null);\n      let onRebuild = getFlag(watch, watchKeys, \"onRebuild\", mustBeFunction);\n      checkForInvalidFlags(watch, watchKeys, `on \"watch\" in ${callName}() call`);\n      watchMode = { onRebuild };\n    }\n  }\n  if (splitting)\n    flags.push(\"--splitting\");\n  if (preserveSymlinks)\n    flags.push(\"--preserve-symlinks\");\n  if (metafile)\n    flags.push(`--metafile`);\n  if (outfile)\n    flags.push(`--outfile=${outfile}`);\n  if (outdir)\n    flags.push(`--outdir=${outdir}`);\n  if (outbase)\n    flags.push(`--outbase=${outbase}`);\n  if (tsconfig)\n    flags.push(`--tsconfig=${tsconfig}`);\n  if (resolveExtensions) {\n    let values = [];\n    for (let value of resolveExtensions) {\n      value += \"\";\n      if (value.indexOf(\",\") >= 0)\n        throw new Error(`Invalid resolve extension: ${value}`);\n      values.push(value);\n    }\n    flags.push(`--resolve-extensions=${values.join(\",\")}`);\n  }\n  if (publicPath)\n    flags.push(`--public-path=${publicPath}`);\n  if (entryNames)\n    flags.push(`--entry-names=${entryNames}`);\n  if (chunkNames)\n    flags.push(`--chunk-names=${chunkNames}`);\n  if (assetNames)\n    flags.push(`--asset-names=${assetNames}`);\n  if (mainFields) {\n    let values = [];\n    for (let value of mainFields) {\n      value += \"\";\n      if (value.indexOf(\",\") >= 0)\n        throw new Error(`Invalid main field: ${value}`);\n      values.push(value);\n    }\n    flags.push(`--main-fields=${values.join(\",\")}`);\n  }\n  if (conditions) {\n    let values = [];\n    for (let value of conditions) {\n      value += \"\";\n      if (value.indexOf(\",\") >= 0)\n        throw new Error(`Invalid condition: ${value}`);\n      values.push(value);\n    }\n    flags.push(`--conditions=${values.join(\",\")}`);\n  }\n  if (external)\n    for (let name of external)\n      flags.push(`--external:${name}`);\n  if (banner) {\n    for (let type in banner) {\n      if (type.indexOf(\"=\") >= 0)\n        throw new Error(`Invalid banner file type: ${type}`);\n      flags.push(`--banner:${type}=${banner[type]}`);\n    }\n  }\n  if (footer) {\n    for (let type in footer) {\n      if (type.indexOf(\"=\") >= 0)\n        throw new Error(`Invalid footer file type: ${type}`);\n      flags.push(`--footer:${type}=${footer[type]}`);\n    }\n  }\n  if (inject)\n    for (let path of inject)\n      flags.push(`--inject:${path}`);\n  if (loader) {\n    for (let ext in loader) {\n      if (ext.indexOf(\"=\") >= 0)\n        throw new Error(`Invalid loader extension: ${ext}`);\n      flags.push(`--loader:${ext}=${loader[ext]}`);\n    }\n  }\n  if (outExtension) {\n    for (let ext in outExtension) {\n      if (ext.indexOf(\"=\") >= 0)\n        throw new Error(`Invalid out extension: ${ext}`);\n      flags.push(`--out-extension:${ext}=${outExtension[ext]}`);\n    }\n  }\n  if (entryPoints) {\n    if (Array.isArray(entryPoints)) {\n      for (let entryPoint of entryPoints) {\n        entries.push([\"\", entryPoint + \"\"]);\n      }\n    } else {\n      for (let [key, value] of Object.entries(entryPoints)) {\n        entries.push([key + \"\", value + \"\"]);\n      }\n    }\n  }\n  if (stdin) {\n    let stdinKeys = /* @__PURE__ */ Object.create(null);\n    let contents = getFlag(stdin, stdinKeys, \"contents\", mustBeStringOrUint8Array);\n    let resolveDir = getFlag(stdin, stdinKeys, \"resolveDir\", mustBeString);\n    let sourcefile = getFlag(stdin, stdinKeys, \"sourcefile\", mustBeString);\n    let loader2 = getFlag(stdin, stdinKeys, \"loader\", mustBeString);\n    checkForInvalidFlags(stdin, stdinKeys, 'in \"stdin\" object');\n    if (sourcefile)\n      flags.push(`--sourcefile=${sourcefile}`);\n    if (loader2)\n      flags.push(`--loader=${loader2}`);\n    if (resolveDir)\n      stdinResolveDir = resolveDir + \"\";\n    if (typeof contents === \"string\")\n      stdinContents = encodeUTF8(contents);\n    else if (contents instanceof Uint8Array)\n      stdinContents = contents;\n  }\n  let nodePaths = [];\n  if (nodePathsInput) {\n    for (let value of nodePathsInput) {\n      value += \"\";\n      nodePaths.push(value);\n    }\n  }\n  return {\n    entries,\n    flags,\n    write,\n    stdinContents,\n    stdinResolveDir,\n    absWorkingDir,\n    incremental,\n    nodePaths,\n    watch: watchMode,\n    mangleCache: validateMangleCache(mangleCache)\n  };\n}\nfunction flagsForTransformOptions(callName, options, isTTY, logLevelDefault) {\n  let flags = [];\n  let keys = /* @__PURE__ */ Object.create(null);\n  pushLogFlags(flags, options, keys, isTTY, logLevelDefault);\n  pushCommonFlags(flags, options, keys);\n  let sourcemap = getFlag(options, keys, \"sourcemap\", mustBeStringOrBoolean);\n  let tsconfigRaw = getFlag(options, keys, \"tsconfigRaw\", mustBeStringOrObject);\n  let sourcefile = getFlag(options, keys, \"sourcefile\", mustBeString);\n  let loader = getFlag(options, keys, \"loader\", mustBeString);\n  let banner = getFlag(options, keys, \"banner\", mustBeString);\n  let footer = getFlag(options, keys, \"footer\", mustBeString);\n  let mangleCache = getFlag(options, keys, \"mangleCache\", mustBeObject);\n  checkForInvalidFlags(options, keys, `in ${callName}() call`);\n  if (sourcemap)\n    flags.push(`--sourcemap=${sourcemap === true ? \"external\" : sourcemap}`);\n  if (tsconfigRaw)\n    flags.push(`--tsconfig-raw=${typeof tsconfigRaw === \"string\" ? tsconfigRaw : JSON.stringify(tsconfigRaw)}`);\n  if (sourcefile)\n    flags.push(`--sourcefile=${sourcefile}`);\n  if (loader)\n    flags.push(`--loader=${loader}`);\n  if (banner)\n    flags.push(`--banner=${banner}`);\n  if (footer)\n    flags.push(`--footer=${footer}`);\n  return {\n    flags,\n    mangleCache: validateMangleCache(mangleCache)\n  };\n}\nfunction createChannel(streamIn) {\n  let responseCallbacks = /* @__PURE__ */ new Map();\n  let pluginCallbacks = /* @__PURE__ */ new Map();\n  let watchCallbacks = /* @__PURE__ */ new Map();\n  let serveCallbacks = /* @__PURE__ */ new Map();\n  let closeData = null;\n  let nextRequestID = 0;\n  let nextBuildKey = 0;\n  let stdout = new Uint8Array(16 * 1024);\n  let stdoutUsed = 0;\n  let readFromStdout = (chunk) => {\n    let limit = stdoutUsed + chunk.length;\n    if (limit > stdout.length) {\n      let swap = new Uint8Array(limit * 2);\n      swap.set(stdout);\n      stdout = swap;\n    }\n    stdout.set(chunk, stdoutUsed);\n    stdoutUsed += chunk.length;\n    let offset = 0;\n    while (offset + 4 <= stdoutUsed) {\n      let length = readUInt32LE(stdout, offset);\n      if (offset + 4 + length > stdoutUsed) {\n        break;\n      }\n      offset += 4;\n      handleIncomingPacket(stdout.subarray(offset, offset + length));\n      offset += length;\n    }\n    if (offset > 0) {\n      stdout.copyWithin(0, offset, stdoutUsed);\n      stdoutUsed -= offset;\n    }\n  };\n  let afterClose = (error) => {\n    closeData = { reason: error ? \": \" + (error.message || error) : \"\" };\n    const text = \"The service was stopped\" + closeData.reason;\n    for (let callback of responseCallbacks.values()) {\n      callback(text, null);\n    }\n    responseCallbacks.clear();\n    for (let callbacks of serveCallbacks.values()) {\n      callbacks.onWait(text);\n    }\n    serveCallbacks.clear();\n    for (let callback of watchCallbacks.values()) {\n      try {\n        callback(new Error(text), null);\n      } catch (e) {\n        console.error(e);\n      }\n    }\n    watchCallbacks.clear();\n  };\n  let sendRequest = (refs, value, callback) => {\n    if (closeData)\n      return callback(\"The service is no longer running\" + closeData.reason, null);\n    let id = nextRequestID++;\n    responseCallbacks.set(id, (error, response) => {\n      try {\n        callback(error, response);\n      } finally {\n        if (refs)\n          refs.unref();\n      }\n    });\n    if (refs)\n      refs.ref();\n    streamIn.writeToStdin(encodePacket({ id, isRequest: true, value }));\n  };\n  let sendResponse = (id, value) => {\n    if (closeData)\n      throw new Error(\"The service is no longer running\" + closeData.reason);\n    streamIn.writeToStdin(encodePacket({ id, isRequest: false, value }));\n  };\n  let handleRequest = (id, request) => __async(this, null, function* () {\n    try {\n      switch (request.command) {\n        case \"ping\": {\n          sendResponse(id, {});\n          break;\n        }\n        case \"on-start\": {\n          let callback = pluginCallbacks.get(request.key);\n          if (!callback)\n            sendResponse(id, {});\n          else\n            sendResponse(id, yield callback(request));\n          break;\n        }\n        case \"on-resolve\": {\n          let callback = pluginCallbacks.get(request.key);\n          if (!callback)\n            sendResponse(id, {});\n          else\n            sendResponse(id, yield callback(request));\n          break;\n        }\n        case \"on-load\": {\n          let callback = pluginCallbacks.get(request.key);\n          if (!callback)\n            sendResponse(id, {});\n          else\n            sendResponse(id, yield callback(request));\n          break;\n        }\n        case \"serve-request\": {\n          let callbacks = serveCallbacks.get(request.key);\n          if (callbacks && callbacks.onRequest)\n            callbacks.onRequest(request.args);\n          sendResponse(id, {});\n          break;\n        }\n        case \"serve-wait\": {\n          let callbacks = serveCallbacks.get(request.key);\n          if (callbacks)\n            callbacks.onWait(request.error);\n          sendResponse(id, {});\n          break;\n        }\n        case \"watch-rebuild\": {\n          let callback = watchCallbacks.get(request.key);\n          try {\n            if (callback)\n              callback(null, request.args);\n          } catch (err) {\n            console.error(err);\n          }\n          sendResponse(id, {});\n          break;\n        }\n        default:\n          throw new Error(`Invalid command: ` + request.command);\n      }\n    } catch (e) {\n      sendResponse(id, { errors: [extractErrorMessageV8(e, streamIn, null, void 0, \"\")] });\n    }\n  });\n  let isFirstPacket = true;\n  let handleIncomingPacket = (bytes) => {\n    if (isFirstPacket) {\n      isFirstPacket = false;\n      let binaryVersion = String.fromCharCode(...bytes);\n      if (binaryVersion !== \"0.15.3\") {\n        throw new Error(`Cannot start service: Host version \"${\"0.15.3\"}\" does not match binary version ${JSON.stringify(binaryVersion)}`);\n      }\n      return;\n    }\n    let packet = decodePacket(bytes);\n    if (packet.isRequest) {\n      handleRequest(packet.id, packet.value);\n    } else {\n      let callback = responseCallbacks.get(packet.id);\n      responseCallbacks.delete(packet.id);\n      if (packet.value.error)\n        callback(packet.value.error, {});\n      else\n        callback(null, packet.value);\n    }\n  };\n  let handlePlugins = (initialOptions, plugins, buildKey, stash, refs) => __async(this, null, function* () {\n    let onStartCallbacks = [];\n    let onEndCallbacks = [];\n    let onResolveCallbacks = {};\n    let onLoadCallbacks = {};\n    let nextCallbackID = 0;\n    let i = 0;\n    let requestPlugins = [];\n    let isSetupDone = false;\n    plugins = [...plugins];\n    for (let item of plugins) {\n      let keys = {};\n      if (typeof item !== \"object\")\n        throw new Error(`Plugin at index ${i} must be an object`);\n      const name = getFlag(item, keys, \"name\", mustBeString);\n      if (typeof name !== \"string\" || name === \"\")\n        throw new Error(`Plugin at index ${i} is missing a name`);\n      try {\n        let setup = getFlag(item, keys, \"setup\", mustBeFunction);\n        if (typeof setup !== \"function\")\n          throw new Error(`Plugin is missing a setup function`);\n        checkForInvalidFlags(item, keys, `on plugin ${JSON.stringify(name)}`);\n        let plugin = {\n          name,\n          onResolve: [],\n          onLoad: []\n        };\n        i++;\n        let resolve = (path, options = {}) => {\n          if (!isSetupDone)\n            throw new Error('Cannot call \"resolve\" before plugin setup has completed');\n          if (typeof path !== \"string\")\n            throw new Error(`The path to resolve must be a string`);\n          let keys2 = /* @__PURE__ */ Object.create(null);\n          let pluginName = getFlag(options, keys2, \"pluginName\", mustBeString);\n          let importer = getFlag(options, keys2, \"importer\", mustBeString);\n          let namespace = getFlag(options, keys2, \"namespace\", mustBeString);\n          let resolveDir = getFlag(options, keys2, \"resolveDir\", mustBeString);\n          let kind = getFlag(options, keys2, \"kind\", mustBeString);\n          let pluginData = getFlag(options, keys2, \"pluginData\", canBeAnything);\n          checkForInvalidFlags(options, keys2, \"in resolve() call\");\n          return new Promise((resolve2, reject) => {\n            const request = {\n              command: \"resolve\",\n              path,\n              key: buildKey,\n              pluginName: name\n            };\n            if (pluginName != null)\n              request.pluginName = pluginName;\n            if (importer != null)\n              request.importer = importer;\n            if (namespace != null)\n              request.namespace = namespace;\n            if (resolveDir != null)\n              request.resolveDir = resolveDir;\n            if (kind != null)\n              request.kind = kind;\n            if (pluginData != null)\n              request.pluginData = stash.store(pluginData);\n            sendRequest(refs, request, (error, response) => {\n              if (error !== null)\n                reject(new Error(error));\n              else\n                resolve2({\n                  errors: replaceDetailsInMessages(response.errors, stash),\n                  warnings: replaceDetailsInMessages(response.warnings, stash),\n                  path: response.path,\n                  external: response.external,\n                  sideEffects: response.sideEffects,\n                  namespace: response.namespace,\n                  suffix: response.suffix,\n                  pluginData: stash.load(response.pluginData)\n                });\n            });\n          });\n        };\n        let promise = setup({\n          initialOptions,\n          resolve,\n          onStart(callback2) {\n            let registeredText = `This error came from the \"onStart\" callback registered here:`;\n            let registeredNote = extractCallerV8(new Error(registeredText), streamIn, \"onStart\");\n            onStartCallbacks.push({ name, callback: callback2, note: registeredNote });\n          },\n          onEnd(callback2) {\n            let registeredText = `This error came from the \"onEnd\" callback registered here:`;\n            let registeredNote = extractCallerV8(new Error(registeredText), streamIn, \"onEnd\");\n            onEndCallbacks.push({ name, callback: callback2, note: registeredNote });\n          },\n          onResolve(options, callback2) {\n            let registeredText = `This error came from the \"onResolve\" callback registered here:`;\n            let registeredNote = extractCallerV8(new Error(registeredText), streamIn, \"onResolve\");\n            let keys2 = {};\n            let filter = getFlag(options, keys2, \"filter\", mustBeRegExp);\n            let namespace = getFlag(options, keys2, \"namespace\", mustBeString);\n            checkForInvalidFlags(options, keys2, `in onResolve() call for plugin ${JSON.stringify(name)}`);\n            if (filter == null)\n              throw new Error(`onResolve() call is missing a filter`);\n            let id = nextCallbackID++;\n            onResolveCallbacks[id] = { name, callback: callback2, note: registeredNote };\n            plugin.onResolve.push({ id, filter: filter.source, namespace: namespace || \"\" });\n          },\n          onLoad(options, callback2) {\n            let registeredText = `This error came from the \"onLoad\" callback registered here:`;\n            let registeredNote = extractCallerV8(new Error(registeredText), streamIn, \"onLoad\");\n            let keys2 = {};\n            let filter = getFlag(options, keys2, \"filter\", mustBeRegExp);\n            let namespace = getFlag(options, keys2, \"namespace\", mustBeString);\n            checkForInvalidFlags(options, keys2, `in onLoad() call for plugin ${JSON.stringify(name)}`);\n            if (filter == null)\n              throw new Error(`onLoad() call is missing a filter`);\n            let id = nextCallbackID++;\n            onLoadCallbacks[id] = { name, callback: callback2, note: registeredNote };\n            plugin.onLoad.push({ id, filter: filter.source, namespace: namespace || \"\" });\n          },\n          esbuild: streamIn.esbuild\n        });\n        if (promise)\n          yield promise;\n        requestPlugins.push(plugin);\n      } catch (e) {\n        return { ok: false, error: e, pluginName: name };\n      }\n    }\n    const callback = (request) => __async(this, null, function* () {\n      switch (request.command) {\n        case \"on-start\": {\n          let response = { errors: [], warnings: [] };\n          yield Promise.all(onStartCallbacks.map((_0) => __async(this, [_0], function* ({ name, callback: callback2, note }) {\n            try {\n              let result = yield callback2();\n              if (result != null) {\n                if (typeof result !== \"object\")\n                  throw new Error(`Expected onStart() callback in plugin ${JSON.stringify(name)} to return an object`);\n                let keys = {};\n                let errors = getFlag(result, keys, \"errors\", mustBeArray);\n                let warnings = getFlag(result, keys, \"warnings\", mustBeArray);\n                checkForInvalidFlags(result, keys, `from onStart() callback in plugin ${JSON.stringify(name)}`);\n                if (errors != null)\n                  response.errors.push(...sanitizeMessages(errors, \"errors\", stash, name));\n                if (warnings != null)\n                  response.warnings.push(...sanitizeMessages(warnings, \"warnings\", stash, name));\n              }\n            } catch (e) {\n              response.errors.push(extractErrorMessageV8(e, streamIn, stash, note && note(), name));\n            }\n          })));\n          return response;\n        }\n        case \"on-resolve\": {\n          let response = {}, name = \"\", callback2, note;\n          for (let id of request.ids) {\n            try {\n              ({ name, callback: callback2, note } = onResolveCallbacks[id]);\n              let result = yield callback2({\n                path: request.path,\n                importer: request.importer,\n                namespace: request.namespace,\n                resolveDir: request.resolveDir,\n                kind: request.kind,\n                pluginData: stash.load(request.pluginData)\n              });\n              if (result != null) {\n                if (typeof result !== \"object\")\n                  throw new Error(`Expected onResolve() callback in plugin ${JSON.stringify(name)} to return an object`);\n                let keys = {};\n                let pluginName = getFlag(result, keys, \"pluginName\", mustBeString);\n                let path = getFlag(result, keys, \"path\", mustBeString);\n                let namespace = getFlag(result, keys, \"namespace\", mustBeString);\n                let suffix = getFlag(result, keys, \"suffix\", mustBeString);\n                let external = getFlag(result, keys, \"external\", mustBeBoolean);\n                let sideEffects = getFlag(result, keys, \"sideEffects\", mustBeBoolean);\n                let pluginData = getFlag(result, keys, \"pluginData\", canBeAnything);\n                let errors = getFlag(result, keys, \"errors\", mustBeArray);\n                let warnings = getFlag(result, keys, \"warnings\", mustBeArray);\n                let watchFiles = getFlag(result, keys, \"watchFiles\", mustBeArray);\n                let watchDirs = getFlag(result, keys, \"watchDirs\", mustBeArray);\n                checkForInvalidFlags(result, keys, `from onResolve() callback in plugin ${JSON.stringify(name)}`);\n                response.id = id;\n                if (pluginName != null)\n                  response.pluginName = pluginName;\n                if (path != null)\n                  response.path = path;\n                if (namespace != null)\n                  response.namespace = namespace;\n                if (suffix != null)\n                  response.suffix = suffix;\n                if (external != null)\n                  response.external = external;\n                if (sideEffects != null)\n                  response.sideEffects = sideEffects;\n                if (pluginData != null)\n                  response.pluginData = stash.store(pluginData);\n                if (errors != null)\n                  response.errors = sanitizeMessages(errors, \"errors\", stash, name);\n                if (warnings != null)\n                  response.warnings = sanitizeMessages(warnings, \"warnings\", stash, name);\n                if (watchFiles != null)\n                  response.watchFiles = sanitizeStringArray(watchFiles, \"watchFiles\");\n                if (watchDirs != null)\n                  response.watchDirs = sanitizeStringArray(watchDirs, \"watchDirs\");\n                break;\n              }\n            } catch (e) {\n              return { id, errors: [extractErrorMessageV8(e, streamIn, stash, note && note(), name)] };\n            }\n          }\n          return response;\n        }\n        case \"on-load\": {\n          let response = {}, name = \"\", callback2, note;\n          for (let id of request.ids) {\n            try {\n              ({ name, callback: callback2, note } = onLoadCallbacks[id]);\n              let result = yield callback2({\n                path: request.path,\n                namespace: request.namespace,\n                suffix: request.suffix,\n                pluginData: stash.load(request.pluginData)\n              });\n              if (result != null) {\n                if (typeof result !== \"object\")\n                  throw new Error(`Expected onLoad() callback in plugin ${JSON.stringify(name)} to return an object`);\n                let keys = {};\n                let pluginName = getFlag(result, keys, \"pluginName\", mustBeString);\n                let contents = getFlag(result, keys, \"contents\", mustBeStringOrUint8Array);\n                let resolveDir = getFlag(result, keys, \"resolveDir\", mustBeString);\n                let pluginData = getFlag(result, keys, \"pluginData\", canBeAnything);\n                let loader = getFlag(result, keys, \"loader\", mustBeString);\n                let errors = getFlag(result, keys, \"errors\", mustBeArray);\n                let warnings = getFlag(result, keys, \"warnings\", mustBeArray);\n                let watchFiles = getFlag(result, keys, \"watchFiles\", mustBeArray);\n                let watchDirs = getFlag(result, keys, \"watchDirs\", mustBeArray);\n                checkForInvalidFlags(result, keys, `from onLoad() callback in plugin ${JSON.stringify(name)}`);\n                response.id = id;\n                if (pluginName != null)\n                  response.pluginName = pluginName;\n                if (contents instanceof Uint8Array)\n                  response.contents = contents;\n                else if (contents != null)\n                  response.contents = encodeUTF8(contents);\n                if (resolveDir != null)\n                  response.resolveDir = resolveDir;\n                if (pluginData != null)\n                  response.pluginData = stash.store(pluginData);\n                if (loader != null)\n                  response.loader = loader;\n                if (errors != null)\n                  response.errors = sanitizeMessages(errors, \"errors\", stash, name);\n                if (warnings != null)\n                  response.warnings = sanitizeMessages(warnings, \"warnings\", stash, name);\n                if (watchFiles != null)\n                  response.watchFiles = sanitizeStringArray(watchFiles, \"watchFiles\");\n                if (watchDirs != null)\n                  response.watchDirs = sanitizeStringArray(watchDirs, \"watchDirs\");\n                break;\n              }\n            } catch (e) {\n              return { id, errors: [extractErrorMessageV8(e, streamIn, stash, note && note(), name)] };\n            }\n          }\n          return response;\n        }\n        default:\n          throw new Error(`Invalid command: ` + request.command);\n      }\n    });\n    let runOnEndCallbacks = (result, logPluginError, done) => done();\n    if (onEndCallbacks.length > 0) {\n      runOnEndCallbacks = (result, logPluginError, done) => {\n        (() => __async(this, null, function* () {\n          for (const { name, callback: callback2, note } of onEndCallbacks) {\n            try {\n              yield callback2(result);\n            } catch (e) {\n              result.errors.push(yield new Promise((resolve) => logPluginError(e, name, note && note(), resolve)));\n            }\n          }\n        }))().then(done);\n      };\n    }\n    isSetupDone = true;\n    let refCount = 0;\n    return {\n      ok: true,\n      requestPlugins,\n      runOnEndCallbacks,\n      pluginRefs: {\n        ref() {\n          if (++refCount === 1)\n            pluginCallbacks.set(buildKey, callback);\n        },\n        unref() {\n          if (--refCount === 0)\n            pluginCallbacks.delete(buildKey);\n        }\n      }\n    };\n  });\n  let buildServeData = (refs, options, request, key) => {\n    let keys = {};\n    let port = getFlag(options, keys, \"port\", mustBeInteger);\n    let host = getFlag(options, keys, \"host\", mustBeString);\n    let servedir = getFlag(options, keys, \"servedir\", mustBeString);\n    let onRequest = getFlag(options, keys, \"onRequest\", mustBeFunction);\n    let onWait;\n    let wait = new Promise((resolve, reject) => {\n      onWait = (error) => {\n        serveCallbacks.delete(key);\n        if (error !== null)\n          reject(new Error(error));\n        else\n          resolve();\n      };\n    });\n    request.serve = {};\n    checkForInvalidFlags(options, keys, `in serve() call`);\n    if (port !== void 0)\n      request.serve.port = port;\n    if (host !== void 0)\n      request.serve.host = host;\n    if (servedir !== void 0)\n      request.serve.servedir = servedir;\n    serveCallbacks.set(key, {\n      onRequest,\n      onWait\n    });\n    return {\n      wait,\n      stop() {\n        sendRequest(refs, { command: \"serve-stop\", key }, () => {\n        });\n      }\n    };\n  };\n  const buildLogLevelDefault = \"warning\";\n  const transformLogLevelDefault = \"silent\";\n  let buildOrServe = (args) => {\n    let key = nextBuildKey++;\n    const details = createObjectStash();\n    let plugins;\n    let { refs, options, isTTY, callback } = args;\n    if (typeof options === \"object\") {\n      let value = options.plugins;\n      if (value !== void 0) {\n        if (!Array.isArray(value))\n          throw new Error(`\"plugins\" must be an array`);\n        plugins = value;\n      }\n    }\n    let logPluginError = (e, pluginName, note, done) => {\n      let flags = [];\n      try {\n        pushLogFlags(flags, options, {}, isTTY, buildLogLevelDefault);\n      } catch (e2) {\n      }\n      const message = extractErrorMessageV8(e, streamIn, details, note, pluginName);\n      sendRequest(refs, { command: \"error\", flags, error: message }, () => {\n        message.detail = details.load(message.detail);\n        done(message);\n      });\n    };\n    let handleError = (e, pluginName) => {\n      logPluginError(e, pluginName, void 0, (error) => {\n        callback(failureErrorWithLog(\"Build failed\", [error], []), null);\n      });\n    };\n    if (plugins && plugins.length > 0) {\n      if (streamIn.isSync)\n        return handleError(new Error(\"Cannot use plugins in synchronous API calls\"), \"\");\n      handlePlugins(options, plugins, key, details, refs).then(\n        (result) => {\n          if (!result.ok) {\n            handleError(result.error, result.pluginName);\n          } else {\n            try {\n              buildOrServeContinue(__spreadProps(__spreadValues({}, args), {\n                key,\n                details,\n                logPluginError,\n                requestPlugins: result.requestPlugins,\n                runOnEndCallbacks: result.runOnEndCallbacks,\n                pluginRefs: result.pluginRefs\n              }));\n            } catch (e) {\n              handleError(e, \"\");\n            }\n          }\n        },\n        (e) => handleError(e, \"\")\n      );\n    } else {\n      try {\n        buildOrServeContinue(__spreadProps(__spreadValues({}, args), {\n          key,\n          details,\n          logPluginError,\n          requestPlugins: null,\n          runOnEndCallbacks: (result, logPluginError2, done) => done(),\n          pluginRefs: null\n        }));\n      } catch (e) {\n        handleError(e, \"\");\n      }\n    }\n  };\n  let buildOrServeContinue = ({\n    callName,\n    refs: callerRefs,\n    serveOptions,\n    options,\n    isTTY,\n    defaultWD,\n    callback,\n    key,\n    details,\n    logPluginError,\n    requestPlugins,\n    runOnEndCallbacks,\n    pluginRefs\n  }) => {\n    const refs = {\n      ref() {\n        if (pluginRefs)\n          pluginRefs.ref();\n        if (callerRefs)\n          callerRefs.ref();\n      },\n      unref() {\n        if (pluginRefs)\n          pluginRefs.unref();\n        if (callerRefs)\n          callerRefs.unref();\n      }\n    };\n    let writeDefault = !streamIn.isWriteUnavailable;\n    let {\n      entries,\n      flags,\n      write,\n      stdinContents,\n      stdinResolveDir,\n      absWorkingDir,\n      incremental,\n      nodePaths,\n      watch,\n      mangleCache\n    } = flagsForBuildOptions(callName, options, isTTY, buildLogLevelDefault, writeDefault);\n    let request = {\n      command: \"build\",\n      key,\n      entries,\n      flags,\n      write,\n      stdinContents,\n      stdinResolveDir,\n      absWorkingDir: absWorkingDir || defaultWD,\n      incremental,\n      nodePaths\n    };\n    if (requestPlugins)\n      request.plugins = requestPlugins;\n    if (mangleCache)\n      request.mangleCache = mangleCache;\n    let serve2 = serveOptions && buildServeData(refs, serveOptions, request, key);\n    let rebuild;\n    let stop;\n    let copyResponseToResult = (response, result) => {\n      if (response.outputFiles)\n        result.outputFiles = response.outputFiles.map(convertOutputFiles);\n      if (response.metafile)\n        result.metafile = JSON.parse(response.metafile);\n      if (response.mangleCache)\n        result.mangleCache = response.mangleCache;\n      if (response.writeToStdout !== void 0)\n        console.log(decodeUTF8(response.writeToStdout).replace(/\\n$/, \"\"));\n    };\n    let buildResponseToResult = (response, callback2) => {\n      let result = {\n        errors: replaceDetailsInMessages(response.errors, details),\n        warnings: replaceDetailsInMessages(response.warnings, details)\n      };\n      copyResponseToResult(response, result);\n      runOnEndCallbacks(result, logPluginError, () => {\n        if (result.errors.length > 0) {\n          return callback2(failureErrorWithLog(\"Build failed\", result.errors, result.warnings), null);\n        }\n        if (response.rebuild) {\n          if (!rebuild) {\n            let isDisposed = false;\n            rebuild = () => new Promise((resolve, reject) => {\n              if (isDisposed || closeData)\n                throw new Error(\"Cannot rebuild\");\n              sendRequest(\n                refs,\n                { command: \"rebuild\", key },\n                (error2, response2) => {\n                  if (error2) {\n                    const message = { id: \"\", pluginName: \"\", text: error2, location: null, notes: [], detail: void 0 };\n                    return callback2(failureErrorWithLog(\"Build failed\", [message], []), null);\n                  }\n                  buildResponseToResult(response2, (error3, result3) => {\n                    if (error3)\n                      reject(error3);\n                    else\n                      resolve(result3);\n                  });\n                }\n              );\n            });\n            refs.ref();\n            rebuild.dispose = () => {\n              if (isDisposed)\n                return;\n              isDisposed = true;\n              sendRequest(refs, { command: \"rebuild-dispose\", key }, () => {\n              });\n              refs.unref();\n            };\n          }\n          result.rebuild = rebuild;\n        }\n        if (response.watch) {\n          if (!stop) {\n            let isStopped = false;\n            refs.ref();\n            stop = () => {\n              if (isStopped)\n                return;\n              isStopped = true;\n              watchCallbacks.delete(key);\n              sendRequest(refs, { command: \"watch-stop\", key }, () => {\n              });\n              refs.unref();\n            };\n            if (watch) {\n              watchCallbacks.set(key, (serviceStopError, watchResponse) => {\n                if (serviceStopError) {\n                  if (watch.onRebuild)\n                    watch.onRebuild(serviceStopError, null);\n                  return;\n                }\n                let result2 = {\n                  errors: replaceDetailsInMessages(watchResponse.errors, details),\n                  warnings: replaceDetailsInMessages(watchResponse.warnings, details)\n                };\n                copyResponseToResult(watchResponse, result2);\n                runOnEndCallbacks(result2, logPluginError, () => {\n                  if (result2.errors.length > 0) {\n                    if (watch.onRebuild)\n                      watch.onRebuild(failureErrorWithLog(\"Build failed\", result2.errors, result2.warnings), null);\n                    return;\n                  }\n                  if (watchResponse.rebuildID !== void 0)\n                    result2.rebuild = rebuild;\n                  result2.stop = stop;\n                  if (watch.onRebuild)\n                    watch.onRebuild(null, result2);\n                });\n              });\n            }\n          }\n          result.stop = stop;\n        }\n        callback2(null, result);\n      });\n    };\n    if (write && streamIn.isWriteUnavailable)\n      throw new Error(`The \"write\" option is unavailable in this environment`);\n    if (incremental && streamIn.isSync)\n      throw new Error(`Cannot use \"incremental\" with a synchronous build`);\n    if (watch && streamIn.isSync)\n      throw new Error(`Cannot use \"watch\" with a synchronous build`);\n    sendRequest(refs, request, (error, response) => {\n      if (error)\n        return callback(new Error(error), null);\n      if (serve2) {\n        let serveResponse = response;\n        let isStopped = false;\n        refs.ref();\n        let result = {\n          port: serveResponse.port,\n          host: serveResponse.host,\n          wait: serve2.wait,\n          stop() {\n            if (isStopped)\n              return;\n            isStopped = true;\n            serve2.stop();\n            refs.unref();\n          }\n        };\n        refs.ref();\n        serve2.wait.then(refs.unref, refs.unref);\n        return callback(null, result);\n      }\n      return buildResponseToResult(response, callback);\n    });\n  };\n  let transform2 = ({ callName, refs, input, options, isTTY, fs, callback }) => {\n    const details = createObjectStash();\n    let start = (inputPath) => {\n      try {\n        if (typeof input !== \"string\" && !(input instanceof Uint8Array))\n          throw new Error('The input to \"transform\" must be a string or a Uint8Array');\n        let {\n          flags,\n          mangleCache\n        } = flagsForTransformOptions(callName, options, isTTY, transformLogLevelDefault);\n        let request = {\n          command: \"transform\",\n          flags,\n          inputFS: inputPath !== null,\n          input: inputPath !== null ? encodeUTF8(inputPath) : typeof input === \"string\" ? encodeUTF8(input) : input\n        };\n        if (mangleCache)\n          request.mangleCache = mangleCache;\n        sendRequest(refs, request, (error, response) => {\n          if (error)\n            return callback(new Error(error), null);\n          let errors = replaceDetailsInMessages(response.errors, details);\n          let warnings = replaceDetailsInMessages(response.warnings, details);\n          let outstanding = 1;\n          let next = () => {\n            if (--outstanding === 0) {\n              let result = { warnings, code: response.code, map: response.map };\n              if (response.mangleCache)\n                result.mangleCache = response == null ? void 0 : response.mangleCache;\n              callback(null, result);\n            }\n          };\n          if (errors.length > 0)\n            return callback(failureErrorWithLog(\"Transform failed\", errors, warnings), null);\n          if (response.codeFS) {\n            outstanding++;\n            fs.readFile(response.code, (err, contents) => {\n              if (err !== null) {\n                callback(err, null);\n              } else {\n                response.code = contents;\n                next();\n              }\n            });\n          }\n          if (response.mapFS) {\n            outstanding++;\n            fs.readFile(response.map, (err, contents) => {\n              if (err !== null) {\n                callback(err, null);\n              } else {\n                response.map = contents;\n                next();\n              }\n            });\n          }\n          next();\n        });\n      } catch (e) {\n        let flags = [];\n        try {\n          pushLogFlags(flags, options, {}, isTTY, transformLogLevelDefault);\n        } catch (e2) {\n        }\n        const error = extractErrorMessageV8(e, streamIn, details, void 0, \"\");\n        sendRequest(refs, { command: \"error\", flags, error }, () => {\n          error.detail = details.load(error.detail);\n          callback(failureErrorWithLog(\"Transform failed\", [error], []), null);\n        });\n      }\n    };\n    if ((typeof input === \"string\" || input instanceof Uint8Array) && input.length > 1024 * 1024) {\n      let next = start;\n      start = () => fs.writeFile(input, next);\n    }\n    start(null);\n  };\n  let formatMessages2 = ({ callName, refs, messages, options, callback }) => {\n    let result = sanitizeMessages(messages, \"messages\", null, \"\");\n    if (!options)\n      throw new Error(`Missing second argument in ${callName}() call`);\n    let keys = {};\n    let kind = getFlag(options, keys, \"kind\", mustBeString);\n    let color = getFlag(options, keys, \"color\", mustBeBoolean);\n    let terminalWidth = getFlag(options, keys, \"terminalWidth\", mustBeInteger);\n    checkForInvalidFlags(options, keys, `in ${callName}() call`);\n    if (kind === void 0)\n      throw new Error(`Missing \"kind\" in ${callName}() call`);\n    if (kind !== \"error\" && kind !== \"warning\")\n      throw new Error(`Expected \"kind\" to be \"error\" or \"warning\" in ${callName}() call`);\n    let request = {\n      command: \"format-msgs\",\n      messages: result,\n      isWarning: kind === \"warning\"\n    };\n    if (color !== void 0)\n      request.color = color;\n    if (terminalWidth !== void 0)\n      request.terminalWidth = terminalWidth;\n    sendRequest(refs, request, (error, response) => {\n      if (error)\n        return callback(new Error(error), null);\n      callback(null, response.messages);\n    });\n  };\n  let analyzeMetafile2 = ({ callName, refs, metafile, options, callback }) => {\n    if (options === void 0)\n      options = {};\n    let keys = {};\n    let color = getFlag(options, keys, \"color\", mustBeBoolean);\n    let verbose = getFlag(options, keys, \"verbose\", mustBeBoolean);\n    checkForInvalidFlags(options, keys, `in ${callName}() call`);\n    let request = {\n      command: \"analyze-metafile\",\n      metafile\n    };\n    if (color !== void 0)\n      request.color = color;\n    if (verbose !== void 0)\n      request.verbose = verbose;\n    sendRequest(refs, request, (error, response) => {\n      if (error)\n        return callback(new Error(error), null);\n      callback(null, response.result);\n    });\n  };\n  return {\n    readFromStdout,\n    afterClose,\n    service: {\n      buildOrServe,\n      transform: transform2,\n      formatMessages: formatMessages2,\n      analyzeMetafile: analyzeMetafile2\n    }\n  };\n}\nfunction createObjectStash() {\n  const map = /* @__PURE__ */ new Map();\n  let nextID = 0;\n  return {\n    load(id) {\n      return map.get(id);\n    },\n    store(value) {\n      if (value === void 0)\n        return -1;\n      const id = nextID++;\n      map.set(id, value);\n      return id;\n    }\n  };\n}\nfunction extractCallerV8(e, streamIn, ident) {\n  let note;\n  let tried = false;\n  return () => {\n    if (tried)\n      return note;\n    tried = true;\n    try {\n      let lines = (e.stack + \"\").split(\"\\n\");\n      lines.splice(1, 1);\n      let location = parseStackLinesV8(streamIn, lines, ident);\n      if (location) {\n        note = { text: e.message, location };\n        return note;\n      }\n    } catch (e2) {\n    }\n  };\n}\nfunction extractErrorMessageV8(e, streamIn, stash, note, pluginName) {\n  let text = \"Internal error\";\n  let location = null;\n  try {\n    text = (e && e.message || e) + \"\";\n  } catch (e2) {\n  }\n  try {\n    location = parseStackLinesV8(streamIn, (e.stack + \"\").split(\"\\n\"), \"\");\n  } catch (e2) {\n  }\n  return { id: \"\", pluginName, text, location, notes: note ? [note] : [], detail: stash ? stash.store(e) : -1 };\n}\nfunction parseStackLinesV8(streamIn, lines, ident) {\n  let at = \"    at \";\n  if (streamIn.readFileSync && !lines[0].startsWith(at) && lines[1].startsWith(at)) {\n    for (let i = 1; i < lines.length; i++) {\n      let line = lines[i];\n      if (!line.startsWith(at))\n        continue;\n      line = line.slice(at.length);\n      while (true) {\n        let match = /^(?:new |async )?\\S+ \\((.*)\\)$/.exec(line);\n        if (match) {\n          line = match[1];\n          continue;\n        }\n        match = /^eval at \\S+ \\((.*)\\)(?:, \\S+:\\d+:\\d+)?$/.exec(line);\n        if (match) {\n          line = match[1];\n          continue;\n        }\n        match = /^(\\S+):(\\d+):(\\d+)$/.exec(line);\n        if (match) {\n          let contents;\n          try {\n            contents = streamIn.readFileSync(match[1], \"utf8\");\n          } catch (e) {\n            break;\n          }\n          let lineText = contents.split(/\\r\\n|\\r|\\n|\\u2028|\\u2029/)[+match[2] - 1] || \"\";\n          let column = +match[3] - 1;\n          let length = lineText.slice(column, column + ident.length) === ident ? ident.length : 0;\n          return {\n            file: match[1],\n            namespace: \"file\",\n            line: +match[2],\n            column: encodeUTF8(lineText.slice(0, column)).length,\n            length: encodeUTF8(lineText.slice(column, column + length)).length,\n            lineText: lineText + \"\\n\" + lines.slice(1).join(\"\\n\"),\n            suggestion: \"\"\n          };\n        }\n        break;\n      }\n    }\n  }\n  return null;\n}\nfunction failureErrorWithLog(text, errors, warnings) {\n  let limit = 5;\n  let summary = errors.length < 1 ? \"\" : ` with ${errors.length} error${errors.length < 2 ? \"\" : \"s\"}:` + errors.slice(0, limit + 1).map((e, i) => {\n    if (i === limit)\n      return \"\\n...\";\n    if (!e.location)\n      return `\nerror: ${e.text}`;\n    let { file, line, column } = e.location;\n    let pluginText = e.pluginName ? `[plugin: ${e.pluginName}] ` : \"\";\n    return `\n${file}:${line}:${column}: ERROR: ${pluginText}${e.text}`;\n  }).join(\"\");\n  let error = new Error(`${text}${summary}`);\n  error.errors = errors;\n  error.warnings = warnings;\n  return error;\n}\nfunction replaceDetailsInMessages(messages, stash) {\n  for (const message of messages) {\n    message.detail = stash.load(message.detail);\n  }\n  return messages;\n}\nfunction sanitizeLocation(location, where) {\n  if (location == null)\n    return null;\n  let keys = {};\n  let file = getFlag(location, keys, \"file\", mustBeString);\n  let namespace = getFlag(location, keys, \"namespace\", mustBeString);\n  let line = getFlag(location, keys, \"line\", mustBeInteger);\n  let column = getFlag(location, keys, \"column\", mustBeInteger);\n  let length = getFlag(location, keys, \"length\", mustBeInteger);\n  let lineText = getFlag(location, keys, \"lineText\", mustBeString);\n  let suggestion = getFlag(location, keys, \"suggestion\", mustBeString);\n  checkForInvalidFlags(location, keys, where);\n  return {\n    file: file || \"\",\n    namespace: namespace || \"\",\n    line: line || 0,\n    column: column || 0,\n    length: length || 0,\n    lineText: lineText || \"\",\n    suggestion: suggestion || \"\"\n  };\n}\nfunction sanitizeMessages(messages, property, stash, fallbackPluginName) {\n  let messagesClone = [];\n  let index = 0;\n  for (const message of messages) {\n    let keys = {};\n    let id = getFlag(message, keys, \"id\", mustBeString);\n    let pluginName = getFlag(message, keys, \"pluginName\", mustBeString);\n    let text = getFlag(message, keys, \"text\", mustBeString);\n    let location = getFlag(message, keys, \"location\", mustBeObjectOrNull);\n    let notes = getFlag(message, keys, \"notes\", mustBeArray);\n    let detail = getFlag(message, keys, \"detail\", canBeAnything);\n    let where = `in element ${index} of \"${property}\"`;\n    checkForInvalidFlags(message, keys, where);\n    let notesClone = [];\n    if (notes) {\n      for (const note of notes) {\n        let noteKeys = {};\n        let noteText = getFlag(note, noteKeys, \"text\", mustBeString);\n        let noteLocation = getFlag(note, noteKeys, \"location\", mustBeObjectOrNull);\n        checkForInvalidFlags(note, noteKeys, where);\n        notesClone.push({\n          text: noteText || \"\",\n          location: sanitizeLocation(noteLocation, where)\n        });\n      }\n    }\n    messagesClone.push({\n      id: id || \"\",\n      pluginName: pluginName || fallbackPluginName,\n      text: text || \"\",\n      location: sanitizeLocation(location, where),\n      notes: notesClone,\n      detail: stash ? stash.store(detail) : -1\n    });\n    index++;\n  }\n  return messagesClone;\n}\nfunction sanitizeStringArray(values, property) {\n  const result = [];\n  for (const value of values) {\n    if (typeof value !== \"string\")\n      throw new Error(`${JSON.stringify(property)} must be an array of strings`);\n    result.push(value);\n  }\n  return result;\n}\nfunction convertOutputFiles({ path, contents }) {\n  let text = null;\n  return {\n    path,\n    contents,\n    get text() {\n      const binary = this.contents;\n      if (text === null || binary !== contents) {\n        contents = binary;\n        text = decodeUTF8(binary);\n      }\n      return text;\n    }\n  };\n}\n\n// lib/npm/browser.ts\nvar version = \"0.15.3\";\nvar build = (options) => ensureServiceIsRunning().build(options);\nvar serve = () => {\n  throw new Error(`The \"serve\" API only works in node`);\n};\nvar transform = (input, options) => ensureServiceIsRunning().transform(input, options);\nvar formatMessages = (messages, options) => ensureServiceIsRunning().formatMessages(messages, options);\nvar analyzeMetafile = (metafile, options) => ensureServiceIsRunning().analyzeMetafile(metafile, options);\nvar buildSync = () => {\n  throw new Error(`The \"buildSync\" API only works in node`);\n};\nvar transformSync = () => {\n  throw new Error(`The \"transformSync\" API only works in node`);\n};\nvar formatMessagesSync = () => {\n  throw new Error(`The \"formatMessagesSync\" API only works in node`);\n};\nvar analyzeMetafileSync = () => {\n  throw new Error(`The \"analyzeMetafileSync\" API only works in node`);\n};\nvar initializePromise;\nvar longLivedService;\nvar ensureServiceIsRunning = () => {\n  if (longLivedService)\n    return longLivedService;\n  if (initializePromise)\n    throw new Error('You need to wait for the promise returned from \"initialize\" to be resolved before calling this');\n  throw new Error('You need to call \"initialize\" before calling this');\n};\nvar initialize = (options) => {\n  options = validateInitializeOptions(options || {});\n  let wasmURL = options.wasmURL;\n  let wasmModule = options.wasmModule;\n  let useWorker = options.worker !== false;\n  if (!wasmURL && !wasmModule)\n    throw new Error('Must provide either the \"wasmURL\" option or the \"wasmModule\" option');\n  if (initializePromise)\n    throw new Error('Cannot call \"initialize\" more than once');\n  initializePromise = startRunningService(wasmURL || \"\", wasmModule, useWorker);\n  initializePromise.catch(() => {\n    initializePromise = void 0;\n  });\n  return initializePromise;\n};\nvar startRunningService = (wasmURL, wasmModule, useWorker) => __async(void 0, null, function* () {\n  let wasm;\n  if (wasmModule) {\n    wasm = wasmModule;\n  } else {\n    let res = yield fetch(wasmURL);\n    if (!res.ok)\n      throw new Error(`Failed to download ${JSON.stringify(wasmURL)}`);\n    wasm = yield res.arrayBuffer();\n  }\n  let worker;\n  if (useWorker) {\n    let blob = new Blob([`onmessage=${'((postMessage) => {\\n      // Copyright 2018 The Go Authors. All rights reserved.\\n      // Use of this source code is governed by a BSD-style\\n      // license that can be found in the LICENSE file.\\n      var __async = (__this, __arguments, generator) => {\\n        return new Promise((resolve, reject) => {\\n          var fulfilled = (value) => {\\n            try {\\n              step(generator.next(value));\\n            } catch (e) {\\n              reject(e);\\n            }\\n          };\\n          var rejected = (value) => {\\n            try {\\n              step(generator.throw(value));\\n            } catch (e) {\\n              reject(e);\\n            }\\n          };\\n          var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);\\n          step((generator = generator.apply(__this, __arguments)).next());\\n        });\\n      };\\n      let onmessage;\\n      let globalThis = {};\\n      for (let o = self; o; o = Object.getPrototypeOf(o))\\n        for (let k of Object.getOwnPropertyNames(o))\\n          if (!(k in globalThis))\\n            Object.defineProperty(globalThis, k, { get: () => self[k] });\\n      \"use strict\";\\n      (() => {\\n        const enosys = () => {\\n          const err = new Error(\"not implemented\");\\n          err.code = \"ENOSYS\";\\n          return err;\\n        };\\n        if (!globalThis.fs) {\\n          let outputBuf = \"\";\\n          globalThis.fs = {\\n            constants: { O_WRONLY: -1, O_RDWR: -1, O_CREAT: -1, O_TRUNC: -1, O_APPEND: -1, O_EXCL: -1 },\\n            writeSync(fd, buf) {\\n              outputBuf += decoder.decode(buf);\\n              const nl = outputBuf.lastIndexOf(\"\\\\n\");\\n              if (nl != -1) {\\n                console.log(outputBuf.substr(0, nl));\\n                outputBuf = outputBuf.substr(nl + 1);\\n              }\\n              return buf.length;\\n            },\\n            write(fd, buf, offset, length, position, callback) {\\n              if (offset !== 0 || length !== buf.length || position !== null) {\\n                callback(enosys());\\n                return;\\n              }\\n              const n = this.writeSync(fd, buf);\\n              callback(null, n);\\n            },\\n            chmod(path, mode, callback) {\\n              callback(enosys());\\n            },\\n            chown(path, uid, gid, callback) {\\n              callback(enosys());\\n            },\\n            close(fd, callback) {\\n              callback(enosys());\\n            },\\n            fchmod(fd, mode, callback) {\\n              callback(enosys());\\n            },\\n            fchown(fd, uid, gid, callback) {\\n              callback(enosys());\\n            },\\n            fstat(fd, callback) {\\n              callback(enosys());\\n            },\\n            fsync(fd, callback) {\\n              callback(null);\\n            },\\n            ftruncate(fd, length, callback) {\\n              callback(enosys());\\n            },\\n            lchown(path, uid, gid, callback) {\\n              callback(enosys());\\n            },\\n            link(path, link, callback) {\\n              callback(enosys());\\n            },\\n            lstat(path, callback) {\\n              callback(enosys());\\n            },\\n            mkdir(path, perm, callback) {\\n              callback(enosys());\\n            },\\n            open(path, flags, mode, callback) {\\n              callback(enosys());\\n            },\\n            read(fd, buffer, offset, length, position, callback) {\\n              callback(enosys());\\n            },\\n            readdir(path, callback) {\\n              callback(enosys());\\n            },\\n            readlink(path, callback) {\\n              callback(enosys());\\n            },\\n            rename(from, to, callback) {\\n              callback(enosys());\\n            },\\n            rmdir(path, callback) {\\n              callback(enosys());\\n            },\\n            stat(path, callback) {\\n              callback(enosys());\\n            },\\n            symlink(path, link, callback) {\\n              callback(enosys());\\n            },\\n            truncate(path, length, callback) {\\n              callback(enosys());\\n            },\\n            unlink(path, callback) {\\n              callback(enosys());\\n            },\\n            utimes(path, atime, mtime, callback) {\\n              callback(enosys());\\n            }\\n          };\\n        }\\n        if (!globalThis.process) {\\n          globalThis.process = {\\n            getuid() {\\n              return -1;\\n            },\\n            getgid() {\\n              return -1;\\n            },\\n            geteuid() {\\n              return -1;\\n            },\\n            getegid() {\\n              return -1;\\n            },\\n            getgroups() {\\n              throw enosys();\\n            },\\n            pid: -1,\\n            ppid: -1,\\n            umask() {\\n              throw enosys();\\n            },\\n            cwd() {\\n              throw enosys();\\n            },\\n            chdir() {\\n              throw enosys();\\n            }\\n          };\\n        }\\n        if (!globalThis.crypto) {\\n          throw new Error(\"globalThis.crypto is not available, polyfill required (crypto.getRandomValues only)\");\\n        }\\n        if (!globalThis.performance) {\\n          throw new Error(\"globalThis.performance is not available, polyfill required (performance.now only)\");\\n        }\\n        if (!globalThis.TextEncoder) {\\n          throw new Error(\"globalThis.TextEncoder is not available, polyfill required\");\\n        }\\n        if (!globalThis.TextDecoder) {\\n          throw new Error(\"globalThis.TextDecoder is not available, polyfill required\");\\n        }\\n        const encoder = new TextEncoder(\"utf-8\");\\n        const decoder = new TextDecoder(\"utf-8\");\\n        globalThis.Go = class {\\n          constructor() {\\n            this.argv = [\"js\"];\\n            this.env = {};\\n            this.exit = (code) => {\\n              if (code !== 0) {\\n                console.warn(\"exit code:\", code);\\n              }\\n            };\\n            this._exitPromise = new Promise((resolve) => {\\n              this._resolveExitPromise = resolve;\\n            });\\n            this._pendingEvent = null;\\n            this._scheduledTimeouts = /* @__PURE__ */ new Map();\\n            this._nextCallbackTimeoutID = 1;\\n            const setInt64 = (addr, v) => {\\n              this.mem.setUint32(addr + 0, v, true);\\n              this.mem.setUint32(addr + 4, Math.floor(v / 4294967296), true);\\n            };\\n            const getInt64 = (addr) => {\\n              const low = this.mem.getUint32(addr + 0, true);\\n              const high = this.mem.getInt32(addr + 4, true);\\n              return low + high * 4294967296;\\n            };\\n            const loadValue = (addr) => {\\n              const f = this.mem.getFloat64(addr, true);\\n              if (f === 0) {\\n                return void 0;\\n              }\\n              if (!isNaN(f)) {\\n                return f;\\n              }\\n              const id = this.mem.getUint32(addr, true);\\n              return this._values[id];\\n            };\\n            const storeValue = (addr, v) => {\\n              const nanHead = 2146959360;\\n              if (typeof v === \"number\" && v !== 0) {\\n                if (isNaN(v)) {\\n                  this.mem.setUint32(addr + 4, nanHead, true);\\n                  this.mem.setUint32(addr, 0, true);\\n                  return;\\n                }\\n                this.mem.setFloat64(addr, v, true);\\n                return;\\n              }\\n              if (v === void 0) {\\n                this.mem.setFloat64(addr, 0, true);\\n                return;\\n              }\\n              let id = this._ids.get(v);\\n              if (id === void 0) {\\n                id = this._idPool.pop();\\n                if (id === void 0) {\\n                  id = this._values.length;\\n                }\\n                this._values[id] = v;\\n                this._goRefCounts[id] = 0;\\n                this._ids.set(v, id);\\n              }\\n              this._goRefCounts[id]++;\\n              let typeFlag = 0;\\n              switch (typeof v) {\\n                case \"object\":\\n                  if (v !== null) {\\n                    typeFlag = 1;\\n                  }\\n                  break;\\n                case \"string\":\\n                  typeFlag = 2;\\n                  break;\\n                case \"symbol\":\\n                  typeFlag = 3;\\n                  break;\\n                case \"function\":\\n                  typeFlag = 4;\\n                  break;\\n              }\\n              this.mem.setUint32(addr + 4, nanHead | typeFlag, true);\\n              this.mem.setUint32(addr, id, true);\\n            };\\n            const loadSlice = (addr) => {\\n              const array = getInt64(addr + 0);\\n              const len = getInt64(addr + 8);\\n              return new Uint8Array(this._inst.exports.mem.buffer, array, len);\\n            };\\n            const loadSliceOfValues = (addr) => {\\n              const array = getInt64(addr + 0);\\n              const len = getInt64(addr + 8);\\n              const a = new Array(len);\\n              for (let i = 0; i < len; i++) {\\n                a[i] = loadValue(array + i * 8);\\n              }\\n              return a;\\n            };\\n            const loadString = (addr) => {\\n              const saddr = getInt64(addr + 0);\\n              const len = getInt64(addr + 8);\\n              return decoder.decode(new DataView(this._inst.exports.mem.buffer, saddr, len));\\n            };\\n            const timeOrigin = Date.now() - performance.now();\\n            this.importObject = {\\n              go: {\\n                \"runtime.wasmExit\": (sp) => {\\n                  sp >>>= 0;\\n                  const code = this.mem.getInt32(sp + 8, true);\\n                  this.exited = true;\\n                  delete this._inst;\\n                  delete this._values;\\n                  delete this._goRefCounts;\\n                  delete this._ids;\\n                  delete this._idPool;\\n                  this.exit(code);\\n                },\\n                \"runtime.wasmWrite\": (sp) => {\\n                  sp >>>= 0;\\n                  const fd = getInt64(sp + 8);\\n                  const p = getInt64(sp + 16);\\n                  const n = this.mem.getInt32(sp + 24, true);\\n                  globalThis.fs.writeSync(fd, new Uint8Array(this._inst.exports.mem.buffer, p, n));\\n                },\\n                \"runtime.resetMemoryDataView\": (sp) => {\\n                  sp >>>= 0;\\n                  this.mem = new DataView(this._inst.exports.mem.buffer);\\n                },\\n                \"runtime.nanotime1\": (sp) => {\\n                  sp >>>= 0;\\n                  setInt64(sp + 8, (timeOrigin + performance.now()) * 1e6);\\n                },\\n                \"runtime.walltime\": (sp) => {\\n                  sp >>>= 0;\\n                  const msec = new Date().getTime();\\n                  setInt64(sp + 8, msec / 1e3);\\n                  this.mem.setInt32(sp + 16, msec % 1e3 * 1e6, true);\\n                },\\n                \"runtime.scheduleTimeoutEvent\": (sp) => {\\n                  sp >>>= 0;\\n                  const id = this._nextCallbackTimeoutID;\\n                  this._nextCallbackTimeoutID++;\\n                  this._scheduledTimeouts.set(id, setTimeout(\\n                    () => {\\n                      this._resume();\\n                      while (this._scheduledTimeouts.has(id)) {\\n                        console.warn(\"scheduleTimeoutEvent: missed timeout event\");\\n                        this._resume();\\n                      }\\n                    },\\n                    getInt64(sp + 8) + 1\\n                  ));\\n                  this.mem.setInt32(sp + 16, id, true);\\n                },\\n                \"runtime.clearTimeoutEvent\": (sp) => {\\n                  sp >>>= 0;\\n                  const id = this.mem.getInt32(sp + 8, true);\\n                  clearTimeout(this._scheduledTimeouts.get(id));\\n                  this._scheduledTimeouts.delete(id);\\n                },\\n                \"runtime.getRandomData\": (sp) => {\\n                  sp >>>= 0;\\n                  crypto.getRandomValues(loadSlice(sp + 8));\\n                },\\n                \"syscall/js.finalizeRef\": (sp) => {\\n                  sp >>>= 0;\\n                  const id = this.mem.getUint32(sp + 8, true);\\n                  this._goRefCounts[id]--;\\n                  if (this._goRefCounts[id] === 0) {\\n                    const v = this._values[id];\\n                    this._values[id] = null;\\n                    this._ids.delete(v);\\n                    this._idPool.push(id);\\n                  }\\n                },\\n                \"syscall/js.stringVal\": (sp) => {\\n                  sp >>>= 0;\\n                  storeValue(sp + 24, loadString(sp + 8));\\n                },\\n                \"syscall/js.valueGet\": (sp) => {\\n                  sp >>>= 0;\\n                  const result = Reflect.get(loadValue(sp + 8), loadString(sp + 16));\\n                  sp = this._inst.exports.getsp() >>> 0;\\n                  storeValue(sp + 32, result);\\n                },\\n                \"syscall/js.valueSet\": (sp) => {\\n                  sp >>>= 0;\\n                  Reflect.set(loadValue(sp + 8), loadString(sp + 16), loadValue(sp + 32));\\n                },\\n                \"syscall/js.valueDelete\": (sp) => {\\n                  sp >>>= 0;\\n                  Reflect.deleteProperty(loadValue(sp + 8), loadString(sp + 16));\\n                },\\n                \"syscall/js.valueIndex\": (sp) => {\\n                  sp >>>= 0;\\n                  storeValue(sp + 24, Reflect.get(loadValue(sp + 8), getInt64(sp + 16)));\\n                },\\n                \"syscall/js.valueSetIndex\": (sp) => {\\n                  sp >>>= 0;\\n                  Reflect.set(loadValue(sp + 8), getInt64(sp + 16), loadValue(sp + 24));\\n                },\\n                \"syscall/js.valueCall\": (sp) => {\\n                  sp >>>= 0;\\n                  try {\\n                    const v = loadValue(sp + 8);\\n                    const m = Reflect.get(v, loadString(sp + 16));\\n                    const args = loadSliceOfValues(sp + 32);\\n                    const result = Reflect.apply(m, v, args);\\n                    sp = this._inst.exports.getsp() >>> 0;\\n                    storeValue(sp + 56, result);\\n                    this.mem.setUint8(sp + 64, 1);\\n                  } catch (err) {\\n                    sp = this._inst.exports.getsp() >>> 0;\\n                    storeValue(sp + 56, err);\\n                    this.mem.setUint8(sp + 64, 0);\\n                  }\\n                },\\n                \"syscall/js.valueInvoke\": (sp) => {\\n                  sp >>>= 0;\\n                  try {\\n                    const v = loadValue(sp + 8);\\n                    const args = loadSliceOfValues(sp + 16);\\n                    const result = Reflect.apply(v, void 0, args);\\n                    sp = this._inst.exports.getsp() >>> 0;\\n                    storeValue(sp + 40, result);\\n                    this.mem.setUint8(sp + 48, 1);\\n                  } catch (err) {\\n                    sp = this._inst.exports.getsp() >>> 0;\\n                    storeValue(sp + 40, err);\\n                    this.mem.setUint8(sp + 48, 0);\\n                  }\\n                },\\n                \"syscall/js.valueNew\": (sp) => {\\n                  sp >>>= 0;\\n                  try {\\n                    const v = loadValue(sp + 8);\\n                    const args = loadSliceOfValues(sp + 16);\\n                    const result = Reflect.construct(v, args);\\n                    sp = this._inst.exports.getsp() >>> 0;\\n                    storeValue(sp + 40, result);\\n                    this.mem.setUint8(sp + 48, 1);\\n                  } catch (err) {\\n                    sp = this._inst.exports.getsp() >>> 0;\\n                    storeValue(sp + 40, err);\\n                    this.mem.setUint8(sp + 48, 0);\\n                  }\\n                },\\n                \"syscall/js.valueLength\": (sp) => {\\n                  sp >>>= 0;\\n                  setInt64(sp + 16, parseInt(loadValue(sp + 8).length));\\n                },\\n                \"syscall/js.valuePrepareString\": (sp) => {\\n                  sp >>>= 0;\\n                  const str = encoder.encode(String(loadValue(sp + 8)));\\n                  storeValue(sp + 16, str);\\n                  setInt64(sp + 24, str.length);\\n                },\\n                \"syscall/js.valueLoadString\": (sp) => {\\n                  sp >>>= 0;\\n                  const str = loadValue(sp + 8);\\n                  loadSlice(sp + 16).set(str);\\n                },\\n                \"syscall/js.valueInstanceOf\": (sp) => {\\n                  sp >>>= 0;\\n                  this.mem.setUint8(sp + 24, loadValue(sp + 8) instanceof loadValue(sp + 16) ? 1 : 0);\\n                },\\n                \"syscall/js.copyBytesToGo\": (sp) => {\\n                  sp >>>= 0;\\n                  const dst = loadSlice(sp + 8);\\n                  const src = loadValue(sp + 32);\\n                  if (!(src instanceof Uint8Array || src instanceof Uint8ClampedArray)) {\\n                    this.mem.setUint8(sp + 48, 0);\\n                    return;\\n                  }\\n                  const toCopy = src.subarray(0, dst.length);\\n                  dst.set(toCopy);\\n                  setInt64(sp + 40, toCopy.length);\\n                  this.mem.setUint8(sp + 48, 1);\\n                },\\n                \"syscall/js.copyBytesToJS\": (sp) => {\\n                  sp >>>= 0;\\n                  const dst = loadValue(sp + 8);\\n                  const src = loadSlice(sp + 16);\\n                  if (!(dst instanceof Uint8Array || dst instanceof Uint8ClampedArray)) {\\n                    this.mem.setUint8(sp + 48, 0);\\n                    return;\\n                  }\\n                  const toCopy = src.subarray(0, dst.length);\\n                  dst.set(toCopy);\\n                  setInt64(sp + 40, toCopy.length);\\n                  this.mem.setUint8(sp + 48, 1);\\n                },\\n                \"debug\": (value) => {\\n                  console.log(value);\\n                }\\n              }\\n            };\\n          }\\n          run(instance) {\\n            return __async(this, null, function* () {\\n              if (!(instance instanceof WebAssembly.Instance)) {\\n                throw new Error(\"Go.run: WebAssembly.Instance expected\");\\n              }\\n              this._inst = instance;\\n              this.mem = new DataView(this._inst.exports.mem.buffer);\\n              this._values = [\\n                NaN,\\n                0,\\n                null,\\n                true,\\n                false,\\n                globalThis,\\n                this\\n              ];\\n              this._goRefCounts = new Array(this._values.length).fill(Infinity);\\n              this._ids = /* @__PURE__ */ new Map([\\n                [0, 1],\\n                [null, 2],\\n                [true, 3],\\n                [false, 4],\\n                [globalThis, 5],\\n                [this, 6]\\n              ]);\\n              this._idPool = [];\\n              this.exited = false;\\n              let offset = 4096;\\n              const strPtr = (str) => {\\n                const ptr = offset;\\n                const bytes = encoder.encode(str + \"\\\\0\");\\n                new Uint8Array(this.mem.buffer, offset, bytes.length).set(bytes);\\n                offset += bytes.length;\\n                if (offset % 8 !== 0) {\\n                  offset += 8 - offset % 8;\\n                }\\n                return ptr;\\n              };\\n              const argc = this.argv.length;\\n              const argvPtrs = [];\\n              this.argv.forEach((arg) => {\\n                argvPtrs.push(strPtr(arg));\\n              });\\n              argvPtrs.push(0);\\n              const keys = Object.keys(this.env).sort();\\n              keys.forEach((key) => {\\n                argvPtrs.push(strPtr(`${key}=${this.env[key]}`));\\n              });\\n              argvPtrs.push(0);\\n              const argv = offset;\\n              argvPtrs.forEach((ptr) => {\\n                this.mem.setUint32(offset, ptr, true);\\n                this.mem.setUint32(offset + 4, 0, true);\\n                offset += 8;\\n              });\\n              const wasmMinDataAddr = 4096 + 8192;\\n              if (offset >= wasmMinDataAddr) {\\n                throw new Error(\"total length of command line and environment variables exceeds limit\");\\n              }\\n              this._inst.exports.run(argc, argv);\\n              if (this.exited) {\\n                this._resolveExitPromise();\\n              }\\n              yield this._exitPromise;\\n            });\\n          }\\n          _resume() {\\n            if (this.exited) {\\n              throw new Error(\"Go program has already exited\");\\n            }\\n            this._inst.exports.resume();\\n            if (this.exited) {\\n              this._resolveExitPromise();\\n            }\\n          }\\n          _makeFuncWrapper(id) {\\n            const go = this;\\n            return function() {\\n              const event = { id, this: this, args: arguments };\\n              go._pendingEvent = event;\\n              go._resume();\\n              return event.result;\\n            };\\n          }\\n        };\\n      })();\\n      onmessage = ({ data: wasm }) => {\\n        let decoder = new TextDecoder();\\n        let fs = globalThis.fs;\\n        let stderr = \"\";\\n        fs.writeSync = (fd, buffer) => {\\n          if (fd === 1) {\\n            postMessage(buffer);\\n          } else if (fd === 2) {\\n            stderr += decoder.decode(buffer);\\n            let parts = stderr.split(\"\\\\n\");\\n            if (parts.length > 1)\\n              console.log(parts.slice(0, -1).join(\"\\\\n\"));\\n            stderr = parts[parts.length - 1];\\n          } else {\\n            throw new Error(\"Bad write\");\\n          }\\n          return buffer.length;\\n        };\\n        let stdin = [];\\n        let resumeStdin;\\n        let stdinPos = 0;\\n        onmessage = ({ data }) => {\\n          if (data.length > 0) {\\n            stdin.push(data);\\n            if (resumeStdin)\\n              resumeStdin();\\n          }\\n        };\\n        fs.read = (fd, buffer, offset, length, position, callback) => {\\n          if (fd !== 0 || offset !== 0 || length !== buffer.length || position !== null) {\\n            throw new Error(\"Bad read\");\\n          }\\n          if (stdin.length === 0) {\\n            resumeStdin = () => fs.read(fd, buffer, offset, length, position, callback);\\n            return;\\n          }\\n          let first = stdin[0];\\n          let count = Math.max(0, Math.min(length, first.length - stdinPos));\\n          buffer.set(first.subarray(stdinPos, stdinPos + count), offset);\\n          stdinPos += count;\\n          if (stdinPos === first.length) {\\n            stdin.shift();\\n            stdinPos = 0;\\n          }\\n          callback(null, count);\\n        };\\n        let go = new globalThis.Go();\\n        go.argv = [\"\", `--service=${\"0.15.3\"}`];\\n        if (wasm instanceof WebAssembly.Module) {\\n          WebAssembly.instantiate(wasm, go.importObject).then((instance) => go.run(instance));\\n        } else {\\n          WebAssembly.instantiate(wasm, go.importObject).then(({ instance }) => go.run(instance));\\n        }\\n      };\\n      return (m) => onmessage(m);\\n    })'}(postMessage)`], { type: \"text/javascript\" });\n    worker = new Worker(URL.createObjectURL(blob));\n  } else {\n    let onmessage = ((postMessage) => {\n      // Copyright 2018 The Go Authors. All rights reserved.\n      // Use of this source code is governed by a BSD-style\n      // license that can be found in the LICENSE file.\n      var __async = (__this, __arguments, generator) => {\n        return new Promise((resolve, reject) => {\n          var fulfilled = (value) => {\n            try {\n              step(generator.next(value));\n            } catch (e) {\n              reject(e);\n            }\n          };\n          var rejected = (value) => {\n            try {\n              step(generator.throw(value));\n            } catch (e) {\n              reject(e);\n            }\n          };\n          var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);\n          step((generator = generator.apply(__this, __arguments)).next());\n        });\n      };\n      let onmessage;\n      let globalThis = {};\n      for (let o = self; o; o = Object.getPrototypeOf(o))\n        for (let k of Object.getOwnPropertyNames(o))\n          if (!(k in globalThis))\n            Object.defineProperty(globalThis, k, { get: () => self[k] });\n      \"use strict\";\n      (() => {\n        const enosys = () => {\n          const err = new Error(\"not implemented\");\n          err.code = \"ENOSYS\";\n          return err;\n        };\n        if (!globalThis.fs) {\n          let outputBuf = \"\";\n          globalThis.fs = {\n            constants: { O_WRONLY: -1, O_RDWR: -1, O_CREAT: -1, O_TRUNC: -1, O_APPEND: -1, O_EXCL: -1 },\n            writeSync(fd, buf) {\n              outputBuf += decoder.decode(buf);\n              const nl = outputBuf.lastIndexOf(\"\\n\");\n              if (nl != -1) {\n                console.log(outputBuf.substr(0, nl));\n                outputBuf = outputBuf.substr(nl + 1);\n              }\n              return buf.length;\n            },\n            write(fd, buf, offset, length, position, callback) {\n              if (offset !== 0 || length !== buf.length || position !== null) {\n                callback(enosys());\n                return;\n              }\n              const n = this.writeSync(fd, buf);\n              callback(null, n);\n            },\n            chmod(path, mode, callback) {\n              callback(enosys());\n            },\n            chown(path, uid, gid, callback) {\n              callback(enosys());\n            },\n            close(fd, callback) {\n              callback(enosys());\n            },\n            fchmod(fd, mode, callback) {\n              callback(enosys());\n            },\n            fchown(fd, uid, gid, callback) {\n              callback(enosys());\n            },\n            fstat(fd, callback) {\n              callback(enosys());\n            },\n            fsync(fd, callback) {\n              callback(null);\n            },\n            ftruncate(fd, length, callback) {\n              callback(enosys());\n            },\n            lchown(path, uid, gid, callback) {\n              callback(enosys());\n            },\n            link(path, link, callback) {\n              callback(enosys());\n            },\n            lstat(path, callback) {\n              callback(enosys());\n            },\n            mkdir(path, perm, callback) {\n              callback(enosys());\n            },\n            open(path, flags, mode, callback) {\n              callback(enosys());\n            },\n            read(fd, buffer, offset, length, position, callback) {\n              callback(enosys());\n            },\n            readdir(path, callback) {\n              callback(enosys());\n            },\n            readlink(path, callback) {\n              callback(enosys());\n            },\n            rename(from, to, callback) {\n              callback(enosys());\n            },\n            rmdir(path, callback) {\n              callback(enosys());\n            },\n            stat(path, callback) {\n              callback(enosys());\n            },\n            symlink(path, link, callback) {\n              callback(enosys());\n            },\n            truncate(path, length, callback) {\n              callback(enosys());\n            },\n            unlink(path, callback) {\n              callback(enosys());\n            },\n            utimes(path, atime, mtime, callback) {\n              callback(enosys());\n            }\n          };\n        }\n        if (!globalThis.process) {\n          globalThis.process = {\n            getuid() {\n              return -1;\n            },\n            getgid() {\n              return -1;\n            },\n            geteuid() {\n              return -1;\n            },\n            getegid() {\n              return -1;\n            },\n            getgroups() {\n              throw enosys();\n            },\n            pid: -1,\n            ppid: -1,\n            umask() {\n              throw enosys();\n            },\n            cwd() {\n              throw enosys();\n            },\n            chdir() {\n              throw enosys();\n            }\n          };\n        }\n        if (!globalThis.crypto) {\n          throw new Error(\"globalThis.crypto is not available, polyfill required (crypto.getRandomValues only)\");\n        }\n        if (!globalThis.performance) {\n          throw new Error(\"globalThis.performance is not available, polyfill required (performance.now only)\");\n        }\n        if (!globalThis.TextEncoder) {\n          throw new Error(\"globalThis.TextEncoder is not available, polyfill required\");\n        }\n        if (!globalThis.TextDecoder) {\n          throw new Error(\"globalThis.TextDecoder is not available, polyfill required\");\n        }\n        const encoder = new TextEncoder(\"utf-8\");\n        const decoder = new TextDecoder(\"utf-8\");\n        globalThis.Go = class {\n          constructor() {\n            this.argv = [\"js\"];\n            this.env = {};\n            this.exit = (code) => {\n              if (code !== 0) {\n                console.warn(\"exit code:\", code);\n              }\n            };\n            this._exitPromise = new Promise((resolve) => {\n              this._resolveExitPromise = resolve;\n            });\n            this._pendingEvent = null;\n            this._scheduledTimeouts = /* @__PURE__ */ new Map();\n            this._nextCallbackTimeoutID = 1;\n            const setInt64 = (addr, v) => {\n              this.mem.setUint32(addr + 0, v, true);\n              this.mem.setUint32(addr + 4, Math.floor(v / 4294967296), true);\n            };\n            const getInt64 = (addr) => {\n              const low = this.mem.getUint32(addr + 0, true);\n              const high = this.mem.getInt32(addr + 4, true);\n              return low + high * 4294967296;\n            };\n            const loadValue = (addr) => {\n              const f = this.mem.getFloat64(addr, true);\n              if (f === 0) {\n                return void 0;\n              }\n              if (!isNaN(f)) {\n                return f;\n              }\n              const id = this.mem.getUint32(addr, true);\n              return this._values[id];\n            };\n            const storeValue = (addr, v) => {\n              const nanHead = 2146959360;\n              if (typeof v === \"number\" && v !== 0) {\n                if (isNaN(v)) {\n                  this.mem.setUint32(addr + 4, nanHead, true);\n                  this.mem.setUint32(addr, 0, true);\n                  return;\n                }\n                this.mem.setFloat64(addr, v, true);\n                return;\n              }\n              if (v === void 0) {\n                this.mem.setFloat64(addr, 0, true);\n                return;\n              }\n              let id = this._ids.get(v);\n              if (id === void 0) {\n                id = this._idPool.pop();\n                if (id === void 0) {\n                  id = this._values.length;\n                }\n                this._values[id] = v;\n                this._goRefCounts[id] = 0;\n                this._ids.set(v, id);\n              }\n              this._goRefCounts[id]++;\n              let typeFlag = 0;\n              switch (typeof v) {\n                case \"object\":\n                  if (v !== null) {\n                    typeFlag = 1;\n                  }\n                  break;\n                case \"string\":\n                  typeFlag = 2;\n                  break;\n                case \"symbol\":\n                  typeFlag = 3;\n                  break;\n                case \"function\":\n                  typeFlag = 4;\n                  break;\n              }\n              this.mem.setUint32(addr + 4, nanHead | typeFlag, true);\n              this.mem.setUint32(addr, id, true);\n            };\n            const loadSlice = (addr) => {\n              const array = getInt64(addr + 0);\n              const len = getInt64(addr + 8);\n              return new Uint8Array(this._inst.exports.mem.buffer, array, len);\n            };\n            const loadSliceOfValues = (addr) => {\n              const array = getInt64(addr + 0);\n              const len = getInt64(addr + 8);\n              const a = new Array(len);\n              for (let i = 0; i < len; i++) {\n                a[i] = loadValue(array + i * 8);\n              }\n              return a;\n            };\n            const loadString = (addr) => {\n              const saddr = getInt64(addr + 0);\n              const len = getInt64(addr + 8);\n              return decoder.decode(new DataView(this._inst.exports.mem.buffer, saddr, len));\n            };\n            const timeOrigin = Date.now() - performance.now();\n            this.importObject = {\n              go: {\n                \"runtime.wasmExit\": (sp) => {\n                  sp >>>= 0;\n                  const code = this.mem.getInt32(sp + 8, true);\n                  this.exited = true;\n                  delete this._inst;\n                  delete this._values;\n                  delete this._goRefCounts;\n                  delete this._ids;\n                  delete this._idPool;\n                  this.exit(code);\n                },\n                \"runtime.wasmWrite\": (sp) => {\n                  sp >>>= 0;\n                  const fd = getInt64(sp + 8);\n                  const p = getInt64(sp + 16);\n                  const n = this.mem.getInt32(sp + 24, true);\n                  globalThis.fs.writeSync(fd, new Uint8Array(this._inst.exports.mem.buffer, p, n));\n                },\n                \"runtime.resetMemoryDataView\": (sp) => {\n                  sp >>>= 0;\n                  this.mem = new DataView(this._inst.exports.mem.buffer);\n                },\n                \"runtime.nanotime1\": (sp) => {\n                  sp >>>= 0;\n                  setInt64(sp + 8, (timeOrigin + performance.now()) * 1e6);\n                },\n                \"runtime.walltime\": (sp) => {\n                  sp >>>= 0;\n                  const msec = new Date().getTime();\n                  setInt64(sp + 8, msec / 1e3);\n                  this.mem.setInt32(sp + 16, msec % 1e3 * 1e6, true);\n                },\n                \"runtime.scheduleTimeoutEvent\": (sp) => {\n                  sp >>>= 0;\n                  const id = this._nextCallbackTimeoutID;\n                  this._nextCallbackTimeoutID++;\n                  this._scheduledTimeouts.set(id, setTimeout(\n                    () => {\n                      this._resume();\n                      while (this._scheduledTimeouts.has(id)) {\n                        console.warn(\"scheduleTimeoutEvent: missed timeout event\");\n                        this._resume();\n                      }\n                    },\n                    getInt64(sp + 8) + 1\n                  ));\n                  this.mem.setInt32(sp + 16, id, true);\n                },\n                \"runtime.clearTimeoutEvent\": (sp) => {\n                  sp >>>= 0;\n                  const id = this.mem.getInt32(sp + 8, true);\n                  clearTimeout(this._scheduledTimeouts.get(id));\n                  this._scheduledTimeouts.delete(id);\n                },\n                \"runtime.getRandomData\": (sp) => {\n                  sp >>>= 0;\n                  crypto.getRandomValues(loadSlice(sp + 8));\n                },\n                \"syscall/js.finalizeRef\": (sp) => {\n                  sp >>>= 0;\n                  const id = this.mem.getUint32(sp + 8, true);\n                  this._goRefCounts[id]--;\n                  if (this._goRefCounts[id] === 0) {\n                    const v = this._values[id];\n                    this._values[id] = null;\n                    this._ids.delete(v);\n                    this._idPool.push(id);\n                  }\n                },\n                \"syscall/js.stringVal\": (sp) => {\n                  sp >>>= 0;\n                  storeValue(sp + 24, loadString(sp + 8));\n                },\n                \"syscall/js.valueGet\": (sp) => {\n                  sp >>>= 0;\n                  const result = Reflect.get(loadValue(sp + 8), loadString(sp + 16));\n                  sp = this._inst.exports.getsp() >>> 0;\n                  storeValue(sp + 32, result);\n                },\n                \"syscall/js.valueSet\": (sp) => {\n                  sp >>>= 0;\n                  Reflect.set(loadValue(sp + 8), loadString(sp + 16), loadValue(sp + 32));\n                },\n                \"syscall/js.valueDelete\": (sp) => {\n                  sp >>>= 0;\n                  Reflect.deleteProperty(loadValue(sp + 8), loadString(sp + 16));\n                },\n                \"syscall/js.valueIndex\": (sp) => {\n                  sp >>>= 0;\n                  storeValue(sp + 24, Reflect.get(loadValue(sp + 8), getInt64(sp + 16)));\n                },\n                \"syscall/js.valueSetIndex\": (sp) => {\n                  sp >>>= 0;\n                  Reflect.set(loadValue(sp + 8), getInt64(sp + 16), loadValue(sp + 24));\n                },\n                \"syscall/js.valueCall\": (sp) => {\n                  sp >>>= 0;\n                  try {\n                    const v = loadValue(sp + 8);\n                    const m = Reflect.get(v, loadString(sp + 16));\n                    const args = loadSliceOfValues(sp + 32);\n                    const result = Reflect.apply(m, v, args);\n                    sp = this._inst.exports.getsp() >>> 0;\n                    storeValue(sp + 56, result);\n                    this.mem.setUint8(sp + 64, 1);\n                  } catch (err) {\n                    sp = this._inst.exports.getsp() >>> 0;\n                    storeValue(sp + 56, err);\n                    this.mem.setUint8(sp + 64, 0);\n                  }\n                },\n                \"syscall/js.valueInvoke\": (sp) => {\n                  sp >>>= 0;\n                  try {\n                    const v = loadValue(sp + 8);\n                    const args = loadSliceOfValues(sp + 16);\n                    const result = Reflect.apply(v, void 0, args);\n                    sp = this._inst.exports.getsp() >>> 0;\n                    storeValue(sp + 40, result);\n                    this.mem.setUint8(sp + 48, 1);\n                  } catch (err) {\n                    sp = this._inst.exports.getsp() >>> 0;\n                    storeValue(sp + 40, err);\n                    this.mem.setUint8(sp + 48, 0);\n                  }\n                },\n                \"syscall/js.valueNew\": (sp) => {\n                  sp >>>= 0;\n                  try {\n                    const v = loadValue(sp + 8);\n                    const args = loadSliceOfValues(sp + 16);\n                    const result = Reflect.construct(v, args);\n                    sp = this._inst.exports.getsp() >>> 0;\n                    storeValue(sp + 40, result);\n                    this.mem.setUint8(sp + 48, 1);\n                  } catch (err) {\n                    sp = this._inst.exports.getsp() >>> 0;\n                    storeValue(sp + 40, err);\n                    this.mem.setUint8(sp + 48, 0);\n                  }\n                },\n                \"syscall/js.valueLength\": (sp) => {\n                  sp >>>= 0;\n                  setInt64(sp + 16, parseInt(loadValue(sp + 8).length));\n                },\n                \"syscall/js.valuePrepareString\": (sp) => {\n                  sp >>>= 0;\n                  const str = encoder.encode(String(loadValue(sp + 8)));\n                  storeValue(sp + 16, str);\n                  setInt64(sp + 24, str.length);\n                },\n                \"syscall/js.valueLoadString\": (sp) => {\n                  sp >>>= 0;\n                  const str = loadValue(sp + 8);\n                  loadSlice(sp + 16).set(str);\n                },\n                \"syscall/js.valueInstanceOf\": (sp) => {\n                  sp >>>= 0;\n                  this.mem.setUint8(sp + 24, loadValue(sp + 8) instanceof loadValue(sp + 16) ? 1 : 0);\n                },\n                \"syscall/js.copyBytesToGo\": (sp) => {\n                  sp >>>= 0;\n                  const dst = loadSlice(sp + 8);\n                  const src = loadValue(sp + 32);\n                  if (!(src instanceof Uint8Array || src instanceof Uint8ClampedArray)) {\n                    this.mem.setUint8(sp + 48, 0);\n                    return;\n                  }\n                  const toCopy = src.subarray(0, dst.length);\n                  dst.set(toCopy);\n                  setInt64(sp + 40, toCopy.length);\n                  this.mem.setUint8(sp + 48, 1);\n                },\n                \"syscall/js.copyBytesToJS\": (sp) => {\n                  sp >>>= 0;\n                  const dst = loadValue(sp + 8);\n                  const src = loadSlice(sp + 16);\n                  if (!(dst instanceof Uint8Array || dst instanceof Uint8ClampedArray)) {\n                    this.mem.setUint8(sp + 48, 0);\n                    return;\n                  }\n                  const toCopy = src.subarray(0, dst.length);\n                  dst.set(toCopy);\n                  setInt64(sp + 40, toCopy.length);\n                  this.mem.setUint8(sp + 48, 1);\n                },\n                \"debug\": (value) => {\n                  console.log(value);\n                }\n              }\n            };\n          }\n          run(instance) {\n            return __async(this, null, function* () {\n              if (!(instance instanceof WebAssembly.Instance)) {\n                throw new Error(\"Go.run: WebAssembly.Instance expected\");\n              }\n              this._inst = instance;\n              this.mem = new DataView(this._inst.exports.mem.buffer);\n              this._values = [\n                NaN,\n                0,\n                null,\n                true,\n                false,\n                globalThis,\n                this\n              ];\n              this._goRefCounts = new Array(this._values.length).fill(Infinity);\n              this._ids = /* @__PURE__ */ new Map([\n                [0, 1],\n                [null, 2],\n                [true, 3],\n                [false, 4],\n                [globalThis, 5],\n                [this, 6]\n              ]);\n              this._idPool = [];\n              this.exited = false;\n              let offset = 4096;\n              const strPtr = (str) => {\n                const ptr = offset;\n                const bytes = encoder.encode(str + \"\\0\");\n                new Uint8Array(this.mem.buffer, offset, bytes.length).set(bytes);\n                offset += bytes.length;\n                if (offset % 8 !== 0) {\n                  offset += 8 - offset % 8;\n                }\n                return ptr;\n              };\n              const argc = this.argv.length;\n              const argvPtrs = [];\n              this.argv.forEach((arg) => {\n                argvPtrs.push(strPtr(arg));\n              });\n              argvPtrs.push(0);\n              const keys = Object.keys(this.env).sort();\n              keys.forEach((key) => {\n                argvPtrs.push(strPtr(`${key}=${this.env[key]}`));\n              });\n              argvPtrs.push(0);\n              const argv = offset;\n              argvPtrs.forEach((ptr) => {\n                this.mem.setUint32(offset, ptr, true);\n                this.mem.setUint32(offset + 4, 0, true);\n                offset += 8;\n              });\n              const wasmMinDataAddr = 4096 + 8192;\n              if (offset >= wasmMinDataAddr) {\n                throw new Error(\"total length of command line and environment variables exceeds limit\");\n              }\n              this._inst.exports.run(argc, argv);\n              if (this.exited) {\n                this._resolveExitPromise();\n              }\n              yield this._exitPromise;\n            });\n          }\n          _resume() {\n            if (this.exited) {\n              throw new Error(\"Go program has already exited\");\n            }\n            this._inst.exports.resume();\n            if (this.exited) {\n              this._resolveExitPromise();\n            }\n          }\n          _makeFuncWrapper(id) {\n            const go = this;\n            return function() {\n              const event = { id, this: this, args: arguments };\n              go._pendingEvent = event;\n              go._resume();\n              return event.result;\n            };\n          }\n        };\n      })();\n      onmessage = ({ data: wasm }) => {\n        let decoder = new TextDecoder();\n        let fs = globalThis.fs;\n        let stderr = \"\";\n        fs.writeSync = (fd, buffer) => {\n          if (fd === 1) {\n            postMessage(buffer);\n          } else if (fd === 2) {\n            stderr += decoder.decode(buffer);\n            let parts = stderr.split(\"\\n\");\n            if (parts.length > 1)\n              console.log(parts.slice(0, -1).join(\"\\n\"));\n            stderr = parts[parts.length - 1];\n          } else {\n            throw new Error(\"Bad write\");\n          }\n          return buffer.length;\n        };\n        let stdin = [];\n        let resumeStdin;\n        let stdinPos = 0;\n        onmessage = ({ data }) => {\n          if (data.length > 0) {\n            stdin.push(data);\n            if (resumeStdin)\n              resumeStdin();\n          }\n        };\n        fs.read = (fd, buffer, offset, length, position, callback) => {\n          if (fd !== 0 || offset !== 0 || length !== buffer.length || position !== null) {\n            throw new Error(\"Bad read\");\n          }\n          if (stdin.length === 0) {\n            resumeStdin = () => fs.read(fd, buffer, offset, length, position, callback);\n            return;\n          }\n          let first = stdin[0];\n          let count = Math.max(0, Math.min(length, first.length - stdinPos));\n          buffer.set(first.subarray(stdinPos, stdinPos + count), offset);\n          stdinPos += count;\n          if (stdinPos === first.length) {\n            stdin.shift();\n            stdinPos = 0;\n          }\n          callback(null, count);\n        };\n        let go = new globalThis.Go();\n        go.argv = [\"\", `--service=${\"0.15.3\"}`];\n        if (wasm instanceof WebAssembly.Module) {\n          WebAssembly.instantiate(wasm, go.importObject).then((instance) => go.run(instance));\n        } else {\n          WebAssembly.instantiate(wasm, go.importObject).then(({ instance }) => go.run(instance));\n        }\n      };\n      return (m) => onmessage(m);\n    })((data) => worker.onmessage({ data }));\n    worker = {\n      onmessage: null,\n      postMessage: (data) => setTimeout(() => onmessage({ data })),\n      terminate() {\n      }\n    };\n  }\n  worker.postMessage(wasm);\n  worker.onmessage = ({ data }) => readFromStdout(data);\n  let { readFromStdout, service } = createChannel({\n    writeToStdin(bytes) {\n      worker.postMessage(bytes);\n    },\n    isSync: false,\n    isWriteUnavailable: true,\n    esbuild: browser_exports\n  });\n  longLivedService = {\n    build: (options) => new Promise((resolve, reject) => service.buildOrServe({\n      callName: \"build\",\n      refs: null,\n      serveOptions: null,\n      options,\n      isTTY: false,\n      defaultWD: \"/\",\n      callback: (err, res) => err ? reject(err) : resolve(res)\n    })),\n    transform: (input, options) => new Promise((resolve, reject) => service.transform({\n      callName: \"transform\",\n      refs: null,\n      input,\n      options: options || {},\n      isTTY: false,\n      fs: {\n        readFile(_, callback) {\n          callback(new Error(\"Internal error\"), null);\n        },\n        writeFile(_, callback) {\n          callback(null);\n        }\n      },\n      callback: (err, res) => err ? reject(err) : resolve(res)\n    })),\n    formatMessages: (messages, options) => new Promise((resolve, reject) => service.formatMessages({\n      callName: \"formatMessages\",\n      refs: null,\n      messages,\n      options,\n      callback: (err, res) => err ? reject(err) : resolve(res)\n    })),\n    analyzeMetafile: (metafile, options) => new Promise((resolve, reject) => service.analyzeMetafile({\n      callName: \"analyzeMetafile\",\n      refs: null,\n      metafile: typeof metafile === \"string\" ? metafile : JSON.stringify(metafile),\n      options,\n      callback: (err, res) => err ? reject(err) : resolve(res)\n    }))\n  };\n});\nvar browser_default = browser_exports;\n})(typeof module===\"object\"?module:{set exports(x){(typeof self!==\"undefined\"?self:this).esbuild=x}});\n"],"names":["module","__defProp","__defProps","__getOwnPropDesc","__getOwnPropDescs","__getOwnPropNames","__getOwnPropSymbols","__hasOwnProp","__propIsEnum","__defNormalProp","obj","key","value","__spreadValues","a","b","prop","__spreadProps","__export","target","all","name","__copyProps","to","from","except","desc","__toCommonJS","mod","__async","__this","__arguments","generator","resolve","reject","fulfilled","step","e","rejected","x","browser_exports","analyzeMetafile","analyzeMetafileSync","build","buildSync","browser_default","formatMessages","formatMessagesSync","initialize","serve","transform","transformSync","version","encodePacket","packet","visit","bb","encodeUTF8","item","keys","ByteBuffer","writeUInt32LE","decodePacket","bytes","decodeUTF8","count","value2","id","isRequest","buf","delta","clone","offset","readUInt32LE","length","ptr","encoder","decoder","text","buffer","byteOffset","byteLength","validateTarget","canBeAnything","mustBeBoolean","mustBeBooleanOrObject","mustBeString","mustBeRegExp","mustBeInteger","mustBeFunction","mustBeArray","mustBeObject","mustBeWebAssemblyModule","mustBeArrayOrRecord","mustBeObjectOrNull","mustBeStringOrBoolean","mustBeStringOrObject","mustBeStringOrArray","mustBeStringOrUint8Array","getFlag","object","mustBeFn","mustBe","checkForInvalidFlags","where","validateInitializeOptions","options","wasmURL","wasmModule","worker","validateMangleCache","mangleCache","validated","pushLogFlags","flags","isTTY","logLevelDefault","color","logLevel","logLimit","pushCommonFlags","legalComments","sourceRoot","sourcesContent","format","globalName","mangleProps","reserveProps","mangleQuoted","minify","minifySyntax","minifyWhitespace","minifyIdentifiers","drop","charset","treeShaking","ignoreAnnotations","jsx","jsxFactory","jsxFragment","jsxImportSource","jsxDev","define","logOverride","supported","pure","keepNames","platform","what","fn","flagsForBuildOptions","callName","writeDefault","_a","entries","stdinContents","stdinResolveDir","watchMode","sourcemap","bundle","watch","splitting","preserveSymlinks","metafile","outfile","outdir","outbase","tsconfig","resolveExtensions","nodePathsInput","mainFields","conditions","external","loader","outExtension","publicPath","entryNames","chunkNames","assetNames","inject","banner","footer","entryPoints","absWorkingDir","stdin","write","allowOverwrite","incremental","watchKeys","onRebuild","values","type","path","ext","entryPoint","stdinKeys","contents","resolveDir","sourcefile","loader2","nodePaths","flagsForTransformOptions","tsconfigRaw","createChannel","streamIn","responseCallbacks","pluginCallbacks","watchCallbacks","serveCallbacks","closeData","nextRequestID","nextBuildKey","stdout","stdoutUsed","readFromStdout","chunk","limit","swap","handleIncomingPacket","afterClose","error","callback","callbacks","sendRequest","refs","response","sendResponse","handleRequest","request","err","extractErrorMessageV8","isFirstPacket","binaryVersion","handlePlugins","initialOptions","plugins","buildKey","stash","onStartCallbacks","onEndCallbacks","onResolveCallbacks","onLoadCallbacks","nextCallbackID","i","requestPlugins","isSetupDone","setup","plugin","promise","keys2","pluginName","importer","namespace","kind","pluginData","resolve2","replaceDetailsInMessages","callback2","registeredText","registeredNote","extractCallerV8","filter","_0","note","result","errors","warnings","sanitizeMessages","suffix","sideEffects","watchFiles","watchDirs","sanitizeStringArray","runOnEndCallbacks","logPluginError","done","refCount","buildServeData","port","host","servedir","onRequest","onWait","wait","buildLogLevelDefault","transformLogLevelDefault","buildOrServe","args","details","createObjectStash","message","handleError","failureErrorWithLog","buildOrServeContinue","logPluginError2","callerRefs","serveOptions","defaultWD","pluginRefs","serve2","rebuild","stop","copyResponseToResult","convertOutputFiles","buildResponseToResult","isDisposed","error2","response2","error3","result3","isStopped","serviceStopError","watchResponse","result2","serveResponse","input","fs","start","inputPath","outstanding","next","messages","terminalWidth","verbose","map","nextID","ident","tried","lines","location","parseStackLinesV8","at","line","match","lineText","column","summary","file","pluginText","sanitizeLocation","suggestion","property","fallbackPluginName","messagesClone","index","notes","detail","notesClone","noteKeys","noteText","noteLocation","binary","ensureServiceIsRunning","initializePromise","longLivedService","useWorker","startRunningService","wasm","res","blob","onmessage","postMessage","globalThis","o","k","enosys","outputBuf","fd","nl","position","n","mode","uid","gid","link","perm","atime","mtime","code","setInt64","addr","v","getInt64","low","high","loadValue","f","storeValue","typeFlag","loadSlice","array","len","loadSliceOfValues","loadString","saddr","timeOrigin","sp","p","msec","m","str","dst","src","toCopy","instance","strPtr","argc","argvPtrs","arg","argv","wasmMinDataAddr","go","event","stderr","parts","resumeStdin","stdinPos","data","first","service","_"],"mappings":"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"}