{"version":3,"file":"index.mjs","sources":["../../../node_modules/.pnpm/bytes@3.1.2/node_modules/bytes/index.js","../src/utils/encode-decode.ts","../src/utils/util-cdn.ts","../src/plugins/external.ts","../src/utils/fetch-and-cache.ts","../src/deno/path/_constants.ts","../src/deno/path/_util.ts","../src/deno/path/posix.ts","../src/deno/path/glob.ts","../src/deno/path/mod.ts","../src/utils/path.ts","../src/utils/loader.ts","../../../node_modules/.pnpm/resolve.exports@1.1.0/node_modules/resolve.exports/dist/index.mjs","../../../node_modules/.pnpm/parse-package-name@1.0.0/node_modules/parse-package-name/dist/index.mjs","../src/utils/resolve-imports.ts","../src/plugins/cdn.ts","../src/plugins/http.ts","../src/plugins/alias.ts","../src/plugins/virtual-fs.ts","../src/configs/platform.ts","../src/utils/filesystem.ts","../src/utils/deep-equal.ts","../src/configs/options.ts","../../../node_modules/.pnpm/@okikio+emitter@2.1.7/node_modules/@okikio/emitter/lib/api.es.js","../src/configs/events.ts","../src/configs/state.ts","../src/utils/ansi.ts","../src/utils/create-notice.ts","../src/build.ts","../src/utils/debounce.ts","../../../node_modules/.pnpm/@amoutonbrady+lz-string@0.0.1/node_modules/@amoutonbrady/lz-string/dist/esm/index.js","../src/utils/parse-query.ts","../src/utils/npm-search.ts","../src/deno/brotli/mod.ts","../src/deno/denoflate/mod.ts","../src/deno/lz4/mod.ts","../src/deno/base64/mod.ts"],"sourcesContent":["/*!\n * bytes\n * Copyright(c) 2012-2014 TJ Holowaychuk\n * Copyright(c) 2015 Jed Watson\n * MIT Licensed\n */\n\n'use strict';\n\n/**\n * Module exports.\n * @public\n */\n\nmodule.exports = bytes;\nmodule.exports.format = format;\nmodule.exports.parse = parse;\n\n/**\n * Module variables.\n * @private\n */\n\nvar formatThousandsRegExp = /\\B(?=(\\d{3})+(?!\\d))/g;\n\nvar formatDecimalsRegExp = /(?:\\.0*|(\\.[^0]+)0+)$/;\n\nvar map = {\n  b:  1,\n  kb: 1 << 10,\n  mb: 1 << 20,\n  gb: 1 << 30,\n  tb: Math.pow(1024, 4),\n  pb: Math.pow(1024, 5),\n};\n\nvar parseRegExp = /^((-|\\+)?(\\d+(?:\\.\\d+)?)) *(kb|mb|gb|tb|pb)$/i;\n\n/**\n * Convert the given value in bytes into a string or parse to string to an integer in bytes.\n *\n * @param {string|number} value\n * @param {{\n *  case: [string],\n *  decimalPlaces: [number]\n *  fixedDecimals: [boolean]\n *  thousandsSeparator: [string]\n *  unitSeparator: [string]\n *  }} [options] bytes options.\n *\n * @returns {string|number|null}\n */\n\nfunction bytes(value, options) {\n  if (typeof value === 'string') {\n    return parse(value);\n  }\n\n  if (typeof value === 'number') {\n    return format(value, options);\n  }\n\n  return null;\n}\n\n/**\n * Format the given value in bytes into a string.\n *\n * If the value is negative, it is kept as such. If it is a float,\n * it is rounded.\n *\n * @param {number} value\n * @param {object} [options]\n * @param {number} [options.decimalPlaces=2]\n * @param {number} [options.fixedDecimals=false]\n * @param {string} [options.thousandsSeparator=]\n * @param {string} [options.unit=]\n * @param {string} [options.unitSeparator=]\n *\n * @returns {string|null}\n * @public\n */\n\nfunction format(value, options) {\n  if (!Number.isFinite(value)) {\n    return null;\n  }\n\n  var mag = Math.abs(value);\n  var thousandsSeparator = (options && options.thousandsSeparator) || '';\n  var unitSeparator = (options && options.unitSeparator) || '';\n  var decimalPlaces = (options && options.decimalPlaces !== undefined) ? options.decimalPlaces : 2;\n  var fixedDecimals = Boolean(options && options.fixedDecimals);\n  var unit = (options && options.unit) || '';\n\n  if (!unit || !map[unit.toLowerCase()]) {\n    if (mag >= map.pb) {\n      unit = 'PB';\n    } else if (mag >= map.tb) {\n      unit = 'TB';\n    } else if (mag >= map.gb) {\n      unit = 'GB';\n    } else if (mag >= map.mb) {\n      unit = 'MB';\n    } else if (mag >= map.kb) {\n      unit = 'KB';\n    } else {\n      unit = 'B';\n    }\n  }\n\n  var val = value / map[unit.toLowerCase()];\n  var str = val.toFixed(decimalPlaces);\n\n  if (!fixedDecimals) {\n    str = str.replace(formatDecimalsRegExp, '$1');\n  }\n\n  if (thousandsSeparator) {\n    str = str.split('.').map(function (s, i) {\n      return i === 0\n        ? s.replace(formatThousandsRegExp, thousandsSeparator)\n        : s\n    }).join('.');\n  }\n\n  return str + unitSeparator + unit;\n}\n\n/**\n * Parse the string value into an integer in bytes.\n *\n * If no unit is given, it is assumed the value is in bytes.\n *\n * @param {number|string} val\n *\n * @returns {number|null}\n * @public\n */\n\nfunction parse(val) {\n  if (typeof val === 'number' && !isNaN(val)) {\n    return val;\n  }\n\n  if (typeof val !== 'string') {\n    return null;\n  }\n\n  // Test if the string passed is valid\n  var results = parseRegExp.exec(val);\n  var floatValue;\n  var unit = 'b';\n\n  if (!results) {\n    // Nothing could be extracted from the given string\n    floatValue = parseInt(val, 10);\n    unit = 'b'\n  } else {\n    // Retrieve the value and the unit\n    floatValue = parseFloat(results[1]);\n    unit = results[4].toLowerCase();\n  }\n\n  if (isNaN(floatValue)) {\n    return null;\n  }\n\n  return Math.floor(map[unit] * floatValue);\n}\n","// export const { encode } = new TextEncoder();\n// export const { decode } = new TextDecoder();\n\nexport const encode = (str: string) => new TextEncoder().encode(str);\nexport const decode = (buf: BufferSource) => new TextDecoder().decode(buf);","/**\n * The default CDN host\n */\nexport const DEFAULT_CDN_HOST = 'https://unpkg.com';\n\n/**\n * Returns the CDN style supported by certain CDN's\n * e.g. \n * - `npm` - unpkg, skypack, esm.sh, and jsdelivr all support `npm` style imports for example they support adding versions to their URLs like this `https://unpkg.com/@okikio/animate@beta`\n * - `github` - github, and jsdelivr.gh both support `github` style imports, as in they don't support adding versions to their URLs like this `https://cdn.jsdelivr.net/gh/jquery/jquery/dist/jquery.min.js`\n * - `deno` - deno supports `deno` style imports, as in they don't support adding versions to their URLs like this `https://deno.land/x/brotli/mod.ts`\n * - `other` - CDNs that haven't been added to the list\n */\nexport const getCDNStyle = (urlStr: string) => {\n  if (\n    /^(skypack|esm|esm\\.sh|unpkg|jsdelivr|esm\\.run)\\:?/.test(urlStr) ||\n    /^https?:\\/\\/(cdn\\.skypack\\.dev|cdn\\.esm\\.sh|cdn\\.jsdelivr\\.net\\/npm|unpkg\\.com)/.test(urlStr)\n  ) return \"npm\";\n\n  else if (\n    /^(jsdelivr\\.gh|github)\\:?/.test(urlStr) ||\n    /^https?:\\/\\/(cdn\\.jsdelivr\\.net\\/gh|raw\\.githubusercontent\\.com)/.test(urlStr)\n  ) return \"github\";\n\n  else if (\n    /^(deno)\\:?/.test(urlStr) ||\n    /^https?:\\/\\/(deno\\.land\\/x)/.test(urlStr)\n  ) return \"deno\";\n\n  return \"other\";\n}\n\n/**\n * Based on the URL scheme of the import, this method will return an actual CDN host origin to use,\n * e.g. \n * ```ts\n * getCDNHost(\"react\") //= https://unpkg.com\n * getCDNHost(\"react\", \"https://cdn.skypack.dev\") //= https://cdn.skypack.dev/\n * \n * // CDN URL Schemes take precedence above everything\n * getCDNHost(\"esm:react\", \"https://cdn.skypack.dev\") //= https://cdn.esm.sh/\n * ```\n * \n * > _**Note**: The returned CDN URL string will end with a '/' e.g. `https://cdn.esm.sh/`_\n * \n * @param importStr imports to find a CDN for\n * @param cdn The default CDN host to use. This can change based on the config of the user. This may be diregarded if the `importStr` has a CDN URL Scheme\n * @returns CDN URL host string\n */\nexport const getCDNOrigin = (importStr: string, cdn = DEFAULT_CDN_HOST) => {\n  // `skypack:` --> `https://cdn.skypack.dev`\n  if (/^skypack\\:/.test(importStr))\n    cdn = `https://cdn.skypack.dev`;\n\n  // `esm.sh:` or `esm:` --> `https://cdn.esm.sh`\n  else if (/^(esm\\.sh|esm)\\:/.test(importStr))\n    cdn = `https://cdn.esm.sh`;\n\n  // `unpkg:` --> `https://unpkg.com`\n  else if (/^unpkg\\:/.test(importStr))\n    cdn = `https://unpkg.com`;\n\n  // (NPM) `jsdelivr:` or `esm.run:` --> `https://cdn.jsdelivr.net/npm`\n  else if (/^(jsdelivr|esm\\.run)\\:/.test(importStr))\n    cdn = `https://cdn.jsdelivr.net/npm`;\n\n  // (GitHub) `jsdelivr.gh:` --> `https://cdn.jsdelivr.net/gh`\n  else if (/^(jsdelivr\\.gh)\\:/.test(importStr))\n    cdn = `https://cdn.jsdelivr.net/gh`;\n\n  // `deno:` --> `https://deno.land/x`\n  else if (/^(deno)\\:/.test(importStr))\n    cdn = `https://deno.land/x`;\n\n  // `github:` --> `https://raw.githubusercontent.com`\n  else if (/^(github)\\:/.test(importStr))\n    cdn = `https://raw.githubusercontent.com`;\n\n  return /\\/$/.test(cdn) ? cdn : `${cdn}/`;\n}\n\n/**\n * Remove CDN URL Schemes like `deno:...`, `unpkg:...`, etc... and known CDN hosts, e.g. `https://raw.githubusercontent.com/...`, `https://cdn.skypack.dev/...`, etc...  Leaving only the import path\n */\nexport const getPureImportPath = (importStr: string) =>\n  importStr\n    .replace(/^(skypack|esm|esm\\.sh|unpkg|jsdelivr|jsdelivr\\.gh|esm\\.run|deno|github)\\:/, \"\")\n    .replace(/^https?:\\/\\/(cdn\\.skypack\\.dev|cdn\\.esm\\.sh|cdn\\.jsdelivr\\.net\\/npm|unpkg\\.com|cdn\\.jsdelivr\\.net\\/gh|raw\\.githubusercontent\\.com|deno\\.land\\/x)/, \"\")\n    .replace(/^\\//, \"\");\n\n/**\n * Generates a CDN URL for an import, taking advantage of CDN URL Schemes in imports and the default CDN hosts parameter to decide the CDN host\n * Read through {@link getCDNOrigin} and {@link getPureImportPath}\n */\nexport const getCDNUrl = (importStr: string, cdn = DEFAULT_CDN_HOST) => {\n  let origin = getCDNOrigin(importStr, cdn);\n  let path = getPureImportPath(importStr);\n  let url = new URL(path, origin);\n  return { import: importStr, path, origin, cdn, url };\n}\n\n","import type { Plugin } from 'esbuild-wasm';\nimport type { BundleConfigOptions } from '../configs/options';\nimport type { EVENTS } from '../configs/events';\nimport type { STATE } from '../configs/state';\n\nimport { encode } from \"../utils/encode-decode\";\nimport { getCDNUrl } from '../utils/util-cdn';\n\n/** External Plugin Namespace */\nexport const EXTERNALS_NAMESPACE = 'external-globals';\n\n/** An empty export as a Uint8Array */\nexport const EMPTY_EXPORT = encode(`export default {}`);\n\n/** List of polyfillable native node modules, you should now use aliases to polyfill features */\nexport const PolyfillMap = {\n  \"console\": 'console-browserify',\n  \"constants\": 'constants-browserify',\n  \"crypto\": 'crypto-browserify',\n  \"http\": 'http-browserify',\n  \"buffer\": 'buffer',\n  \"Dirent\": \"dirent\",\n  \"vm\": 'vm-browserify',\n  \"zlib\": 'zlib-browserify',\n  \"assert\": 'assert',\n  \"child_process\": 'child_process',\n  \"cluster\": 'child_process',\n  \"dgram\": 'dgram',\n  \"dns\": 'dns',\n  \"domain\": 'domain-browser',\n  \"events\": 'events',\n  \"https\": 'https',\n  \"module\": 'module',\n  \"net\": 'net',\n  \"path\": 'path-browserify',\n  \"punycode\": 'punycode',\n  \"querystring\": 'querystring',\n  \"readline\": 'readline',\n  \"repl\": 'repl',\n  \"stream\": 'stream',\n  \"string_decoder\": 'string_decoder',\n  \"sys\": 'sys',\n  \"timers\": 'timers',\n  \"tls\": 'tls',\n  \"tty\": 'tty-browserify',\n  \"url\": 'url',\n  \"util\": 'util',\n  \"_shims\": '_shims',\n  \"_stream_duplex\": '_stream_duplex',\n  \"_stream_readable\": '_stream_readable',\n  \"_stream_writable\": '_stream_writable',\n  \"_stream_transform\": '_stream_transform',\n  \"_stream_passthrough\": '_stream_passthrough',\n  process: 'process/browser',\n  fs: 'memfs',\n  os: 'os-browserify/browser',\n  'v8': \"v8\",\n  \"node-inspect\": \"node-inspect\",\n  \"_linklist\": \"_linklist\",\n  \"_stream_wrap\": \"_stream_wrap\"\n};\n\n/** Array of native node packages (that are polyfillable) */\nexport const PolyfillKeys = Object.keys(PolyfillMap);\n/** API's & Packages that were later removed from nodejs */\nexport const DeprecatedAPIs = [\"v8/tools/codemap\", \"v8/tools/consarray\", \"v8/tools/csvparser\", \"v8/tools/logreader\", \"v8/tools/profile_view\", \"v8/tools/profile\", \"v8/tools/SourceMap\", \"v8/tools/splaytree\", \"v8/tools/tickprocessor-driver\", \"v8/tools/tickprocessor\", \"node-inspect/lib/_inspect\", \"node-inspect/lib/internal/inspect_client \", \"node-inspect/lib/internal/inspect_repl\", \"_linklist\", \"_stream_wrap\"];\n/** Packages `bundle` should ignore, including deprecated apis, and polyfillable API's */\nexport const ExternalPackages = ['chokidar', 'yargs', 'fsevents', `worker_threads`, \"async_hooks\", \"diagnostics_channel\", \"http2\", \"inspector\", \"perf_hooks\", \"trace_events\", \"wasi\", ...DeprecatedAPIs, ...PolyfillKeys];\n\n/** Based on https://github.com/egoist/play-esbuild/blob/7e34470f9e6ddcd9376704cd8b988577ddcd46c9/src/lib/esbuild.ts#L51 */\nexport const isExternal = (id: string, external: string[] = []) => {\n  return [...ExternalPackages, ...external].find((it: string): boolean => {\n    if (it === id) return true; // import 'foo' & external: ['foo']\n    if (id.startsWith(`${it}/`)) return true; // import 'foo/bar.js' & external: ['foo']\n    return false;\n  });\n};\n\n/**\n * Esbuild EXTERNAL plugin \n * \n * @param external List of packages to marks as external\n */\nexport const EXTERNAL = (events: typeof EVENTS, state: typeof STATE, config: BundleConfigOptions): Plugin => {\n  const { external = [] } = config?.esbuild ?? {}; \n  return {\n    name: EXTERNALS_NAMESPACE,\n    setup(build) {\n      // Intercept import paths starting with \"http:\" and \"https:\" so\n      // esbuild doesn't attempt to map them to a file system location.\n      // Tag them with the \"http-url\" namespace to associate them with\n      // this plugin.\n      build.onResolve({ filter: /.*/ }, (args) => {\n        let path = args.path.replace(/^node\\:/, \"\");\n        let { path: argPath } = getCDNUrl(path);\n\n        if (isExternal(argPath, external)) {\n          return {\n            path: argPath,\n            namespace: EXTERNALS_NAMESPACE,\n            external: true\n          };\n        }\n      });\n\n      // When a URL is loaded, we want to actually download the content\n      // from the internet. This has just enough logic to be able to\n      // handle the example import from https://cdn.esm.sh/ but in reality this\n      // would probably need to be more complex.\n      // \n      // We also want to intercept all import paths inside downloaded\n      // files and resolve them against the original URL. All of these\n      // files will be in the \"http-url\" namespace. Make sure to keep\n      // the newly resolved URL in the \"http-url\" namespace so imports\n      // inside it will also be resolved as URLs recursively.\n      build.onLoad({ filter: /.*/, namespace: EXTERNALS_NAMESPACE }, (args) => {\n        return {\n          pluginName: EXTERNALS_NAMESPACE,\n          contents: EMPTY_EXPORT,\n          warnings: [{\n            text: `${args.path} is marked as an external module and will be ignored.`,\n            details: `\"${args.path}\" is a built-in node module thus can't be bundled by https://bundlejs.com, sorry about that.`\n          }]\n        };\n      });\n    },\n  };\n};","export const CACHE = new Map();\nexport const CACHE_NAME = 'EXTERNAL_FETCHES';\nexport const newRequest = async (cache: Cache, request: Request, fetchOpts?: RequestInit) => {\n  let networkResponse: Response = await fetch(request, fetchOpts);\n\n  let clonedResponse = networkResponse.clone();\n  if (\"caches\" in globalThis)\n    cache.put(request, clonedResponse);\n  else\n    CACHE.set(request, clonedResponse);\n\n  return networkResponse;\n};\n\nexport const getRequest = async (url: RequestInfo | URL, permanent: boolean = false, fetchOpts?: RequestInit) => {\n  let request = new Request(url.toString());\n  let response: Response;\n\n  let cache: Cache;\n  let cacheResponse: Response;\n\n  // In specific situations the browser will sometimes disable access to cache storage, \n  // so, I create my own in memory cache\n  if (\"caches\" in globalThis) {\n    cache = await caches.open(CACHE_NAME);\n    cacheResponse = await cache.match(request);\n  } else {\n    cacheResponse = CACHE.get(request);\n  }\n\n  response = cacheResponse;\n\n  // If permanent is true, use the cache first and only go to the network if there is nothing in the cache, \n  // otherwise, still use cache first, but in the background queue up a network request\n  if (!cacheResponse)\n    response = await newRequest(cache, request, fetchOpts);\n  else if (!permanent)\n    newRequest(cache, request, fetchOpts);\n\n  return response.clone();\n}\n","// Copyright 2018-2022 the Deno authors. All rights reserved. MIT license.\n// Copyright the Browserify authors. MIT License.\n// Ported from https://github.com/browserify/path-browserify/\n// This module is browser compatible.\n\n// Alphabet chars.\nexport const CHAR_UPPERCASE_A = 65; /* A */\nexport const CHAR_LOWERCASE_A = 97; /* a */\nexport const CHAR_UPPERCASE_Z = 90; /* Z */\nexport const CHAR_LOWERCASE_Z = 122; /* z */\n\n// Non-alphabetic chars.\nexport const CHAR_DOT = 46; /* . */\nexport const CHAR_FORWARD_SLASH = 47; /* / */\nexport const CHAR_BACKWARD_SLASH = 92; /* \\ */\nexport const CHAR_VERTICAL_LINE = 124; /* | */\nexport const CHAR_COLON = 58; /* : */\nexport const CHAR_QUESTION_MARK = 63; /* ? */\nexport const CHAR_UNDERSCORE = 95; /* _ */\nexport const CHAR_LINE_FEED = 10; /* \\n */\nexport const CHAR_CARRIAGE_RETURN = 13; /* \\r */\nexport const CHAR_TAB = 9; /* \\t */\nexport const CHAR_FORM_FEED = 12; /* \\f */\nexport const CHAR_EXCLAMATION_MARK = 33; /* ! */\nexport const CHAR_HASH = 35; /* # */\nexport const CHAR_SPACE = 32; /*   */\nexport const CHAR_NO_BREAK_SPACE = 160; /* \\u00A0 */\nexport const CHAR_ZERO_WIDTH_NOBREAK_SPACE = 65279; /* \\uFEFF */\nexport const CHAR_LEFT_SQUARE_BRACKET = 91; /* [ */\nexport const CHAR_RIGHT_SQUARE_BRACKET = 93; /* ] */\nexport const CHAR_LEFT_ANGLE_BRACKET = 60; /* < */\nexport const CHAR_RIGHT_ANGLE_BRACKET = 62; /* > */\nexport const CHAR_LEFT_CURLY_BRACKET = 123; /* { */\nexport const CHAR_RIGHT_CURLY_BRACKET = 125; /* } */\nexport const CHAR_HYPHEN_MINUS = 45; /* - */\nexport const CHAR_PLUS = 43; /* + */\nexport const CHAR_DOUBLE_QUOTE = 34; /* \" */\nexport const CHAR_SINGLE_QUOTE = 39; /* ' */\nexport const CHAR_PERCENT = 37; /* % */\nexport const CHAR_SEMICOLON = 59; /* ; */\nexport const CHAR_CIRCUMFLEX_ACCENT = 94; /* ^ */\nexport const CHAR_GRAVE_ACCENT = 96; /* ` */\nexport const CHAR_AT = 64; /* @ */\nexport const CHAR_AMPERSAND = 38; /* & */\nexport const CHAR_EQUAL = 61; /* = */\n\n// Digits\nexport const CHAR_0 = 48; /* 0 */\nexport const CHAR_9 = 57; /* 9 */\n\nexport const SEP = \"/\";\nexport const SEP_PATTERN = /\\/+/;\n\nexport type OSType = \"windows\" | \"linux\" | \"darwin\";","// Copyright 2018-2022 the Deno authors. All rights reserved. MIT license.\n// Copyright the Browserify authors. MIT License.\n// Ported from https://github.com/browserify/path-browserify/\n// This module is browser compatible.\n\nimport type { FormatInputPathObject } from \"./_interface\";\nimport {\n  CHAR_BACKWARD_SLASH,\n  CHAR_DOT,\n  CHAR_FORWARD_SLASH,\n  CHAR_LOWERCASE_A,\n  CHAR_LOWERCASE_Z,\n  CHAR_UPPERCASE_A,\n  CHAR_UPPERCASE_Z,\n} from \"./_constants\";\n\nexport function assertPath(path: string): void {\n  if (typeof path !== \"string\") {\n    throw new TypeError(\n      `Path must be a string. Received ${JSON.stringify(path)}`,\n    );\n  }\n}\n\nexport function isPosixPathSeparator(code: number): boolean {\n  return code === CHAR_FORWARD_SLASH;\n}\n\nexport function isPathSeparator(code: number): boolean {\n  return isPosixPathSeparator(code) || code === CHAR_BACKWARD_SLASH;\n}\n\nexport function isWindowsDeviceRoot(code: number): boolean {\n  return (\n    (code >= CHAR_LOWERCASE_A && code <= CHAR_LOWERCASE_Z) ||\n    (code >= CHAR_UPPERCASE_A && code <= CHAR_UPPERCASE_Z)\n  );\n}\n\n// Resolves . and .. elements in a path with directory names\nexport function normalizeString(\n  path: string,\n  allowAboveRoot: boolean,\n  separator: string,\n  isPathSeparator: (code: number) => boolean,\n): string {\n  let res = \"\";\n  let lastSegmentLength = 0;\n  let lastSlash = -1;\n  let dots = 0;\n  let code: number | undefined;\n  for (let i = 0, len = path.length; i <= len; ++i) {\n    if (i < len) code = path.charCodeAt(i);\n    else if (isPathSeparator(code!)) break;\n    else code = CHAR_FORWARD_SLASH;\n\n    if (isPathSeparator(code!)) {\n      if (lastSlash === i - 1 || dots === 1) {\n        // NOOP\n      } else if (lastSlash !== i - 1 && dots === 2) {\n        if (\n          res.length < 2 ||\n          lastSegmentLength !== 2 ||\n          res.charCodeAt(res.length - 1) !== CHAR_DOT ||\n          res.charCodeAt(res.length - 2) !== CHAR_DOT\n        ) {\n          if (res.length > 2) {\n            const lastSlashIndex = res.lastIndexOf(separator);\n            if (lastSlashIndex === -1) {\n              res = \"\";\n              lastSegmentLength = 0;\n            } else {\n              res = res.slice(0, lastSlashIndex);\n              lastSegmentLength = res.length - 1 - res.lastIndexOf(separator);\n            }\n            lastSlash = i;\n            dots = 0;\n            continue;\n          } else if (res.length === 2 || res.length === 1) {\n            res = \"\";\n            lastSegmentLength = 0;\n            lastSlash = i;\n            dots = 0;\n            continue;\n          }\n        }\n        if (allowAboveRoot) {\n          if (res.length > 0) res += `${separator}..`;\n          else res = \"..\";\n          lastSegmentLength = 2;\n        }\n      } else {\n        if (res.length > 0) res += separator + path.slice(lastSlash + 1, i);\n        else res = path.slice(lastSlash + 1, i);\n        lastSegmentLength = i - lastSlash - 1;\n      }\n      lastSlash = i;\n      dots = 0;\n    } else if (code === CHAR_DOT && dots !== -1) {\n      ++dots;\n    } else {\n      dots = -1;\n    }\n  }\n  return res;\n}\n\nexport function _format(\n  sep: string,\n  pathObject: FormatInputPathObject,\n): string {\n  const dir: string | undefined = pathObject.dir || pathObject.root;\n  const base: string = pathObject.base ||\n    (pathObject.name || \"\") + (pathObject.ext || \"\");\n  if (!dir) return base;\n  if (dir === pathObject.root) return dir + base;\n  return dir + sep + base;\n}\n\nconst WHITESPACE_ENCODINGS: Record<string, string> = {\n  \"\\u0009\": \"%09\",\n  \"\\u000A\": \"%0A\",\n  \"\\u000B\": \"%0B\",\n  \"\\u000C\": \"%0C\",\n  \"\\u000D\": \"%0D\",\n  \"\\u0020\": \"%20\",\n};\n\nexport function encodeWhitespace(string: string): string {\n  return string.replaceAll(/[\\s]/g, (c) => {\n    return WHITESPACE_ENCODINGS[c] ?? c;\n  });\n}","// Copyright 2018-2022 the Deno authors. All rights reserved. MIT license.\n// Copyright the Browserify authors. MIT License.\n// Ported from https://github.com/browserify/path-browserify/\n// This module is browser compatible.\n\nimport type { FormatInputPathObject, ParsedPath } from \"./_interface\";\nimport { CHAR_DOT, CHAR_FORWARD_SLASH } from \"./_constants\";\n\nimport {\n  _format,\n  assertPath,\n  encodeWhitespace,\n  isPosixPathSeparator,\n  normalizeString,\n} from \"./_util\";\n\nexport const sep = \"/\";\nexport const delimiter = \":\";\n\n// path.resolve([from ...], to)\n/**\n * Resolves `pathSegments` into an absolute path.\n * @param pathSegments an array of path segments\n */\nexport function resolve(...pathSegments: string[]): string {\n  let resolvedPath = \"\";\n  let resolvedAbsolute = false;\n\n  for (let i = pathSegments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n    let path: string;\n\n    if (i >= 0) path = pathSegments[i];\n    else {\n      // deno-lint-ignore no-explicit-any\n      const { Deno } = globalThis as any;\n      if (typeof Deno?.cwd !== \"function\") {\n        throw new TypeError(\"Resolved a relative path without a CWD.\");\n      }\n      path = Deno?.cwd?.() ?? \"/\";\n    }\n\n    assertPath(path);\n\n    // Skip empty entries\n    if (path.length === 0) {\n      continue;\n    }\n\n    resolvedPath = `${path}/${resolvedPath}`;\n    resolvedAbsolute = path.charCodeAt(0) === CHAR_FORWARD_SLASH;\n  }\n\n  // At this point the path should be resolved to a full absolute path, but\n  // handle relative paths to be safe (might happen when process.cwd() fails)\n\n  // Normalize the path\n  resolvedPath = normalizeString(\n    resolvedPath,\n    !resolvedAbsolute,\n    \"/\",\n    isPosixPathSeparator,\n  );\n\n  if (resolvedAbsolute) {\n    if (resolvedPath.length > 0) return `/${resolvedPath}`;\n    else return \"/\";\n  } else if (resolvedPath.length > 0) return resolvedPath;\n  else return \".\";\n}\n\n/**\n * Normalize the `path`, resolving `'..'` and `'.'` segments.\n * @param path to be normalized\n */\nexport function normalize(path: string): string {\n  assertPath(path);\n\n  if (path.length === 0) return \".\";\n\n  const isAbsolute = path.charCodeAt(0) === CHAR_FORWARD_SLASH;\n  const trailingSeparator =\n    path.charCodeAt(path.length - 1) === CHAR_FORWARD_SLASH;\n\n  // Normalize the path\n  path = normalizeString(path, !isAbsolute, \"/\", isPosixPathSeparator);\n\n  if (path.length === 0 && !isAbsolute) path = \".\";\n  if (path.length > 0 && trailingSeparator) path += \"/\";\n\n  if (isAbsolute) return `/${path}`;\n  return path;\n}\n\n/**\n * Verifies whether provided path is absolute\n * @param path to be verified as absolute\n */\nexport function isAbsolute(path: string): boolean {\n  assertPath(path);\n  return path.length > 0 && path.charCodeAt(0) === CHAR_FORWARD_SLASH;\n}\n\n/**\n * Join all given a sequence of `paths`,then normalizes the resulting path.\n * @param paths to be joined and normalized\n */\nexport function join(...paths: string[]): string {\n  if (paths.length === 0) return \".\";\n  let joined: string | undefined;\n  for (let i = 0, len = paths.length; i < len; ++i) {\n    const path = paths[i];\n    assertPath(path);\n    if (path.length > 0) {\n      if (!joined) joined = path;\n      else joined += `/${path}`;\n    }\n  }\n  if (!joined) return \".\";\n  return normalize(joined);\n}\n\n/**\n * Return the relative path from `from` to `to` based on current working directory.\n * @param from path in current working directory\n * @param to path in current working directory\n */\nexport function relative(from: string, to: string): string {\n  assertPath(from);\n  assertPath(to);\n\n  if (from === to) return \"\";\n\n  from = resolve(from);\n  to = resolve(to);\n\n  if (from === to) return \"\";\n\n  // Trim any leading backslashes\n  let fromStart = 1;\n  const fromEnd = from.length;\n  for (; fromStart < fromEnd; ++fromStart) {\n    if (from.charCodeAt(fromStart) !== CHAR_FORWARD_SLASH) break;\n  }\n  const fromLen = fromEnd - fromStart;\n\n  // Trim any leading backslashes\n  let toStart = 1;\n  const toEnd = to.length;\n  for (; toStart < toEnd; ++toStart) {\n    if (to.charCodeAt(toStart) !== CHAR_FORWARD_SLASH) break;\n  }\n  const toLen = toEnd - toStart;\n\n  // Compare paths to find the longest common path from root\n  const length = fromLen < toLen ? fromLen : toLen;\n  let lastCommonSep = -1;\n  let i = 0;\n  for (; i <= length; ++i) {\n    if (i === length) {\n      if (toLen > length) {\n        if (to.charCodeAt(toStart + i) === CHAR_FORWARD_SLASH) {\n          // We get here if `from` is the exact base path for `to`.\n          // For example: from='/foo/bar'; to='/foo/bar/baz'\n          return to.slice(toStart + i + 1);\n        } else if (i === 0) {\n          // We get here if `from` is the root\n          // For example: from='/'; to='/foo'\n          return to.slice(toStart + i);\n        }\n      } else if (fromLen > length) {\n        if (from.charCodeAt(fromStart + i) === CHAR_FORWARD_SLASH) {\n          // We get here if `to` is the exact base path for `from`.\n          // For example: from='/foo/bar/baz'; to='/foo/bar'\n          lastCommonSep = i;\n        } else if (i === 0) {\n          // We get here if `to` is the root.\n          // For example: from='/foo'; to='/'\n          lastCommonSep = 0;\n        }\n      }\n      break;\n    }\n    const fromCode = from.charCodeAt(fromStart + i);\n    const toCode = to.charCodeAt(toStart + i);\n    if (fromCode !== toCode) break;\n    else if (fromCode === CHAR_FORWARD_SLASH) lastCommonSep = i;\n  }\n\n  let out = \"\";\n  // Generate the relative path based on the path difference between `to`\n  // and `from`\n  for (i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i) {\n    if (i === fromEnd || from.charCodeAt(i) === CHAR_FORWARD_SLASH) {\n      if (out.length === 0) out += \"..\";\n      else out += \"/..\";\n    }\n  }\n\n  // Lastly, append the rest of the destination (`to`) path that comes after\n  // the common path parts\n  if (out.length > 0) return out + to.slice(toStart + lastCommonSep);\n  else {\n    toStart += lastCommonSep;\n    if (to.charCodeAt(toStart) === CHAR_FORWARD_SLASH) ++toStart;\n    return to.slice(toStart);\n  }\n}\n\n/**\n * Resolves path to a namespace path\n * @param path to resolve to namespace\n */\nexport function toNamespacedPath(path: string): string {\n  // Non-op on posix systems\n  return path;\n}\n\n/**\n * Return the directory name of a `path`.\n * @param path to determine name for\n */\nexport function dirname(path: string): string {\n  assertPath(path);\n  if (path.length === 0) return \".\";\n  const hasRoot = path.charCodeAt(0) === CHAR_FORWARD_SLASH;\n  let end = -1;\n  let matchedSlash = true;\n  for (let i = path.length - 1; i >= 1; --i) {\n    if (path.charCodeAt(i) === CHAR_FORWARD_SLASH) {\n      if (!matchedSlash) {\n        end = i;\n        break;\n      }\n    } else {\n      // We saw the first non-path separator\n      matchedSlash = false;\n    }\n  }\n\n  if (end === -1) return hasRoot ? \"/\" : \".\";\n  if (hasRoot && end === 1) return \"//\";\n  return path.slice(0, end);\n}\n\n/**\n * Return the last portion of a `path`. Trailing directory separators are ignored.\n * @param path to process\n * @param ext of path directory\n */\nexport function basename(path: string, ext = \"\"): string {\n  if (ext !== undefined && typeof ext !== \"string\") {\n    throw new TypeError('\"ext\" argument must be a string');\n  }\n  assertPath(path);\n\n  let start = 0;\n  let end = -1;\n  let matchedSlash = true;\n  let i: number;\n\n  if (ext !== undefined && ext.length > 0 && ext.length <= path.length) {\n    if (ext.length === path.length && ext === path) return \"\";\n    let extIdx = ext.length - 1;\n    let firstNonSlashEnd = -1;\n    for (i = path.length - 1; i >= 0; --i) {\n      const code = path.charCodeAt(i);\n      if (code === CHAR_FORWARD_SLASH) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now\n        if (!matchedSlash) {\n          start = i + 1;\n          break;\n        }\n      } else {\n        if (firstNonSlashEnd === -1) {\n          // We saw the first non-path separator, remember this index in case\n          // we need it if the extension ends up not matching\n          matchedSlash = false;\n          firstNonSlashEnd = i + 1;\n        }\n        if (extIdx >= 0) {\n          // Try to match the explicit extension\n          if (code === ext.charCodeAt(extIdx)) {\n            if (--extIdx === -1) {\n              // We matched the extension, so mark this as the end of our path\n              // component\n              end = i;\n            }\n          } else {\n            // Extension does not match, so our result is the entire path\n            // component\n            extIdx = -1;\n            end = firstNonSlashEnd;\n          }\n        }\n      }\n    }\n\n    if (start === end) end = firstNonSlashEnd;\n    else if (end === -1) end = path.length;\n    return path.slice(start, end);\n  } else {\n    for (i = path.length - 1; i >= 0; --i) {\n      if (path.charCodeAt(i) === CHAR_FORWARD_SLASH) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now\n        if (!matchedSlash) {\n          start = i + 1;\n          break;\n        }\n      } else if (end === -1) {\n        // We saw the first non-path separator, mark this as the end of our\n        // path component\n        matchedSlash = false;\n        end = i + 1;\n      }\n    }\n\n    if (end === -1) return \"\";\n    return path.slice(start, end);\n  }\n}\n\n/**\n * Return the extension of the `path`.\n * @param path with extension\n */\nexport function extname(path: string): string {\n  assertPath(path);\n  let startDot = -1;\n  let startPart = 0;\n  let end = -1;\n  let matchedSlash = true;\n  // Track the state of characters (if any) we see before our first dot and\n  // after any path separator we find\n  let preDotState = 0;\n  for (let i = path.length - 1; i >= 0; --i) {\n    const code = path.charCodeAt(i);\n    if (code === CHAR_FORWARD_SLASH) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now\n      if (!matchedSlash) {\n        startPart = i + 1;\n        break;\n      }\n      continue;\n    }\n    if (end === -1) {\n      // We saw the first non-path separator, mark this as the end of our\n      // extension\n      matchedSlash = false;\n      end = i + 1;\n    }\n    if (code === CHAR_DOT) {\n      // If this is our first dot, mark it as the start of our extension\n      if (startDot === -1) startDot = i;\n      else if (preDotState !== 1) preDotState = 1;\n    } else if (startDot !== -1) {\n      // We saw a non-dot and non-path separator before our dot, so we should\n      // have a good chance at having a non-empty extension\n      preDotState = -1;\n    }\n  }\n\n  if (\n    startDot === -1 ||\n    end === -1 ||\n    // We saw a non-dot character immediately before the dot\n    preDotState === 0 ||\n    // The (right-most) trimmed path component is exactly '..'\n    (preDotState === 1 && startDot === end - 1 && startDot === startPart + 1)\n  ) {\n    return \"\";\n  }\n  return path.slice(startDot, end);\n}\n\n/**\n * Generate a path from `FormatInputPathObject` object.\n * @param pathObject with path\n */\nexport function format(pathObject: FormatInputPathObject): string {\n  if (pathObject === null || typeof pathObject !== \"object\") {\n    throw new TypeError(\n      `The \"pathObject\" argument must be of type Object. Received type ${typeof pathObject}`,\n    );\n  }\n  return _format(\"/\", pathObject);\n}\n\n/**\n * Return a `ParsedPath` object of the `path`.\n * @param path to process\n */\nexport function parse(path: string): ParsedPath {\n  assertPath(path);\n\n  const ret: ParsedPath = { root: \"\", dir: \"\", base: \"\", ext: \"\", name: \"\" };\n  if (path.length === 0) return ret;\n  const isAbsolute = path.charCodeAt(0) === CHAR_FORWARD_SLASH;\n  let start: number;\n  if (isAbsolute) {\n    ret.root = \"/\";\n    start = 1;\n  } else {\n    start = 0;\n  }\n  let startDot = -1;\n  let startPart = 0;\n  let end = -1;\n  let matchedSlash = true;\n  let i = path.length - 1;\n\n  // Track the state of characters (if any) we see before our first dot and\n  // after any path separator we find\n  let preDotState = 0;\n\n  // Get non-dir info\n  for (; i >= start; --i) {\n    const code = path.charCodeAt(i);\n    if (code === CHAR_FORWARD_SLASH) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now\n      if (!matchedSlash) {\n        startPart = i + 1;\n        break;\n      }\n      continue;\n    }\n    if (end === -1) {\n      // We saw the first non-path separator, mark this as the end of our\n      // extension\n      matchedSlash = false;\n      end = i + 1;\n    }\n    if (code === CHAR_DOT) {\n      // If this is our first dot, mark it as the start of our extension\n      if (startDot === -1) startDot = i;\n      else if (preDotState !== 1) preDotState = 1;\n    } else if (startDot !== -1) {\n      // We saw a non-dot and non-path separator before our dot, so we should\n      // have a good chance at having a non-empty extension\n      preDotState = -1;\n    }\n  }\n\n  if (\n    startDot === -1 ||\n    end === -1 ||\n    // We saw a non-dot character immediately before the dot\n    preDotState === 0 ||\n    // The (right-most) trimmed path component is exactly '..'\n    (preDotState === 1 && startDot === end - 1 && startDot === startPart + 1)\n  ) {\n    if (end !== -1) {\n      if (startPart === 0 && isAbsolute) {\n        ret.base = ret.name = path.slice(1, end);\n      } else {\n        ret.base = ret.name = path.slice(startPart, end);\n      }\n    }\n  } else {\n    if (startPart === 0 && isAbsolute) {\n      ret.name = path.slice(1, startDot);\n      ret.base = path.slice(1, end);\n    } else {\n      ret.name = path.slice(startPart, startDot);\n      ret.base = path.slice(startPart, end);\n    }\n    ret.ext = path.slice(startDot, end);\n  }\n\n  if (startPart > 0) ret.dir = path.slice(0, startPart - 1);\n  else if (isAbsolute) ret.dir = \"/\";\n\n  return ret;\n}\n\n/**\n * Converts a file URL to a path string.\n *\n * ```ts\n *      import { fromFileUrl } from \"./posix.ts\";\n *      fromFileUrl(\"file:///home/foo\"); // \"/home/foo\"\n * ```\n * @param url of a file URL\n */\nexport function fromFileUrl(url: string | URL): string {\n  url = url instanceof URL ? url : new URL(url);\n  if (url.protocol != \"file:\") {\n    throw new TypeError(\"Must be a file URL.\");\n  }\n  return decodeURIComponent(\n    url.pathname.replace(/%(?![0-9A-Fa-f]{2})/g, \"%25\"),\n  );\n}\n\n/**\n * Converts a path string to a file URL.\n *\n * ```ts\n *      import { toFileUrl } from \"./posix.ts\";\n *      toFileUrl(\"/home/foo\"); // new URL(\"file:///home/foo\")\n * ```\n * @param path to convert to file URL\n */\nexport function toFileUrl(path: string): URL {\n  if (!isAbsolute(path)) {\n    throw new TypeError(\"Must be an absolute path.\");\n  }\n  const url = new URL(\"file:///\");\n  url.pathname = encodeWhitespace(\n    path.replace(/%/g, \"%25\").replace(/\\\\/g, \"%5C\"),\n  );\n  return url;\n}","// Copyright 2018-2022 the Deno authors. All rights reserved. MIT license.\n// This module is browser compatible.\nimport * as _posix from \"./posix\";\nimport { SEP, SEP_PATTERN, type OSType } from \"./_constants\";\n\nconst path = _posix;\nconst { join, normalize } = path;\n\nexport interface GlobOptions {\n  /** Extended glob syntax.\n   * See https://www.linuxjournal.com/content/bash-extended-globbing. Defaults\n   * to true. */\n  extended?: boolean;\n  /** Globstar syntax.\n   * See https://www.linuxjournal.com/content/globstar-new-bash-globbing-option.\n   * If false, `**` is treated like `*`. Defaults to true. */\n  globstar?: boolean;\n  /** Whether globstar should be case insensitive. */\n  caseInsensitive?: boolean;\n  /** Operating system. Defaults to the native OS. */\n  os?: OSType;\n}\n\nexport type GlobToRegExpOptions = GlobOptions;\n\nconst regExpEscapeChars = [\n  \"!\",\n  \"$\",\n  \"(\",\n  \")\",\n  \"*\",\n  \"+\",\n  \".\",\n  \"=\",\n  \"?\",\n  \"[\",\n  \"\\\\\",\n  \"^\",\n  \"{\",\n  \"|\",\n];\nconst rangeEscapeChars = [\"-\", \"\\\\\", \"]\"];\n\n/** Convert a glob string to a regular expression.\n *\n * Tries to match bash glob expansion as closely as possible.\n *\n * Basic glob syntax:\n * - `*` - Matches everything without leaving the path segment.\n * - `?` - Matches any single character.\n * - `{foo,bar}` - Matches `foo` or `bar`.\n * - `[abcd]` - Matches `a`, `b`, `c` or `d`.\n * - `[a-d]` - Matches `a`, `b`, `c` or `d`.\n * - `[!abcd]` - Matches any single character besides `a`, `b`, `c` or `d`.\n * - `[[:<class>:]]` - Matches any character belonging to `<class>`.\n *     - `[[:alnum:]]` - Matches any digit or letter.\n *     - `[[:digit:]abc]` - Matches any digit, `a`, `b` or `c`.\n *     - See https://facelessuser.github.io/wcmatch/glob/#posix-character-classes\n *       for a complete list of supported character classes.\n * - `\\` - Escapes the next character for an `os` other than `\"windows\"`.\n * - \\` - Escapes the next character for `os` set to `\"windows\"`.\n * - `/` - Path separator.\n * - `\\` - Additional path separator only for `os` set to `\"windows\"`.\n *\n * Extended syntax:\n * - Requires `{ extended: true }`.\n * - `?(foo|bar)` - Matches 0 or 1 instance of `{foo,bar}`.\n * - `@(foo|bar)` - Matches 1 instance of `{foo,bar}`. They behave the same.\n * - `*(foo|bar)` - Matches _n_ instances of `{foo,bar}`.\n * - `+(foo|bar)` - Matches _n > 0_ instances of `{foo,bar}`.\n * - `!(foo|bar)` - Matches anything other than `{foo,bar}`.\n * - See https://www.linuxjournal.com/content/bash-extended-globbing.\n *\n * Globstar syntax:\n * - Requires `{ globstar: true }`.\n * - `**` - Matches any number of any path segments.\n *     - Must comprise its entire path segment in the provided glob.\n * - See https://www.linuxjournal.com/content/globstar-new-bash-globbing-option.\n *\n * Note the following properties:\n * - The generated `RegExp` is anchored at both start and end.\n * - Repeating and trailing separators are tolerated. Trailing separators in the\n *   provided glob have no meaning and are discarded.\n * - Absolute globs will only match absolute paths, etc.\n * - Empty globs will match nothing.\n * - Any special glob syntax must be contained to one path segment. For example,\n *   `?(foo|bar/baz)` is invalid. The separator will take precedence and the\n *   first segment ends with an unclosed group.\n * - If a path segment ends with unclosed groups or a dangling escape prefix, a\n *   parse error has occurred. Every character for that segment is taken\n *   literally in this event.\n *\n * Limitations:\n * - A negative group like `!(foo|bar)` will wrongly be converted to a negative\n *   look-ahead followed by a wildcard. This means that `!(foo).js` will wrongly\n *   fail to match `foobar.js`, even though `foobar` is not `foo`. Effectively,\n *   `!(foo|bar)` is treated like `!(@(foo|bar)*)`. This will work correctly if\n *   the group occurs not nested at the end of the segment. */\nexport function globToRegExp(\n  glob: string,\n  {\n    extended = true,\n    globstar: globstarOption = true,\n    os = \"linux\",\n    caseInsensitive = false,\n  }: GlobToRegExpOptions = {},\n): RegExp {\n  if (glob == \"\") {\n    return /(?!)/;\n  }\n\n  const sep = os == \"windows\" ? \"(?:\\\\\\\\|/)+\" : \"/+\";\n  const sepMaybe = os == \"windows\" ? \"(?:\\\\\\\\|/)*\" : \"/*\";\n  const seps = os == \"windows\" ? [\"\\\\\", \"/\"] : [\"/\"];\n  const globstar = os == \"windows\"\n    ? \"(?:[^\\\\\\\\/]*(?:\\\\\\\\|/|$)+)*\"\n    : \"(?:[^/]*(?:/|$)+)*\";\n  const wildcard = os == \"windows\" ? \"[^\\\\\\\\/]*\" : \"[^/]*\";\n  const escapePrefix = os == \"windows\" ? \"`\" : \"\\\\\";\n\n  // Remove trailing separators.\n  let newLength = glob.length;\n  for (; newLength > 1 && seps.includes(glob[newLength - 1]); newLength--);\n  glob = glob.slice(0, newLength);\n\n  let regExpString = \"\";\n\n  // Terminates correctly. Trust that `j` is incremented every iteration.\n  for (let j = 0; j < glob.length;) {\n    let segment = \"\";\n    const groupStack: string[] = [];\n    let inRange = false;\n    let inEscape = false;\n    let endsWithSep = false;\n    let i = j;\n\n    // Terminates with `i` at the non-inclusive end of the current segment.\n    for (; i < glob.length && !seps.includes(glob[i]); i++) {\n      if (inEscape) {\n        inEscape = false;\n        const escapeChars = inRange ? rangeEscapeChars : regExpEscapeChars;\n        segment += escapeChars.includes(glob[i]) ? `\\\\${glob[i]}` : glob[i];\n        continue;\n      }\n\n      if (glob[i] == escapePrefix) {\n        inEscape = true;\n        continue;\n      }\n\n      if (glob[i] == \"[\") {\n        if (!inRange) {\n          inRange = true;\n          segment += \"[\";\n          if (glob[i + 1] == \"!\") {\n            i++;\n            segment += \"^\";\n          } else if (glob[i + 1] == \"^\") {\n            i++;\n            segment += \"\\\\^\";\n          }\n          continue;\n        } else if (glob[i + 1] == \":\") {\n          let k = i + 1;\n          let value = \"\";\n          while (glob[k + 1] != null && glob[k + 1] != \":\") {\n            value += glob[k + 1];\n            k++;\n          }\n          if (glob[k + 1] == \":\" && glob[k + 2] == \"]\") {\n            i = k + 2;\n            if (value == \"alnum\") segment += \"\\\\dA-Za-z\";\n            else if (value == \"alpha\") segment += \"A-Za-z\";\n            else if (value == \"ascii\") segment += \"\\x00-\\x7F\";\n            else if (value == \"blank\") segment += \"\\t \";\n            else if (value == \"cntrl\") segment += \"\\x00-\\x1F\\x7F\";\n            else if (value == \"digit\") segment += \"\\\\d\";\n            else if (value == \"graph\") segment += \"\\x21-\\x7E\";\n            else if (value == \"lower\") segment += \"a-z\";\n            else if (value == \"print\") segment += \"\\x20-\\x7E\";\n            else if (value == \"punct\") {\n              segment += \"!\\\"#$%&'()*+,\\\\-./:;<=>?@[\\\\\\\\\\\\]^_‘{|}~\";\n            } else if (value == \"space\") segment += \"\\\\s\\v\";\n            else if (value == \"upper\") segment += \"A-Z\";\n            else if (value == \"word\") segment += \"\\\\w\";\n            else if (value == \"xdigit\") segment += \"\\\\dA-Fa-f\";\n            continue;\n          }\n        }\n      }\n\n      if (glob[i] == \"]\" && inRange) {\n        inRange = false;\n        segment += \"]\";\n        continue;\n      }\n\n      if (inRange) {\n        if (glob[i] == \"\\\\\") {\n          segment += `\\\\\\\\`;\n        } else {\n          segment += glob[i];\n        }\n        continue;\n      }\n\n      if (\n        glob[i] == \")\" && groupStack.length > 0 &&\n        groupStack[groupStack.length - 1] != \"BRACE\"\n      ) {\n        segment += \")\";\n        const type = groupStack.pop()!;\n        if (type == \"!\") {\n          segment += wildcard;\n        } else if (type != \"@\") {\n          segment += type;\n        }\n        continue;\n      }\n\n      if (\n        glob[i] == \"|\" && groupStack.length > 0 &&\n        groupStack[groupStack.length - 1] != \"BRACE\"\n      ) {\n        segment += \"|\";\n        continue;\n      }\n\n      if (glob[i] == \"+\" && extended && glob[i + 1] == \"(\") {\n        i++;\n        groupStack.push(\"+\");\n        segment += \"(?:\";\n        continue;\n      }\n\n      if (glob[i] == \"@\" && extended && glob[i + 1] == \"(\") {\n        i++;\n        groupStack.push(\"@\");\n        segment += \"(?:\";\n        continue;\n      }\n\n      if (glob[i] == \"?\") {\n        if (extended && glob[i + 1] == \"(\") {\n          i++;\n          groupStack.push(\"?\");\n          segment += \"(?:\";\n        } else {\n          segment += \".\";\n        }\n        continue;\n      }\n\n      if (glob[i] == \"!\" && extended && glob[i + 1] == \"(\") {\n        i++;\n        groupStack.push(\"!\");\n        segment += \"(?!\";\n        continue;\n      }\n\n      if (glob[i] == \"{\") {\n        groupStack.push(\"BRACE\");\n        segment += \"(?:\";\n        continue;\n      }\n\n      if (glob[i] == \"}\" && groupStack[groupStack.length - 1] == \"BRACE\") {\n        groupStack.pop();\n        segment += \")\";\n        continue;\n      }\n\n      if (glob[i] == \",\" && groupStack[groupStack.length - 1] == \"BRACE\") {\n        segment += \"|\";\n        continue;\n      }\n\n      if (glob[i] == \"*\") {\n        if (extended && glob[i + 1] == \"(\") {\n          i++;\n          groupStack.push(\"*\");\n          segment += \"(?:\";\n        } else {\n          const prevChar = glob[i - 1];\n          let numStars = 1;\n          while (glob[i + 1] == \"*\") {\n            i++;\n            numStars++;\n          }\n          const nextChar = glob[i + 1];\n          if (\n            globstarOption && numStars == 2 &&\n            [...seps, undefined].includes(prevChar) &&\n            [...seps, undefined].includes(nextChar)\n          ) {\n            segment += globstar;\n            endsWithSep = true;\n          } else {\n            segment += wildcard;\n          }\n        }\n        continue;\n      }\n\n      segment += regExpEscapeChars.includes(glob[i]) ? `\\\\${glob[i]}` : glob[i];\n    }\n\n    // Check for unclosed groups or a dangling backslash.\n    if (groupStack.length > 0 || inRange || inEscape) {\n      // Parse failure. Take all characters from this segment literally.\n      segment = \"\";\n      for (const c of glob.slice(j, i)) {\n        segment += regExpEscapeChars.includes(c) ? `\\\\${c}` : c;\n        endsWithSep = false;\n      }\n    }\n\n    regExpString += segment;\n    if (!endsWithSep) {\n      regExpString += i < glob.length ? sep : sepMaybe;\n      endsWithSep = true;\n    }\n\n    // Terminates with `i` at the start of the next segment.\n    while (seps.includes(glob[i])) i++;\n\n    // Check that the next value of `j` is indeed higher than the current value.\n    if (!(i > j)) {\n      throw new Error(\"Assertion failure: i > j (potential infinite loop)\");\n    }\n    j = i;\n  }\n\n  regExpString = `^${regExpString}$`;\n  return new RegExp(regExpString, caseInsensitive ? \"i\" : \"\");\n}\n\n/** Test whether the given string is a glob */\nexport function isGlob(str: string): boolean {\n  const chars: Record<string, string> = { \"{\": \"}\", \"(\": \")\", \"[\": \"]\" };\n  const regex =\n    /\\\\(.)|(^!|\\*|\\?|[\\].+)]\\?|\\[[^\\\\\\]]+\\]|\\{[^\\\\}]+\\}|\\(\\?[:!=][^\\\\)]+\\)|\\([^|]+\\|[^\\\\)]+\\))/;\n\n  if (str === \"\") {\n    return false;\n  }\n\n  let match: RegExpExecArray | null;\n\n  while ((match = regex.exec(str))) {\n    if (match[2]) return true;\n    let idx = match.index + match[0].length;\n\n    // if an open bracket/brace/paren is escaped,\n    // set the index to the next closing character\n    const open = match[1];\n    const close = open ? chars[open] : null;\n    if (open && close) {\n      const n = str.indexOf(close, idx);\n      if (n !== -1) {\n        idx = n + 1;\n      }\n    }\n\n    str = str.slice(idx);\n  }\n\n  return false;\n}\n\n/** Like normalize(), but doesn't collapse \"**\\/..\" when `globstar` is true. */\nexport function normalizeGlob(\n  glob: string,\n  { globstar = false }: GlobOptions = {},\n): string {\n  if (glob.match(/\\0/g)) {\n    throw new Error(`Glob contains invalid characters: \"${glob}\"`);\n  }\n  if (!globstar) {\n    return normalize(glob);\n  }\n  const s = SEP_PATTERN.source;\n  const badParentPattern = new RegExp(\n    `(?<=(${s}|^)\\\\*\\\\*${s})\\\\.\\\\.(?=${s}|$)`,\n    \"g\",\n  );\n  return normalize(glob.replace(badParentPattern, \"\\0\")).replace(/\\0/g, \"..\");\n}\n\n/** Like join(), but doesn't collapse \"**\\/..\" when `globstar` is true. */\nexport function joinGlobs(\n  globs: string[],\n  { extended = true, globstar = false }: GlobOptions = {},\n): string {\n  if (!globstar || globs.length == 0) {\n    return join(...globs);\n  }\n  if (globs.length === 0) return \".\";\n  let joined: string | undefined;\n  for (const glob of globs) {\n    const path = glob;\n    if (path.length > 0) {\n      if (!joined) joined = path;\n      else joined += `${SEP}${path}`;\n    }\n  }\n  if (!joined) return \".\";\n  return normalizeGlob(joined, { extended, globstar });\n}\n","// https://deno.land/std@0.142.0/path/mod.ts\n// Copyright 2018-2022 the Deno authors. All rights reserved. MIT license.\n// Copyright the Browserify authors. MIT License.\n\n/**\n * Ported mostly from https://github.com/browserify/path-browserify/\n * This module is browser compatible.\n * @module\n */\n\nimport * as _posix from \"./posix\";\n\nconst path = _posix;\nexport const posix = _posix;\nexport const {\n  basename,\n  delimiter,\n  dirname,\n  extname,\n  format,\n  fromFileUrl,\n  isAbsolute,\n  join,\n  normalize,\n  parse,\n  relative,\n  resolve,\n  sep,\n  toFileUrl,\n  toNamespacedPath,\n} = path;\n\nexport { SEP, SEP_PATTERN } from \"./_constants\";\nexport * from \"./_interface\";\nexport * from \"./glob\";","import { isAbsolute, join } from \"../deno/path/mod\";\nimport { encodeWhitespace } from \"../deno/path/_util\";\n\nexport * from \"../deno/path/mod\";\n\n/** \n * Based on https://github.com/egoist/play-esbuild/blob/main/src/lib/path.ts#L123\n * \n * Support joining paths to a URL\n */\nexport const urlJoin = (urlStr: string, ...args: string[]) => {\n  const url = new URL(urlStr);\n  url.pathname = encodeWhitespace(\n    join(url.pathname, ...args).replace(/%/g, \"%25\").replace(/\\\\/g, \"%5C\"),\n  );\n  return url.toString();\n}\n\n/**\n * An import counts as a bare import if it's neither a relative import of an absolute import\n */\nexport const isBareImport = (importStr: string) => {\n  return /^(?!\\.).*/.test(importStr) && !isAbsolute(importStr);\n}","import type { Loader } from 'esbuild-wasm';\nimport { extname } from './path';\n\n/** Based on https://github.com/egoist/play-esbuild/blob/main/src/lib/esbuild.ts */\nexport const RESOLVE_EXTENSIONS = [\".tsx\", \".ts\", \".jsx\", \".js\", \".css\", \".json\"];\n\n/**\n * Based on the file extention determine the esbuild loader to use\n */\nexport const inferLoader = (urlStr: string): Loader => {\n  const ext = extname(urlStr);\n  if (RESOLVE_EXTENSIONS.includes(ext))\n    // Resolve all .js and .jsx files to .ts and .tsx files\n    return (/\\.js(x)?$/.test(ext) ? ext.replace(/^\\.js/, \".ts\") : ext).slice(1) as Loader;\n\n  if (ext === \".mjs\" || ext === \".cjs\") return \"ts\"; // \"js\"\n  if (ext === \".mts\" || ext === \".cts\") return \"ts\";\n\n  if (ext == \".scss\") return \"css\";\n\n  if (ext == \".png\" || ext == \".jpeg\" || ext == \".ttf\") return \"dataurl\";\n  if (ext == \".svg\" || ext == \".html\" || ext == \".txt\") return \"text\";\n  if (ext == \".wasm\") return \"file\";\n\n  return ext.length ? \"text\" : \"ts\";\n}","/**\n * @param {object} exports\n * @param {Set<string>} keys\n */\nfunction loop(exports, keys) {\n\tif (typeof exports === 'string') {\n\t\treturn exports;\n\t}\n\n\tif (exports) {\n\t\tlet idx, tmp;\n\t\tif (Array.isArray(exports)) {\n\t\t\tfor (idx=0; idx < exports.length; idx++) {\n\t\t\t\tif (tmp = loop(exports[idx], keys)) return tmp;\n\t\t\t}\n\t\t} else {\n\t\t\tfor (idx in exports) {\n\t\t\t\tif (keys.has(idx)) {\n\t\t\t\t\treturn loop(exports[idx], keys);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * @param {string} name The package name\n * @param {string} entry The target entry, eg \".\"\n * @param {number} [condition] Unmatched condition?\n */\nfunction bail(name, entry, condition) {\n\tthrow new Error(\n\t\tcondition\n\t\t? `No known conditions for \"${entry}\" entry in \"${name}\" package`\n\t\t: `Missing \"${entry}\" export in \"${name}\" package`\n\t);\n}\n\n/**\n * @param {string} name the package name\n * @param {string} entry the target path/import\n */\nfunction toName(name, entry) {\n\treturn entry === name ? '.'\n\t\t: entry[0] === '.' ? entry\n\t\t: entry.replace(new RegExp('^' + name + '\\/'), './');\n}\n\n/**\n * @param {object} pkg package.json contents\n * @param {string} [entry] entry name or import path\n * @param {object} [options]\n * @param {boolean} [options.browser]\n * @param {boolean} [options.require]\n * @param {string[]} [options.conditions]\n * @param {boolean} [options.unsafe]\n */\nexport function resolve(pkg, entry='.', options={}) {\n\tlet { name, exports } = pkg;\n\n\tif (exports) {\n\t\tlet { browser, require, unsafe, conditions=[] } = options;\n\n\t\tlet target = toName(name, entry);\n\t\tif (target[0] !== '.') target = './' + target;\n\n\t\tif (typeof exports === 'string') {\n\t\t\treturn target === '.' ? exports : bail(name, target);\n\t\t}\n\n\t\tlet allows = new Set(['default', ...conditions]);\n\t\tunsafe || allows.add(require ? 'require' : 'import');\n\t\tunsafe || allows.add(browser ? 'browser' : 'node');\n\n\t\tlet key, tmp, isSingle=false;\n\n\t\tfor (key in exports) {\n\t\t\tisSingle = key[0] !== '.';\n\t\t\tbreak;\n\t\t}\n\n\t\tif (isSingle) {\n\t\t\treturn target === '.'\n\t\t\t\t? loop(exports, allows) || bail(name, target, 1)\n\t\t\t\t: bail(name, target);\n\t\t}\n\n\t\tif (tmp = exports[target]) {\n\t\t\treturn loop(tmp, allows) || bail(name, target, 1);\n\t\t}\n\n\t\tfor (key in exports) {\n\t\t\ttmp = key[key.length - 1];\n\t\t\tif (tmp === '/' && target.startsWith(key)) {\n\t\t\t\treturn (tmp = loop(exports[key], allows))\n\t\t\t\t\t? (tmp + target.substring(key.length))\n\t\t\t\t\t: bail(name, target, 1);\n\t\t\t}\n\t\t\tif (tmp === '*' && target.startsWith(key.slice(0, -1))) {\n\t\t\t\t// do not trigger if no *content* to inject\n\t\t\t\tif (target.substring(key.length - 1).length > 0) {\n\t\t\t\t\treturn (tmp = loop(exports[key], allows))\n\t\t\t\t\t\t? tmp.replace('*', target.substring(key.length - 1))\n\t\t\t\t\t\t: bail(name, target, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn bail(name, target);\n\t}\n}\n\n/**\n * @param {object} pkg\n * @param {object} [options]\n * @param {string|boolean} [options.browser]\n * @param {string[]} [options.fields]\n */\nexport function legacy(pkg, options={}) {\n\tlet i=0, value,\n\t\tbrowser = options.browser,\n\t\tfields = options.fields || ['module', 'main'];\n\n\tif (browser && !fields.includes('browser')) {\n\t\tfields.unshift('browser');\n\t}\n\n\tfor (; i < fields.length; i++) {\n\t\tif (value = pkg[fields[i]]) {\n\t\t\tif (typeof value == 'string') {\n\t\t\t\t//\n\t\t\t} else if (typeof value == 'object' && fields[i] == 'browser') {\n\t\t\t\tif (typeof browser == 'string') {\n\t\t\t\t\tvalue = value[browser=toName(pkg.name, browser)];\n\t\t\t\t\tif (value == null) return browser;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\treturn typeof value == 'string'\n\t\t\t\t? ('./' + value.replace(/^\\.?\\//, ''))\n\t\t\t\t: value;\n\t\t}\n\t}\n}\n","// src/index.ts\nvar RE_SCOPED = /^(@[^\\/]+\\/[^@\\/]+)(?:@([^\\/]+))?(\\/.*)?$/;\nvar RE_NON_SCOPED = /^([^@\\/]+)(?:@([^\\/]+))?(\\/.*)?$/;\nfunction parse(input) {\n  const m = RE_SCOPED.exec(input) || RE_NON_SCOPED.exec(input);\n  if (!m) {\n    throw new Error(`[parse-package-name] invalid package name: ${input}`);\n  }\n  return {\n    name: m[1] || \"\",\n    version: m[2] || \"latest\",\n    path: m[3] || \"\"\n  };\n}\nexport {\n  parse\n};\n","/** The `resolve.exports` package but for imports */\n/**\n * @param {object} imports\n * @param {Set<string>} keys\n */\nexport function loop(imports: Record<any, any>, keys: Set<string>) {\n\tif (typeof imports === 'string') {\n\t\treturn imports;\n\t}\n\n\tif (imports) {\n\t\tlet idx, tmp;\n\t\tif (Array.isArray(imports)) {\n\t\t\tfor (idx = 0; idx < imports.length; idx++) {\n\t\t\t\tif (tmp = loop(imports[idx], keys)) return tmp;\n\t\t\t}\n\t\t} else {\n\t\t\tfor (idx in imports) {\n\t\t\t\tif (keys.has(idx)) {\n\t\t\t\t\treturn loop(imports[idx], keys);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * @param {string} name The package name\n * @param {string} entry The target entry, eg \".\"\n * @param {number} [condition] Unmatched condition?\n */\nexport function bail(name: string, entry: string, condition?: number) {\n\tthrow new Error(\n\t\tcondition\n\t\t\t? `No known conditions for \"${entry}\" entry in \"${name}\" package`\n\t\t\t: `Missing \"${entry}\" import in \"${name}\" package`\n\t);\n}\n\n/**\n * @param {string} name the package name\n * @param {string} entry the target path/import\n */\nexport function toName(name: string, entry: string) {\n\treturn entry === name ? '.'\n\t\t: entry[0] === '.' ? entry\n\t\t\t: entry.replace(new RegExp('^' + name + '\\/'), './');\n}\n\nexport interface ResolveImportOptions { \n\tbrowser?: boolean;\n\trequire?: boolean;\n\tconditions?: string[];\n\tunsafe?: boolean;\n}\n\n/**\n * @param {object} pkg package.json contents\n * @param {string} [entry] entry name or import path\n * @param {object} [options]\n * @param {boolean} [options.browser]\n * @param {boolean} [options.require]\n * @param {string[]} [options.conditions]\n * @param {boolean} [options.unsafe]\n */\nexport function resolveImports(pkg: Record<any, any>, entry = '.', options: ResolveImportOptions = {}) {\n\tlet { name, imports } = pkg;\n\n\tif (imports) {\n\t\tlet { browser, require, unsafe, conditions = [] } = options;\n\n\t\tlet target = toName(name, entry);\n\t\t// if (target[0] !== '.') target = './' + target;\n\n\t\tif (typeof imports === 'string') {\n\t\t\treturn target === '#' ? imports : bail(name, target);\n\t\t}\n\n\t\tlet allows = new Set(['default', ...conditions]);\n\t\tunsafe || allows.add(require ? 'require' : 'import');\n\t\tunsafe || allows.add(browser ? 'browser' : 'node');\n\n\t\tlet key, tmp, isSingle = false;\n\n\t\tfor (key in imports) {\n\t\t\tisSingle = key[0] !== '#';\n\t\t\tbreak;\n\t\t}\n\n\t\tif (isSingle) {\n\t\t\treturn target === '#'\n\t\t\t\t? loop(imports, allows) || bail(name, target, 1)\n\t\t\t\t: bail(name, target);\n\t\t}\n\n\t\tif (tmp = imports[target]) {\n\t\t\treturn loop(tmp, allows) || bail(name, target, 1);\n\t\t}\n\n\t\tfor (key in imports) {\n\t\t\ttmp = key[key.length - 1];\n\t\t\tif (tmp === '/' && target.startsWith(key)) {\n\t\t\t\treturn (tmp = loop(imports[key], allows))\n\t\t\t\t\t? (tmp + target.substring(key.length))\n\t\t\t\t\t: bail(name, target, 1);\n\t\t\t}\n\t\t\tif (tmp === '*' && target.startsWith(key.slice(0, -1))) {\n\t\t\t\t// do not trigger if no *content* to inject\n\t\t\t\tif (target.substring(key.length - 1).length > 0) {\n\t\t\t\t\treturn (tmp = loop(imports[key], allows))\n\t\t\t\t\t\t? tmp.replace('*', target.substring(key.length - 1))\n\t\t\t\t\t\t: bail(name, target, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn bail(name, target);\n\t}\n}","import type { OnResolveArgs, OnResolveResult, Plugin } from 'esbuild-wasm';\nimport type { BundleConfigOptions } from '../configs/options';\nimport type { EVENTS } from '../configs/events';\nimport type { STATE } from '../configs/state';\n\nimport { resolve, legacy } from \"resolve.exports\";\nimport { parse as parsePackageName } from \"parse-package-name\";\n\nimport { HTTP_NAMESPACE } from './http';\n\nimport { isBareImport } from '../utils/path';\nimport { getRequest } from '../utils/fetch-and-cache';\n\nimport { getCDNUrl, getCDNStyle } from '../utils/util-cdn';\nimport { resolveImports } from '../utils/resolve-imports';\nimport { DEFAULT_CDN_HOST } from '../utils/util-cdn';\n\n/** CDN Plugin Namespace */\nexport const CDN_NAMESPACE = 'cdn-url';\n\n/**\n * Resolution algorithm for the esbuild CDN plugin \n * \n * @param cdn The default CDN to use\n * @param logger Console log\n */\nexport const CDN_RESOLVE = (cdn = DEFAULT_CDN_HOST, events: typeof EVENTS) => {\n  return async (args: OnResolveArgs): Promise<OnResolveResult> => {\n    if (isBareImport(args.path)) {\n      // Support a different default CDN + allow for custom CDN url schemes\n      let { path: argPath, origin } = getCDNUrl(args.path, cdn);\n\n      // npm standard CDNs, e.g. unpkg, skypack, esm.sh, etc...\n      let NPM_CDN = getCDNStyle(origin) == \"npm\";\n\n      // Heavily based off of https://github.com/egoist/play-esbuild/blob/main/src/lib/esbuild.ts\n      let parsed = parsePackageName(argPath);\n      let subpath = parsed.path;\n      let pkg = args.pluginData?.pkg ?? {};\n\n      // Resolving imports from the package.json, if said import starts with \"#\" \n      // If an import starts with \"#\" then it's a subpath-import\n      // https://nodejs.org/api/packages.html#subpath-imports\n      if (argPath[0] == \"#\") {\n        let path = resolveImports({ ...pkg, exports: pkg.imports }, argPath, {\n          require: args.kind === \"require-call\" || args.kind === \"require-resolve\"\n        });\n\n        if (typeof path === \"string\") {\n          subpath = path.replace(/^\\.?\\/?/, \"/\");\n\n          if (subpath && subpath[0] !== \"/\")\n            subpath = `/${subpath}`;\n\n          let version = NPM_CDN ? \"@\" + pkg.version : \"\";\n          let { url: { href } } = getCDNUrl(`${pkg.name}${version}${subpath}`);\n          return {\n            namespace: HTTP_NAMESPACE,\n            path: href,\n            pluginData: { pkg }\n          };\n        }\n      }\n\n      // Are there an dependecies???? Well Goood.\n      let depsExists = \"dependencies\" in pkg || \"devDependencies\" in pkg || \"peerDependencies\" in pkg;\n      if (depsExists && !/\\S+@\\S+/.test(argPath)) {\n        let {\n          devDependencies = {},\n          dependencies = {},\n          peerDependencies = {}\n        } = pkg;\n\n        let deps = Object.assign({}, devDependencies, peerDependencies, dependencies);\n        let keys = Object.keys(deps);\n\n        if (keys.includes(argPath))\n          parsed.version = deps[argPath];\n      }\n\n      // If the CDN supports package.json and some other npm stuff, it counts as an npm CDN\n      if (NPM_CDN) {\n        try {\n          let { url: PACKAGE_JSON_URL } = getCDNUrl(`${parsed.name}@${parsed.version}/package.json`, origin);\n\n          // Strongly cache package.json files\n          pkg = await getRequest(PACKAGE_JSON_URL, true).then((res) => res.json());\n          let path = resolve(pkg, subpath ? \".\" + subpath.replace(/^\\.?\\/?/, \"/\") : \".\", {\n            require: args.kind === \"require-call\" || args.kind === \"require-resolve\",\n          }) || legacy(pkg);\n\n          if (typeof path === \"string\")\n            subpath = path.replace(/^\\.?\\/?/, \"/\").replace(/\\.js\\.js$/, \".js\");\n\n          if (subpath && subpath[0] !== \"/\")\n            subpath = `/${subpath}`;\n        } catch (e) {\n          events\n            .emit(\n              \"logger.warn\",\n              `You may want to change CDNs. The current CDN ${!/unpkg\\.com/.test(origin) ? `\"${origin}\" doesn't` : `path \"${origin}${argPath}\" may not`} support package.json files.\\nThere is a chance the CDN you're using doesn't support looking through the package.json of packages. bundlejs will switch to inaccurate guesses for package versions. For package.json support you may wish to use https://unpkg.com or other CDN's that support package.json.`\n            )\n            .emit(\"logger.warn\", e);\n        }\n      }\n\n      // If the CDN is npm based then it should add the parsed version to the URL\n      // e.g. https://unpkg.com/spring-easing@v1.0.0/\n      let version = NPM_CDN ? \"@\" + parsed.version : \"\";\n      let { url } = getCDNUrl(`${parsed.name}${version}${subpath}`, origin);\n      return {\n        namespace: HTTP_NAMESPACE,\n        path: url.toString(),\n        pluginData: { pkg }\n      };\n    }\n  };\n};\n\n/**\n * Esbuild CDN plugin \n * \n * @param cdn The default CDN to use\n * @param logger Console log\n */\nexport const CDN = (events: typeof EVENTS, state: typeof STATE, config: BundleConfigOptions): Plugin => {\n  // Convert CDN values to URL origins\n  let { origin: cdn } = !/:/.test(config?.cdn) ? getCDNUrl(config?.cdn + \":\") : getCDNUrl(config?.cdn);\n  const FileSystem = config.filesystem; \n  return {\n    name: CDN_NAMESPACE,\n    setup(build) {\n      // Resolve bare imports to the CDN required using different URL schemes\n      build.onResolve({ filter: /.*/ }, CDN_RESOLVE(cdn, events));\n      build.onResolve({ filter: /.*/, namespace: CDN_NAMESPACE }, CDN_RESOLVE(cdn, events));\n    },\n  };\n};\n","/** Based on https://github.com/hardfist/neo-tools/blob/main/packages/bundler/src/plugins/http.ts */\nimport type { OnResolveArgs, OnResolveResult, Plugin } from 'esbuild-wasm';\nimport type { BundleConfigOptions } from '../configs/options';\nimport type { EVENTS } from '../configs/events';\nimport type { STATE } from '../configs/state';\n\nimport { getRequest } from '../utils/fetch-and-cache';\nimport { decode } from '../utils/encode-decode';\n\nimport { getCDNUrl, DEFAULT_CDN_HOST, getCDNStyle } from '../utils/util-cdn';\nimport { inferLoader } from '../utils/loader';\n\nimport { urlJoin, extname, isBareImport } from \"../utils/path\";\nimport { CDN_RESOLVE } from './cdn';\n\n/** HTTP Plugin Namespace */\nexport const HTTP_NAMESPACE = 'http-url';\n\n/**\n * Fetches packages\n * \n * @param url package url to fetch\n * @param logger Console log\n */\nexport const fetchPkg = async (url: string, events: typeof EVENTS) => {\n  try {\n    let response = await getRequest(url);\n    if (!response.ok)\n      throw new Error(`Couldn't load ${response.url} (${response.status} code)`);\n\n    events.emit(\"logger.info\", `Fetch ${url}`);\n\n    return {\n      url: response.url,\n      content: new Uint8Array(await response.arrayBuffer()),\n    };\n  } catch (err) {\n    throw new Error(`[getRequest] Failed at request (${url})\\n${err.toString()}`);\n  }\n};\n\n/**\n * Fetches assets from a js file, e.g. assets like WASM, Workers, etc... \n * External assets are referenced using this syntax, e.g. new URL(\"...\", import.meta.url)\n * Any external assets found inside said original js file, are fetched and stored\n * \n * @param path Path for original js files \n * @param content Content of original js files\n * @param namespace esbuild plugin namespace\n * @param logger Console log\n */\nexport const fetchAssets = async (path: string, content: Uint8Array, namespace: string, events: typeof EVENTS, config: BundleConfigOptions) => {\n  const rgx = /new URL\\(['\"`](.*)['\"`],(?:\\s+)?import\\.meta\\.url(?:\\s+)?\\)/g;\n  const parentURL = new URL(\"./\", path).toString();\n  const FileSystem = config.filesystem; \n\n  const code = decode(content);\n  const matches = Array.from(code.matchAll(rgx)) as RegExpMatchArray[];\n\n  const promises = matches.map(async ([, assetURL]) => {\n    let { content: asset, url } = await fetchPkg(urlJoin(parentURL, assetURL), events);\n\n    // Create a virtual file system for storing assets\n    // This is for building a package bundle analyzer \n    FileSystem.set(namespace + \":\" + url, content);\n\n    return {\n      path: assetURL, contents: asset,\n      get text() { return decode(asset); }\n    };\n  });\n\n  return await Promise.allSettled(promises);\n};\n\n/**\n * Resolution algorithm for the esbuild HTTP plugin\n * \n * @param host The default host origin to use if an import doesn't already have one\n * @param logger Console log\n */\nexport const HTTP_RESOLVE = (host = DEFAULT_CDN_HOST, events: typeof EVENTS) => {\n  return async (args: OnResolveArgs): Promise<OnResolveResult> => {\n    // Some packages use \"../../\" with the assumption that \"/\" is equal to \"/index.js\", this is supposed to fix that bug\n    let argPath = args.path.replace(/\\/$/, \"/index\");\n\n    // If the import path isn't relative do this...\n    if (!argPath.startsWith(\".\")) {\n      // If the import is an http import load the content via the http plugins loader\n      if (/^https?:\\/\\//.test(argPath)) {\n        return {\n          path: argPath,\n          namespace: HTTP_NAMESPACE,\n          pluginData: { pkg: args.pluginData?.pkg },\n        };\n      }\n\n      let pathOrigin = new URL(\n        // Use the parent files URL as a host\n        urlJoin(args.pluginData?.url ? args.pluginData?.url : host, \"../\", argPath)\n      ).origin;\n\n      // npm standard CDNs, e.g. unpkg, skypack, esm.sh, etc...\n      let NPM_CDN = getCDNStyle(pathOrigin) == \"npm\";\n      let origin = NPM_CDN ? pathOrigin : host;\n\n      // If the import is a bare import, use the CDN plugins resolution algorithm\n      if (isBareImport(argPath)) {\n        return CDN_RESOLVE(origin, events)(args);\n      } else {\n        /** \n         * If the import is neither an http import or a bare import (module import), then it is an absolute import.\n         * Therefore, load the content via the http plugins loader, but make sure that the absolute URL doesn't go past the root URL\n         * \n         * e.g. \n         * To load `jquery` from jsdelivr, the CDN root needs to `https://cdn.jsdelivr.net/npm`, \n         * thus the final URL is https://cdn.jsdelivr.net/npm/jquery\n         * \n         * The problem is that if a user using absolute URL's aims for the root domain, \n         * the result should be `https://cdn.jsdelivr.net`, but what we really want is for our use case is\n         * a root of `https://cdn.jsdelivr.net/npm`\n         * \n         * So, we treat the path as a CDN and force all URLs to use CDN origins as the root domain\n        */\n        return {\n          path: getCDNUrl(argPath, origin).url.toString(),\n          namespace: HTTP_NAMESPACE,\n          pluginData: { pkg: args.pluginData?.pkg },\n        };\n      }\n    }\n\n    // For relative imports\n    let path = urlJoin(args.pluginData?.url, \"../\", argPath);\n    return {\n      path,\n      namespace: HTTP_NAMESPACE,\n      pluginData: { pkg: args.pluginData?.pkg },\n    };\n  };\n};\n\n/**\n * Esbuild HTTP plugin \n * \n * @param assets Array to store fetched assets\n * @param host The default host origin to use if an import doesn't already have one\n * @param logger Console log\n */\nexport const HTTP = (events: typeof EVENTS, state: typeof STATE, config: BundleConfigOptions): Plugin => {\n  // Convert CDN values to URL origins\n  let { origin: host } = !/:/.test(config?.cdn) ? getCDNUrl(config?.cdn + \":\") : getCDNUrl(config?.cdn);\n  const FileSystem = config.filesystem;\n  const assets = state.assets ?? [];\n  return {\n    name: HTTP_NAMESPACE,\n    setup(build) {\n      // Intercept import paths starting with \"http:\" and \"https:\" so\n      // esbuild doesn't attempt to map them to a file system location.\n      // Tag them with the \"http-url\" namespace to associate them with\n      // this plugin.\n      build.onResolve({ filter: /^https?:\\/\\// }, args => {\n        return {\n          path: args.path,\n          namespace: HTTP_NAMESPACE,\n        };\n      });\n\n      // We also want to intercept all import paths inside downloaded\n      // files and resolve them against the original URL. All of these\n      // files will be in the \"http-url\" namespace. Make sure to keep\n      // the newly resolved URL in the \"http-url\" namespace so imports\n      // inside it will also be resolved as URLs recursively.\n      build.onResolve({ filter: /.*/, namespace: HTTP_NAMESPACE }, HTTP_RESOLVE(host, events));\n\n      // When a URL is loaded, we want to actually download the content\n      // from the internet. This has just enough logic to be able to\n      // handle the example import from https://cdn.esm.sh/ but in reality this\n      // would probably need to be more complex.\n      build.onLoad({ filter: /.*/, namespace: HTTP_NAMESPACE }, async (args) => {\n        // Some typescript files don't have file extensions but you can't fetch a file without their file extension\n        // so bundle tries to solve for that\n        let ext = extname(args.path);\n        let argPath = (suffix = \"\") => ext.length > 0 ? args.path : args.path + suffix;\n        let content: Uint8Array, url: string;\n\n        try {\n          // Fetch the path without the `.ts` extension\n          ({ content, url } = await fetchPkg(argPath(), events));\n        } catch (err) {\n          // If the ^ above fetch doesn't work, try again with a `.ts` extension\n          // Some typescript files don't have file extensions but you can't fetch a file without their file extension\n          try {\n            ({ content, url } = await fetchPkg(argPath(\".ts\"), events));\n          } catch (e) {\n            // If the ^ above fetch doesn't work, try again with a `.tsx` extension\n            // Some typescript files use `.tsx`\n            try {\n              ({ content, url } = await fetchPkg(argPath(\".tsx\"), events));\n            } catch (e) {\n              events.emit(\"logger.error\", e.toString());\n              throw err;\n            }\n          }\n        }\n\n        // Create a virtual file system for storing node modules\n        // This is for building a package bundle analyzer \n        await FileSystem.set(args.namespace + \":\" + args.path, content);\n\n        let _assetResults =\n          (await fetchAssets(url, content, args.namespace, events, config))\n            .filter((result) => {\n              if (result.status == \"rejected\") {\n                events.emit(\"logger:warn\", \"Asset fetch failed.\\n\" + result?.reason?.toString());\n                return false;\n              } else return true;\n            })\n            .map((result) => {\n              if (result.status == \"fulfilled\")\n                return result.value;\n            });\n\n        state.assets = assets.concat(_assetResults);\n        return {\n          contents: content,\n          loader: inferLoader(url),\n          pluginData: { url, pkg: args.pluginData?.pkg },\n        };\n      });\n    },\n  };\n};","import type { OnResolveArgs, OnResolveResult, Plugin } from 'esbuild-wasm';\nimport type { BundleConfigOptions } from '../configs/options';\nimport type { EVENTS } from '../configs/events';\nimport type { STATE } from '../configs/state';\n\nimport { parse as parsePackageName } from \"parse-package-name\";\nimport { EXTERNALS_NAMESPACE } from './external';\nimport { HTTP_RESOLVE } from './http';\n\nimport { getCDNUrl, DEFAULT_CDN_HOST } from '../utils/util-cdn';\nimport { isBareImport } from '../utils/path';\n\n/** Alias Plugin Namespace */\nexport const ALIAS_NAMESPACE = 'alias-globals';\n\n/**\n * Checks if a package has an alias\n * \n * @param id The package to find an alias for \n * @param aliases An object with package as the key and the package alias as the value, e.g. { \"fs\": \"memfs\" }\n */\nexport const isAlias = (id: string, aliases = {}) => {\n  if (!isBareImport(id)) return false;\n\n  let aliasKeys = Object.keys(aliases);\n  let path = id.replace(/^node\\:/, \"\");\n  let pkgDetails = parsePackageName(path);\n\n  return aliasKeys.find((it: string): boolean => {\n    return pkgDetails.name === it; // import 'foo' & alias: { 'foo': 'bar@5.0' }\n  });\n};\n\n/**\n * Resolution algorithm for the esbuild ALIAS plugin \n * \n * @param aliases An object with package as the key and the package alias as the value, e.g. { \"fs\": \"memfs\" }\n * @param host The default host origin to use if an import doesn't already have one\n * @param logger Console log\n */\nexport const ALIAS_RESOLVE = (aliases = {}, host = DEFAULT_CDN_HOST, events: typeof EVENTS) => {\n  return async (args: OnResolveArgs): Promise<OnResolveResult> => {\n    let path = args.path.replace(/^node\\:/, \"\");\n    let { path: argPath } = getCDNUrl(path);\n\n    if (isAlias(argPath, aliases)) {\n      let pkgDetails = parsePackageName(argPath);\n      let aliasPath = aliases[pkgDetails.name];\n      return HTTP_RESOLVE(host, events)({\n        ...args,\n        path: aliasPath\n      });\n    }\n  };\n};\n\n/**\n * Esbuild ALIAS plugin \n * \n * @param aliases An object with package as the key and the package alias as the value, e.g. { \"fs\": \"memfs\" }\n * @param host The default host origin to use if an import doesn't already have one\n * @param logger Console log\n */\nexport const ALIAS = (events: typeof EVENTS, state: typeof STATE, config: BundleConfigOptions): Plugin => {\n  // Convert CDN values to URL origins\n  let { origin: host } = !/:/.test(config?.cdn) ? getCDNUrl(config?.cdn + \":\") : getCDNUrl(config?.cdn);\n  let aliases = config.alias ?? {};\n  return {\n    name: ALIAS_NAMESPACE,\n    setup(build) {\n      // Intercept import paths starting with \"http:\" and \"https:\" so\n      // esbuild doesn't attempt to map them to a file system location.\n      // Tag them with the \"http-url\" namespace to associate them with\n      // this plugin.\n      build.onResolve({ filter: /^node\\:.*/ }, (args) => {\n        if (isAlias(args.path, aliases))\n          return ALIAS_RESOLVE(aliases, host, events)(args);\n\n        return {\n          path: args.path,\n          namespace: EXTERNALS_NAMESPACE,\n          external: true\n        };\n      });\n\n      // We also want to intercept all import paths inside downloaded\n      // files and resolve them against the original URL. All of these\n      // files will be in the \"http-url\" namespace. Make sure to keep\n      // the newly resolved URL in the \"http-url\" namespace so imports\n      // inside it will also be resolved as URLs recursively.\n      build.onResolve({ filter: /.*/ }, ALIAS_RESOLVE(aliases, host, events));\n      build.onResolve({ filter: /.*/, namespace: ALIAS_NAMESPACE }, ALIAS_RESOLVE(aliases, host, events));\n    },\n  };\n};","// Based on https://github.com/okikio/bundle/blob/main/src/ts/plugins/virtual-fs.ts\nimport type { Plugin } from 'esbuild-wasm';\nimport type { BundleConfigOptions } from '../configs/options';\nimport type { EVENTS } from \"../configs/events\";\nimport type { STATE } from '../configs/state';\n\nimport { inferLoader } from \"../utils/loader\";\nexport const VIRTUAL_FILESYSTEM_NAMESPACE = 'virtual-filesystem';\nexport const VIRTUAL_FS = (events: typeof EVENTS, state: typeof STATE, config: BundleConfigOptions): Plugin => {\n  const FileSystem = config.filesystem;\n\n  return {\n    name: VIRTUAL_FILESYSTEM_NAMESPACE,\n    setup(build) {\n      build.onResolve({ filter: /.*/ }, (args) => {\n        return {\n          path: args.path,\n          pluginData: args.pluginData ?? {},\n          namespace: VIRTUAL_FILESYSTEM_NAMESPACE\n        };\n      });\n\n      build.onLoad({ filter: /.*/, namespace: VIRTUAL_FILESYSTEM_NAMESPACE }, async (args) => {\n        let resolvedPath = await FileSystem.resolve(args.path, args?.pluginData?.importer);\n        let content = await FileSystem.get(args.path, \"buffer\", args?.pluginData?.importer);\n\n        return {\n          contents: content,\n          pluginData: {\n            importer: resolvedPath,\n          },\n          loader: inferLoader(resolvedPath)\n        };\n      });\n    },\n  };\n};","/**\n * `@bundlejs/core`'s supported platforms\n */\nexport type PLATFORM = \"node\" | \"deno\" | \"browser\";\n\n/**\n * Automatically chooses the esbuild version to run based off platform heuristics, \n * e.g. \n * - The environment is deno if it supports `globalThis.Deno`\n * - The environment is node if it supports `globalThis.process`\n * - Otherwise the environment is the browser\n * \n */\nexport const PLATFORM_AUTO: PLATFORM = (\"Deno\" in globalThis) ? \"deno\" : (\"process\" in globalThis) ? \"node\" : \"browser\";","import { dirname, resolve } from \"../deno/path/mod\";\nimport { decode, encode } from \"./encode-decode\";\n\n/** Virtual Filesystem Storage */\nexport const FileSystem = new Map<string, Uint8Array>();\n\n/**\n * Resolves path to a file in the virtual file system storage \n * \n * @param path the relative or absolute path to resolve to\n * @param importer an absolute path to use to determine relative file paths\n * @returns resolved final path\n */\nexport const getResolvedPath = async (path: string, importer?: string) => {\n  let resolvedPath = path;\n  if (importer && path.startsWith('.'))\n    resolvedPath = resolve(dirname(importer), path);\n\n  if (FileSystem.has(resolvedPath)) return resolvedPath;\n  throw `File \"${resolvedPath}\" does not exist`;\n}\n\n/**\n * Retrevies file from virtual file system storage in either string or uint8array buffer format\n * \n * @param path path of file in virtual file system storage\n * @param type format to retrieve file in, buffer and string are the 2 option available\n * @param importer an absolute path to use to determine a relative file path\n * @returns file from file system storage in either string format or as a Uint8Array buffer\n */\nexport const getFile = async (path: string, type: 'string' | 'buffer' = \"buffer\", importer?: string) => {\n  let resolvedPath = await getResolvedPath(path, importer);\n\n  if (FileSystem.has(resolvedPath)) {\n    let file = FileSystem.get(resolvedPath);\n    return type == \"string\" ? decode(file) : file;\n  }\n}\n\n/**\n * Writes file to filesystem in either string or uint8array buffer format\n * \n * @param path path of file in virtual file system storage\n * @param content contents of file to store, you can store buffers and/or strings\n * @param importer an absolute path to use to determine a relative file path\n */\nexport const setFile = async (path: string, content: Uint8Array | string, importer?: string) => {\n  let resolvedPath = path;\n  if (importer && path.startsWith('.'))\n    resolvedPath = resolve(dirname(importer), path);\n\n  try {\n    FileSystem.set(resolvedPath, content instanceof Uint8Array ? content : encode(content));\n  } catch (e) {\n    throw `Error occurred while writing to \"${resolvedPath}\"`;\n  }\n}","export const isObject = (obj: any) => typeof obj === \"object\" && obj != null;\nexport const isPrimitive = (val) => (typeof val === 'object' ? val === null : typeof val !== 'function');\nexport const isValidKey = key => {\n  return key !== '__proto__' && key !== 'constructor' && key !== 'prototype';\n};\n\n// Based on https://gist.github.com/egardner/efd34f270cc33db67c0246e837689cb9\n// Deep Equality comparison example\n//\n// This is an example of how to implement an object-comparison function in \n// JavaScript (ES5+). A few points of interest here:\n//\n// * You can get an array of all an object's properties in ES5+ by calling\n//   the class method Object.keys(obj). \n// * The function recursively calls itself in the for / in loop when it\n//   compares the contents of each property\n// * You can hide a \"private\" function inside a function of this kind by\n//   placing one function declaration inside of another. The inner function\n//   is not hoisted out into the global scope, so it is only visible inside\n//   of the parent function.\n// * The reason this nested helper function is necessary is that \n//   `typeof null` is still \"object\" in JS, a major \"gotcha\" to watch out for.\n//\nexport const deepEqual = (obj1: any, obj2: any) => {\n  if (obj1 === obj2) {\n    return true;\n  } else if (isObject(obj1) && isObject(obj2)) {\n    if (Object.keys(obj1).length !== Object.keys(obj2).length) { return false; }\n    for (var prop in obj1) {\n      if (!deepEqual(obj1[prop], obj2[prop])) return false;\n    }\n\n    return true;\n  }\n};\n\n/** Compares 2 objects and only keep the keys that are different in both objects */\nexport const deepDiff = (obj1: any, obj2: any) => {\n  let keys = Object.keys(obj2);\n  let result = {};\n  let i = 0;\n  for (; i < keys.length; i++) {\n    let key = keys[i];\n    let value = obj2[key];\n\n    if (key in obj1) {\n      let bothAreArrays = Array.isArray(obj1[key]) && Array.isArray(value);\n      if (obj1[key] == value) {\n        continue;\n      } else if (bothAreArrays) {\n        if (!deepEqual(obj1[key], value))\n          result[key] = value;\n        else continue;\n      } else if (isObject(obj1[key]) && isObject(value)) {\n        // Remove empty objects\n        let diff = deepDiff(obj1[key], value);\n        if (Object.keys(diff).length)\n          result[key] = diff;\n      } else {\n        result[key] = value;\n      }\n    } else {\n      result[key] = value;\n    }\n  }\n\n  return result;\n};\n\n/*!\n * Based on assign-deep <https://github.com/jonschlinkert/assign-deep>\n *\n * Copyright (c) 2017-present, Jon Schlinkert.\n * Released under the MIT License.\n */\nexport const deepAssign = (target, ...args) => {\n  let i = 0;\n  if (isPrimitive(target)) target = args[i++];\n  if (!target) target = {};\n  for (; i < args.length; i++) {\n    if (isObject(args[i])) {\n      for (const key of Object.keys(args[i])) {\n        if (isValidKey(key)) {\n          if (isObject(target[key]) && isObject(args[i][key])) {\n            target[key] = deepAssign(Array.isArray(target[key]) ? [] : {}, target[key], args[i][key]);\n          } else {\n            target[key] = args[i][key];\n          }\n        }\n      }\n    }\n  }\n\n  return target;\n};\n","import type { BuildOptions, InitializeOptions, OutputFile } from \"esbuild-wasm\";\nimport type { OutputOptions } from \"rollup\";\n\nimport type { TemplateType } from \"../plugins/analyzer/types/template-types\";\nimport type { PLATFORM } from \"./platform\";\n\nimport { PLATFORM_AUTO } from \"./platform\";\n\nimport { FileSystem, getFile, setFile, getResolvedPath } from \"../utils/filesystem\";\nimport { DEFAULT_CDN_HOST } from \"../utils/util-cdn\";\nimport { deepAssign } from \"../utils/deep-equal\";\n\n/** The compression algorithim to use, there are currently 3 options \"gzip\", \"brotli\", and \"lz4\" */\nexport type CompressionType = \"gzip\" | \"brotli\" | \"lz4\";\n\n/** \n* You can configure the quality of the compression using an object, \n* e.g.\n* ```ts\n* {\n*  ...\n*  \"compression\": {\n*    \"type\": \"brotli\",\n*    \"quality\": 5\n*  }\n* }\n* ```\n*/\nexport type CompressionOptions = {\n  /** The compression algorithim to use, there are currently 3 options \"gzip\", \"brotli\", and \"lz4\" */\n  type: CompressionType,\n\n  /** Compression quality ranging from 1 to 11 */\n  quality: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11\n};\n\nexport type BundleConfigOptions = {\n  /** Enable using rollup for treeshaking. Only works while the `esbuild.treeShaking` option is true */\n  rollup?: OutputOptions | boolean,\n\n  /** esbuild config options https://esbuild.github.io/api/#build-api */\n  esbuild?: BuildOptions,\n\n  /** The default CDN to import packages from */\n  cdn?: \"https://unpkg.com\" | \"https://esm.run\" | \"https://cdn.esm.sh\" | \"https://cdn.esm.sh\" | \"https://cdn.skypack.dev\" | \"https://cdn.jsdelivr.net/npm\" | \"https://cdn.jsdelivr.net/gh\" | \"https://deno.land/x\" | \"https://raw.githubusercontent.com\" | \"unpkg\" | \"esm.run\" | \"esm.sh\" | \"esm\" | \"skypack\" | \"jsdelivr\" | \"jsdelivr.gh\" | \"github\" | \"deno\" | (string & {}),\n\n  /** Aliases for replacing packages with different ones, e.g. replace \"fs\" with \"memfs\", so, it can work on the web, etc... */\n  alias?: Record<string, string>,\n\n  /** \n   * The compression algorithim to use, there are currently 3 options \"gzip\", \"brotli\", and \"lz4\".\n   * You can also configure the quality of the compression using an object, \n   * e.g.\n   * ```ts\n   * {\n   *  ...\n   *  \"compression\": {\n   *    \"type\": \"brotli\",\n   *    \"quality\": 5\n   *  }\n   * }\n   * ```\n  */\n  compression?: CompressionOptions | CompressionType\n\n  /**\n   * Generates interactive zoomable charts displaing the size of output files. \n   * It's a great way to determine what causes the bundle size to be so large. \n   */\n  analysis?: TemplateType | boolean\n\n  /**\n   * Enables converting ascii logs to HTML so virtual consoles can handle the logs and print with color\n   */\n  ascii?: \"html\" | \"html-and-ascii\" | \"ascii\",\n  \n  /**\n   * A virtual file system where you can input files, get, set and read files\n   */\n  filesystem?: { \n    /** Virtual Filesystem Storage */\n    files?: typeof FileSystem,\n\n    /**\n     * Retrevies file from virtual file system storage in either string or uint8array buffer format\n     * \n     * @param path path of file in virtual file system storage\n     * @param type format to retrieve file in, buffer and string are the 2 option available\n     * @param importer an absolute path to use to determine a relative file path\n     * @returns file from file system storage in either string format or as a Uint8Array buffer\n     */\n    get?: typeof getFile,\n\n    /**\n     * Writes file to filesystem in either string or uint8array buffer format\n     * \n     * @param path path of file in virtual file system storage\n     * @param content contents of file to store, you can store buffers and/or strings\n     * @param importer an absolute path to use to determine a relative file path\n     */\n    set?: typeof setFile,\n\n    /**\n     * Resolves path to a file in the virtual file system storage \n     * \n     * @param path the relative or absolute path to resolve to\n     * @param importer an absolute path to use to determine relative file paths\n     * @returns resolved final path\n     */\n    resolve?: typeof getResolvedPath,\n\n    /**\n     * Clear all files from the virtual filesystem storage\n     */\n    clear?: typeof FileSystem.clear,\n  },\n\n  /**\n   * Configures how esbuild-wasm is initialized \n   */\n  init?: InitializeOptions & { platform?: PLATFORM }\n\n  /**\n   * Documentation: https://esbuild.github.io/api/#entry-points\n   */\n  entryPoints?: BuildOptions[\"entryPoints\"]\n};\n\nexport const EasyDefaultConfig: BundleConfigOptions = {\n  entryPoints: [\"/index.tsx\"],\n  \"cdn\": DEFAULT_CDN_HOST,\n  \"compression\": \"gzip\",\n  \"analysis\": false,\n  \"esbuild\": {\n    \"target\": [\"esnext\"],\n    \"format\": \"esm\",\n    \"bundle\": true,\n    \"minify\": true,\n\n    \"treeShaking\": true,\n    \"platform\": \"browser\"\n  }\n};\n\nexport const DefaultConfig: BundleConfigOptions = deepAssign({}, EasyDefaultConfig, {\n  \"esbuild\": {\n    \"color\": true,\n    \"globalName\": \"BundledCode\",\n\n    \"logLevel\": \"info\",\n    \"sourcemap\": false,\n    \"incremental\": false,\n  },\n  \n  \"ascii\": \"ascii\",\n  filesystem: { \n    files: FileSystem,\n    get: getFile,\n    set: setFile,\n    resolve: getResolvedPath,\n    clear: () => FileSystem.clear(),\n  },\n  init: {\n    platform: PLATFORM_AUTO\n  }\n} as BundleConfigOptions);","var o=class{constructor(e){this.map=new Map(e)}getMap(){return this.map}get(e){return this.map.get(e)}keys(){return Array.from(this.map.keys())}values(){return Array.from(this.map.values())}set(e,t){return this.map.set(e,t),this}add(e){let n=this.size;return this.set(n,e),this}get size(){return this.map.size}get length(){return this.map.size}last(e=1){let t=this.keys()[this.size-e];return this.get(t)}delete(e){return this.map.delete(e)}remove(e){return this.map.delete(e),this}clear(){return this.map.clear(),this}has(e){return this.map.has(e)}entries(){return this.map.entries()}forEach(e,t){return this.map.forEach(e,t),this}[Symbol.iterator](){return this.entries()}},b=(p,e,...t)=>{p.forEach(n=>{n[e](...t)})};var h=({callback:p=()=>{},scope:e=null,name:t=\"event\"})=>({callback:p,scope:e,name:t}),c=class extends o{constructor(e=\"event\"){super();this.name=e}},y=class extends o{constructor(){super()}getEvent(e){let t=this.get(e);return t instanceof c?t:(this.set(e,new c(e)),this.get(e))}newListener(e,t,n){let r=this.getEvent(e);return r.add(h({name:e,callback:t,scope:n})),r}on(e,t,n){if(typeof e==\"undefined\"||e==null)return this;typeof e==\"string\"&&(e=e.trim().split(/\\s/g));let r,i,a=typeof e==\"object\"&&!Array.isArray(e),l=a?t:n;return a||(i=t),Object.keys(e).forEach(s=>{r=a?s:e[s],a&&(i=e[s]),this.newListener(r,i,l)},this),this}removeListener(e,t,n){let r=this.get(e);if(r instanceof c&&t){let i=h({name:e,callback:t,scope:n});r.forEach((a,l)=>{if(a.callback===i.callback&&a.scope===i.scope)return r.remove(l)})}return r}off(e,t,n){if(typeof e==\"undefined\"||e==null)return this;typeof e==\"string\"&&(e=e.trim().split(/\\s/g));let r,i,a=typeof e==\"object\"&&!Array.isArray(e),l=a?t:n;return a||(i=t),Object.keys(e).forEach(s=>{r=a?s:e[s],a&&(i=e[s]),typeof i==\"function\"?this.removeListener(r,i,l):this.remove(r)},this),this}once(e,t,n){if(typeof e==\"undefined\"||e==null)return this;typeof e==\"string\"&&(e=e.trim().split(/\\s/g));let r=typeof e==\"object\"&&!Array.isArray(e);return Object.keys(e).forEach(i=>{let a=r?i:e[i],l=r?e[i]:t,s=r?t:n,u=(...f)=>{l.apply(s,f),this.removeListener(a,u,s)};this.newListener(a,u,s)},this),this}emit(e,...t){return typeof e==\"undefined\"||e==null?this:(typeof e==\"string\"&&(e=e.trim().split(/\\s/g)),e.forEach(n=>{let r=this.get(n);r instanceof c&&r.forEach(i=>{let{callback:a,scope:l}=i;a.apply(l,t)})},this),this)}clear(){return b(this,\"clear\"),super.clear(),this}},d=y;export{c as Event,y as EventEmitter,d as default,h as newListener};\n","import { EventEmitter } from \"@okikio/emitter\";\nexport const EVENTS_OPTS = {\n  \"init.start\": console.log,\n  \"init.complete\": console.info,\n  \"init.error\": console.error,\n  \"init.loading\": console.warn,\n\n  \"logger.log\": console.log,\n  \"logger.error\": console.error,\n  \"logger.warn\": console.warn,\n  \"logger.info\": console.info\n};\n\nexport const EVENTS = new EventEmitter();\nEVENTS.on(EVENTS_OPTS);","import type { OutputFile } from \"esbuild-wasm\";\nimport type * as ESBUILD from \"esbuild\";\n\nexport const STATE = {\n  initialized: false,\n\n  /**\n   * Assets are files during the build process that esbuild can't handle natively, \n   * e.g. fetching web workers using the `new URL(\"...\", import.meta.url)`\n   */\n  assets: [] as OutputFile[],\n\n  /**\n   * Instance of esbuild being used\n   */\n  esbuild: null as typeof ESBUILD\n};\n\nexport default STATE;","// Based off of @hyrious esbuild-repl https://github.com/hyrious/esbuild-repl/blob/main/src/helpers/ansi.ts\n// https://github.com/evanw/esbuild/blob/master/internal/logger/logger.go\nexport const ESCAPE_TO_COLOR = {\n  \"37\": \"dim\",\n  \"31\": \"red\",\n  \"32\": \"green\",\n  \"34\": \"blue\",\n  \"36\": \"cyan\",\n  \"35\": \"magenta\",\n  \"33\": \"yellow\",\n  \"41;31\": \"red-bg-red\",\n  \"41;97\": \"red-bg-white\",\n  \"42;32\": \"green-bg-green\",\n  \"42;97\": \"green-bg-white\",\n  \"44;34\": \"blue-bg-blue\",\n  \"44;97\": \"blue-bg-white\",\n  \"46;36\": \"cyan-bg-cyan\",\n  \"46;30\": \"cyan-bg-black\",\n  \"45;35\": \"magenta-bg-magenta\",\n  \"45;30\": \"magenta-bg-black\",\n  \"43;33\": \"yellow-bg-yellow\",\n  \"43;30\": \"yellow-bg-black\",\n} as const;\n\nexport type Escape = \"0\" | \"1\" | \"4\" | keyof typeof ESCAPE_TO_COLOR;\nexport type Color = typeof ESCAPE_TO_COLOR[keyof typeof ESCAPE_TO_COLOR];\n\n// https://github.com/sindresorhus/escape-goat\nexport function htmlEscape(string: string) {\n  return string\n    .replace(/\\<br\\>/g, \"\\n\")\n    .replace(/\\&/g, \"&amp;\")\n    .replace(/\\\"/g, \"&quot;\")\n    .replace(/\\'/g, \"&#39;\")\n    .replace(/\\</g, \"&lt;\")\n    .replace(/\\>/g, \"&gt;\");\n}\n\nexport class AnsiBuffer {\n  result = \"\";\n  _stack: string[] = [];\n  _bold = false;\n  _underline = false;\n  _link = false;\n  text(text: string) {\n    this.result += htmlEscape(text);\n  }\n  reset() {\n    let close: string | undefined;\n    while ((close = this._stack.pop())) {\n      this.result += close;\n    }\n  }\n  bold() {\n    if (!this._bold) {\n      this._bold = true;\n      this.result += \"<strong>\";\n      this._stack.push(\"</strong>\");\n    }\n  }\n  underline() {\n    if (!this._underline) {\n      this._underline = true;\n      this.result += \"<ins>\";\n      this._stack.push(\"</ins>\");\n    }\n  }\n  last() {\n    return this._stack[this._stack.length - 1];\n  }\n  color(color: Color) {\n    let close: string | undefined;\n    while ((close = this.last()) === \"</span>\") {\n      this._stack.pop();\n      this.result += close;\n    }\n    this.result += `<span class=\"color-${color}\">`;\n    this._stack.push(\"</span>\");\n  }\n  done() {\n    this.reset();\n    return this.result;\n  }\n}\n\nexport function render(ansi: string) {\n  ansi = ansi.trimEnd();\n  let i = 0;\n  const buffer = new AnsiBuffer();\n  for (let m of ansi.matchAll(/\\x1B\\[([\\d;]+)m/g)) {\n    const escape = m[1] as Escape;\n    buffer.text(ansi.slice(i, m.index));\n    i = m.index! + m[0].length;\n      /*  */ if (escape === \"0\") {\n      buffer.reset();\n    } else if (escape === \"1\") {\n      buffer.bold();\n    } else if (escape === \"4\") {\n      buffer.underline();\n    } else if (ESCAPE_TO_COLOR[escape]) {\n      buffer.color(ESCAPE_TO_COLOR[escape]);\n    }\n  }\n  if (i < ansi.length) {\n    buffer.text(ansi.slice(i));\n  }\n  return buffer.done();\n}\n\nexport { render as ansi };\nexport default render;","import type { PartialMessage } from \"esbuild-wasm\";\nimport { formatMessages } from \"esbuild-wasm\";\n\nimport { ansi } from \"./ansi\";\n\n/** \n * Inspired by https://github.com/egoist/play-esbuild/blob/main/src/lib/esbuild.ts\n * I didn't even know this was exported by esbuild, great job @egoist\n*/\nexport const createNotice = async (errors: PartialMessage[], kind: \"error\" | \"warning\" = \"error\", color = true) => {\n  let notices = await formatMessages(errors, { color, kind });\n  return notices.map((msg) => !color ? msg : ansi(msg.replace(/(\\s+)(\\d+)(\\s+)\\│/g, \"\\n$1$2$3│\")));\n}\n\nexport default createNotice;","import type { BundleConfigOptions, CompressionOptions } from \"./configs/options\";\nimport type { PLATFORM } from \"./configs/platform\";\nimport type * as ESBUILD from \"esbuild-wasm\";\n\n// import ESBUILD_WASM from \"./wasm\";\nimport { version } from \"esbuild-wasm\";\n\nimport * as _bytes from \"bytes\";\n// @ts-ignore\nconst bytes = _bytes.default;\n\nimport { EXTERNAL } from \"./plugins/external\";\nimport { HTTP } from \"./plugins/http\";\nimport { CDN } from \"./plugins/cdn\";\nimport { ALIAS } from \"./plugins/alias\";\nimport { VIRTUAL_FS } from \"./plugins/virtual-fs\";\n\nimport { DefaultConfig } from \"./configs/options\";\nimport { EVENTS } from \"./configs/events\";\nimport { STATE } from \"./configs/state\";\n\nimport { encode } from \"./utils/encode-decode\";\nimport { deepAssign } from \"./utils/deep-equal\";\n\nimport { createNotice } from \"./utils/create-notice\";\n\nexport const INPUT_EVENTS = {\n  \"build\": build,\n  \"init\": init\n};\n\nexport async function getESBUILD(platform: PLATFORM = \"node\"): Promise<typeof ESBUILD> {\n  try {\n    switch (platform) {\n      case \"node\":\n        return await import(\"esbuild\");\n      case \"deno\":\n        return await import(\n          /* @vite-ignore */\n          `https://deno.land/x/esbuild@v${version}/mod.js`\n        );\n      default:\n        return await import(\"esbuild-wasm\");\n    }\n  } catch (e) {\n    throw e;\n  }\n}\n\nexport async function init({ platform, ...opts }: BundleConfigOptions[\"init\"] = {}) {\n  try {\n    if (!STATE.initialized) {\n      EVENTS.emit(\"init.start\");\n\n      STATE.esbuild = await getESBUILD(platform);\n      if (platform !== \"node\" && platform !== \"deno\") {\n        const { default: ESBUILD_WASM } = await import(\"./wasm\");\n        await STATE.esbuild.initialize({\n          wasmModule: new WebAssembly.Module(await ESBUILD_WASM()),\n          ...opts\n        });\n      }\n\n      STATE.initialized = true;\n      EVENTS.emit(\"init.complete\");\n    }\n\n    return STATE.esbuild;\n  } catch (error) {\n    EVENTS.emit(\"init.error\", error);\n    console.error(error);\n  }\n}\n\nexport async function build(opts: BundleConfigOptions = {}): Promise<any> {\n  if (!STATE.initialized)\n    EVENTS.emit(\"init.loading\");\n  \n  const CONFIG = deepAssign({}, DefaultConfig, opts) as BundleConfigOptions;\n  const { build: bundle } = await init(CONFIG.init);\n  const { define = {}, loader = {}, ...esbuildOpts } = CONFIG.esbuild ?? {};\n\n  // Stores content from all external outputed files, this is for checking the gzip size when dealing with CSS and other external files\n  let outputs: ESBUILD.OutputFile[] = [];\n  let content: Uint8Array[] = [];\n  let result: ESBUILD.BuildResult | ESBUILD.BuildIncremental;\n\n  try {\n    try {\n      const keys = \"p.env.NODE_ENV\".replace(\"p.\", \"process.\");\n      result = await bundle({\n        entryPoints: CONFIG?.entryPoints ?? [],\n        metafile: Boolean(CONFIG.analysis),\n        loader: {\n          '.png': 'file',\n          '.jpeg': 'file',\n          '.ttf': 'file',\n          '.svg': 'text',\n          '.html': 'text',\n          '.scss': 'css'\n        },\n        define: {\n          \"__NODE__\": `false`,\n          // vite crashes for some reason when it sees \"process.env.NODE_ENV\"\n          [keys]: `\"production\"`,\n          ...define\n        },\n        write: false,\n        outdir: \"/\",\n        plugins: [\n          ALIAS(EVENTS, STATE, CONFIG),\n          EXTERNAL(EVENTS, STATE, CONFIG),\n          HTTP(EVENTS, STATE, CONFIG),\n          CDN(EVENTS, STATE, CONFIG),\n          VIRTUAL_FS(EVENTS, STATE, CONFIG),\n        ],\n        ...esbuildOpts,\n      });\n    } catch (e) {\n      if (e.errors) {\n        // Log errors with added color info. to the virtual console\n        const asciMsgs = [...await createNotice(e.errors, \"error\", false)];\n        const htmlMsgs = [...await createNotice(e.errors, \"error\")];\n\n        EVENTS.emit(\"logger.error\", asciMsgs, htmlMsgs);\n\n        const message = (htmlMsgs.length > 1 ? `${htmlMsgs.length} error(s) ` : \"\") + \"(if you are having trouble solving this issue, please create a new issue in the repo, https://github.com/okikio/bundle)\";\n        return EVENTS.emit(\"logger.error\", message);\n      } else throw e;\n    }\n\n    // Create an array of assets and actual output files, this will later be used to calculate total file size\n    outputs = await Promise.all(\n      [...STATE.assets]\n        .concat(result?.outputFiles as ESBUILD.OutputFile[])\n    );\n    content = await Promise.all(\n      outputs\n        ?.map(({ path, text, contents }) => {\n          if (/\\.map$/.test(path))\n            return encode(\"\");\n\n          // For debugging reasons, if the user chooses verbose, print all the content to the Shared Worker console\n          if (esbuildOpts?.logLevel == \"verbose\") {\n            const ignoreFile = /\\.(wasm|png|jpeg|webp)$/.test(path);\n            if (ignoreFile) {\n              EVENTS.emit(\"logger.log\", \"Output File: \" + path);\n            } else {\n              EVENTS.emit(\"logger.log\", \"Output File: \" + path + \"\\n\" + text);\n            }\n          }\n\n          return contents;\n        })\n    );\n\n    // Use multiple compression algorithims & pretty-bytes for the total gzip, brotli & lz4 compressed size\n    let { compression = {} } = CONFIG;\n    let { type = \"gzip\", quality: level = 9 } =\n      (typeof compression == \"string\" ? { type: compression } : (compression ?? {})) as CompressionOptions;\n\n    // @ts-ignore\n    let totalByteLength = bytes(\n      content.reduce((acc, { byteLength }) => acc + byteLength, 0)\n    );\n\n    // Choose a different compression function based on the compression type\n    let compressionMap = await (async () => {\n      switch (type) {\n        case \"lz4\":\n          const { compress: lz4_compress } = await import(\"./deno/lz4/mod\");\n          return async (code: Uint8Array) => {\n            return await lz4_compress(code);\n          };\n        case \"brotli\":\n          const { compress } = await import(\"./deno/brotli/mod\");\n          return async (code: Uint8Array) => {\n            return await compress(code, code.length, level);\n          }\n        default:\n          const { gzip, getWASM } = await import(\"./deno/denoflate/mod\");\n          await getWASM();\n          return async (code: Uint8Array) => {\n            return await gzip(code, level);\n          };\n      }\n    })();\n    let totalCompressedSize = bytes(\n      (await Promise.all(content.map(compressionMap)))\n        .reduce((acc, { length }) => acc + length, 0)\n    );\n\n    // // Ensure a fresh filesystem on every run\n    // FileSystem.clear();\n\n    // // Reset assets\n    // STATE.assets = [];\n\n    return {\n      // content: output,\n      result,\n      outputFiles: result.outputFiles,\n      initialSize: `${totalByteLength}`,\n      // size: `${totalCompressedSize} (${type})`\n    };\n  } catch (e) { }\n}\n\nexport { };","// Based on https://davidwalsh.name/javascript-debounce-function\n// Returns a function, that, as long as it continues to be invoked, will not\n// be triggered. The function will be called after it stops being called for\n// N milliseconds. If `immediate` is passed, trigger the function on the\n// leading edge, instead of the trailing.\nexport const debounce = (func: (...args: any[]) => any, wait: number = 300, immediate?: boolean) => {\n  let timeout: number | null;\n  return function (...args: any[]) {\n    let context = this;\n    let later = () => {\n      timeout = null;\n      if (!immediate) func.apply(context, args);\n    };\n\n    let callNow = immediate && !timeout;\n    clearTimeout(timeout);\n\n    // @ts-ignore\n    timeout = setTimeout(later, wait);\n    if (callNow) func.apply(context, args);\n  };\n};","var v=\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\",y=\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+-$\",x={};function M(r,s){if(!x[r]){x[r]={};for(let f=0;f<r.length;f++)x[r][r.charAt(f)]=f}return x[r][s]}function S(r){if(r==null)return\"\";let s=b(r,6,f=>v.charAt(f));switch(s.length%4){default:case 0:return s;case 1:return s+\"===\";case 2:return s+\"==\";case 3:return s+\"=\"}}function O(r){return r==null?\"\":r==\"\"?null:A(r.length,32,s=>M(v,r.charAt(s)))}function j(r){return r==null?\"\":b(r,6,s=>y.charAt(s))}function k(r){return r==null?\"\":r==\"\"?null:(r=r.replaceAll(\" \",\"+\"),A(r.length,32,s=>M(y,r.charAt(s))))}function D(r){return b(r,16,String.fromCharCode)}function R(r){return r==null?\"\":r==\"\"?null:A(r.length,32768,s=>r.charCodeAt(s))}function b(r,s,f){if(r==null)return\"\";let p=[],m={},h={},i,w,o,g=\"\",u=\"\",d=\"\",l=2,a=3,c=2,e=0,t=0;for(w=0;w<r.length;w+=1)if(g=r.charAt(w),Object.prototype.hasOwnProperty.call(m,g)||(m[g]=a++,h[g]=!0),d=u+g,Object.prototype.hasOwnProperty.call(m,d))u=d;else{if(Object.prototype.hasOwnProperty.call(h,u)){if(u.charCodeAt(0)<256){for(i=0;i<c;i++)e=e<<1,t==s-1?(t=0,p.push(f(e)),e=0):t++;for(o=u.charCodeAt(0),i=0;i<8;i++)e=e<<1|o&1,t==s-1?(t=0,p.push(f(e)),e=0):t++,o=o>>1}else{for(o=1,i=0;i<c;i++)e=e<<1|o,t==s-1?(t=0,p.push(f(e)),e=0):t++,o=0;for(o=u.charCodeAt(0),i=0;i<16;i++)e=e<<1|o&1,t==s-1?(t=0,p.push(f(e)),e=0):t++,o=o>>1}l--,l==0&&(l=Math.pow(2,c),c++),delete h[u]}else for(o=m[u],i=0;i<c;i++)e=e<<1|o&1,t==s-1?(t=0,p.push(f(e)),e=0):t++,o=o>>1;l--,l==0&&(l=Math.pow(2,c),c++),m[d]=a++,u=String(g)}if(u!==\"\"){if(Object.prototype.hasOwnProperty.call(h,u)){if(u.charCodeAt(0)<256){for(i=0;i<c;i++)e=e<<1,t==s-1?(t=0,p.push(f(e)),e=0):t++;for(o=u.charCodeAt(0),i=0;i<8;i++)e=e<<1|o&1,t==s-1?(t=0,p.push(f(e)),e=0):t++,o=o>>1}else{for(o=1,i=0;i<c;i++)e=e<<1|o,t==s-1?(t=0,p.push(f(e)),e=0):t++,o=0;for(o=u.charCodeAt(0),i=0;i<16;i++)e=e<<1|o&1,t==s-1?(t=0,p.push(f(e)),e=0):t++,o=o>>1}l--,l==0&&(l=Math.pow(2,c),c++),delete h[u]}else for(o=m[u],i=0;i<c;i++)e=e<<1|o&1,t==s-1?(t=0,p.push(f(e)),e=0):t++,o=o>>1;l--,l==0&&(l=Math.pow(2,c),c++)}for(o=2,i=0;i<c;i++)e=e<<1|o&1,t==s-1?(t=0,p.push(f(e)),e=0):t++,o=o>>1;for(;;)if(e=e<<1,t==s-1){p.push(f(e));break}else t++;return p.join(\"\")}function A(r,s,f){let p=[],m,h=4,i=4,w=3,o=\"\",g=[],u,d,l,a,c,e,t,n={val:f(0),position:s,index:1};for(u=0;u<3;u+=1)p[u]=u;for(l=0,c=Math.pow(2,2),e=1;e!=c;)a=n.val&n.position,n.position>>=1,n.position==0&&(n.position=s,n.val=f(n.index++)),l|=(a>0?1:0)*e,e<<=1;switch(m=l){case 0:for(l=0,c=Math.pow(2,8),e=1;e!=c;)a=n.val&n.position,n.position>>=1,n.position==0&&(n.position=s,n.val=f(n.index++)),l|=(a>0?1:0)*e,e<<=1;t=String.fromCharCode(l);break;case 1:for(l=0,c=Math.pow(2,16),e=1;e!=c;)a=n.val&n.position,n.position>>=1,n.position==0&&(n.position=s,n.val=f(n.index++)),l|=(a>0?1:0)*e,e<<=1;t=String.fromCharCode(l);break;case 2:return\"\"}for(p[3]=t,d=t,g.push(t);;){if(n.index>r)return\"\";for(l=0,c=Math.pow(2,w),e=1;e!=c;)a=n.val&n.position,n.position>>=1,n.position==0&&(n.position=s,n.val=f(n.index++)),l|=(a>0?1:0)*e,e<<=1;switch(t=l){case 0:for(l=0,c=Math.pow(2,8),e=1;e!=c;)a=n.val&n.position,n.position>>=1,n.position==0&&(n.position=s,n.val=f(n.index++)),l|=(a>0?1:0)*e,e<<=1;p[i++]=String.fromCharCode(l),t=i-1,h--;break;case 1:for(l=0,c=Math.pow(2,16),e=1;e!=c;)a=n.val&n.position,n.position>>=1,n.position==0&&(n.position=s,n.val=f(n.index++)),l|=(a>0?1:0)*e,e<<=1;p[i++]=String.fromCharCode(l),t=i-1,h--;break;case 2:return g.join(\"\")}if(h==0&&(h=Math.pow(2,w),w++),p[t])o=p[t];else if(t===i&&typeof d==\"string\")o=d+d.charAt(0);else return null;g.push(o),p[i++]=d+o.charAt(0),h--,d=o,h==0&&(h=Math.pow(2,w),w++)}}export{D as compress,S as compressToBase64,j as compressToURL,R as decompress,O as decompressFromBase64,k as decompressFromURL};\n","import { decompressFromURL } from \"@amoutonbrady/lz-string\";\nimport { EasyDefaultConfig } from \"../configs/options\";\nimport { deepAssign } from \"./deep-equal\";\n\nexport * from \"@amoutonbrady/lz-string\";\n\n/**\n * Treeshake exports/imports. It allows for specifing multiple exports per package, through this syntax\n * ```ts\n * \"[{ x,y,z }],[*],[* as X],[{ type xyz }]\" \n * // to\n * export { x, y, z } from \"...\";\n * export * from \"...\";\n * export * as X from \"...\";\n * export { type xyz } from \"...\";\n * ```\n * where the square brackets represent seperate packages, and everything inside the squarebrackets,\n * are the exported methods, types, etc...\n */\nexport const parseTreeshakeExports = (str: string) =>\n  (str ?? \"\").split(/\\],/).map((str) => str.replace(/\\[|\\]/g, \"\"));\n\n// Inspired by https://github.com/solidjs/solid-playground\n/**\n* Converts URL's into code. It allows for specifing multiple exports per package, through this syntax\n* ```ts\n* \"/?q=(import)@okikio/emitter,(import)@okikio/animate,(import)@okikio/animate,(import)@okikio/animate,(import)@okikio/animate,@okikio/animate,@okikio/animate,@okikio/animate,@okikio/animate&treeshake=[T],[{+animate+}],[{+animate+as+B+}],[*+as+TR],[{+type+animate+}],[*],[{+animate+as+A+}],[*+as+PR],[{+animate+}]&share=MYewdgziA2CmB00QHMAUAiAwiG6CUQA\" \n* // to\n* // Click Build for the Bundled, Minified & Gzipped package size\n* import T from \"@okikio/emitter\";\n* import { animate } from \"@okikio/animate\";\n* import { animate as B } from \"@okikio/animate\";\n* import * as TR from \"@okikio/animate\";\n* import { type animate } from \"@okikio/animate\";\n* export * from \"@okikio/animate\";\n* export { animate as A } from \"@okikio/animate\";\n* export * as PR from \"@okikio/animate\";\n* export { animate } from \"@okikio/animate\";\n* console.log(\"Cool\")\n* ```\n* - `q` represents the module, e.g. react, vue, etc... You can add `(import)` in-front of a specific module to make it an import instead of an export\n* - `treeshake` represents the exports to treeshake. Read more about this here, {@link parseTreeshakeExports}\n* - `share` represents all other code that isn't export/import\n*/\nexport const parseShareQuery = (shareURL: URL) => {\n  try {\n    const searchParams = shareURL.searchParams;\n    let result = \"\";\n    let query = searchParams.get(\"query\") || searchParams.get(\"q\");\n    let treeshake = searchParams.get(\"treeshake\");\n    if (query) {\n      let queryArr = query.trim().split(\",\");\n      let treeshakeArr = parseTreeshakeExports((treeshake ?? \"\").trim());\n      result += (\n        \"// Click Build for the Bundled, Minified & Compressed package size\\n\" +\n        queryArr\n          .map((q, i) => {\n            let treeshakeExports =\n              treeshakeArr[i] && treeshakeArr[i].trim() !== \"*\"\n                ? treeshakeArr[i].trim().split(\",\").join(\", \")\n                : \"*\";\n            let [, ,\n              declaration = \"export\",\n              module\n            ] = /^(\\((.*)\\))?(.*)/.exec(q);\n            return `${declaration} ${treeshakeExports} from ${JSON.stringify(\n              module\n            )};`;\n          })\n          .join(\"\\n\")\n      );\n    }\n\n    let share = searchParams.get(\"share\");\n    if (share) result += \"\\n\" + decompressFromURL(share.trim());\n\n    let plaintext = searchParams.get(\"text\");\n    if (plaintext) {\n      result += \"\\n\" + JSON.parse(\n        /**    \n         * Support users wrapping/not-wrapping plaintext in a string, \n         * e.g. \n         * ```md\n         * \n         * \n         * /?text=\"console.log(document)\\nconsole.log(window)\"\n         * and\n         * /?text=console.log(document)\\nconsole.log(window)\n         * \n         * \n         * are the same, they result in \n         * ```ts\n         * console.log(document)\n         * console.log(window)\n         * ```\n        */\n        /^[\"']/.test(plaintext) && /[\"']$/.test(plaintext) ? plaintext : JSON.stringify(\"\" + plaintext).replace(/\\\\\\\\/g, \"\\\\\")\n      );\n    }\n\n    return result.trim();\n  } catch (e) { }\n};\n\n/**\n* Converts URL's into config. \n* - `config` represents the JSON config\n*/\nexport const parseConfig = (shareURL: URL) => {\n  try {\n    const searchParams = shareURL.searchParams;\n    const config = searchParams.get(\"config\") ?? \"{}\";\n    return deepAssign({}, EasyDefaultConfig, JSON.parse(config ? config : \"{}\"));\n  } catch (e) { }\n};","import { getRequest } from \"./fetch-and-cache\";\nimport { parse as parsePackageName } from \"parse-package-name\";\n\n/**\n * Returns registry url for packages which have the input string\n * \n * @param input package to generate npm registry url for\n * @returns the proper npm registry url with package input package versions etc...\n */\nexport const getRegistryURL = (input: string) => {\n  const host = \"https://registry.npmjs.com\";\n\n  let { name, version, path } = parsePackageName(input);\n  let searchURL = `${host}/-/v1/search?text=${encodeURIComponent(name)}&popularity=0.5&size=30`;\n  let packageURL = `${host}/${name}/${version}`;\n\n  return { searchURL, packageURL, version, name, path };\n};\n\n/**\n * Searches the npm registry for packages with matching names\n * \n * @param input package name to search for\n * @returns resulting package info.\n */\nexport const getPackages = async (input: string) => {\n  let { searchURL } = getRegistryURL(input);\n  let result: any;\n\n  try {\n    let response = await getRequest(searchURL, false);\n    result = await response.json();\n  } catch (e) {\n    console.warn(e);\n    throw e;\n  }\n\n  let packages = result?.objects;\n  return { packages, info: result };\n}\n\n/**\n * Searches the npm registry for packages with matching names\n * \n * @param input package name to search for\n * @returns resulting package info.\n */\nexport const getPackage = async (input: string) => {\n  let { packageURL } = getRegistryURL(input);\n  let result: any;\n\n  try {\n    let response = await getRequest(packageURL, false);\n    result = await response.json();\n  } catch (e) {\n    console.warn(e);\n    throw e;\n  }\n\n  return result;\n}","// https://deno.land/x/brotli@v0.1.4/mod.ts\n// Copyright 2020-present the denosaurs team. All rights reserved. MIT license.\n// import init, {\n//     source,\n//     compress as wasm_compress,\n//     decompress as wasm_decompress,\n// } from \"./wasm\";\n\nlet initialized = false;\nlet initWASM: typeof import(\"./wasm\");\nexport const getWASM = async () => {\n    if (initWASM) return initWASM;\n\n    const wasm = await import(\"./wasm\");\n    const { default: init, source } = wasm;\n    \n    if (!initialized) await init(await source());\n    return (initWASM = wasm);\n}\n\n/**\n * Compress a byte array.\n *\n * ```typescript\n * import { compress } from \"https://deno.land/x/brotli/mod.ts\";\n * const text = new TextEncoder().encode(\"X\".repeat(64));\n * console.log(text.length);                   // 64 Bytes\n * console.log(compress(text).length);         // 10 Bytes\n * ```\n *\n * @param input Input data.\n * @param bufferSize Read buffer size\n * @param quality Controls the compression-speed vs compression-\n * density tradeoff. The higher the quality, the slower the compression.\n * @param lgwin Base 2 logarithm of the sliding window size.\n */\nexport async function compress(\n    input: Uint8Array,\n    bufferSize: number = 4096,\n    quality: number = 6,\n    lgwin: number = 22,\n): Promise<Uint8Array> {\n    const { compress } = await getWASM();\n    return compress(input, bufferSize, quality, lgwin);\n}\n\n/**\n * Decompress a byte array.\n *\n * ```typescript\n * import { decompress } from \"https://deno.land/x/brotli/mod.ts\";\n * const compressed = Uint8Array.from([ 27, 63, 0, 0, 36, 176, 226, 153, 64, 18 ]);\n * console.log(compressed.length);             // 10 Bytes\n * console.log(decompress(compressed).length); // 64 Bytes\n * ```\n *\n * @param input Input data.\n * @param bufferSize Read buffer size\n */\nexport async function decompress(\n    input: Uint8Array,\n    bufferSize: number = 4096,\n): Promise<Uint8Array> {\n    const { decompress } = await getWASM();\n    return decompress(input, bufferSize);\n}","// https://deno.land/x/denoflate@1.2.1/mod.ts\n// export {\n//   deflate,\n//   inflate,\n//   gzip,\n//   gunzip,\n//   zlib,\n//   unzlib\n// } from \"./pkg/denoflate.js\";\n\nimport type { InitOutput } from \"./pkg/denoflate\";\n// import init from \"./pkg/denoflate.js\"; \n\n// @ts-ignore\n// import { wasm as WASM } from \"./pkg/denoflate_bg.wasm.js\";\n// import { source } from \"./pkg/wasm.ts\";\n\nexport let wasm: InitOutput;\nexport let initWASM: typeof import(\"./pkg/denoflate.js\");\nexport const getWASM = async (src?: Uint8Array) => {\n  if (initWASM) return initWASM;\n\n  const _exports = await import(\"./pkg/denoflate.js\");\n  const { default: init } = _exports;\n\n  const { wasm: WASM } = (await import(\"./pkg/denoflate_bg.wasm.js\")) as unknown as { wasm: () => Promise<Uint8Array> };\n  (wasm = await init(src ?? await WASM()));\n\n  return (initWASM = _exports);\n}\n\nexport async function deflate(input: Uint8Array, compression?: number) {\n  return (await getWASM()).deflate(input, compression);\n}\n\nexport async function inflate(input: Uint8Array) {\n  return (await getWASM()).inflate(input);\n}\n\nexport async function gzip(input: Uint8Array, compression?: number) {\n  return (await getWASM()).gzip(input, compression);\n}\n\nexport async function gunzip(input: Uint8Array) {\n  return (await getWASM()).gunzip(input);\n}\n\nexport async function zlib(input: Uint8Array, compression?: number) {\n  return (await getWASM()).zlib(input, compression);\n}\n\nexport async function unzlib(input: Uint8Array) {\n  return (await getWASM()).unzlib(input);\n}\n\nexport default wasm;\n","// https://deno.land/x/lz4@v0.1.2/mod.ts\n// Copyright 2020-present the denosaurs team. All rights reserved. MIT license.\n\n// import init, {\n//     source,\n//     lz4_compress,\n//     lz4_decompress,\n// } from \"./wasm\";\n\nlet initialized = false;\nlet initWASM: typeof import(\"./wasm\");\nconst getWASM = async () => {\n    if (initWASM) return initWASM;\n\n    const wasm = await import(\"./wasm\");\n    const { default: init, source } = wasm;\n    \n    if (!initialized) await init(await source());\n    return (initWASM = wasm);\n}\n\n/**\n * Compress a byte array using lz4.\n *\n * ```typescript\n * import { compress } from \"https://deno.land/x/lz4/mod.ts\";\n * const text = new TextEncoder().encode(\"X\".repeat(64));\n * console.log(text.length);                   // 64 Bytes\n * console.log(compress(text).length);         // 6  Bytes\n * ```\n *\n * @param input Input data.\n */\nexport async function compress(input: Uint8Array): Promise<Uint8Array> {\n    const { lz4_compress } = await getWASM();\n    return lz4_compress(input);\n}\n\n/**\n * Decompress a byte array using lz4.\n *\n * ```typescript\n * import { decompress } from \"https://deno.land/x/lz4/mod.ts\";\n * const compressed = Uint8Array.from([ 31, 88, 1, 0, 44, 0 ]);\n * console.log(compressed.length);             // 6 Bytes\n * console.log(decompress(compressed).length); // 64 Bytes\n * ```\n *\n * @param input Input data.\n */\nexport async function decompress(input: Uint8Array): Promise<Uint8Array> {\n    const { lz4_decompress } = await getWASM();\n    return lz4_decompress(input);\n}","// https://deno.land/std@0.61.0/encoding/base64.ts\n// Copyright 2018-2020 the Deno authors. All rights reserved. MIT license.\n\n/**\n * Converts given data with base64 encoding\n * @param data input to encode\n */\n export function encode(data: string | ArrayBuffer): string {\n  if (typeof data === \"string\") {\n    return btoa(data);\n  } else {\n    const d = new Uint8Array(data);\n    let dataString = \"\";\n    for (let i = 0; i < d.length; ++i) {\n      dataString += String.fromCharCode(d[i]);\n    }\n\n    return btoa(dataString);\n  }\n}\n\n/**\n * Converts given base64 encoded data back to original\n * @param data input to decode\n */\nexport function decode(data: string): ArrayBuffer {\n  const binaryString = decodeString(data);\n  const binary = new Uint8Array(binaryString.length);\n  for (let i = 0; i < binary.length; ++i) {\n    binary[i] = binaryString.charCodeAt(i);\n  }\n\n  return binary.buffer;\n}\n\n/**\n * Decodes data assuming the output is in string type\n * @param data input to decode\n */\nexport function decodeString(data: string): string {\n  return atob(data);\n}"],"names":["bytesModule","bytes","bytes_1","format","parse","encode","decode","sep","delimiter","normalize","resolve","isAbsolute","path","join","loop","toName","bail","parsePackageName","b","y","EventEmitter","formatMessages","ansi","_bytes.default","version","decompressFromURL","initWASM","getWASM"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAcAA,QAAc,UAAGC;AACIC,QAAA,QAAA,SAAGC;AACJD,QAAA,QAAA,QAAGE;AAOvB,IAAI,wBAAwB;AAE5B,IAAI,uBAAuB;AAE3B,IAAI,MAAM;AAAA,EACR,GAAI;AAAA,EACJ,IAAI,KAAK;AAAA,EACT,IAAI,KAAK;AAAA,EACT,IAAI,KAAK;AAAA,EACT,IAAI,KAAK,IAAI,MAAM,CAAC;AAAA,EACpB,IAAI,KAAK,IAAI,MAAM,CAAC;AACtB;AAEA,IAAI,cAAc;AAiBlB,iBAAe,OAAO,SAAS;AAC7B,MAAI,OAAO,UAAU,UAAU;AAC7B,WAAOA,QAAM,KAAK;AAAA,EACnB;AAED,MAAI,OAAO,UAAU,UAAU;AAC7B,WAAOD,SAAO,OAAO,OAAO;AAAA,EAC7B;AAED,SAAO;AACT;AAoBA,kBAAgB,OAAO,SAAS;AAC9B,MAAI,CAAC,OAAO,SAAS,KAAK,GAAG;AAC3B,WAAO;AAAA,EACR;AAED,MAAI,MAAM,KAAK,IAAI,KAAK;AACxB,MAAI,qBAAsB,WAAW,QAAQ,sBAAuB;AACpE,MAAI,gBAAiB,WAAW,QAAQ,iBAAkB;AAC1D,MAAI,gBAAiB,WAAW,QAAQ,kBAAkB,SAAa,QAAQ,gBAAgB;AAC/F,MAAI,gBAAgB,QAAQ,WAAW,QAAQ,aAAa;AAC5D,MAAI,OAAQ,WAAW,QAAQ,QAAS;AAExC,MAAI,CAAC,QAAQ,CAAC,IAAI,KAAK,YAAa,IAAG;AACrC,QAAI,OAAO,IAAI,IAAI;AACjB,aAAO;AAAA,IACb,WAAe,OAAO,IAAI,IAAI;AACxB,aAAO;AAAA,IACb,WAAe,OAAO,IAAI,IAAI;AACxB,aAAO;AAAA,IACb,WAAe,OAAO,IAAI,IAAI;AACxB,aAAO;AAAA,IACb,WAAe,OAAO,IAAI,IAAI;AACxB,aAAO;AAAA,IACb,OAAW;AACL,aAAO;AAAA,IACR;AAAA,EACF;AAED,MAAI,MAAM,QAAQ,IAAI,KAAK,YAAa;AACxC,MAAI,MAAM,IAAI,QAAQ,aAAa;AAEnC,MAAI,CAAC,eAAe;AAClB,UAAM,IAAI,QAAQ,sBAAsB,IAAI;AAAA,EAC7C;AAED,MAAI,oBAAoB;AACtB,UAAM,IAAI,MAAM,GAAG,EAAE,IAAI,SAAU,GAAG,GAAG;AACvC,aAAO,MAAM,IACT,EAAE,QAAQ,uBAAuB,kBAAkB,IACnD;AAAA,IACV,CAAK,EAAE,KAAK,GAAG;AAAA,EACZ;AAED,SAAO,MAAM,gBAAgB;AAC/B;AAaA,iBAAe,KAAK;AAClB,MAAI,OAAO,QAAQ,YAAY,CAAC,MAAM,GAAG,GAAG;AAC1C,WAAO;AAAA,EACR;AAED,MAAI,OAAO,QAAQ,UAAU;AAC3B,WAAO;AAAA,EACR;AAGD,MAAI,UAAU,YAAY,KAAK,GAAG;AAClC,MAAI;AACJ,MAAI,OAAO;AAEX,MAAI,CAAC,SAAS;AAEZ,iBAAa,SAAS,KAAK,EAAE;AAC7B,WAAO;AAAA,EACX,OAAS;AAEL,iBAAa,WAAW,QAAQ,EAAE;AAClC,WAAO,QAAQ,GAAG,YAAW;AAAA,EAC9B;AAED,MAAI,MAAM,UAAU,GAAG;AACrB,WAAO;AAAA,EACR;AAED,SAAO,KAAK,MAAM,IAAI,QAAQ,UAAU;AAC1C;;ACtKO,MAAME,WAAS,CAAC,QAAgB,IAAI,YAAY,EAAE,OAAO,GAAG;AAC5D,MAAMC,WAAS,CAAC,QAAsB,IAAI,YAAY,EAAE,OAAO,GAAG;ACDlE,MAAM,mBAAmB;AAUnB,MAAA,cAAc,CAAC,WAAmB;AAC7C,MACE,oDAAoD,KAAK,MAAM,KAC/D,kFAAkF,KAAK,MAAM;AACtF,WAAA;AAAA,WAGP,4BAA4B,KAAK,MAAM,KACvC,mEAAmE,KAAK,MAAM;AACvE,WAAA;AAAA,WAGP,aAAa,KAAK,MAAM,KACxB,8BAA8B,KAAK,MAAM;AAClC,WAAA;AAEF,SAAA;AACT;AAmBO,MAAM,eAAe,CAAC,WAAmB,MAAM,qBAAqB;AAErE,MAAA,aAAa,KAAK,SAAS;AACvB,UAAA;AAAA,WAGC,mBAAmB,KAAK,SAAS;AAClC,UAAA;AAAA,WAGC,WAAW,KAAK,SAAS;AAC1B,UAAA;AAAA,WAGC,yBAAyB,KAAK,SAAS;AACxC,UAAA;AAAA,WAGC,oBAAoB,KAAK,SAAS;AACnC,UAAA;AAAA,WAGC,YAAY,KAAK,SAAS;AAC3B,UAAA;AAAA,WAGC,cAAc,KAAK,SAAS;AAC7B,UAAA;AAER,SAAO,MAAM,KAAK,GAAG,IAAI,MAAM,GAAG;AACpC;AAKO,MAAM,oBAAoB,CAAC,cAChC,UACG,QAAQ,6EAA6E,EAAE,EACvF,QAAQ,oJAAoJ,EAAE,EAC9J,QAAQ,OAAO,EAAE;AAMf,MAAM,YAAY,CAAC,WAAmB,MAAM,qBAAqB;AAClE,MAAA,SAAS,aAAa,WAAW,GAAG;AACpC,MAAA,QAAO,kBAAkB,SAAS;AACtC,MAAI,MAAM,IAAI,IAAI,OAAM,MAAM;AAC9B,SAAO,EAAE,QAAQ,WAAW,aAAM,QAAQ,KAAK;AACjD;AC1FO,MAAM,sBAAsB;AAGtB,MAAA,eAAeD,SAAO,mBAAmB;AAG/C,MAAM,cAAc;AAAA,EACzB,WAAW;AAAA,EACX,aAAa;AAAA,EACb,UAAU;AAAA,EACV,QAAQ;AAAA,EACR,UAAU;AAAA,EACV,UAAU;AAAA,EACV,MAAM;AAAA,EACN,QAAQ;AAAA,EACR,UAAU;AAAA,EACV,iBAAiB;AAAA,EACjB,WAAW;AAAA,EACX,SAAS;AAAA,EACT,OAAO;AAAA,EACP,UAAU;AAAA,EACV,UAAU;AAAA,EACV,SAAS;AAAA,EACT,UAAU;AAAA,EACV,OAAO;AAAA,EACP,QAAQ;AAAA,EACR,YAAY;AAAA,EACZ,eAAe;AAAA,EACf,YAAY;AAAA,EACZ,QAAQ;AAAA,EACR,UAAU;AAAA,EACV,kBAAkB;AAAA,EAClB,OAAO;AAAA,EACP,UAAU;AAAA,EACV,OAAO;AAAA,EACP,OAAO;AAAA,EACP,OAAO;AAAA,EACP,QAAQ;AAAA,EACR,UAAU;AAAA,EACV,kBAAkB;AAAA,EAClB,oBAAoB;AAAA,EACpB,oBAAoB;AAAA,EACpB,qBAAqB;AAAA,EACrB,uBAAuB;AAAA,EACvB,SAAS;AAAA,EACT,IAAI;AAAA,EACJ,IAAI;AAAA,EACJ,MAAM;AAAA,EACN,gBAAgB;AAAA,EAChB,aAAa;AAAA,EACb,gBAAgB;AAClB;AAGa,MAAA,eAAe,OAAO,KAAK,WAAW;AAE5C,MAAM,iBAAiB,CAAC,oBAAoB,sBAAsB,sBAAsB,sBAAsB,yBAAyB,oBAAoB,sBAAsB,sBAAsB,iCAAiC,0BAA0B,6BAA6B,6CAA6C,0CAA0C,aAAa,cAAc;AAEjZ,MAAM,mBAAmB,CAAC,YAAY,SAAS,YAAY,kBAAkB,eAAe,uBAAuB,SAAS,aAAa,cAAc,gBAAgB,QAAQ,GAAG,gBAAgB,GAAG,YAAY;AAGjN,MAAM,aAAa,CAAC,IAAY,WAAqB,OAAO;AAC1D,SAAA,CAAC,GAAG,kBAAkB,GAAG,QAAQ,EAAE,KAAK,CAAC,OAAwB;AACtE,QAAI,OAAO;AAAW,aAAA;AAClB,QAAA,GAAG,WAAW,GAAG,KAAK;AAAU,aAAA;AAC7B,WAAA;AAAA,EAAA,CACR;AACH;AAOO,MAAM,WAAW,CAAC,QAAuB,OAAqB,WAAwC;AAC3G,QAAM,EAAE,WAAW,CAAO,MAAA,QAAQ,WAAW,CAAA;AACtC,SAAA;AAAA,IACL,MAAM;AAAA,IACN,MAAM,QAAO;AAKX,aAAM,UAAU,EAAE,QAAQ,KAAK,GAAG,CAAC,SAAS;AAC1C,YAAI,QAAO,KAAK,KAAK,QAAQ,WAAW,EAAE;AAC1C,YAAI,EAAE,MAAM,YAAY,UAAU,KAAI;AAElC,YAAA,WAAW,SAAS,QAAQ,GAAG;AAC1B,iBAAA;AAAA,YACL,MAAM;AAAA,YACN,WAAW;AAAA,YACX,UAAU;AAAA,UAAA;AAAA,QAEd;AAAA,MAAA,CACD;AAYK,aAAA,OAAO,EAAE,QAAQ,MAAM,WAAW,oBAAoB,GAAG,CAAC,SAAS;AAChE,eAAA;AAAA,UACL,YAAY;AAAA,UACZ,UAAU;AAAA,UACV,UAAU,CAAC;AAAA,YACT,MAAM,GAAG,KAAK;AAAA,YACd,SAAS,IAAI,KAAK;AAAA,UAAA,CACnB;AAAA,QAAA;AAAA,MACH,CACD;AAAA,IACH;AAAA,EAAA;AAEJ;AC/Ha,MAAA,4BAAY,IAAI;AACtB,MAAM,aAAa;AACnB,MAAM,aAAa,OAAO,OAAc,SAAkB,cAA4B;AAC3F,MAAI,kBAA4B,MAAM,MAAM,SAAS,SAAS;AAE1D,MAAA,iBAAiB,gBAAgB;AACrC,MAAI,YAAY;AACR,UAAA,IAAI,SAAS,cAAc;AAAA;AAE3B,UAAA,IAAI,SAAS,cAAc;AAE5B,SAAA;AACT;AAEO,MAAM,aAAa,OAAO,KAAwB,YAAqB,OAAO,cAA4B;AAC/G,MAAI,UAAU,IAAI,QAAQ,IAAI,SAAU,CAAA;AACpC,MAAA;AAEA,MAAA;AACA,MAAA;AAIJ,MAAI,YAAY,YAAY;AAClB,YAAA,MAAM,OAAO,KAAK,UAAU;AACpB,oBAAA,MAAM,MAAM,MAAM,OAAO;AAAA,EAAA,OACpC;AACW,oBAAA,MAAM,IAAI,OAAO;AAAA,EACnC;AAEW,aAAA;AAIX,MAAI,CAAC;AACH,eAAW,MAAM,WAAW,OAAO,SAAS,SAAS;AAAA,WAC9C,CAAC;AACG,eAAA,OAAO,SAAS,SAAS;AAEtC,SAAO,SAAS;AAClB;AC5BO,MAAM,WAAW;AACjB,MAAM,qBAAqB;AAqC3B,MAAM,MAAM;AACZ,MAAM,cAAc;ACnCpB,oBAAoB,OAAoB;AACzC,MAAA,OAAO,UAAS,UAAU;AAC5B,UAAM,IAAI,UACR,mCAAmC,KAAK,UAAU,KAAI,GACxD;AAAA,EACF;AACF;AAEO,8BAA8B,MAAuB;AAC1D,SAAO,SAAS;AAClB;AAeE,yBAAA,OACA,gBACA,WACA,kBACQ;AACR,MAAI,MAAM;AACV,MAAI,oBAAoB;AACxB,MAAI,YAAY;AAChB,MAAI,OAAO;AACP,MAAA;AACK,WAAA,IAAI,GAAG,MAAM,MAAK,QAAQ,KAAK,KAAK,EAAE,GAAG;AAChD,QAAI,IAAI;AAAY,aAAA,MAAK,WAAW,CAAC;AAAA,aAC5B,iBAAgB,IAAK;AAAG;AAAA;AACrB,aAAA;AAER,QAAA,iBAAgB,IAAK,GAAG;AAC1B,UAAI,cAAc,IAAI,KAAK,SAAS;AAAG;AAAA,eAE5B,cAAc,IAAI,KAAK,SAAS,GAAG;AAC5C,YACE,IAAI,SAAS,KACb,sBAAsB,KACtB,IAAI,WAAW,IAAI,SAAS,CAAC,MAAM,YACnC,IAAI,WAAW,IAAI,SAAS,CAAC,MAAM,UACnC;AACI,cAAA,IAAI,SAAS,GAAG;AACZ,kBAAA,iBAAiB,IAAI,YAAY,SAAS;AAChD,gBAAI,mBAAmB,IAAI;AACnB,oBAAA;AACc,kCAAA;AAAA,YAAA,OACf;AACC,oBAAA,IAAI,MAAM,GAAG,cAAc;AACjC,kCAAoB,IAAI,SAAS,IAAI,IAAI,YAAY,SAAS;AAAA,YAChE;AACY,wBAAA;AACL,mBAAA;AACP;AAAA,UAAA,WACS,IAAI,WAAW,KAAK,IAAI,WAAW,GAAG;AACzC,kBAAA;AACc,gCAAA;AACR,wBAAA;AACL,mBAAA;AACP;AAAA,UACF;AAAA,QACF;AACA,YAAI,gBAAgB;AAClB,cAAI,IAAI,SAAS;AAAG,mBAAO,GAAG;AAAA;AACnB,kBAAA;AACS,8BAAA;AAAA,QACtB;AAAA,MAAA,OACK;AACL,YAAI,IAAI,SAAS;AAAG,iBAAO,YAAY,MAAK,MAAM,YAAY,GAAG,CAAC;AAAA;AAC7D,gBAAM,MAAK,MAAM,YAAY,GAAG,CAAC;AACtC,4BAAoB,IAAI,YAAY;AAAA,MACtC;AACY,kBAAA;AACL,aAAA;AAAA,IACE,WAAA,SAAS,YAAY,SAAS,IAAI;AACzC,QAAA;AAAA,IAAA,OACG;AACE,aAAA;AAAA,IACT;AAAA,EACF;AACO,SAAA;AACT;AAEO,iBACL,MACA,YACQ;AACF,QAAA,MAA0B,WAAW,OAAO,WAAW;AAC7D,QAAM,OAAe,WAAW,oBAClB,QAAQ,kBAAkB,OAAO;AAC/C,MAAI,CAAC;AAAY,WAAA;AACjB,MAAI,QAAQ,WAAW;AAAM,WAAO,MAAM;AAC1C,SAAO,MAAM,OAAM;AACrB;AAEA,MAAM,uBAA+C;AAAA,EACnD,KAAU;AAAA,EACV,MAAU;AAAA,EACV,MAAU;AAAA,EACV,MAAU;AAAA,EACV,MAAU;AAAA,EACV,KAAU;AACZ;AAEO,0BAA0B,QAAwB;AACvD,SAAO,OAAO,WAAW,SAAS,CAAC,OAAM;AACvC,WAAO,qBAAqB,OAAM;AAAA,EAAA,CACnC;AACH;ACpHO,MAAME,QAAM;AACZ,MAAMC,cAAY;AAOlB,sBAAoB,cAAgC;AACzD,MAAI,eAAe;AACnB,MAAI,mBAAmB;AAEd,WAAA,IAAI,aAAa,SAAS,GAAG,KAAK,MAAM,CAAC,kBAAkB,KAAK;AACnE,QAAA;AAEJ,QAAI,KAAK;AAAG,cAAO,aAAa;AAAA,SAC3B;AAEH,YAAM,EAAE,SAAS;AACb,UAAA,OAAO,MAAM,QAAQ,YAAY;AAC7B,cAAA,IAAI,UAAU,yCAAyC;AAAA,MAC/D;AACO,cAAA,MAAM,MAAW,KAAA;AAAA,IAC1B;AAEA,eAAW,KAAI;AAGX,QAAA,MAAK,WAAW,GAAG;AACrB;AAAA,IACF;AAEA,mBAAe,GAAG,SAAQ;AACP,uBAAA,MAAK,WAAW,CAAC,MAAM;AAAA,EAC5C;AAMA,iBAAe,gBACb,cACA,CAAC,kBACD,KACA,oBACF;AAEA,MAAI,kBAAkB;AACpB,QAAI,aAAa,SAAS;AAAG,aAAO,IAAI;AAAA;AAC5B,aAAA;AAAA,EAAA,WACH,aAAa,SAAS;AAAU,WAAA;AAAA;AAC/B,WAAA;AACd;AAMO,qBAAmB,OAAsB;AAC9C,aAAW,KAAI;AAEf,MAAI,MAAK,WAAW;AAAU,WAAA;AAE9B,QAAM,cAAa,MAAK,WAAW,CAAC,MAAM;AAC1C,QAAM,oBACJ,MAAK,WAAW,MAAK,SAAS,CAAC,MAAM;AAGvC,UAAO,gBAAgB,OAAM,CAAC,aAAY,KAAK,oBAAoB;AAE/D,MAAA,MAAK,WAAW,KAAK,CAAC;AAAmB,YAAA;AACzC,MAAA,MAAK,SAAS,KAAK;AAA2B,aAAA;AAE9C,MAAA;AAAY,WAAO,IAAI;AACpB,SAAA;AACT;AAMO,sBAAoB,OAAuB;AAChD,aAAW,KAAI;AACf,SAAO,MAAK,SAAS,KAAK,MAAK,WAAW,CAAC,MAAM;AACnD;AAMO,mBAAiB,OAAyB;AAC/C,MAAI,MAAM,WAAW;AAAU,WAAA;AAC3B,MAAA;AACK,WAAA,IAAI,GAAG,MAAM,MAAM,QAAQ,IAAI,KAAK,EAAE,GAAG;AAChD,UAAM,QAAO,MAAM;AACnB,eAAW,KAAI;AACX,QAAA,MAAK,SAAS,GAAG;AACnB,UAAI,CAAC;AAAiB,iBAAA;AAAA;AACjB,kBAAU,IAAI;AAAA,IACrB;AAAA,EACF;AACA,MAAI,CAAC;AAAe,WAAA;AACpB,SAAOC,YAAU,MAAM;AACzB;AAOO,oBAAkB,MAAc,IAAoB;AACzD,aAAW,IAAI;AACf,aAAW,EAAE;AAEb,MAAI,SAAS;AAAW,WAAA;AAExB,SAAOC,UAAQ,IAAI;AACnB,OAAKA,UAAQ,EAAE;AAEf,MAAI,SAAS;AAAW,WAAA;AAGxB,MAAI,YAAY;AAChB,QAAM,UAAU,KAAK;AACd,SAAA,YAAY,SAAS,EAAE,WAAW;AACnC,QAAA,KAAK,WAAW,SAAS,MAAM;AAAoB;AAAA,EACzD;AACA,QAAM,UAAU,UAAU;AAG1B,MAAI,UAAU;AACd,QAAM,QAAQ,GAAG;AACV,SAAA,UAAU,OAAO,EAAE,SAAS;AAC7B,QAAA,GAAG,WAAW,OAAO,MAAM;AAAoB;AAAA,EACrD;AACA,QAAM,QAAQ,QAAQ;AAGhB,QAAA,SAAS,UAAU,QAAQ,UAAU;AAC3C,MAAI,gBAAgB;AACpB,MAAI,IAAI;AACD,SAAA,KAAK,QAAQ,EAAE,GAAG;AACvB,QAAI,MAAM,QAAQ;AAChB,UAAI,QAAQ,QAAQ;AAClB,YAAI,GAAG,WAAW,UAAU,CAAC,MAAM,oBAAoB;AAGrD,iBAAO,GAAG,MAAM,UAAU,IAAI,CAAC;AAAA,QAAA,WACtB,MAAM,GAAG;AAGX,iBAAA,GAAG,MAAM,UAAU,CAAC;AAAA,QAC7B;AAAA,MAAA,WACS,UAAU,QAAQ;AAC3B,YAAI,KAAK,WAAW,YAAY,CAAC,MAAM,oBAAoB;AAGzC,0BAAA;AAAA,QAAA,WACP,MAAM,GAAG;AAGF,0BAAA;AAAA,QAClB;AAAA,MACF;AACA;AAAA,IACF;AACA,UAAM,WAAW,KAAK,WAAW,YAAY,CAAC;AAC9C,UAAM,SAAS,GAAG,WAAW,UAAU,CAAC;AACxC,QAAI,aAAa;AAAQ;AAAA,aAChB,aAAa;AAAoC,sBAAA;AAAA,EAC5D;AAEA,MAAI,MAAM;AAGV,OAAK,IAAI,YAAY,gBAAgB,GAAG,KAAK,SAAS,EAAE,GAAG;AACzD,QAAI,MAAM,WAAW,KAAK,WAAW,CAAC,MAAM,oBAAoB;AAC9D,UAAI,IAAI,WAAW;AAAU,eAAA;AAAA;AACjB,eAAA;AAAA,IACd;AAAA,EACF;AAIA,MAAI,IAAI,SAAS;AAAG,WAAO,MAAM,GAAG,MAAM,UAAU,aAAa;AAAA,OAC5D;AACQ,eAAA;AACP,QAAA,GAAG,WAAW,OAAO,MAAM;AAAsB,QAAA;AAC9C,WAAA,GAAG,MAAM,OAAO;AAAA,EACzB;AACF;AAMO,4BAA0B,OAAsB;AAE9C,SAAA;AACT;AAMO,mBAAiB,OAAsB;AAC5C,aAAW,KAAI;AACf,MAAI,MAAK,WAAW;AAAU,WAAA;AAC9B,QAAM,UAAU,MAAK,WAAW,CAAC,MAAM;AACvC,MAAI,MAAM;AACV,MAAI,eAAe;AACnB,WAAS,IAAI,MAAK,SAAS,GAAG,KAAK,GAAG,EAAE,GAAG;AACzC,QAAI,MAAK,WAAW,CAAC,MAAM,oBAAoB;AAC7C,UAAI,CAAC,cAAc;AACX,cAAA;AACN;AAAA,MACF;AAAA,IAAA,OACK;AAEU,qBAAA;AAAA,IACjB;AAAA,EACF;AAEA,MAAI,QAAQ;AAAI,WAAO,UAAU,MAAM;AACvC,MAAI,WAAW,QAAQ;AAAU,WAAA;AAC1B,SAAA,MAAK,MAAM,GAAG,GAAG;AAC1B;AAOyB,oBAAA,OAAc,MAAM,IAAY;AACvD,MAAI,QAAQ,UAAa,OAAO,QAAQ,UAAU;AAC1C,UAAA,IAAI,UAAU,iCAAiC;AAAA,EACvD;AACA,aAAW,KAAI;AAEf,MAAI,QAAQ;AACZ,MAAI,MAAM;AACV,MAAI,eAAe;AACf,MAAA;AAEA,MAAA,QAAQ,UAAa,IAAI,SAAS,KAAK,IAAI,UAAU,MAAK,QAAQ;AACpE,QAAI,IAAI,WAAW,MAAK,UAAU,QAAQ;AAAa,aAAA;AACnD,QAAA,SAAS,IAAI,SAAS;AAC1B,QAAI,mBAAmB;AACvB,SAAK,IAAI,MAAK,SAAS,GAAG,KAAK,GAAG,EAAE,GAAG;AAC/B,YAAA,OAAO,MAAK,WAAW,CAAC;AAC9B,UAAI,SAAS,oBAAoB;AAG/B,YAAI,CAAC,cAAc;AACjB,kBAAQ,IAAI;AACZ;AAAA,QACF;AAAA,MAAA,OACK;AACL,YAAI,qBAAqB,IAAI;AAGZ,yBAAA;AACf,6BAAmB,IAAI;AAAA,QACzB;AACA,YAAI,UAAU,GAAG;AAEf,cAAI,SAAS,IAAI,WAAW,MAAM,GAAG;AAC/B,gBAAA,EAAE,WAAW,IAAI;AAGb,oBAAA;AAAA,YACR;AAAA,UAAA,OACK;AAGI,qBAAA;AACH,kBAAA;AAAA,UACR;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAEA,QAAI,UAAU;AAAW,YAAA;AAAA,aAChB,QAAQ;AAAI,YAAM,MAAK;AACzB,WAAA,MAAK,MAAM,OAAO,GAAG;AAAA,EAAA,OACvB;AACL,SAAK,IAAI,MAAK,SAAS,GAAG,KAAK,GAAG,EAAE,GAAG;AACrC,UAAI,MAAK,WAAW,CAAC,MAAM,oBAAoB;AAG7C,YAAI,CAAC,cAAc;AACjB,kBAAQ,IAAI;AACZ;AAAA,QACF;AAAA,MAAA,WACS,QAAQ,IAAI;AAGN,uBAAA;AACf,cAAM,IAAI;AAAA,MACZ;AAAA,IACF;AAEA,QAAI,QAAQ;AAAW,aAAA;AAChB,WAAA,MAAK,MAAM,OAAO,GAAG;AAAA,EAC9B;AACF;AAMO,mBAAiB,OAAsB;AAC5C,aAAW,KAAI;AACf,MAAI,WAAW;AACf,MAAI,YAAY;AAChB,MAAI,MAAM;AACV,MAAI,eAAe;AAGnB,MAAI,cAAc;AAClB,WAAS,IAAI,MAAK,SAAS,GAAG,KAAK,GAAG,EAAE,GAAG;AACnC,UAAA,OAAO,MAAK,WAAW,CAAC;AAC9B,QAAI,SAAS,oBAAoB;AAG/B,UAAI,CAAC,cAAc;AACjB,oBAAY,IAAI;AAChB;AAAA,MACF;AACA;AAAA,IACF;AACA,QAAI,QAAQ,IAAI;AAGC,qBAAA;AACf,YAAM,IAAI;AAAA,IACZ;AACA,QAAI,SAAS,UAAU;AAErB,UAAI,aAAa;AAAe,mBAAA;AAAA,eACvB,gBAAgB;AAAiB,sBAAA;AAAA,IAAA,WACjC,aAAa,IAAI;AAGZ,oBAAA;AAAA,IAChB;AAAA,EACF;AAEA,MACE,aAAa,MACb,QAAQ,MAER,gBAAgB,KAEf,gBAAgB,KAAK,aAAa,MAAM,KAAK,aAAa,YAAY,GACvE;AACO,WAAA;AAAA,EACT;AACO,SAAA,MAAK,MAAM,UAAU,GAAG;AACjC;AAMO,kBAAgB,YAA2C;AAChE,MAAI,eAAe,QAAQ,OAAO,eAAe,UAAU;AACzD,UAAM,IAAI,UACR,mEAAmE,OAAO,YAC5E;AAAA,EACF;AACO,SAAA,QAAQ,KAAK,UAAU;AAChC;AAMO,iBAAe,OAA0B;AAC9C,aAAW,KAAI;AAET,QAAA,MAAkB,EAAE,MAAM,IAAI,KAAK,IAAI,MAAM,IAAI,KAAK,IAAI,MAAM,GAAG;AACzE,MAAI,MAAK,WAAW;AAAU,WAAA;AAC9B,QAAM,cAAa,MAAK,WAAW,CAAC,MAAM;AACtC,MAAA;AACJ,MAAI,aAAY;AACd,QAAI,OAAO;AACH,YAAA;AAAA,EAAA,OACH;AACG,YAAA;AAAA,EACV;AACA,MAAI,WAAW;AACf,MAAI,YAAY;AAChB,MAAI,MAAM;AACV,MAAI,eAAe;AACf,MAAA,IAAI,MAAK,SAAS;AAItB,MAAI,cAAc;AAGX,SAAA,KAAK,OAAO,EAAE,GAAG;AAChB,UAAA,OAAO,MAAK,WAAW,CAAC;AAC9B,QAAI,SAAS,oBAAoB;AAG/B,UAAI,CAAC,cAAc;AACjB,oBAAY,IAAI;AAChB;AAAA,MACF;AACA;AAAA,IACF;AACA,QAAI,QAAQ,IAAI;AAGC,qBAAA;AACf,YAAM,IAAI;AAAA,IACZ;AACA,QAAI,SAAS,UAAU;AAErB,UAAI,aAAa;AAAe,mBAAA;AAAA,eACvB,gBAAgB;AAAiB,sBAAA;AAAA,IAAA,WACjC,aAAa,IAAI;AAGZ,oBAAA;AAAA,IAChB;AAAA,EACF;AAEA,MACE,aAAa,MACb,QAAQ,MAER,gBAAgB,KAEf,gBAAgB,KAAK,aAAa,MAAM,KAAK,aAAa,YAAY,GACvE;AACA,QAAI,QAAQ,IAAI;AACV,UAAA,cAAc,KAAK,aAAY;AACjC,YAAI,OAAO,IAAI,OAAO,MAAK,MAAM,GAAG,GAAG;AAAA,MAAA,OAClC;AACL,YAAI,OAAO,IAAI,OAAO,MAAK,MAAM,WAAW,GAAG;AAAA,MACjD;AAAA,IACF;AAAA,EAAA,OACK;AACD,QAAA,cAAc,KAAK,aAAY;AACjC,UAAI,OAAO,MAAK,MAAM,GAAG,QAAQ;AACjC,UAAI,OAAO,MAAK,MAAM,GAAG,GAAG;AAAA,IAAA,OACvB;AACL,UAAI,OAAO,MAAK,MAAM,WAAW,QAAQ;AACzC,UAAI,OAAO,MAAK,MAAM,WAAW,GAAG;AAAA,IACtC;AACA,QAAI,MAAM,MAAK,MAAM,UAAU,GAAG;AAAA,EACpC;AAEA,MAAI,YAAY;AAAG,QAAI,MAAM,MAAK,MAAM,GAAG,YAAY,CAAC;AAAA,WAC/C;AAAY,QAAI,MAAM;AAExB,SAAA;AACT;AAWO,uBAAqB,KAA2B;AACrD,QAAM,eAAe,MAAM,MAAM,IAAI,IAAI,GAAG;AACxC,MAAA,IAAI,YAAY,SAAS;AACrB,UAAA,IAAI,UAAU,qBAAqB;AAAA,EAC3C;AACA,SAAO,mBACL,IAAI,SAAS,QAAQ,wBAAwB,KAAK,CACpD;AACF;AAWO,qBAAmB,OAAmB;AACvC,MAAA,CAACC,aAAW,KAAI,GAAG;AACf,UAAA,IAAI,UAAU,2BAA2B;AAAA,EACjD;AACM,QAAA,MAAM,IAAI,IAAI,UAAU;AAC1B,MAAA,WAAW,iBACb,MAAK,QAAQ,MAAM,KAAK,EAAE,QAAQ,OAAO,KAAK,CAChD;AACO,SAAA;AACT;;;;;;;;;;;;;;;;;;;AC9fA,MAAMC,SAAO;AACb,MAAM,QAAEC,mBAAMJ,gBAAcG;AAmB5B,MAAM,oBAAoB;AAAA,EACxB;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF;AACA,MAAM,mBAAmB,CAAC,KAAK,MAAM,GAAG;AAyDjC,sBACL,MACA;AAAA,EACE,WAAW;AAAA,EACX,UAAU,iBAAiB;AAAA,EAC3B,KAAK;AAAA,EACL,kBAAkB;AAAA,IACK,IACjB;AACR,MAAI,QAAQ,IAAI;AACP,WAAA;AAAA,EACT;AAEM,QAAA,OAAM,MAAM,YAAY,gBAAgB;AACxC,QAAA,WAAW,MAAM,YAAY,gBAAgB;AAC7C,QAAA,OAAO,MAAM,YAAY,CAAC,MAAM,GAAG,IAAI,CAAC,GAAG;AAC3C,QAAA,WAAW,MAAM,YACnB,gCACA;AACE,QAAA,WAAW,MAAM,YAAY,cAAc;AAC3C,QAAA,eAAe,MAAM,YAAY,MAAM;AAG7C,MAAI,YAAY,KAAK;AACrB,SAAO,YAAY,KAAK,KAAK,SAAS,KAAK,YAAY,EAAE,GAAG;AAAY;AACjE,SAAA,KAAK,MAAM,GAAG,SAAS;AAE9B,MAAI,eAAe;AAGnB,WAAS,KAAI,GAAG,KAAI,KAAK,UAAS;AAChC,QAAI,UAAU;AACd,UAAM,aAAuB,CAAA;AAC7B,QAAI,UAAU;AACd,QAAI,WAAW;AACf,QAAI,cAAc;AAClB,QAAI,IAAI;AAGD,WAAA,IAAI,KAAK,UAAU,CAAC,KAAK,SAAS,KAAK,EAAE,GAAG,KAAK;AACtD,UAAI,UAAU;AACD,mBAAA;AACL,cAAA,cAAc,UAAU,mBAAmB;AACtC,mBAAA,YAAY,SAAS,KAAK,EAAE,IAAI,KAAK,KAAK,OAAO,KAAK;AACjE;AAAA,MACF;AAEI,UAAA,KAAK,MAAM,cAAc;AAChB,mBAAA;AACX;AAAA,MACF;AAEI,UAAA,KAAK,MAAM,KAAK;AAClB,YAAI,CAAC,SAAS;AACF,oBAAA;AACC,qBAAA;AACP,cAAA,KAAK,IAAI,MAAM,KAAK;AACtB;AACW,uBAAA;AAAA,UACF,WAAA,KAAK,IAAI,MAAM,KAAK;AAC7B;AACW,uBAAA;AAAA,UACb;AACA;AAAA,QACS,WAAA,KAAK,IAAI,MAAM,KAAK;AAC7B,cAAI,KAAI,IAAI;AACZ,cAAI,QAAQ;AACZ,iBAAO,KAAK,KAAI,MAAM,QAAQ,KAAK,KAAI,MAAM,KAAK;AAChD,qBAAS,KAAK,KAAI;AAClB;AAAA,UACF;AACA,cAAI,KAAK,KAAI,MAAM,OAAO,KAAK,KAAI,MAAM,KAAK;AAC5C,gBAAI,KAAI;AACR,gBAAI,SAAS;AAAoB,yBAAA;AAAA,qBACxB,SAAS;AAAoB,yBAAA;AAAA,qBAC7B,SAAS;AAAoB,yBAAA;AAAA,qBAC7B,SAAS;AAAoB,yBAAA;AAAA,qBAC7B,SAAS;AAAoB,yBAAA;AAAA,qBAC7B,SAAS;AAAoB,yBAAA;AAAA,qBAC7B,SAAS;AAAoB,yBAAA;AAAA,qBAC7B,SAAS;AAAoB,yBAAA;AAAA,qBAC7B,SAAS;AAAoB,yBAAA;AAAA,qBAC7B,SAAS,SAAS;AACd,yBAAA;AAAA,YAAA,WACF,SAAS;AAAoB,yBAAA;AAAA,qBAC/B,SAAS;AAAoB,yBAAA;AAAA,qBAC7B,SAAS;AAAmB,yBAAA;AAAA,qBAC5B,SAAS;AAAqB,yBAAA;AACvC;AAAA,UACF;AAAA,QACF;AAAA,MACF;AAEI,UAAA,KAAK,MAAM,OAAO,SAAS;AACnB,kBAAA;AACC,mBAAA;AACX;AAAA,MACF;AAEA,UAAI,SAAS;AACP,YAAA,KAAK,MAAM,MAAM;AACR,qBAAA;AAAA,QAAA,OACN;AACL,qBAAW,KAAK;AAAA,QAClB;AACA;AAAA,MACF;AAGE,UAAA,KAAK,MAAM,OAAO,WAAW,SAAS,KACtC,WAAW,WAAW,SAAS,MAAM,SACrC;AACW,mBAAA;AACL,cAAA,OAAO,WAAW;AACxB,YAAI,QAAQ,KAAK;AACJ,qBAAA;AAAA,QAAA,WACF,QAAQ,KAAK;AACX,qBAAA;AAAA,QACb;AACA;AAAA,MACF;AAGE,UAAA,KAAK,MAAM,OAAO,WAAW,SAAS,KACtC,WAAW,WAAW,SAAS,MAAM,SACrC;AACW,mBAAA;AACX;AAAA,MACF;AAEA,UAAI,KAAK,MAAM,OAAO,YAAY,KAAK,IAAI,MAAM,KAAK;AACpD;AACA,mBAAW,KAAK,GAAG;AACR,mBAAA;AACX;AAAA,MACF;AAEA,UAAI,KAAK,MAAM,OAAO,YAAY,KAAK,IAAI,MAAM,KAAK;AACpD;AACA,mBAAW,KAAK,GAAG;AACR,mBAAA;AACX;AAAA,MACF;AAEI,UAAA,KAAK,MAAM,KAAK;AAClB,YAAI,YAAY,KAAK,IAAI,MAAM,KAAK;AAClC;AACA,qBAAW,KAAK,GAAG;AACR,qBAAA;AAAA,QAAA,OACN;AACM,qBAAA;AAAA,QACb;AACA;AAAA,MACF;AAEA,UAAI,KAAK,MAAM,OAAO,YAAY,KAAK,IAAI,MAAM,KAAK;AACpD;AACA,mBAAW,KAAK,GAAG;AACR,mBAAA;AACX;AAAA,MACF;AAEI,UAAA,KAAK,MAAM,KAAK;AAClB,mBAAW,KAAK,OAAO;AACZ,mBAAA;AACX;AAAA,MACF;AAEA,UAAI,KAAK,MAAM,OAAO,WAAW,WAAW,SAAS,MAAM,SAAS;AAClE,mBAAW,IAAI;AACJ,mBAAA;AACX;AAAA,MACF;AAEA,UAAI,KAAK,MAAM,OAAO,WAAW,WAAW,SAAS,MAAM,SAAS;AACvD,mBAAA;AACX;AAAA,MACF;AAEI,UAAA,KAAK,MAAM,KAAK;AAClB,YAAI,YAAY,KAAK,IAAI,MAAM,KAAK;AAClC;AACA,qBAAW,KAAK,GAAG;AACR,qBAAA;AAAA,QAAA,OACN;AACC,gBAAA,WAAW,KAAK,IAAI;AAC1B,cAAI,WAAW;AACR,iBAAA,KAAK,IAAI,MAAM,KAAK;AACzB;AACA;AAAA,UACF;AACM,gBAAA,WAAW,KAAK,IAAI;AAC1B,cACE,kBAAkB,YAAY,KAC9B,CAAC,GAAG,MAAM,MAAS,EAAE,SAAS,QAAQ,KACtC,CAAC,GAAG,MAAM,MAAS,EAAE,SAAS,QAAQ,GACtC;AACW,uBAAA;AACG,0BAAA;AAAA,UAAA,OACT;AACM,uBAAA;AAAA,UACb;AAAA,QACF;AACA;AAAA,MACF;AAEW,iBAAA,kBAAkB,SAAS,KAAK,EAAE,IAAI,KAAK,KAAK,OAAO,KAAK;AAAA,IACzE;AAGA,QAAI,WAAW,SAAS,KAAK,WAAW,UAAU;AAEtC,gBAAA;AACV,iBAAW,MAAK,KAAK,MAAM,IAAG,CAAC,GAAG;AAChC,mBAAW,kBAAkB,SAAS,EAAC,IAAI,KAAK,OAAM;AACxC,sBAAA;AAAA,MAChB;AAAA,IACF;AAEgB,oBAAA;AAChB,QAAI,CAAC,aAAa;AACA,sBAAA,IAAI,KAAK,SAAS,OAAM;AAC1B,oBAAA;AAAA,IAChB;AAGO,WAAA,KAAK,SAAS,KAAK,EAAE;AAAG;AAG3B,QAAA,MAAM,KAAI;AACN,YAAA,IAAI,MAAM,oDAAoD;AAAA,IACtE;AACI,SAAA;AAAA,EACN;AAEA,iBAAe,IAAI;AACnB,SAAO,IAAI,OAAO,cAAc,kBAAkB,MAAM,EAAE;AAC5D;AAGO,gBAAgB,KAAsB;AAC3C,QAAM,QAAgC,EAAE,KAAK,KAAK,KAAK,KAAK,KAAK;AACjE,QAAM,QACJ;AAEF,MAAI,QAAQ,IAAI;AACP,WAAA;AAAA,EACT;AAEI,MAAA;AAEJ,SAAQ,QAAQ,MAAM,KAAK,GAAG,GAAI;AAChC,QAAI,MAAM;AAAW,aAAA;AACrB,QAAI,MAAM,MAAM,QAAQ,MAAM,GAAG;AAIjC,UAAM,OAAO,MAAM;AACb,UAAA,QAAQ,OAAO,MAAM,QAAQ;AACnC,QAAI,QAAQ,OAAO;AACjB,YAAM,IAAI,IAAI,QAAQ,OAAO,GAAG;AAChC,UAAI,MAAM,IAAI;AACZ,cAAM,IAAI;AAAA,MACZ;AAAA,IACF;AAEM,UAAA,IAAI,MAAM,GAAG;AAAA,EACrB;AAEO,SAAA;AACT;AAGO,uBACL,MACA,EAAE,WAAW,UAAuB,CAAA,GAC5B;AACJ,MAAA,KAAK,MAAM,KAAK,GAAG;AACf,UAAA,IAAI,MAAM,sCAAsC,OAAO;AAAA,EAC/D;AACA,MAAI,CAAC,UAAU;AACb,WAAOH,YAAU,IAAI;AAAA,EACvB;AACA,QAAM,IAAI,YAAY;AACtB,QAAM,mBAAmB,IAAI,OAC3B,QAAQ,aAAa,cAAc,QACnC,GACF;AACO,SAAAA,YAAU,KAAK,QAAQ,kBAAkB,IAAI,CAAC,EAAE,QAAQ,OAAO,IAAI;AAC5E;AAGO,mBACL,OACA,EAAE,WAAW,MAAM,WAAW,UAAuB,IAC7C;AACR,MAAI,CAAC,YAAY,MAAM,UAAU,GAAG;AAC3B,WAAAI,OAAK,GAAG,KAAK;AAAA,EACtB;AACA,MAAI,MAAM,WAAW;AAAU,WAAA;AAC3B,MAAA;AACJ,aAAW,QAAQ,OAAO;AACxB,UAAM,QAAO;AACT,QAAA,MAAK,SAAS,GAAG;AACnB,UAAI,CAAC;AAAiB,iBAAA;AAAA;AACjB,kBAAU,GAAG,MAAM;AAAA,IAC1B;AAAA,EACF;AACA,MAAI,CAAC;AAAe,WAAA;AACpB,SAAO,cAAc,QAAQ,EAAE,UAAU,SAAU,CAAA;AACrD;AC5YA,MAAM,OAAO;AACN,MAAM,QAAQ;AACR,MAAA;AAAA,EACX;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EAAA,OACAT;AAAAA,EACA;AAAA,EAAA,SACAM;AAAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,IACE;;;;;;;;;;;;;;;;;;;;;;;;;;ACpBS,MAAA,UAAU,CAAC,WAAmB,SAAmB;AACtD,QAAA,MAAM,IAAI,IAAI,MAAM;AAC1B,MAAI,WAAW,iBACb,KAAK,IAAI,UAAU,GAAG,IAAI,EAAE,QAAQ,MAAM,KAAK,EAAE,QAAQ,OAAO,KAAK,CACvE;AACA,SAAO,IAAI;AACb;AAKa,MAAA,eAAe,CAAC,cAAsB;AACjD,SAAO,YAAY,KAAK,SAAS,KAAK,CAAC,WAAW,SAAS;AAC7D;ACnBO,MAAM,qBAAqB,CAAC,QAAQ,OAAO,QAAQ,OAAO,QAAQ,OAAO;AAKnE,MAAA,cAAc,CAAC,WAA2B;AAC/C,QAAA,MAAM,QAAQ,MAAM;AACtB,MAAA,mBAAmB,SAAS,GAAG;AAEzB,WAAA,aAAY,KAAK,GAAG,IAAI,IAAI,QAAQ,SAAS,KAAK,IAAI,KAAK,MAAM,CAAC;AAExE,MAAA,QAAQ,UAAU,QAAQ;AAAe,WAAA;AACzC,MAAA,QAAQ,UAAU,QAAQ;AAAe,WAAA;AAE7C,MAAI,OAAO;AAAgB,WAAA;AAE3B,MAAI,OAAO,UAAU,OAAO,WAAW,OAAO;AAAe,WAAA;AAC7D,MAAI,OAAO,UAAU,OAAO,WAAW,OAAO;AAAe,WAAA;AAC7D,MAAI,OAAO;AAAgB,WAAA;AAEpB,SAAA,IAAI,SAAS,SAAS;AAC/B;ACrBA,gBAAc,SAAS,MAAM;AAC5B,MAAI,OAAO,YAAY,UAAU;AAChC,WAAO;AAAA,EACP;AAED,MAAI,SAAS;AACZ,QAAI,KAAK;AACT,QAAI,MAAM,QAAQ,OAAO,GAAG;AAC3B,WAAK,MAAI,GAAG,MAAM,QAAQ,QAAQ,OAAO;AACxC,YAAI,MAAMI,OAAK,QAAQ,MAAM,IAAI;AAAG,iBAAO;AAAA,MAC3C;AAAA,IACJ,OAAS;AACN,WAAK,OAAO,SAAS;AACpB,YAAI,KAAK,IAAI,GAAG,GAAG;AAClB,iBAAOA,OAAK,QAAQ,MAAM,IAAI;AAAA,QAC9B;AAAA,MACD;AAAA,IACD;AAAA,EACD;AACF;AAOA,gBAAc,MAAM,OAAO,WAAW;AACrC,QAAM,IAAI,MACT,YACE,4BAA4B,oBAAoB,kBAChD,YAAY,qBAAqB,eACrC;AACA;AAMA,kBAAgB,MAAM,OAAO;AAC5B,SAAO,UAAU,OAAO,MACrB,MAAM,OAAO,MAAM,QACnB,MAAM,QAAQ,IAAI,OAAO,MAAM,OAAO,GAAI,GAAG,IAAI;AACrD;AAWO,iBAAiB,KAAK,QAAM,KAAK,UAAQ,CAAA,GAAI;AACnD,MAAI,EAAE,MAAM,YAAY;AAExB,MAAI,SAAS;AACZ,QAAI,EAAE,mBAAS,mBAAS,QAAQ,aAAW,CAAA,MAAO;AAElD,QAAI,SAASC,SAAO,MAAM,KAAK;AAC/B,QAAI,OAAO,OAAO;AAAK,eAAS,OAAO;AAEvC,QAAI,OAAO,YAAY,UAAU;AAChC,aAAO,WAAW,MAAM,UAAUC,OAAK,MAAM,MAAM;AAAA,IACnD;AAED,QAAI,SAAS,oBAAI,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC;AAC/C,cAAU,OAAO,IAAI,WAAU,YAAY,QAAQ;AACnD,cAAU,OAAO,IAAI,WAAU,YAAY,MAAM;AAEjD,QAAI,KAAK,KAAK,WAAS;AAEvB,SAAK,OAAO,SAAS;AACpB,iBAAW,IAAI,OAAO;AACtB;AAAA,IACA;AAED,QAAI,UAAU;AACb,aAAO,WAAW,MACfF,OAAK,SAAS,MAAM,KAAKE,OAAK,MAAM,QAAQ,CAAC,IAC7CA,OAAK,MAAM,MAAM;AAAA,IACpB;AAED,QAAI,MAAM,QAAQ,SAAS;AAC1B,aAAOF,OAAK,KAAK,MAAM,KAAKE,OAAK,MAAM,QAAQ,CAAC;AAAA,IAChD;AAED,SAAK,OAAO,SAAS;AACpB,YAAM,IAAI,IAAI,SAAS;AACvB,UAAI,QAAQ,OAAO,OAAO,WAAW,GAAG,GAAG;AAC1C,eAAQ,OAAMF,OAAK,QAAQ,MAAM,MAAM,KACnC,MAAM,OAAO,UAAU,IAAI,MAAM,IAClCE,OAAK,MAAM,QAAQ,CAAC;AAAA,MACvB;AACD,UAAI,QAAQ,OAAO,OAAO,WAAW,IAAI,MAAM,GAAG,EAAE,CAAC,GAAG;AAEvD,YAAI,OAAO,UAAU,IAAI,SAAS,CAAC,EAAE,SAAS,GAAG;AAChD,iBAAQ,OAAMF,OAAK,QAAQ,MAAM,MAAM,KACpC,IAAI,QAAQ,KAAK,OAAO,UAAU,IAAI,SAAS,CAAC,CAAC,IACjDE,OAAK,MAAM,QAAQ,CAAC;AAAA,QACvB;AAAA,MACD;AAAA,IACD;AAED,WAAOA,OAAK,MAAM,MAAM;AAAA,EACxB;AACF;AAQO,gBAAgB,KAAK,UAAQ,IAAI;AACvC,MAAI,IAAE,GAAG,OACR,WAAU,QAAQ,SAClB,SAAS,QAAQ,UAAU,CAAC,UAAU,MAAM;AAE7C,MAAI,YAAW,CAAC,OAAO,SAAS,SAAS,GAAG;AAC3C,WAAO,QAAQ,SAAS;AAAA,EACxB;AAED,SAAO,IAAI,OAAO,QAAQ,KAAK;AAC9B,QAAI,QAAQ,IAAI,OAAO,KAAK;AAC3B,UAAI,OAAO,SAAS;AAAU;AAAA,eAEnB,OAAO,SAAS,YAAY,OAAO,MAAM,WAAW;AAC9D,YAAI,OAAO,YAAW,UAAU;AAC/B,kBAAQ,MAAM,WAAQD,SAAO,IAAI,MAAM,QAAO;AAC9C,cAAI,SAAS;AAAM,mBAAO;AAAA,QAC1B;AAAA,MACL,OAAU;AACN;AAAA,MACA;AAED,aAAO,OAAO,SAAS,WACnB,OAAO,MAAM,QAAQ,UAAU,EAAE,IAClC;AAAA,IACH;AAAA,EACD;AACF;AChJA,IAAI,YAAY;AAChB,IAAI,gBAAgB;AACpB,eAAe,OAAO;AACpB,QAAM,IAAI,UAAU,KAAK,KAAK,KAAK,cAAc,KAAK,KAAK;AAC3D,MAAI,CAAC,GAAG;AACN,UAAM,IAAI,MAAM,8CAA8C,OAAO;AAAA,EACtE;AACD,SAAO;AAAA,IACL,MAAM,EAAE,MAAM;AAAA,IACd,SAAS,EAAE,MAAM;AAAA,IACjB,MAAM,EAAE,MAAM;AAAA,EAClB;AACA;ACRO,cAAc,SAA2B,MAAmB;AAC9D,MAAA,OAAO,YAAY,UAAU;AACzB,WAAA;AAAA,EACR;AAEA,MAAI,SAAS;AACZ,QAAI,KAAK;AACL,QAAA,MAAM,QAAQ,OAAO,GAAG;AAC3B,WAAK,MAAM,GAAG,MAAM,QAAQ,QAAQ,OAAO;AAC1C,YAAI,MAAM,KAAK,QAAQ,MAAM,IAAI;AAAU,iBAAA;AAAA,MAC5C;AAAA,IAAA,OACM;AACN,WAAK,OAAO,SAAS;AAChB,YAAA,KAAK,IAAI,GAAG,GAAG;AACX,iBAAA,KAAK,QAAQ,MAAM,IAAI;AAAA,QAC/B;AAAA,MACD;AAAA,IACD;AAAA,EACD;AACD;AAOqB,cAAA,MAAc,OAAe,WAAoB;AAC/D,QAAA,IAAI,MACT,YACG,4BAA4B,oBAAoB,kBAChD,YAAY,qBAAqB,eACrC;AACD;AAMO,gBAAgB,MAAc,OAAe;AACnD,SAAO,UAAU,OAAO,MACrB,MAAM,OAAO,MAAM,QAClB,MAAM,QAAQ,IAAI,OAAO,MAAM,OAAO,GAAI,GAAG,IAAI;AACtD;AAkBO,wBAAwB,KAAuB,QAAQ,KAAK,UAAgC,CAAA,GAAI;AAClG,MAAA,EAAE,MAAM,YAAY;AAExB,MAAI,SAAS;AACZ,QAAI,EAAE,mBAAS,mBAAS,QAAQ,aAAa,CAAA,MAAO;AAEhD,QAAA,SAAS,OAAO,MAAM,KAAK;AAG3B,QAAA,OAAO,YAAY,UAAU;AAChC,aAAO,WAAW,MAAM,UAAU,KAAK,MAAM,MAAM;AAAA,IACpD;AAEA,QAAI,SAAa,oBAAA,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC;AAC/C,cAAU,OAAO,IAAI,WAAU,YAAY,QAAQ;AACnD,cAAU,OAAO,IAAI,WAAU,YAAY,MAAM;AAE7C,QAAA,KAAK,KAAK,WAAW;AAEzB,SAAK,OAAO,SAAS;AACpB,iBAAW,IAAI,OAAO;AACtB;AAAA,IACD;AAEA,QAAI,UAAU;AACb,aAAO,WAAW,MACf,KAAK,SAAS,MAAM,KAAK,KAAK,MAAM,QAAQ,CAAC,IAC7C,KAAK,MAAM,MAAM;AAAA,IACrB;AAEI,QAAA,MAAM,QAAQ,SAAS;AAC1B,aAAO,KAAK,KAAK,MAAM,KAAK,KAAK,MAAM,QAAQ,CAAC;AAAA,IACjD;AAEA,SAAK,OAAO,SAAS;AACd,YAAA,IAAI,IAAI,SAAS;AACvB,UAAI,QAAQ,OAAO,OAAO,WAAW,GAAG,GAAG;AAC1C,eAAc,OAAA,KAAK,QAAQ,MAAM,MAAM,KACnC,MAAM,OAAO,UAAU,IAAI,MAAM,IAClC,KAAK,MAAM,QAAQ,CAAC;AAAA,MACxB;AACI,UAAA,QAAQ,OAAO,OAAO,WAAW,IAAI,MAAM,GAAG,EAAE,CAAC,GAAG;AAEvD,YAAI,OAAO,UAAU,IAAI,SAAS,CAAC,EAAE,SAAS,GAAG;AAChD,wBAAc,KAAK,QAAQ,MAAM,MAAM,KACpC,IAAI,QAAQ,KAAK,OAAO,UAAU,IAAI,SAAS,CAAC,CAAC,IACjD,KAAK,MAAM,QAAQ,CAAC;AAAA,QACxB;AAAA,MACD;AAAA,IACD;AAEO,WAAA,KAAK,MAAM,MAAM;AAAA,EACzB;AACD;ACpGO,MAAM,gBAAgB;AAQtB,MAAM,cAAc,CAAC,MAAM,kBAAkB,WAA0B;AAC5E,SAAO,OAAO,SAAkD;AAC1D,QAAA,aAAa,KAAK,IAAI,GAAG;AAE3B,UAAI,EAAE,MAAM,SAAS,WAAW,UAAU,KAAK,MAAM,GAAG;AAGpD,UAAA,UAAU,YAAY,MAAM,KAAK;AAGjC,UAAA,SAASE,MAAiB,OAAO;AACrC,UAAI,UAAU,OAAO;AACrB,UAAI,MAAM,KAAK,YAAY,OAAO,CAAA;AAK9B,UAAA,QAAQ,MAAM,KAAK;AACjB,YAAA,QAAO,eAAe,iCAAK,MAAL,EAAU,SAAS,IAAI,QAAQ,IAAG,SAAS;AAAA,UACnE,SAAS,KAAK,SAAS,kBAAkB,KAAK,SAAS;AAAA,QAAA,CACxD;AAEG,YAAA,OAAO,UAAS,UAAU;AAClB,oBAAA,MAAK,QAAQ,WAAW,GAAG;AAEjC,cAAA,WAAW,QAAQ,OAAO;AAC5B,sBAAU,IAAI;AAEhB,cAAI,WAAU,UAAU,MAAM,IAAI,UAAU;AACxC,cAAA,EAAE,KAAK,EAAE,WAAW,UAAU,GAAG,IAAI,OAAO,WAAU,SAAS;AAC5D,iBAAA;AAAA,YACL,WAAW;AAAA,YACX,MAAM;AAAA,YACN,YAAY,EAAE,IAAI;AAAA,UAAA;AAAA,QAEtB;AAAA,MACF;AAGA,UAAI,aAAa,kBAAkB,OAAO,qBAAqB,OAAO,sBAAsB;AAC5F,UAAI,cAAc,CAAC,UAAU,KAAK,OAAO,GAAG;AACtC,YAAA;AAAA,UACF,kBAAkB,CAAC;AAAA,UACnB,eAAe,CAAC;AAAA,UAChB,mBAAmB,CAAC;AAAA,YAClB;AAEJ,YAAI,OAAO,OAAO,OAAO,CAAI,GAAA,iBAAiB,kBAAkB,YAAY;AACxE,YAAA,OAAO,OAAO,KAAK,IAAI;AAEvB,YAAA,KAAK,SAAS,OAAO;AACvB,iBAAO,UAAU,KAAK;AAAA,MAC1B;AAGA,UAAI,SAAS;AACP,YAAA;AACE,cAAA,EAAE,KAAK,qBAAqB,UAAU,GAAG,OAAO,QAAQ,OAAO,wBAAwB,MAAM;AAG3F,gBAAA,MAAM,WAAW,kBAAkB,IAAI,EAAE,KAAK,CAAC,QAAQ,IAAI,KAAA,CAAM;AACnE,cAAA,QAAO,QAAQ,KAAK,UAAU,MAAM,QAAQ,QAAQ,WAAW,GAAG,IAAI,KAAK;AAAA,YAC7E,SAAS,KAAK,SAAS,kBAAkB,KAAK,SAAS;AAAA,UAAA,CACxD,KAAK,OAAO,GAAG;AAEhB,cAAI,OAAO,UAAS;AAClB,sBAAU,MAAK,QAAQ,WAAW,GAAG,EAAE,QAAQ,aAAa,KAAK;AAE/D,cAAA,WAAW,QAAQ,OAAO;AAC5B,sBAAU,IAAI;AAAA,iBACT;AAEJ,iBAAA,KACC,eACA,gDAAgD,CAAC,aAAa,KAAK,MAAM,IAAI,IAAI,oBAAoB,SAAS,SAAS;AAAA,+QACzH,EACC,KAAK,eAAe,CAAC;AAAA,QAC1B;AAAA,MACF;AAIA,UAAI,UAAU,UAAU,MAAM,OAAO,UAAU;AAC3C,UAAA,EAAE,QAAQ,UAAU,GAAG,OAAO,OAAO,UAAU,WAAW,MAAM;AAC7D,aAAA;AAAA,QACL,WAAW;AAAA,QACX,MAAM,IAAI,SAAS;AAAA,QACnB,YAAY,EAAE,IAAI;AAAA,MAAA;AAAA,IAEtB;AAAA,EAAA;AAEJ;AAQO,MAAM,MAAM,CAAC,QAAuB,OAAqB,WAAwC;AAEtG,MAAI,EAAE,QAAQ,QAAQ,CAAC,IAAI,KAAK,QAAQ,GAAG,IAAI,UAAU,QAAQ,MAAM,GAAG,IAAI,UAAU,QAAQ,GAAG;AAChF,SAAO;AACnB,SAAA;AAAA,IACL,MAAM;AAAA,IACN,MAAM,QAAO;AAEL,aAAA,UAAU,EAAE,QAAQ,QAAQ,YAAY,KAAK,MAAM,CAAC;AACpD,aAAA,UAAU,EAAE,QAAQ,MAAM,WAAW,iBAAiB,YAAY,KAAK,MAAM,CAAC;AAAA,IACtF;AAAA,EAAA;AAEJ;ACzHO,MAAM,iBAAiB;AAQjB,MAAA,WAAW,OAAO,KAAa,WAA0B;AAChE,MAAA;AACE,QAAA,WAAW,MAAM,WAAW,GAAG;AACnC,QAAI,CAAC,SAAS;AACZ,YAAM,IAAI,MAAM,iBAAiB,SAAS,QAAQ,SAAS,cAAc;AAEpE,WAAA,KAAK,eAAe,SAAS,KAAK;AAElC,WAAA;AAAA,MACL,KAAK,SAAS;AAAA,MACd,SAAS,IAAI,WAAW,MAAM,SAAS,aAAa;AAAA,IAAA;AAAA,WAE/C;AACD,UAAA,IAAI,MAAM,mCAAmC;AAAA,EAAS,IAAI,YAAY;AAAA,EAC9E;AACF;AAYO,MAAM,cAAc,OAAO,OAAc,SAAqB,WAAmB,QAAuB,WAAgC;AAC7I,QAAM,MAAM;AACZ,QAAM,YAAY,IAAI,IAAI,MAAM,KAAI,EAAE;AACtC,QAAM,cAAa,OAAO;AAEpB,QAAA,OAAOX,SAAO,OAAO;AAC3B,QAAM,UAAU,MAAM,KAAK,KAAK,SAAS,GAAG,CAAC;AAE7C,QAAM,WAAW,QAAQ,IAAI,OAAO,CAAA,EAAG,cAAc;AAC/C,QAAA,EAAE,SAAS,OAAO,QAAQ,MAAM,SAAS,QAAQ,WAAW,QAAQ,GAAG,MAAM;AAIjF,gBAAW,IAAI,YAAY,MAAM,KAAK,OAAO;AAEtC,WAAA;AAAA,MACL,MAAM;AAAA,MAAU,UAAU;AAAA,MAC1B,IAAI,OAAO;AAAE,eAAOA,SAAO,KAAK;AAAA,MAAG;AAAA,IAAA;AAAA,EACrC,CACD;AAEM,SAAA,MAAM,QAAQ,WAAW,QAAQ;AAC1C;AAQO,MAAM,eAAe,CAAC,OAAO,kBAAkB,WAA0B;AAC9E,SAAO,OAAO,SAAkD;AAE9D,QAAI,UAAU,KAAK,KAAK,QAAQ,OAAO,QAAQ;AAG/C,QAAI,CAAC,QAAQ,WAAW,GAAG,GAAG;AAExB,UAAA,eAAe,KAAK,OAAO,GAAG;AACzB,eAAA;AAAA,UACL,MAAM;AAAA,UACN,WAAW;AAAA,UACX,YAAY,EAAE,KAAK,KAAK,YAAY,IAAI;AAAA,QAAA;AAAA,MAE5C;AAEA,UAAI,aAAa,IAAI,IAEnB,QAAQ,KAAK,YAAY,MAAM,KAAK,YAAY,MAAM,MAAM,OAAO,OAAO,CAC5E,EAAE;AAGE,UAAA,UAAU,YAAY,UAAU,KAAK;AACrC,UAAA,SAAS,UAAU,aAAa;AAGhC,UAAA,aAAa,OAAO,GAAG;AACzB,eAAO,YAAY,QAAQ,MAAM,EAAE,IAAI;AAAA,MAAA,OAClC;AAeE,eAAA;AAAA,UACL,MAAM,UAAU,SAAS,MAAM,EAAE,IAAI,SAAS;AAAA,UAC9C,WAAW;AAAA,UACX,YAAY,EAAE,KAAK,KAAK,YAAY,IAAI;AAAA,QAAA;AAAA,MAE5C;AAAA,IACF;AAGA,QAAI,QAAO,QAAQ,KAAK,YAAY,KAAK,OAAO,OAAO;AAChD,WAAA;AAAA,MACL;AAAA,MACA,WAAW;AAAA,MACX,YAAY,EAAE,KAAK,KAAK,YAAY,IAAI;AAAA,IAAA;AAAA,EAC1C;AAEJ;AASO,MAAM,OAAO,CAAC,QAAuB,OAAqB,WAAwC;AAEvG,MAAI,EAAE,QAAQ,SAAS,CAAC,IAAI,KAAK,QAAQ,GAAG,IAAI,UAAU,QAAQ,MAAM,GAAG,IAAI,UAAU,QAAQ,GAAG;AACpG,QAAM,cAAa,OAAO;AACpB,QAAA,SAAS,MAAM,UAAU;AACxB,SAAA;AAAA,IACL,MAAM;AAAA,IACN,MAAM,QAAO;AAKX,aAAM,UAAU,EAAE,QAAQ,kBAAkB,CAAQ,SAAA;AAC3C,eAAA;AAAA,UACL,MAAM,KAAK;AAAA,UACX,WAAW;AAAA,QAAA;AAAA,MACb,CACD;AAOK,aAAA,UAAU,EAAE,QAAQ,MAAM,WAAW,kBAAkB,aAAa,MAAM,MAAM,CAAC;AAMjF,aAAA,OAAO,EAAE,QAAQ,MAAM,WAAW,eAAe,GAAG,OAAO,SAAS;AAGpE,YAAA,MAAM,QAAQ,KAAK,IAAI;AACvB,YAAA,UAAU,CAAC,SAAS,OAAO,IAAI,SAAS,IAAI,KAAK,OAAO,KAAK,OAAO;AACxE,YAAI,SAAqB;AAErB,YAAA;AAED,UAAA,GAAE,SAAS,IAAI,IAAI,MAAM,SAAS,QAAA,GAAW,MAAM;AAAA,iBAC7C;AAGH,cAAA;AACD,YAAA,GAAE,SAAS,QAAQ,MAAM,SAAS,QAAQ,KAAK,GAAG,MAAM;AAAA,mBAClD;AAGH,gBAAA;AACD,cAAA,GAAE,SAAS,QAAQ,MAAM,SAAS,QAAQ,MAAM,GAAG,MAAM;AAAA,qBACnD;AACP,qBAAO,KAAK,gBAAgB,GAAE,SAAU,CAAA;AAClC,oBAAA;AAAA,YACR;AAAA,UACF;AAAA,QACF;AAIA,cAAM,YAAW,IAAI,KAAK,YAAY,MAAM,KAAK,MAAM,OAAO;AAE9D,YAAI,gBACD,OAAM,YAAY,KAAK,SAAS,KAAK,WAAW,QAAQ,MAAM,GAC5D,OAAO,CAAC,WAAW;AACd,cAAA,OAAO,UAAU,YAAY;AAC/B,mBAAO,KAAK,eAAe,0BAA0B,QAAQ,QAAQ,UAAU;AACxE,mBAAA;AAAA,UACT;AAAc,mBAAA;AAAA,QAAA,CACf,EACA,IAAI,CAAC,WAAW;AACf,cAAI,OAAO,UAAU;AACnB,mBAAO,OAAO;AAAA,QAAA,CACjB;AAEC,cAAA,SAAS,OAAO,OAAO,aAAa;AACnC,eAAA;AAAA,UACL,UAAU;AAAA,UACV,QAAQ,YAAY,GAAG;AAAA,UACvB,YAAY,EAAE,KAAK,KAAK,KAAK,YAAY,IAAI;AAAA,QAAA;AAAA,MAC/C,CACD;AAAA,IACH;AAAA,EAAA;AAEJ;AC3NO,MAAM,kBAAkB;AAQxB,MAAM,UAAU,CAAC,IAAY,UAAU,OAAO;AAC/C,MAAA,CAAC,aAAa,EAAE;AAAU,WAAA;AAE1B,MAAA,YAAY,OAAO,KAAK,OAAO;AACnC,MAAI,QAAO,GAAG,QAAQ,WAAW,EAAE;AAC/B,MAAA,aAAaW,MAAiB,KAAI;AAE/B,SAAA,UAAU,KAAK,CAAC,OAAwB;AAC7C,WAAO,WAAW,SAAS;AAAA,EAAA,CAC5B;AACH;AASO,MAAM,gBAAgB,CAAC,UAAU,CAAA,GAAI,OAAO,kBAAkB,WAA0B;AAC7F,SAAO,OAAO,SAAkD;AAC9D,QAAI,QAAO,KAAK,KAAK,QAAQ,WAAW,EAAE;AAC1C,QAAI,EAAE,MAAM,YAAY,UAAU,KAAI;AAElC,QAAA,QAAQ,SAAS,OAAO,GAAG;AACzB,UAAA,aAAaA,MAAiB,OAAO;AACrC,UAAA,YAAY,QAAQ,WAAW;AAC5B,aAAA,aAAa,MAAM,MAAM,EAAE,iCAC7B,OAD6B;AAAA,QAEhC,MAAM;AAAA,MAAA,EACP;AAAA,IACH;AAAA,EAAA;AAEJ;AASO,MAAM,QAAQ,CAAC,QAAuB,OAAqB,WAAwC;AAExG,MAAI,EAAE,QAAQ,SAAS,CAAC,IAAI,KAAK,QAAQ,GAAG,IAAI,UAAU,QAAQ,MAAM,GAAG,IAAI,UAAU,QAAQ,GAAG;AAChG,MAAA,UAAU,OAAO,SAAS;AACvB,SAAA;AAAA,IACL,MAAM;AAAA,IACN,MAAM,QAAO;AAKX,aAAM,UAAU,EAAE,QAAQ,YAAY,GAAG,CAAC,SAAS;AAC7C,YAAA,QAAQ,KAAK,MAAM,OAAO;AAC5B,iBAAO,cAAc,SAAS,MAAM,MAAM,EAAE,IAAI;AAE3C,eAAA;AAAA,UACL,MAAM,KAAK;AAAA,UACX,WAAW;AAAA,UACX,UAAU;AAAA,QAAA;AAAA,MACZ,CACD;AAOK,aAAA,UAAU,EAAE,QAAQ,KAAA,GAAQ,cAAc,SAAS,MAAM,MAAM,CAAC;AAChE,aAAA,UAAU,EAAE,QAAQ,MAAM,WAAW,gBAAgB,GAAG,cAAc,SAAS,MAAM,MAAM,CAAC;AAAA,IACpG;AAAA,EAAA;AAEJ;ACvFO,MAAM,+BAA+B;AACrC,MAAM,aAAa,CAAC,QAAuB,OAAqB,WAAwC;AAC7G,QAAM,cAAa,OAAO;AAEnB,SAAA;AAAA,IACL,MAAM;AAAA,IACN,MAAM,QAAO;AACX,aAAM,UAAU,EAAE,QAAQ,KAAK,GAAG,CAAC,SAAS;AACnC,eAAA;AAAA,UACL,MAAM,KAAK;AAAA,UACX,YAAY,KAAK,cAAc,CAAC;AAAA,UAChC,WAAW;AAAA,QAAA;AAAA,MACb,CACD;AAEK,aAAA,OAAO,EAAE,QAAQ,MAAM,WAAW,6BAA6B,GAAG,OAAO,SAAS;AAClF,YAAA,eAAe,MAAM,YAAW,QAAQ,KAAK,MAAM,MAAM,YAAY,QAAQ;AAC7E,YAAA,UAAU,MAAM,YAAW,IAAI,KAAK,MAAM,UAAU,MAAM,YAAY,QAAQ;AAE3E,eAAA;AAAA,UACL,UAAU;AAAA,UACV,YAAY;AAAA,YACV,UAAU;AAAA,UACZ;AAAA,UACA,QAAQ,YAAY,YAAY;AAAA,QAAA;AAAA,MAClC,CACD;AAAA,IACH;AAAA,EAAA;AAEJ;ACvBO,MAAM,gBAA2B,UAAU,aAAc,SAAU,aAAa,aAAc,SAAS;ACTjG,MAAA,iCAAiB,IAAwB;AASzC,MAAA,kBAAkB,OAAO,OAAc,aAAsB;AACxE,MAAI,eAAe;AACf,MAAA,YAAY,MAAK,WAAW,GAAG;AACjC,mBAAeP,UAAQ,QAAQ,QAAQ,GAAG,KAAI;AAE5C,MAAA,WAAW,IAAI,YAAY;AAAU,WAAA;AACzC,QAAM,SAAS;AACjB;AAUO,MAAM,UAAU,OAAO,OAAc,OAA4B,UAAU,aAAsB;AACtG,MAAI,eAAe,MAAM,gBAAgB,OAAM,QAAQ;AAEnD,MAAA,WAAW,IAAI,YAAY,GAAG;AAC5B,QAAA,OAAO,WAAW,IAAI,YAAY;AACtC,WAAO,QAAQ,WAAWJ,SAAO,IAAI,IAAI;AAAA,EAC3C;AACF;AASO,MAAM,UAAU,OAAO,OAAc,SAA8B,aAAsB;AAC9F,MAAI,eAAe;AACf,MAAA,YAAY,MAAK,WAAW,GAAG;AACjC,mBAAeI,UAAQ,QAAQ,QAAQ,GAAG,KAAI;AAE5C,MAAA;AACF,eAAW,IAAI,cAAc,mBAAmB,aAAa,UAAUL,SAAO,OAAO,CAAC;AAAA,WAC/E;AACP,UAAM,oCAAoC;AAAA,EAC5C;AACF;ACxDO,MAAM,WAAW,CAAC,QAAa,OAAO,QAAQ,YAAY,OAAO;AAC3D,MAAA,cAAc,CAAC,QAAS,OAAO,QAAQ,WAAW,QAAQ,OAAO,OAAO,QAAQ;AACtF,MAAM,aAAa,CAAO,QAAA;AAC/B,SAAO,QAAQ,eAAe,QAAQ,iBAAiB,QAAQ;AACjE;AAmBa,MAAA,YAAY,CAAC,MAAW,SAAc;AACjD,MAAI,SAAS,MAAM;AACV,WAAA;AAAA,aACE,SAAS,IAAI,KAAK,SAAS,IAAI,GAAG;AACvC,QAAA,OAAO,KAAK,IAAI,EAAE,WAAW,OAAO,KAAK,IAAI,EAAE,QAAQ;AAAS,aAAA;AAAA,IAAO;AAC3E,aAAS,QAAQ,MAAM;AACrB,UAAI,CAAC,UAAU,KAAK,OAAO,KAAK,KAAK;AAAU,eAAA;AAAA,IACjD;AAEO,WAAA;AAAA,EACT;AACF;AAGa,MAAA,WAAW,CAAC,MAAW,SAAc;AAC5C,MAAA,OAAO,OAAO,KAAK,IAAI;AAC3B,MAAI,SAAS,CAAA;AACb,MAAI,IAAI;AACD,SAAA,IAAI,KAAK,QAAQ,KAAK;AAC3B,QAAI,MAAM,KAAK;AACf,QAAI,QAAQ,KAAK;AAEjB,QAAI,OAAO,MAAM;AACX,UAAA,gBAAgB,MAAM,QAAQ,KAAK,IAAI,KAAK,MAAM,QAAQ,KAAK;AAC/D,UAAA,KAAK,QAAQ,OAAO;AACtB;AAAA,iBACS,eAAe;AACxB,YAAI,CAAC,UAAU,KAAK,MAAM,KAAK;AAC7B,iBAAO,OAAO;AAAA;AACX;AAAA,MAAA,WACI,SAAS,KAAK,IAAI,KAAK,SAAS,KAAK,GAAG;AAEjD,YAAI,OAAO,SAAS,KAAK,MAAM,KAAK;AAChC,YAAA,OAAO,KAAK,IAAI,EAAE;AACpB,iBAAO,OAAO;AAAA,MAAA,OACX;AACL,eAAO,OAAO;AAAA,MAChB;AAAA,IAAA,OACK;AACL,aAAO,OAAO;AAAA,IAChB;AAAA,EACF;AAEO,SAAA;AACT;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMa,MAAA,aAAa,CAAC,WAAW,SAAS;AAC7C,MAAI,IAAI;AACR,MAAI,YAAY,MAAM;AAAG,aAAS,KAAK;AACvC,MAAI,CAAC;AAAQ,aAAS,CAAA;AACf,SAAA,IAAI,KAAK,QAAQ,KAAK;AACvB,QAAA,SAAS,KAAK,EAAE,GAAG;AACrB,iBAAW,OAAO,OAAO,KAAK,KAAK,EAAE,GAAG;AAClC,YAAA,WAAW,GAAG,GAAG;AACf,cAAA,SAAS,OAAO,IAAI,KAAK,SAAS,KAAK,GAAG,IAAI,GAAG;AACnD,mBAAO,OAAO,WAAW,MAAM,QAAQ,OAAO,IAAI,IAAI,CAAC,IAAI,CAAI,GAAA,OAAO,MAAM,KAAK,GAAG,IAAI;AAAA,UAAA,OACnF;AACE,mBAAA,OAAO,KAAK,GAAG;AAAA,UACxB;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAEO,SAAA;AACT;ACkCO,MAAM,oBAAyC;AAAA,EACpD,aAAa,CAAC,YAAY;AAAA,EAC1B,OAAO;AAAA,EACP,eAAe;AAAA,EACf,YAAY;AAAA,EACZ,WAAW;AAAA,IACT,UAAU,CAAC,QAAQ;AAAA,IACnB,UAAU;AAAA,IACV,UAAU;AAAA,IACV,UAAU;AAAA,IAEV,eAAe;AAAA,IACf,YAAY;AAAA,EACd;AACF;AAEO,MAAM,gBAAqC,WAAW,CAAC,GAAG,mBAAmB;AAAA,EAClF,WAAW;AAAA,IACT,SAAS;AAAA,IACT,cAAc;AAAA,IAEd,YAAY;AAAA,IACZ,aAAa;AAAA,IACb,eAAe;AAAA,EACjB;AAAA,EAEA,SAAS;AAAA,EACT,YAAY;AAAA,IACV,OAAO;AAAA,IACP,KAAK;AAAA,IACL,KAAK;AAAA,IACL,SAAS;AAAA,IACT,OAAO,MAAM,WAAW,MAAM;AAAA,EAChC;AAAA,EACA,MAAM;AAAA,IACJ,UAAU;AAAA,EACZ;AACF,CAAwB;ACrKxB,IAAI,IAAE,MAAK;AAAA,EAAC,YAAY,GAAE;AAAC,SAAK,MAAI,IAAI,IAAI,CAAC;AAAA,EAAC;AAAA,EAAC,SAAQ;AAAC,WAAO,KAAK;AAAA,EAAG;AAAA,EAAC,IAAI,GAAE;AAAC,WAAO,KAAK,IAAI,IAAI,CAAC;AAAA,EAAC;AAAA,EAAC,OAAM;AAAC,WAAO,MAAM,KAAK,KAAK,IAAI,KAAI,CAAE;AAAA,EAAC;AAAA,EAAC,SAAQ;AAAC,WAAO,MAAM,KAAK,KAAK,IAAI,OAAQ,CAAA;AAAA,EAAC;AAAA,EAAC,IAAI,GAAE,GAAE;AAAC,WAAO,KAAK,IAAI,IAAI,GAAE,CAAC,GAAE;AAAA,EAAI;AAAA,EAAC,IAAI,GAAE;AAAC,QAAI,IAAE,KAAK;AAAK,WAAO,KAAK,IAAI,GAAE,CAAC,GAAE;AAAA,EAAI;AAAA,EAAC,IAAI,OAAM;AAAC,WAAO,KAAK,IAAI;AAAA,EAAI;AAAA,EAAC,IAAI,SAAQ;AAAC,WAAO,KAAK,IAAI;AAAA,EAAI;AAAA,EAAC,KAAK,IAAE,GAAE;AAAC,QAAI,IAAE,KAAK,KAAM,EAAC,KAAK,OAAK;AAAG,WAAO,KAAK,IAAI,CAAC;AAAA,EAAC;AAAA,EAAC,OAAO,GAAE;AAAC,WAAO,KAAK,IAAI,OAAO,CAAC;AAAA,EAAC;AAAA,EAAC,OAAO,GAAE;AAAC,WAAO,KAAK,IAAI,OAAO,CAAC,GAAE;AAAA,EAAI;AAAA,EAAC,QAAO;AAAC,WAAO,KAAK,IAAI,MAAK,GAAG;AAAA,EAAI;AAAA,EAAC,IAAI,GAAE;AAAC,WAAO,KAAK,IAAI,IAAI,CAAC;AAAA,EAAC;AAAA,EAAC,UAAS;AAAC,WAAO,KAAK,IAAI,QAAO;AAAA,EAAE;AAAA,EAAC,QAAQ,GAAE,GAAE;AAAC,WAAO,KAAK,IAAI,QAAQ,GAAE,CAAC,GAAE;AAAA,EAAI;AAAA,EAAC,CAAC,OAAO,YAAW;AAAC,WAAO,KAAK,QAAO;AAAA,EAAE;AAAC,GAAEa,MAAE,CAAC,GAAE,MAAK,MAAI;AAAC,IAAE,QAAQ,OAAG;AAAC,MAAE,GAAG,GAAG,CAAC;AAAA,EAAC,CAAC;AAAC;AAAK,IAAC,IAAE,CAAC,EAAC,UAAS,IAAE,MAAI;AAAA,GAAG,OAAM,IAAE,MAAK,MAAK,IAAE,cAAY,GAAC,UAAS,GAAE,OAAM,GAAE,MAAK,EAAC,IAAG,IAAE,cAAc,EAAC;AAAA,EAAC,YAAY,IAAE,SAAQ;AAAC,UAAO;AAAC,SAAK,OAAK;AAAA,EAAC;AAAC,GAAEC,MAAE,cAAc,EAAC;AAAA,EAAC,cAAa;AAAC,UAAO;AAAA,EAAA;AAAA,EAAC,SAAS,GAAE;AAAC,QAAI,IAAE,KAAK,IAAI,CAAC;AAAE,WAAO,aAAa,IAAE,IAAG,MAAK,IAAI,GAAE,IAAI,EAAE,CAAC,CAAC,GAAE,KAAK,IAAI,CAAC;AAAA,EAAE;AAAA,EAAC,YAAY,GAAE,GAAE,GAAE;AAAC,QAAI,IAAE,KAAK,SAAS,CAAC;AAAE,WAAO,EAAE,IAAI,EAAE,EAAC,MAAK,GAAE,UAAS,GAAE,OAAM,EAAC,CAAC,CAAC,GAAE;AAAA,EAAC;AAAA,EAAC,GAAG,GAAE,GAAE,GAAE;AAAC,QAAG,OAAO,KAAG,eAAa,KAAG;AAAK,aAAO;AAAK,WAAO,KAAG,YAAW,KAAE,EAAE,KAAM,EAAC,MAAM,KAAK;AAAG,QAAI,GAAE,GAAE,IAAE,OAAO,KAAG,YAAU,CAAC,MAAM,QAAQ,CAAC,GAAE,IAAE,IAAE,IAAE;AAAE,WAAO,KAAI,KAAE,IAAG,OAAO,KAAK,CAAC,EAAE,QAAQ,OAAG;AAAC,UAAE,IAAE,IAAE,EAAE,IAAG,KAAI,KAAE,EAAE,KAAI,KAAK,YAAY,GAAE,GAAE,CAAC;AAAA,IAAC,GAAE,IAAI,GAAE;AAAA,EAAI;AAAA,EAAC,eAAe,GAAE,GAAE,GAAE;AAAC,QAAI,IAAE,KAAK,IAAI,CAAC;AAAE,QAAG,aAAa,KAAG,GAAE;AAAC,UAAI,IAAE,EAAE,EAAC,MAAK,GAAE,UAAS,GAAE,OAAM,EAAC,CAAC;AAAE,QAAE,QAAQ,CAAC,GAAE,MAAI;AAAC,YAAG,EAAE,aAAW,EAAE,YAAU,EAAE,UAAQ,EAAE;AAAM,iBAAO,EAAE,OAAO,CAAC;AAAA,MAAC,CAAC;AAAA,IAAC;AAAC,WAAO;AAAA,EAAC;AAAA,EAAC,IAAI,GAAE,GAAE,GAAE;AAAC,QAAG,OAAO,KAAG,eAAa,KAAG;AAAK,aAAO;AAAK,WAAO,KAAG,YAAW,KAAE,EAAE,KAAI,EAAG,MAAM,KAAK;AAAG,QAAI,GAAE,GAAE,IAAE,OAAO,KAAG,YAAU,CAAC,MAAM,QAAQ,CAAC,GAAE,IAAE,IAAE,IAAE;AAAE,WAAO,KAAI,KAAE,IAAG,OAAO,KAAK,CAAC,EAAE,QAAQ,OAAG;AAAC,UAAE,IAAE,IAAE,EAAE,IAAG,KAAI,KAAE,EAAE,KAAI,OAAO,KAAG,aAAW,KAAK,eAAe,GAAE,GAAE,CAAC,IAAE,KAAK,OAAO,CAAC;AAAA,IAAC,GAAE,IAAI,GAAE;AAAA,EAAI;AAAA,EAAC,KAAK,GAAE,GAAE,GAAE;AAAC,QAAG,OAAO,KAAG,eAAa,KAAG;AAAK,aAAO;AAAK,WAAO,KAAG,YAAW,KAAE,EAAE,KAAM,EAAC,MAAM,KAAK;AAAG,QAAI,IAAE,OAAO,KAAG,YAAU,CAAC,MAAM,QAAQ,CAAC;AAAE,WAAO,OAAO,KAAK,CAAC,EAAE,QAAQ,OAAG;AAAC,UAAI,IAAE,IAAE,IAAE,EAAE,IAAG,IAAE,IAAE,EAAE,KAAG,GAAE,IAAE,IAAE,IAAE,GAAE,IAAE,IAAI,MAAI;AAAC,UAAE,MAAM,GAAE,CAAC,GAAE,KAAK,eAAe,GAAE,GAAE,CAAC;AAAA,MAAC;AAAE,WAAK,YAAY,GAAE,GAAE,CAAC;AAAA,IAAC,GAAE,IAAI,GAAE;AAAA,EAAI;AAAA,EAAC,KAAK,MAAK,GAAE;AAAC,WAAO,OAAO,KAAG,eAAa,KAAG,OAAK,OAAM,QAAO,KAAG,YAAW,KAAE,EAAE,KAAM,EAAC,MAAM,KAAK,IAAG,EAAE,QAAQ,OAAG;AAAC,UAAI,IAAE,KAAK,IAAI,CAAC;AAAE,mBAAa,KAAG,EAAE,QAAQ,OAAG;AAAC,YAAG,EAAC,UAAS,GAAE,OAAM,MAAG;AAAE,UAAE,MAAM,GAAE,CAAC;AAAA,MAAC,CAAC;AAAA,IAAC,GAAE,IAAI,GAAE;AAAA,EAAK;AAAA,EAAC,QAAO;AAAC,WAAOD,IAAE,MAAK,OAAO,GAAE,MAAM,MAAK,GAAG;AAAA,EAAI;AAAC;ACCr2E,MAAM,cAAc;AAAA,EACzB,cAAc,QAAQ;AAAA,EACtB,iBAAiB,QAAQ;AAAA,EACzB,cAAc,QAAQ;AAAA,EACtB,gBAAgB,QAAQ;AAAA,EAExB,cAAc,QAAQ;AAAA,EACtB,gBAAgB,QAAQ;AAAA,EACxB,eAAe,QAAQ;AAAA,EACvB,eAAe,QAAQ;AACzB;AAEa,MAAA,SAAS,IAAIE,IAAa;AACvC,OAAO,GAAG,WAAW;ACXd,MAAM,QAAQ;AAAA,EACnB,aAAa;AAAA,EAMb,QAAQ,CAAC;AAAA,EAKT,SAAS;AACX;ACdO,MAAM,kBAAkB;AAAA,EAC7B,MAAM;AAAA,EACN,MAAM;AAAA,EACN,MAAM;AAAA,EACN,MAAM;AAAA,EACN,MAAM;AAAA,EACN,MAAM;AAAA,EACN,MAAM;AAAA,EACN,SAAS;AAAA,EACT,SAAS;AAAA,EACT,SAAS;AAAA,EACT,SAAS;AAAA,EACT,SAAS;AAAA,EACT,SAAS;AAAA,EACT,SAAS;AAAA,EACT,SAAS;AAAA,EACT,SAAS;AAAA,EACT,SAAS;AAAA,EACT,SAAS;AAAA,EACT,SAAS;AACX;AAMO,oBAAoB,QAAgB;AAClC,SAAA,OACJ,QAAQ,WAAW,IAAI,EACvB,QAAQ,OAAO,OAAO,EACtB,QAAQ,OAAO,QAAQ,EACvB,QAAQ,OAAO,OAAO,EACtB,QAAQ,OAAO,MAAM,EACrB,QAAQ,OAAO,MAAM;AAC1B;AAEO,MAAM,WAAW;AAAA,EAAjB,cAAA;AACI,SAAA,SAAA;AACT,SAAA,SAAmB;AACX,SAAA,QAAA;AACK,SAAA,aAAA;AACL,SAAA,QAAA;AAAA,EAAA;AAAA,EACR,KAAK,MAAc;AACZ,SAAA,UAAU,WAAW,IAAI;AAAA,EAChC;AAAA,EACA,QAAQ;AACF,QAAA;AACJ,WAAQ,QAAQ,KAAK,OAAO,IAAA,GAAQ;AAClC,WAAK,UAAU;AAAA,IACjB;AAAA,EACF;AAAA,EACA,OAAO;AACD,QAAA,CAAC,KAAK,OAAO;AACf,WAAK,QAAQ;AACb,WAAK,UAAU;AACV,WAAA,OAAO,KAAK,WAAW;AAAA,IAC9B;AAAA,EACF;AAAA,EACA,YAAY;AACN,QAAA,CAAC,KAAK,YAAY;AACpB,WAAK,aAAa;AAClB,WAAK,UAAU;AACV,WAAA,OAAO,KAAK,QAAQ;AAAA,IAC3B;AAAA,EACF;AAAA,EACA,OAAO;AACL,WAAO,KAAK,OAAO,KAAK,OAAO,SAAS;AAAA,EAC1C;AAAA,EACA,MAAM,OAAc;AACd,QAAA;AACJ,WAAgB,SAAA,KAAK,KAAK,OAAO,WAAW;AAC1C,WAAK,OAAO;AACZ,WAAK,UAAU;AAAA,IACjB;AACA,SAAK,UAAU,sBAAsB;AAChC,SAAA,OAAO,KAAK,SAAS;AAAA,EAC5B;AAAA,EACA,OAAO;AACL,SAAK,MAAM;AACX,WAAO,KAAK;AAAA,EACd;AACF;AAEO,gBAAgB,MAAc;AACnC,SAAO,KAAK;AACZ,MAAI,IAAI;AACF,QAAA,SAAS,IAAI;AACnB,WAAS,KAAK,KAAK,SAAS,kBAAkB,GAAG;AAC/C,UAAM,SAAS,EAAE;AACjB,WAAO,KAAK,KAAK,MAAM,GAAG,EAAE,KAAK,CAAC;AAC9B,QAAA,EAAE,QAAS,EAAE,GAAG;AACX,QAAI,WAAW,KAAK;AAC3B,aAAO,MAAM;AAAA,IAAA,WACJ,WAAW,KAAK;AACzB,aAAO,KAAK;AAAA,IAAA,WACH,WAAW,KAAK;AACzB,aAAO,UAAU;AAAA,IAAA,WACR,gBAAgB,SAAS;AAC3B,aAAA,MAAM,gBAAgB,OAAO;AAAA,IACtC;AAAA,EACF;AACI,MAAA,IAAI,KAAK,QAAQ;AACnB,WAAO,KAAK,KAAK,MAAM,CAAC,CAAC;AAAA,EAC3B;AACA,SAAO,OAAO;AAChB;AClGO,MAAM,eAAe,OAAO,QAA0B,OAA4B,SAAS,QAAQ,SAAS;AACjH,MAAI,UAAU,MAAMC,+BAAe,QAAQ,EAAE,OAAO,MAAM;AAC1D,SAAO,QAAQ,IAAI,CAAC,QAAQ,CAAC,QAAQ,MAAMC,OAAK,IAAI,QAAQ,sBAAsB,gBAAW,CAAC,CAAC;AACjG;ACHA,MAAM,QAAQC;AAiBP,MAAM,eAAe;AAAA,EAC1B,SAAS;AAAA,EACT,QAAQ;AACV;AAEA,0BAAiC,WAAqB,QAAiC;AACjF,MAAA;AACM,YAAA;AAAA,WACD;AACH,eAAO,MAAM,OAAO;AAAA,WACjB;AACH,eAAO,MAAM;AAAA;AAAA,UAEX,gCAAgCC,QAAA,QAAA;AAAA;AAAA;AAGlC,eAAO,MAAM,OAAO;;;;WAEjB;AACD,UAAA;AAAA,EACR;AACF;AAEA,oBAA2B,KAAqD,CAAA,GAAI;AAAzD,eAAE,eAAF,IAAe,iBAAf,IAAe,CAAb;AACvB,MAAA;AACE,QAAA,CAAC,MAAM,aAAa;AACtB,aAAO,KAAK,YAAY;AAElB,YAAA,UAAU,MAAM,WAAW,QAAQ;AACrC,UAAA,aAAa,UAAU,aAAa,QAAQ;AAC9C,cAAM,EAAE,SAAS,iBAAiB,MAAM,OAAO;AACzC,cAAA,MAAM,QAAQ,WAAW;AAAA,UAC7B,YAAY,IAAI,YAAY,OAAO,MAAM,cAAc;AAAA,WACpD,KACJ;AAAA,MACH;AAEA,YAAM,cAAc;AACpB,aAAO,KAAK,eAAe;AAAA,IAC7B;AAEA,WAAO,MAAM;AAAA,WACN;AACA,WAAA,KAAK,cAAc,KAAK;AAC/B,YAAQ,MAAM,KAAK;AAAA,EACrB;AACF;AAE4B,qBAAA,OAA4B,IAAkB;AACxE,MAAI,CAAC,MAAM;AACT,WAAO,KAAK,cAAc;AAE5B,QAAM,SAAS,WAAW,CAAC,GAAG,eAAe,IAAI;AACjD,QAAM,EAAE,OAAO,WAAW,MAAM,KAAK,OAAO,IAAI;AAC1C,QAA+C,YAAO,WAAW,IAA/D,WAAS,CAAI,GAAA,SAAS,CAAA,MAAuB,IAAhB,wBAAgB,IAAhB,CAA7B,UAAa;AAGrB,MAAI,UAAgC,CAAA;AACpC,MAAI,UAAwB,CAAA;AACxB,MAAA;AAEA,MAAA;AACE,QAAA;AACF,YAAM,OAAO,iBAAiB,QAAQ,MAAM,UAAU;AACtD,eAAS,MAAM,OAAO;AAAA,QACpB,aAAa,QAAQ,eAAe,CAAC;AAAA,QACrC,UAAU,QAAQ,OAAO,QAAQ;AAAA,QACjC,QAAQ;AAAA,UACN,QAAQ;AAAA,UACR,SAAS;AAAA,UACT,QAAQ;AAAA,UACR,QAAQ;AAAA,UACR,SAAS;AAAA,UACT,SAAS;AAAA,QACX;AAAA,QACA,QAAQ;AAAA,UACN,YAAY;AAAA,UAEZ,CAAC,OAAO;AAAA,WACL;AAAA,QAEL,OAAO;AAAA,QACP,QAAQ;AAAA,QACR,SAAS;AAAA,UACP,MAAM,QAAQ,OAAO,MAAM;AAAA,UAC3B,SAAS,QAAQ,OAAO,MAAM;AAAA,UAC9B,KAAK,QAAQ,OAAO,MAAM;AAAA,UAC1B,IAAI,QAAQ,OAAO,MAAM;AAAA,UACzB,WAAW,QAAQ,OAAO,MAAM;AAAA,QAClC;AAAA,SACG,YACJ;AAAA,aACM;AACP,UAAI,EAAE,QAAQ;AAEN,cAAA,WAAW,CAAC,GAAG,MAAM,aAAa,EAAE,QAAQ,SAAS,KAAK,CAAC;AAC3D,cAAA,WAAW,CAAC,GAAG,MAAM,aAAa,EAAE,QAAQ,OAAO,CAAC;AAEnD,eAAA,KAAK,gBAAgB,UAAU,QAAQ;AAE9C,cAAM,UAAoB,UAAA,SAAS,IAAI,GAAG,SAAS,qBAAqB,MAAM;AACvE,eAAA,OAAO,KAAK,gBAAgB,OAAO;AAAA,MAC5C;AAAa,cAAA;AAAA,IACf;AAGU,cAAA,MAAM,QAAQ,IACtB,CAAC,GAAG,MAAM,MAAM,EACb,OAAO,QAAQ,WAAmC,CACvD;AACU,cAAA,MAAM,QAAQ,IACtB,SACI,IAAI,CAAC,EAAE,aAAM,MAAM,eAAe;AAC9B,UAAA,SAAS,KAAK,KAAI;AACpB,eAAOnB,SAAO,EAAE;AAGd,UAAA,aAAa,YAAY,WAAW;AAChC,cAAA,aAAa,0BAA0B,KAAK,KAAI;AACtD,YAAI,YAAY;AACP,iBAAA,KAAK,cAAc,kBAAkB,KAAI;AAAA,QAAA,OAC3C;AACL,iBAAO,KAAK,cAAc,kBAAkB,QAAO,OAAO,IAAI;AAAA,QAChE;AAAA,MACF;AAEO,aAAA;AAAA,IACR,CAAA,CACL;AAGI,QAAA,EAAE,cAAc,OAAO;AAC3B,QAAI,EAAE,OAAO,QAAQ,SAAS,QAAQ,MACnC,OAAO,eAAe,WAAW,EAAE,MAAM,YAAY,IAAK,eAAe,CAAA;AAGxE,QAAA,kBAAkB,MACpB,QAAQ,OAAO,CAAC,KAAK,EAAE,iBAAiB,MAAM,YAAY,CAAC,CAC7D;AAGI,QAAA,iBAAiB,MAAmB,aAAA;AAC9B,cAAA;AAAA,aACD;AACH,gBAAM,EAAE,UAAU,iBAAiB,MAAM,QAAA,QAAA,EAAA,KAAA,WAAA;AAAA,mBAAA;AAAA,UAAA,CAAA;AACzC,iBAAO,OAAO,SAAqB;AAC1B,mBAAA,MAAM,aAAa,IAAI;AAAA,UAAA;AAAA,aAE7B;AACG,gBAAA,EAAE,wBAAa,MAAM;;;AAC3B,iBAAO,OAAO,SAAqB;AACjC,mBAAO,MAAM,UAAS,MAAM,KAAK,QAAQ,KAAK;AAAA,UAAA;AAAA;AAGhD,gBAAM,EAAE,aAAM,sBAAY,MAAM,QAAA,QAAA,EAAA,KAAA,WAAA;AAAA,mBAAA;AAAA,UAAA,CAAA;AAChC,gBAAM,SAAQ;AACd,iBAAO,OAAO,SAAqB;AAC1B,mBAAA,MAAM,MAAK,MAAM,KAAK;AAAA,UAAA;AAAA;AAAA,IAC/B;AAGN,QAAI,sBAAsB,MACvB,OAAM,QAAQ,IAAI,QAAQ,IAAI,cAAc,CAAC,GAC3C,OAAO,CAAC,KAAK,EAAE,aAAa,MAAM,QAAQ,CAAC,CAChD;AAQO,WAAA;AAAA,MAEL;AAAA,MACA,aAAa,OAAO;AAAA,MACpB,aAAa,GAAG;AAAA,IAAA;AAAA,WAGX;EAAK;AAChB;ACzMO,MAAM,WAAW,CAAC,MAA+B,OAAe,KAAK,cAAwB;AAC9F,MAAA;AACJ,SAAO,YAAa,MAAa;AAC/B,QAAI,UAAU;AACd,QAAI,QAAQ,MAAM;AACN,gBAAA;AACV,UAAI,CAAC;AAAgB,aAAA,MAAM,SAAS,IAAI;AAAA,IAAA;AAGtC,QAAA,UAAU,aAAa,CAAC;AAC5B,iBAAa,OAAO;AAGV,cAAA,WAAW,OAAO,IAAI;AAC5B,QAAA;AAAc,WAAA,MAAM,SAAS,IAAI;AAAA,EAAA;AAEzC;ACrBA,IAAI,IAAE,qEAAoE,IAAE,qEAAoE,IAAE,CAAE;AAAC,WAAW,GAAE,GAAE;AAAC,MAAG,CAAC,EAAE,IAAG;AAAC,MAAE,KAAG,CAAE;AAAC,aAAQ,IAAE,GAAE,IAAE,EAAE,QAAO;AAAI,QAAE,GAAG,EAAE,OAAO,CAAC,KAAG;AAAA,EAAC;AAAC,SAAO,EAAE,GAAG;AAAE;AAAC,WAAW,GAAE;AAAC,MAAG,KAAG;AAAK,WAAM;AAAG,MAAI,IAAE,EAAE,GAAE,GAAE,OAAG,EAAE,OAAO,CAAC,CAAC;AAAE,UAAO,EAAE,SAAO;AAAA;AAAA,SAAgB;AAAE,aAAO;AAAA,SAAO;AAAE,aAAO,IAAE;AAAA,SAAW;AAAE,aAAO,IAAE;AAAA,SAAU;AAAE,aAAO,IAAE;AAAA;AAAI;AAAC,WAAW,GAAE;AAAC,SAAO,KAAG,OAAK,KAAG,KAAG,KAAG,OAAK,EAAE,EAAE,QAAO,IAAG,OAAG,EAAE,GAAE,EAAE,OAAO,CAAC,CAAC,CAAC;AAAC;AAAC,WAAW,GAAE;AAAC,SAAO,KAAG,OAAK,KAAG,EAAE,GAAE,GAAE,OAAG,EAAE,OAAO,CAAC,CAAC;AAAC;AAAC,WAAW,GAAE;AAAC,SAAO,KAAG,OAAK,KAAG,KAAG,KAAG,OAAM,KAAE,EAAE,WAAW,KAAI,GAAG,GAAE,EAAE,EAAE,QAAO,IAAG,OAAG,EAAE,GAAE,EAAE,OAAO,CAAC,CAAC,CAAC;AAAE;AAAC,WAAW,GAAE;AAAC,SAAO,EAAE,GAAE,IAAG,OAAO,YAAY;AAAC;AAAC,WAAW,GAAE;AAAC,SAAO,KAAG,OAAK,KAAG,KAAG,KAAG,OAAK,EAAE,EAAE,QAAO,OAAM,OAAG,EAAE,WAAW,CAAC,CAAC;AAAC;AAAC,WAAW,GAAE,GAAE,GAAE;AAAC,MAAG,KAAG;AAAK,WAAM;AAAG,MAAI,IAAE,CAAA,GAAG,IAAE,CAAA,GAAG,KAAE,CAAA,GAAG,GAAE,GAAE,IAAE,IAAE,IAAG,IAAE,IAAG,IAAE,IAAG,IAAE,GAAE,IAAE,GAAE,KAAE,GAAE,IAAE,GAAE,IAAE;AAAE,OAAI,IAAE,GAAE,IAAE,EAAE,QAAO,KAAG;AAAE,QAAG,IAAE,EAAE,OAAO,CAAC,GAAE,OAAO,UAAU,eAAe,KAAK,GAAE,CAAC,KAAI,GAAE,KAAG,KAAI,GAAE,KAAG,OAAI,IAAE,IAAE,GAAE,OAAO,UAAU,eAAe,KAAK,GAAE,CAAC;AAAE,UAAE;AAAA,SAAM;AAAC,UAAG,OAAO,UAAU,eAAe,KAAK,IAAE,CAAC,GAAE;AAAC,YAAG,EAAE,WAAW,CAAC,IAAE,KAAI;AAAC,eAAI,IAAE,GAAE,IAAE,IAAE;AAAI,gBAAE,KAAG,GAAE,KAAG,IAAE,IAAG,KAAE,GAAE,EAAE,KAAK,EAAE,CAAC,CAAC,GAAE,IAAE,KAAG;AAAI,eAAI,KAAE,EAAE,WAAW,CAAC,GAAE,IAAE,GAAE,IAAE,GAAE;AAAI,gBAAE,KAAG,IAAE,KAAE,GAAE,KAAG,IAAE,IAAG,KAAE,GAAE,EAAE,KAAK,EAAE,CAAC,CAAC,GAAE,IAAE,KAAG,KAAI,KAAE,MAAG;AAAA,QAAC,OAAK;AAAC,eAAI,KAAE,GAAE,IAAE,GAAE,IAAE,IAAE;AAAI,gBAAE,KAAG,IAAE,IAAE,KAAG,IAAE,IAAG,KAAE,GAAE,EAAE,KAAK,EAAE,CAAC,CAAC,GAAE,IAAE,KAAG,KAAI,KAAE;AAAE,eAAI,KAAE,EAAE,WAAW,CAAC,GAAE,IAAE,GAAE,IAAE,IAAG;AAAI,gBAAE,KAAG,IAAE,KAAE,GAAE,KAAG,IAAE,IAAG,KAAE,GAAE,EAAE,KAAK,EAAE,CAAC,CAAC,GAAE,IAAE,KAAG,KAAI,KAAE,MAAG;AAAA,QAAC;AAAC,aAAI,KAAG,KAAI,KAAE,KAAK,IAAI,GAAE,EAAC,GAAE,OAAK,OAAO,GAAE;AAAA,MAAE;AAAM,aAAI,KAAE,EAAE,IAAG,IAAE,GAAE,IAAE,IAAE;AAAI,cAAE,KAAG,IAAE,KAAE,GAAE,KAAG,IAAE,IAAG,KAAE,GAAE,EAAE,KAAK,EAAE,CAAC,CAAC,GAAE,IAAE,KAAG,KAAI,KAAE,MAAG;AAAE,WAAI,KAAG,KAAI,KAAE,KAAK,IAAI,GAAE,EAAC,GAAE,OAAK,EAAE,KAAG,KAAI,IAAE,OAAO,CAAC;AAAA,IAAC;AAAC,MAAG,MAAI,IAAG;AAAC,QAAG,OAAO,UAAU,eAAe,KAAK,IAAE,CAAC,GAAE;AAAC,UAAG,EAAE,WAAW,CAAC,IAAE,KAAI;AAAC,aAAI,IAAE,GAAE,IAAE,IAAE;AAAI,cAAE,KAAG,GAAE,KAAG,IAAE,IAAG,KAAE,GAAE,EAAE,KAAK,EAAE,CAAC,CAAC,GAAE,IAAE,KAAG;AAAI,aAAI,KAAE,EAAE,WAAW,CAAC,GAAE,IAAE,GAAE,IAAE,GAAE;AAAI,cAAE,KAAG,IAAE,KAAE,GAAE,KAAG,IAAE,IAAG,KAAE,GAAE,EAAE,KAAK,EAAE,CAAC,CAAC,GAAE,IAAE,KAAG,KAAI,KAAE,MAAG;AAAA,MAAC,OAAK;AAAC,aAAI,KAAE,GAAE,IAAE,GAAE,IAAE,IAAE;AAAI,cAAE,KAAG,IAAE,IAAE,KAAG,IAAE,IAAG,KAAE,GAAE,EAAE,KAAK,EAAE,CAAC,CAAC,GAAE,IAAE,KAAG,KAAI,KAAE;AAAE,aAAI,KAAE,EAAE,WAAW,CAAC,GAAE,IAAE,GAAE,IAAE,IAAG;AAAI,cAAE,KAAG,IAAE,KAAE,GAAE,KAAG,IAAE,IAAG,KAAE,GAAE,EAAE,KAAK,EAAE,CAAC,CAAC,GAAE,IAAE,KAAG,KAAI,KAAE,MAAG;AAAA,MAAC;AAAC,WAAI,KAAG,KAAI,KAAE,KAAK,IAAI,GAAE,EAAC,GAAE,OAAK,OAAO,GAAE;AAAA,IAAE;AAAM,WAAI,KAAE,EAAE,IAAG,IAAE,GAAE,IAAE,IAAE;AAAI,YAAE,KAAG,IAAE,KAAE,GAAE,KAAG,IAAE,IAAG,KAAE,GAAE,EAAE,KAAK,EAAE,CAAC,CAAC,GAAE,IAAE,KAAG,KAAI,KAAE,MAAG;AAAE,SAAI,KAAG,KAAI,KAAE,KAAK,IAAI,GAAE,EAAC,GAAE;AAAA,EAAI;AAAC,OAAI,KAAE,GAAE,IAAE,GAAE,IAAE,IAAE;AAAI,QAAE,KAAG,IAAE,KAAE,GAAE,KAAG,IAAE,IAAG,KAAE,GAAE,EAAE,KAAK,EAAE,CAAC,CAAC,GAAE,IAAE,KAAG,KAAI,KAAE,MAAG;AAAE;AAAO,QAAG,IAAE,KAAG,GAAE,KAAG,IAAE,GAAE;AAAC,QAAE,KAAK,EAAE,CAAC,CAAC;AAAE;AAAA,IAAK;AAAM;AAAI,SAAO,EAAE,KAAK,EAAE;AAAC;AAAC,WAAW,GAAE,GAAE,GAAE;AAAI,MAAC,IAAE,CAAE,GAAG,KAAE,GAAE,IAAE,GAAE,IAAE,GAAE,KAAE,IAAG,IAAE,CAAE,GAAC,GAAE,GAAE,GAAE,GAAE,IAAE,GAAE,GAAE,IAAE,EAAC,KAAI,EAAE,CAAC,GAAE,UAAS,GAAE,OAAM,EAAC;AAAE,OAAI,IAAE,GAAE,IAAE,GAAE,KAAG;AAAE,MAAE,KAAG;AAAE,OAAI,IAAE,GAAE,KAAE,KAAK,IAAI,GAAE,CAAC,GAAE,IAAE,GAAE,KAAG;AAAG,QAAE,EAAE,MAAI,EAAE,UAAS,EAAE,aAAW,GAAE,EAAE,YAAU,KAAI,GAAE,WAAS,GAAE,EAAE,MAAI,EAAE,EAAE,OAAO,IAAG,KAAI,KAAE,IAAE,IAAE,KAAG,GAAE,MAAI;AAAE,UAAS;AAAA,SAAQ;AAAE,WAAI,IAAE,GAAE,KAAE,KAAK,IAAI,GAAE,CAAC,GAAE,IAAE,GAAE,KAAG;AAAG,YAAE,EAAE,MAAI,EAAE,UAAS,EAAE,aAAW,GAAE,EAAE,YAAU,KAAI,GAAE,WAAS,GAAE,EAAE,MAAI,EAAE,EAAE,OAAO,IAAG,KAAI,KAAE,IAAE,IAAE,KAAG,GAAE,MAAI;AAAE,UAAE,OAAO,aAAa,CAAC;AAAE;AAAA,SAAW;AAAE,WAAI,IAAE,GAAE,KAAE,KAAK,IAAI,GAAE,EAAE,GAAE,IAAE,GAAE,KAAG;AAAG,YAAE,EAAE,MAAI,EAAE,UAAS,EAAE,aAAW,GAAE,EAAE,YAAU,KAAI,GAAE,WAAS,GAAE,EAAE,MAAI,EAAE,EAAE,OAAO,IAAG,KAAI,KAAE,IAAE,IAAE,KAAG,GAAE,MAAI;AAAE,UAAE,OAAO,aAAa,CAAC;AAAE;AAAA,SAAW;AAAE,aAAM;AAAA;AAAG,OAAI,EAAE,KAAG,GAAE,IAAE,GAAE,EAAE,KAAK,CAAC,OAAI;AAAC,QAAG,EAAE,QAAM;AAAE,aAAM;AAAG,SAAI,IAAE,GAAE,KAAE,KAAK,IAAI,GAAE,CAAC,GAAE,IAAE,GAAE,KAAG;AAAG,UAAE,EAAE,MAAI,EAAE,UAAS,EAAE,aAAW,GAAE,EAAE,YAAU,KAAI,GAAE,WAAS,GAAE,EAAE,MAAI,EAAE,EAAE,OAAO,IAAG,KAAI,KAAE,IAAE,IAAE,KAAG,GAAE,MAAI;AAAE,YAAO,IAAE;AAAA,WAAQ;AAAE,aAAI,IAAE,GAAE,KAAE,KAAK,IAAI,GAAE,CAAC,GAAE,IAAE,GAAE,KAAG;AAAG,cAAE,EAAE,MAAI,EAAE,UAAS,EAAE,aAAW,GAAE,EAAE,YAAU,KAAI,GAAE,WAAS,GAAE,EAAE,MAAI,EAAE,EAAE,OAAO,IAAG,KAAI,KAAE,IAAE,IAAE,KAAG,GAAE,MAAI;AAAE,UAAE,OAAK,OAAO,aAAa,CAAC,GAAE,IAAE,IAAE,GAAE;AAAI;AAAA,WAAW;AAAE,aAAI,IAAE,GAAE,KAAE,KAAK,IAAI,GAAE,EAAE,GAAE,IAAE,GAAE,KAAG;AAAG,cAAE,EAAE,MAAI,EAAE,UAAS,EAAE,aAAW,GAAE,EAAE,YAAU,KAAI,GAAE,WAAS,GAAE,EAAE,MAAI,EAAE,EAAE,OAAO,IAAG,KAAI,KAAE,IAAE,IAAE,KAAG,GAAE,MAAI;AAAE,UAAE,OAAK,OAAO,aAAa,CAAC,GAAE,IAAE,IAAE,GAAE;AAAI;AAAA,WAAW;AAAE,eAAO,EAAE,KAAK,EAAE;AAAA;AAAE,QAAG,MAAG,KAAI,MAAE,KAAK,IAAI,GAAE,CAAC,GAAE,MAAK,EAAE;AAAG,WAAE,EAAE;AAAA,aAAW,MAAI,KAAG,OAAO,KAAG;AAAS,WAAE,IAAE,EAAE,OAAO,CAAC;AAAA;AAAO,aAAO;AAAK,MAAE,KAAK,EAAC,GAAE,EAAE,OAAK,IAAE,GAAE,OAAO,CAAC,GAAE,MAAI,IAAE,IAAE,MAAG,KAAI,MAAE,KAAK,IAAI,GAAE,CAAC,GAAE;AAAA,EAAI;AAAC;ACmBtmH,MAAM,wBAAwB,CAAC,QACnC,QAAO,IAAI,MAAM,KAAK,EAAE,IAAI,CAAC,SAAQ,KAAI,QAAQ,UAAU,EAAE,CAAC;AAwBpD,MAAA,kBAAkB,CAAC,aAAkB;AAC5C,MAAA;AACF,UAAM,eAAe,SAAS;AAC9B,QAAI,SAAS;AACb,QAAI,QAAQ,aAAa,IAAI,OAAO,KAAK,aAAa,IAAI,GAAG;AACzD,QAAA,YAAY,aAAa,IAAI,WAAW;AAC5C,QAAI,OAAO;AACT,UAAI,WAAW,MAAM,KAAK,EAAE,MAAM,GAAG;AACrC,UAAI,eAAe,sBAAoC,cAAA,IAAI,MAAM;AACjE,gBACE,yEACA,SACG,IAAI,CAAC,GAAG,MAAM;AACb,YAAI,mBACF,aAAa,MAAM,aAAa,GAAG,WAAW,MAC1C,aAAa,GAAG,OAAO,MAAM,GAAG,EAAE,KAAK,IAAI,IAC3C;AACF,YAAA;AAAA,UAAA;AAAA,UAAC;AAAA,UACH,cAAc;AAAA,UACd;AAAA,YACE,mBAAmB,KAAK,CAAC;AAC7B,eAAO,GAAG,eAAe,yBAAyB,KAAK,UACrD,MACF;AAAA,MAAA,CACD,EACA,KAAK,IAAI;AAAA,IAEhB;AAEI,QAAA,QAAQ,aAAa,IAAI,OAAO;AAChC,QAAA;AAAO,gBAAU,OAAOoB,EAAkB,MAAM,KAAM,CAAA;AAEtD,QAAA,YAAY,aAAa,IAAI,MAAM;AACvC,QAAI,WAAW;AACH,gBAAA,OAAO,KAAK,MAkBpB,QAAQ,KAAK,SAAS,KAAK,QAAQ,KAAK,SAAS,IAAI,YAAY,KAAK,UAAU,KAAK,SAAS,EAAE,QAAQ,SAAS,IAAI,CACvH;AAAA,IACF;AAEA,WAAO,OAAO;WACP;EAAK;AAChB;AAMa,MAAA,cAAc,CAAC,aAAkB;AACxC,MAAA;AACF,UAAM,eAAe,SAAS;AAC9B,UAAM,SAAS,aAAa,IAAI,QAAQ,KAAK;AACtC,WAAA,WAAW,IAAI,mBAAmB,KAAK,MAAM,SAAS,SAAS,IAAI,CAAC;AAAA,WACpE;EAAK;AAChB;ACzGa,MAAA,iBAAiB,CAAC,UAAkB;AAC/C,QAAM,OAAO;AAEb,MAAI,EAAE,MAAM,SAAS,gBAASR,MAAiB,KAAK;AACpD,MAAI,YAAY,GAAG,yBAAyB,mBAAmB,IAAI;AAC/D,MAAA,aAAa,GAAG,QAAQ,QAAQ;AAEpC,SAAO,EAAE,WAAW,YAAY,SAAS,MAAM,YAAK;AACtD;AAQa,MAAA,cAAc,OAAO,UAAkB;AAC9C,MAAA,EAAE,cAAc,eAAe,KAAK;AACpC,MAAA;AAEA,MAAA;AACF,QAAI,WAAW,MAAM,WAAW,WAAW,KAAK;AACvC,aAAA,MAAM,SAAS;WACjB;AACP,YAAQ,KAAK,CAAC;AACR,UAAA;AAAA,EACR;AAEA,MAAI,WAAW,QAAQ;AAChB,SAAA,EAAE,UAAU,MAAM;AAC3B;AAQa,MAAA,aAAa,OAAO,UAAkB;AAC7C,MAAA,EAAE,eAAe,eAAe,KAAK;AACrC,MAAA;AAEA,MAAA;AACF,QAAI,WAAW,MAAM,WAAW,YAAY,KAAK;AACxC,aAAA,MAAM,SAAS;WACjB;AACP,YAAQ,KAAK,CAAC;AACR,UAAA;AAAA,EACR;AAEO,SAAA;AACT;ACnDA,IAAIS;AACG,MAAMC,YAAU,YAAY;AAC3B,MAAAD;AAAiB,WAAAA;AAEf,QAAA,QAAO,MAAM,OAAO;AACpB,QAAA,EAAE,SAAS,OAAM,WAAW;AAEV,QAAA,MAAK,MAAM,OAAA,CAAQ;AAC3C,SAAQA,aAAW;AACvB;AAkBA,0BACI,OACA,aAAqB,MACrB,UAAkB,GAClB,QAAgB,IACG;AACb,QAAA,EAAE,UAAa,cAAA,MAAMC,UAAQ;AACnC,SAAO,UAAS,OAAO,YAAY,SAAS,KAAK;AACrD;AAgBI,4BAAA,OACA,aAAqB,MACF;AACb,QAAA,EAAE,YAAe,gBAAA,MAAMA,UAAQ;AAC9B,SAAA,YAAW,OAAO,UAAU;AACvC;;;;;;;AChDW,IAAA;AACA,IAAAD;AACE,MAAAC,YAAU,OAAO,QAAqB;AAC7C,MAAAD;AAAiB,WAAAA;AAEf,QAAA,WAAW,MAAM,OAAO;AACxB,QAAA,EAAE,SAAS,UAAS;AAE1B,QAAM,EAAE,MAAM,SAAU,MAAM,OAAO;AACpC,SAAO,MAAM,MAAK,OAAO,MAAM,KAAM,CAAA;AAEtC,SAAQA,aAAW;AACrB;AAEA,uBAA8B,OAAmB,aAAsB;AACrE,SAAc,OAAAC,UAAW,GAAA,QAAQ,OAAO,WAAW;AACrD;AAEA,uBAA8B,OAAmB;AAC/C,SAAc,OAAAA,UAAA,GAAW,QAAQ,KAAK;AACxC;AAEA,oBAA2B,OAAmB,aAAsB;AAClE,SAAc,OAAAA,UAAW,GAAA,KAAK,OAAO,WAAW;AAClD;AAEA,sBAA6B,OAAmB;AAC9C,SAAc,OAAAA,UAAA,GAAW,OAAO,KAAK;AACvC;AAEA,oBAA2B,OAAmB,aAAsB;AAClE,SAAc,OAAAA,UAAW,GAAA,KAAK,OAAO,WAAW;AAClD;AAEA,sBAA6B,OAAmB;AAC9C,SAAc,OAAAA,UAAA,GAAW,OAAO,KAAK;AACvC;AAEA,IAAA,SAAe;;;;;;;;;;;;;;;;;;AC7Cf,IAAI;AACJ,MAAM,UAAU,YAAY;AACpB,MAAA;AAAiB,WAAA;AAEf,QAAA,QAAO,MAAM,OAAO;AACpB,QAAA,EAAE,SAAS,OAAM,WAAW;AAEV,QAAA,MAAK,MAAM,OAAA,CAAQ;AAC3C,SAAQ,WAAW;AACvB;AAcA,wBAA+B,OAAwC;AAC7D,QAAA,EAAE,iBAAiB,MAAM;AAC/B,SAAO,aAAa,KAAK;AAC7B;AAcA,0BAAiC,OAAwC;AAC/D,QAAA,EAAE,mBAAmB,MAAM;AACjC,SAAO,eAAe,KAAK;AAC/B;;;;;;AC9CQ,gBAAgB,MAAoC;AACtD,MAAA,OAAO,SAAS,UAAU;AAC5B,WAAO,KAAK,IAAI;AAAA,EAAA,OACX;AACC,UAAA,IAAI,IAAI,WAAW,IAAI;AAC7B,QAAI,aAAa;AACjB,aAAS,IAAI,GAAG,IAAI,EAAE,QAAQ,EAAE,GAAG;AACnB,oBAAA,OAAO,aAAa,EAAE,EAAE;AAAA,IACxC;AAEA,WAAO,KAAK,UAAU;AAAA,EACxB;AACF;AAMO,gBAAgB,MAA2B;AAC1C,QAAA,eAAe,aAAa,IAAI;AACtC,QAAM,SAAS,IAAI,WAAW,aAAa,MAAM;AACjD,WAAS,IAAI,GAAG,IAAI,OAAO,QAAQ,EAAE,GAAG;AAC/B,WAAA,KAAK,aAAa,WAAW,CAAC;AAAA,EACvC;AAEA,SAAO,OAAO;AAChB;AAMO,sBAAsB,MAAsB;AACjD,SAAO,KAAK,IAAI;AAClB;;;;;;;;"}