{"version":3,"file":"index.mjs","sources":["../src/configs/platform.ts","../../../node_modules/.pnpm/@okikio+emitter@2.1.7/node_modules/@okikio/emitter/lib/api.es.js","../src/configs/events.ts","../src/configs/state.ts","../src/init.ts","../src/deno/path/_constants.ts","../src/deno/path/_util.ts","../src/deno/path/posix.ts","../src/deno/path/glob.ts","../src/deno/path/mod.ts","../src/utils/path.ts","../src/utils/loader.ts","../src/plugins/virtual-fs.ts","../src/utils/encode-decode.ts","../src/utils/util-cdn.ts","../src/plugins/external.ts","../src/utils/resolve-exports.ts","../src/utils/parse-package-name.ts","../src/utils/fetch-and-cache.ts","../src/utils/resolve-imports.ts","../src/plugins/cdn.ts","../src/plugins/http.ts","../src/plugins/alias.ts","../src/utils/filesystem.ts","../src/utils/ansi.ts","../src/utils/create-notice.ts","../src/build.ts","../src/utils/pretty-bytes.ts","../src/compress.ts","../src/utils/deep-equal.ts","../src/configs/config.ts","../src/transform.ts","../src/utils/debounce.ts","../src/utils/lz-string.ts","../src/utils/semver.ts","../src/utils/npm-search.ts","../src/deno/brotli/mod.ts","../src/deno/denoflate/mod.ts","../src/deno/lz4/mod.ts","../src/deno/base64/mod.ts"],"sourcesContent":["/**\n * `@bundlejs/core`'s supported platforms\n */\nexport type Platform = \"node\" | \"deno\" | \"browser\" | \"wasm\" | \"deno-wasm\";\n\n/**\n * Automatically chooses the esbuild version to run based off platform heuristics, \n * e.g. \n * - The environment is deno if it supports `globalThis.Deno`\n * - The environment is node if it supports `globalThis.process`\n * - Otherwise the environment is the browser\n * \n */\nexport const PLATFORM_AUTO: Platform = (\"Deno\" in globalThis) ? \"deno\" : (\"process\" in globalThis) ? \"node\" : \"browser\";","var o=class{constructor(e){this.map=new Map(e)}getMap(){return this.map}get(e){return this.map.get(e)}keys(){return Array.from(this.map.keys())}values(){return Array.from(this.map.values())}set(e,t){return this.map.set(e,t),this}add(e){let n=this.size;return this.set(n,e),this}get size(){return this.map.size}get length(){return this.map.size}last(e=1){let t=this.keys()[this.size-e];return this.get(t)}delete(e){return this.map.delete(e)}remove(e){return this.map.delete(e),this}clear(){return this.map.clear(),this}has(e){return this.map.has(e)}entries(){return this.map.entries()}forEach(e,t){return this.map.forEach(e,t),this}[Symbol.iterator](){return this.entries()}},b=(p,e,...t)=>{p.forEach(n=>{n[e](...t)})};var h=({callback:p=()=>{},scope:e=null,name:t=\"event\"})=>({callback:p,scope:e,name:t}),c=class extends o{constructor(e=\"event\"){super();this.name=e}},y=class extends o{constructor(){super()}getEvent(e){let t=this.get(e);return t instanceof c?t:(this.set(e,new c(e)),this.get(e))}newListener(e,t,n){let r=this.getEvent(e);return r.add(h({name:e,callback:t,scope:n})),r}on(e,t,n){if(typeof e==\"undefined\"||e==null)return this;typeof e==\"string\"&&(e=e.trim().split(/\\s/g));let r,i,a=typeof e==\"object\"&&!Array.isArray(e),l=a?t:n;return a||(i=t),Object.keys(e).forEach(s=>{r=a?s:e[s],a&&(i=e[s]),this.newListener(r,i,l)},this),this}removeListener(e,t,n){let r=this.get(e);if(r instanceof c&&t){let i=h({name:e,callback:t,scope:n});r.forEach((a,l)=>{if(a.callback===i.callback&&a.scope===i.scope)return r.remove(l)})}return r}off(e,t,n){if(typeof e==\"undefined\"||e==null)return this;typeof e==\"string\"&&(e=e.trim().split(/\\s/g));let r,i,a=typeof e==\"object\"&&!Array.isArray(e),l=a?t:n;return a||(i=t),Object.keys(e).forEach(s=>{r=a?s:e[s],a&&(i=e[s]),typeof i==\"function\"?this.removeListener(r,i,l):this.remove(r)},this),this}once(e,t,n){if(typeof e==\"undefined\"||e==null)return this;typeof e==\"string\"&&(e=e.trim().split(/\\s/g));let r=typeof e==\"object\"&&!Array.isArray(e);return Object.keys(e).forEach(i=>{let a=r?i:e[i],l=r?e[i]:t,s=r?t:n,u=(...f)=>{l.apply(s,f),this.removeListener(a,u,s)};this.newListener(a,u,s)},this),this}emit(e,...t){return typeof e==\"undefined\"||e==null?this:(typeof e==\"string\"&&(e=e.trim().split(/\\s/g)),e.forEach(n=>{let r=this.get(n);r instanceof c&&r.forEach(i=>{let{callback:a,scope:l}=i;a.apply(l,t)})},this),this)}clear(){return b(this,\"clear\"),super.clear(),this}},d=y;export{c as Event,y as EventEmitter,d as default,h as newListener};\n","import { EventEmitter } from \"@okikio/emitter\";\nexport const EVENTS_OPTS = {\n  \"init.start\": console.log,\n  \"init.complete\": console.info,\n  \"init.error\": console.error,\n  \"init.loading\": console.warn,\n\n  \"logger.log\": console.log,\n  \"logger.error\": console.error,\n  \"logger.warn\": console.warn,\n  \"logger.info\": console.info,\n\n  \"build.error\": console.error,\n};\n\nexport const EVENTS = new EventEmitter();\nEVENTS.on(EVENTS_OPTS);","import type { ESBUILD } from \"../types\";\n\n/**\n * Holds global state \n */\nconst STATE = {\n  /**\n   * Registers if esbuild has been initialized\n   */\n  initialized: false as boolean,\n\n  /**\n   * Assets are files during the build process that esbuild can't handle natively, \n   * e.g. fetching web workers using the `new URL(\"...\", import.meta.url)`\n   */\n  assets: [] as ESBUILD.OutputFile[],\n\n  /**\n   * Instance of esbuild being used\n   */\n  esbuild: null as typeof ESBUILD\n};\n\n/**\n * Gets state or if there is no name returns STATE object\n */\nexport function getState<T extends keyof typeof STATE>(name?: T) {\n  return STATE[name];\n}\n\nexport function setState<T extends keyof typeof STATE>(name: T, value: typeof STATE[T]) {\n  return (STATE[name] = value);\n}\n\nexport type Getter<T> = () => T;\nexport type Setter<T> = (value?: T) => T;\nexport type StateArray<T> = [Getter<T>, Setter<T>];\n\n/**\n * Returns a state array\n * @param initial Initial state\n * @returns [get, set] functions\n */\nexport function createState<T>(initial?: T) {\n  let result = initial;\n  return [\n    () => result,\n    (value?: T) => {\n      if (typeof value === \"object\" && !Array.isArray(value) && value !== null) {\n        Object.assign(result, value);\n      } else {\n        result = value ?? initial;\n      }\n      return result;\n    }\n  ] as StateArray<T>;\n}","import type * as ESBUILD from \"esbuild-wasm\";\n\nimport type { Platform } from \"./configs/platform\";\nimport { PLATFORM_AUTO } from \"./configs/platform\";\n\nimport { EVENTS } from \"./configs/events\";\nimport { getState, setState } from \"./configs/state\";\nimport { version } from \"esbuild-wasm/package.json\";\n\n/**\n * Determines which esbuild skew to use depending on the platform option supplied, \n * by default it will choose the most perfomnant esbuild skew, \n * so on deno and node it will choose the native while on browsers it will choose WASM.\n * \n * You can specifiy which platform skew you would like, \n * for example you can choose \"deno-wasm\" as a skew, where you can run the esbuild but in WASM\n * \n * @param platform Which platform skew of esbuild should be used\n * @returns Esbuild module\n */\nexport async function getEsbuild(platform: Platform = PLATFORM_AUTO): Promise<typeof ESBUILD> {\n  try {\n    switch (platform) {\n      case \"node\":\n        return await import(\"esbuild\");\n      case \"deno\":\n        return await import(\n          /* @vite-ignore */\n          `https://deno.land/x/esbuild@v${version}/mod.js`\n        );\n      case \"deno-wasm\":\n        return await import(\n          /* @vite-ignore */\n          `https://deno.land/x/esbuild@v${version}/wasm.js`\n        );\n      default:\n        return await import(\"esbuild-wasm\");\n    }\n  } catch (e) {\n    throw e;\n  }\n}\n\n/**\n * Configures how esbuild running in wasm is initialized \n */\nexport type InitOptions = ESBUILD.InitializeOptions & { platform?: Platform };\n\nexport async function init(platform = PLATFORM_AUTO, opts: ESBUILD.InitializeOptions = {}) {\n  try {\n    if (!getState(\"initialized\")) {\n      setState(\"initialized\", true);\n      EVENTS.emit(\"init.start\");\n\n      const esbuild = await getEsbuild(platform);\n      setState(\"esbuild\", esbuild);\n      if (\n        platform !== \"node\" &&\n        platform !== \"deno\"\n      ) {\n        if (\"wasmModule\" in opts) {\n          await esbuild.initialize(opts);\n        } else if (\"wasmURL\" in opts) { \n          await esbuild.initialize(opts);\n        } else {\n          const { default: ESBUILD_WASM } = await import(\"./wasm\");\n          await esbuild.initialize({\n            wasmModule: new WebAssembly.Module(await ESBUILD_WASM()),\n            ...opts\n          });\n        }\n      }\n\n      EVENTS.emit(\"init.complete\");\n    }\n\n    return getState(\"esbuild\");\n  } catch (error) {\n    EVENTS.emit(\"init.error\", error);\n    console.error(error);\n  }\n}","// Copyright 2018-2022 the Deno authors. All rights reserved. MIT license.\n// Copyright the Browserify authors. MIT License.\n// Ported from https://github.com/browserify/path-browserify/\n// This module is browser compatible.\n\n// Alphabet chars.\nexport const CHAR_UPPERCASE_A = 65; /* A */\nexport const CHAR_LOWERCASE_A = 97; /* a */\nexport const CHAR_UPPERCASE_Z = 90; /* Z */\nexport const CHAR_LOWERCASE_Z = 122; /* z */\n\n// Non-alphabetic chars.\nexport const CHAR_DOT = 46; /* . */\nexport const CHAR_FORWARD_SLASH = 47; /* / */\nexport const CHAR_BACKWARD_SLASH = 92; /* \\ */\nexport const CHAR_VERTICAL_LINE = 124; /* | */\nexport const CHAR_COLON = 58; /* : */\nexport const CHAR_QUESTION_MARK = 63; /* ? */\nexport const CHAR_UNDERSCORE = 95; /* _ */\nexport const CHAR_LINE_FEED = 10; /* \\n */\nexport const CHAR_CARRIAGE_RETURN = 13; /* \\r */\nexport const CHAR_TAB = 9; /* \\t */\nexport const CHAR_FORM_FEED = 12; /* \\f */\nexport const CHAR_EXCLAMATION_MARK = 33; /* ! */\nexport const CHAR_HASH = 35; /* # */\nexport const CHAR_SPACE = 32; /*   */\nexport const CHAR_NO_BREAK_SPACE = 160; /* \\u00A0 */\nexport const CHAR_ZERO_WIDTH_NOBREAK_SPACE = 65279; /* \\uFEFF */\nexport const CHAR_LEFT_SQUARE_BRACKET = 91; /* [ */\nexport const CHAR_RIGHT_SQUARE_BRACKET = 93; /* ] */\nexport const CHAR_LEFT_ANGLE_BRACKET = 60; /* < */\nexport const CHAR_RIGHT_ANGLE_BRACKET = 62; /* > */\nexport const CHAR_LEFT_CURLY_BRACKET = 123; /* { */\nexport const CHAR_RIGHT_CURLY_BRACKET = 125; /* } */\nexport const CHAR_HYPHEN_MINUS = 45; /* - */\nexport const CHAR_PLUS = 43; /* + */\nexport const CHAR_DOUBLE_QUOTE = 34; /* \" */\nexport const CHAR_SINGLE_QUOTE = 39; /* ' */\nexport const CHAR_PERCENT = 37; /* % */\nexport const CHAR_SEMICOLON = 59; /* ; */\nexport const CHAR_CIRCUMFLEX_ACCENT = 94; /* ^ */\nexport const CHAR_GRAVE_ACCENT = 96; /* ` */\nexport const CHAR_AT = 64; /* @ */\nexport const CHAR_AMPERSAND = 38; /* & */\nexport const CHAR_EQUAL = 61; /* = */\n\n// Digits\nexport const CHAR_0 = 48; /* 0 */\nexport const CHAR_9 = 57; /* 9 */\n\nexport const SEP = \"/\";\nexport const SEP_PATTERN = /\\/+/;\n\nexport type OSType = \"windows\" | \"linux\" | \"darwin\";","// Copyright 2018-2022 the Deno authors. All rights reserved. MIT license.\n// Copyright the Browserify authors. MIT License.\n// Ported from https://github.com/browserify/path-browserify/\n// This module is browser compatible.\n\nimport type { FormatInputPathObject } from \"./_interface\";\nimport {\n  CHAR_BACKWARD_SLASH,\n  CHAR_DOT,\n  CHAR_FORWARD_SLASH,\n  CHAR_LOWERCASE_A,\n  CHAR_LOWERCASE_Z,\n  CHAR_UPPERCASE_A,\n  CHAR_UPPERCASE_Z,\n} from \"./_constants\";\n\nexport function assertPath(path: string): void {\n  if (typeof path !== \"string\") {\n    throw new TypeError(\n      `Path must be a string. Received ${JSON.stringify(path)}`,\n    );\n  }\n}\n\nexport function isPosixPathSeparator(code: number): boolean {\n  return code === CHAR_FORWARD_SLASH;\n}\n\nexport function isPathSeparator(code: number): boolean {\n  return isPosixPathSeparator(code) || code === CHAR_BACKWARD_SLASH;\n}\n\nexport function isWindowsDeviceRoot(code: number): boolean {\n  return (\n    (code >= CHAR_LOWERCASE_A && code <= CHAR_LOWERCASE_Z) ||\n    (code >= CHAR_UPPERCASE_A && code <= CHAR_UPPERCASE_Z)\n  );\n}\n\n// Resolves . and .. elements in a path with directory names\nexport function normalizeString(\n  path: string,\n  allowAboveRoot: boolean,\n  separator: string,\n  isPathSeparator: (code: number) => boolean,\n): string {\n  let res = \"\";\n  let lastSegmentLength = 0;\n  let lastSlash = -1;\n  let dots = 0;\n  let code: number | undefined;\n  for (let i = 0, len = path.length; i <= len; ++i) {\n    if (i < len) code = path.charCodeAt(i);\n    else if (isPathSeparator(code!)) break;\n    else code = CHAR_FORWARD_SLASH;\n\n    if (isPathSeparator(code!)) {\n      if (lastSlash === i - 1 || dots === 1) {\n        // NOOP\n      } else if (lastSlash !== i - 1 && dots === 2) {\n        if (\n          res.length < 2 ||\n          lastSegmentLength !== 2 ||\n          res.charCodeAt(res.length - 1) !== CHAR_DOT ||\n          res.charCodeAt(res.length - 2) !== CHAR_DOT\n        ) {\n          if (res.length > 2) {\n            const lastSlashIndex = res.lastIndexOf(separator);\n            if (lastSlashIndex === -1) {\n              res = \"\";\n              lastSegmentLength = 0;\n            } else {\n              res = res.slice(0, lastSlashIndex);\n              lastSegmentLength = res.length - 1 - res.lastIndexOf(separator);\n            }\n            lastSlash = i;\n            dots = 0;\n            continue;\n          } else if (res.length === 2 || res.length === 1) {\n            res = \"\";\n            lastSegmentLength = 0;\n            lastSlash = i;\n            dots = 0;\n            continue;\n          }\n        }\n        if (allowAboveRoot) {\n          if (res.length > 0) res += `${separator}..`;\n          else res = \"..\";\n          lastSegmentLength = 2;\n        }\n      } else {\n        if (res.length > 0) res += separator + path.slice(lastSlash + 1, i);\n        else res = path.slice(lastSlash + 1, i);\n        lastSegmentLength = i - lastSlash - 1;\n      }\n      lastSlash = i;\n      dots = 0;\n    } else if (code === CHAR_DOT && dots !== -1) {\n      ++dots;\n    } else {\n      dots = -1;\n    }\n  }\n  return res;\n}\n\nexport function _format(\n  sep: string,\n  pathObject: FormatInputPathObject,\n): string {\n  const dir: string | undefined = pathObject.dir || pathObject.root;\n  const base: string = pathObject.base ||\n    (pathObject.name || \"\") + (pathObject.ext || \"\");\n  if (!dir) return base;\n  if (dir === pathObject.root) return dir + base;\n  return dir + sep + base;\n}\n\nconst WHITESPACE_ENCODINGS: Record<string, string> = {\n  \"\\u0009\": \"%09\",\n  \"\\u000A\": \"%0A\",\n  \"\\u000B\": \"%0B\",\n  \"\\u000C\": \"%0C\",\n  \"\\u000D\": \"%0D\",\n  \"\\u0020\": \"%20\",\n};\n\nexport function encodeWhitespace(string: string): string {\n  return string.replaceAll(/[\\s]/g, (c) => {\n    return WHITESPACE_ENCODINGS[c] ?? c;\n  });\n}","// Copyright 2018-2022 the Deno authors. All rights reserved. MIT license.\n// Copyright the Browserify authors. MIT License.\n// Ported from https://github.com/browserify/path-browserify/\n// This module is browser compatible.\n\nimport type { FormatInputPathObject, ParsedPath } from \"./_interface\";\nimport { CHAR_DOT, CHAR_FORWARD_SLASH } from \"./_constants\";\n\nimport {\n  _format,\n  assertPath,\n  encodeWhitespace,\n  isPosixPathSeparator,\n  normalizeString,\n} from \"./_util\";\n\nexport const sep = \"/\";\nexport const delimiter = \":\";\n\n// path.resolve([from ...], to)\n/**\n * Resolves `pathSegments` into an absolute path.\n * @param pathSegments an array of path segments\n */\nexport function resolve(...pathSegments: string[]): string {\n  let resolvedPath = \"\";\n  let resolvedAbsolute = false;\n\n  for (let i = pathSegments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n    let path: string;\n\n    if (i >= 0) path = pathSegments[i];\n    else {\n      // deno-lint-ignore no-explicit-any\n      const { Deno } = globalThis as any;\n      if (typeof Deno?.cwd !== \"function\") {\n        throw new TypeError(\"Resolved a relative path without a CWD.\");\n      }\n      path = Deno?.cwd?.() ?? \"/\";\n    }\n\n    assertPath(path);\n\n    // Skip empty entries\n    if (path.length === 0) {\n      continue;\n    }\n\n    resolvedPath = `${path}/${resolvedPath}`;\n    resolvedAbsolute = path.charCodeAt(0) === CHAR_FORWARD_SLASH;\n  }\n\n  // At this point the path should be resolved to a full absolute path, but\n  // handle relative paths to be safe (might happen when process.cwd() fails)\n\n  // Normalize the path\n  resolvedPath = normalizeString(\n    resolvedPath,\n    !resolvedAbsolute,\n    \"/\",\n    isPosixPathSeparator,\n  );\n\n  if (resolvedAbsolute) {\n    if (resolvedPath.length > 0) return `/${resolvedPath}`;\n    else return \"/\";\n  } else if (resolvedPath.length > 0) return resolvedPath;\n  else return \".\";\n}\n\n/**\n * Normalize the `path`, resolving `'..'` and `'.'` segments.\n * @param path to be normalized\n */\nexport function normalize(path: string): string {\n  assertPath(path);\n\n  if (path.length === 0) return \".\";\n\n  const isAbsolute = path.charCodeAt(0) === CHAR_FORWARD_SLASH;\n  const trailingSeparator =\n    path.charCodeAt(path.length - 1) === CHAR_FORWARD_SLASH;\n\n  // Normalize the path\n  path = normalizeString(path, !isAbsolute, \"/\", isPosixPathSeparator);\n\n  if (path.length === 0 && !isAbsolute) path = \".\";\n  if (path.length > 0 && trailingSeparator) path += \"/\";\n\n  if (isAbsolute) return `/${path}`;\n  return path;\n}\n\n/**\n * Verifies whether provided path is absolute\n * @param path to be verified as absolute\n */\nexport function isAbsolute(path: string): boolean {\n  assertPath(path);\n  return path.length > 0 && path.charCodeAt(0) === CHAR_FORWARD_SLASH;\n}\n\n/**\n * Join all given a sequence of `paths`,then normalizes the resulting path.\n * @param paths to be joined and normalized\n */\nexport function join(...paths: string[]): string {\n  if (paths.length === 0) return \".\";\n  let joined: string | undefined;\n  for (let i = 0, len = paths.length; i < len; ++i) {\n    const path = paths[i];\n    assertPath(path);\n    if (path.length > 0) {\n      if (!joined) joined = path;\n      else joined += `/${path}`;\n    }\n  }\n  if (!joined) return \".\";\n  return normalize(joined);\n}\n\n/**\n * Return the relative path from `from` to `to` based on current working directory.\n * @param from path in current working directory\n * @param to path in current working directory\n */\nexport function relative(from: string, to: string): string {\n  assertPath(from);\n  assertPath(to);\n\n  if (from === to) return \"\";\n\n  from = resolve(from);\n  to = resolve(to);\n\n  if (from === to) return \"\";\n\n  // Trim any leading backslashes\n  let fromStart = 1;\n  const fromEnd = from.length;\n  for (; fromStart < fromEnd; ++fromStart) {\n    if (from.charCodeAt(fromStart) !== CHAR_FORWARD_SLASH) break;\n  }\n  const fromLen = fromEnd - fromStart;\n\n  // Trim any leading backslashes\n  let toStart = 1;\n  const toEnd = to.length;\n  for (; toStart < toEnd; ++toStart) {\n    if (to.charCodeAt(toStart) !== CHAR_FORWARD_SLASH) break;\n  }\n  const toLen = toEnd - toStart;\n\n  // Compare paths to find the longest common path from root\n  const length = fromLen < toLen ? fromLen : toLen;\n  let lastCommonSep = -1;\n  let i = 0;\n  for (; i <= length; ++i) {\n    if (i === length) {\n      if (toLen > length) {\n        if (to.charCodeAt(toStart + i) === CHAR_FORWARD_SLASH) {\n          // We get here if `from` is the exact base path for `to`.\n          // For example: from='/foo/bar'; to='/foo/bar/baz'\n          return to.slice(toStart + i + 1);\n        } else if (i === 0) {\n          // We get here if `from` is the root\n          // For example: from='/'; to='/foo'\n          return to.slice(toStart + i);\n        }\n      } else if (fromLen > length) {\n        if (from.charCodeAt(fromStart + i) === CHAR_FORWARD_SLASH) {\n          // We get here if `to` is the exact base path for `from`.\n          // For example: from='/foo/bar/baz'; to='/foo/bar'\n          lastCommonSep = i;\n        } else if (i === 0) {\n          // We get here if `to` is the root.\n          // For example: from='/foo'; to='/'\n          lastCommonSep = 0;\n        }\n      }\n      break;\n    }\n    const fromCode = from.charCodeAt(fromStart + i);\n    const toCode = to.charCodeAt(toStart + i);\n    if (fromCode !== toCode) break;\n    else if (fromCode === CHAR_FORWARD_SLASH) lastCommonSep = i;\n  }\n\n  let out = \"\";\n  // Generate the relative path based on the path difference between `to`\n  // and `from`\n  for (i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i) {\n    if (i === fromEnd || from.charCodeAt(i) === CHAR_FORWARD_SLASH) {\n      if (out.length === 0) out += \"..\";\n      else out += \"/..\";\n    }\n  }\n\n  // Lastly, append the rest of the destination (`to`) path that comes after\n  // the common path parts\n  if (out.length > 0) return out + to.slice(toStart + lastCommonSep);\n  else {\n    toStart += lastCommonSep;\n    if (to.charCodeAt(toStart) === CHAR_FORWARD_SLASH) ++toStart;\n    return to.slice(toStart);\n  }\n}\n\n/**\n * Resolves path to a namespace path\n * @param path to resolve to namespace\n */\nexport function toNamespacedPath(path: string): string {\n  // Non-op on posix systems\n  return path;\n}\n\n/**\n * Return the directory name of a `path`.\n * @param path to determine name for\n */\nexport function dirname(path: string): string {\n  assertPath(path);\n  if (path.length === 0) return \".\";\n  const hasRoot = path.charCodeAt(0) === CHAR_FORWARD_SLASH;\n  let end = -1;\n  let matchedSlash = true;\n  for (let i = path.length - 1; i >= 1; --i) {\n    if (path.charCodeAt(i) === CHAR_FORWARD_SLASH) {\n      if (!matchedSlash) {\n        end = i;\n        break;\n      }\n    } else {\n      // We saw the first non-path separator\n      matchedSlash = false;\n    }\n  }\n\n  if (end === -1) return hasRoot ? \"/\" : \".\";\n  if (hasRoot && end === 1) return \"//\";\n  return path.slice(0, end);\n}\n\n/**\n * Return the last portion of a `path`. Trailing directory separators are ignored.\n * @param path to process\n * @param ext of path directory\n */\nexport function basename(path: string, ext = \"\"): string {\n  if (ext !== undefined && typeof ext !== \"string\") {\n    throw new TypeError(\"\\\"ext\\\" argument must be a string\");\n  }\n  assertPath(path);\n\n  let start = 0;\n  let end = -1;\n  let matchedSlash = true;\n  let i: number;\n\n  if (ext !== undefined && ext.length > 0 && ext.length <= path.length) {\n    if (ext.length === path.length && ext === path) return \"\";\n    let extIdx = ext.length - 1;\n    let firstNonSlashEnd = -1;\n    for (i = path.length - 1; i >= 0; --i) {\n      const code = path.charCodeAt(i);\n      if (code === CHAR_FORWARD_SLASH) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now\n        if (!matchedSlash) {\n          start = i + 1;\n          break;\n        }\n      } else {\n        if (firstNonSlashEnd === -1) {\n          // We saw the first non-path separator, remember this index in case\n          // we need it if the extension ends up not matching\n          matchedSlash = false;\n          firstNonSlashEnd = i + 1;\n        }\n        if (extIdx >= 0) {\n          // Try to match the explicit extension\n          if (code === ext.charCodeAt(extIdx)) {\n            if (--extIdx === -1) {\n              // We matched the extension, so mark this as the end of our path\n              // component\n              end = i;\n            }\n          } else {\n            // Extension does not match, so our result is the entire path\n            // component\n            extIdx = -1;\n            end = firstNonSlashEnd;\n          }\n        }\n      }\n    }\n\n    if (start === end) end = firstNonSlashEnd;\n    else if (end === -1) end = path.length;\n    return path.slice(start, end);\n  } else {\n    for (i = path.length - 1; i >= 0; --i) {\n      if (path.charCodeAt(i) === CHAR_FORWARD_SLASH) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now\n        if (!matchedSlash) {\n          start = i + 1;\n          break;\n        }\n      } else if (end === -1) {\n        // We saw the first non-path separator, mark this as the end of our\n        // path component\n        matchedSlash = false;\n        end = i + 1;\n      }\n    }\n\n    if (end === -1) return \"\";\n    return path.slice(start, end);\n  }\n}\n\n/**\n * Return the extension of the `path`.\n * @param path with extension\n */\nexport function extname(path: string): string {\n  assertPath(path);\n  let startDot = -1;\n  let startPart = 0;\n  let end = -1;\n  let matchedSlash = true;\n  // Track the state of characters (if any) we see before our first dot and\n  // after any path separator we find\n  let preDotState = 0;\n  for (let i = path.length - 1; i >= 0; --i) {\n    const code = path.charCodeAt(i);\n    if (code === CHAR_FORWARD_SLASH) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now\n      if (!matchedSlash) {\n        startPart = i + 1;\n        break;\n      }\n      continue;\n    }\n    if (end === -1) {\n      // We saw the first non-path separator, mark this as the end of our\n      // extension\n      matchedSlash = false;\n      end = i + 1;\n    }\n    if (code === CHAR_DOT) {\n      // If this is our first dot, mark it as the start of our extension\n      if (startDot === -1) startDot = i;\n      else if (preDotState !== 1) preDotState = 1;\n    } else if (startDot !== -1) {\n      // We saw a non-dot and non-path separator before our dot, so we should\n      // have a good chance at having a non-empty extension\n      preDotState = -1;\n    }\n  }\n\n  if (\n    startDot === -1 ||\n    end === -1 ||\n    // We saw a non-dot character immediately before the dot\n    preDotState === 0 ||\n    // The (right-most) trimmed path component is exactly '..'\n    (preDotState === 1 && startDot === end - 1 && startDot === startPart + 1)\n  ) {\n    return \"\";\n  }\n  return path.slice(startDot, end);\n}\n\n/**\n * Generate a path from `FormatInputPathObject` object.\n * @param pathObject with path\n */\nexport function format(pathObject: FormatInputPathObject): string {\n  if (pathObject === null || typeof pathObject !== \"object\") {\n    throw new TypeError(\n      `The \"pathObject\" argument must be of type Object. Received type ${typeof pathObject}`,\n    );\n  }\n  return _format(\"/\", pathObject);\n}\n\n/**\n * Return a `ParsedPath` object of the `path`.\n * @param path to process\n */\nexport function parse(path: string): ParsedPath {\n  assertPath(path);\n\n  const ret: ParsedPath = { root: \"\", dir: \"\", base: \"\", ext: \"\", name: \"\" };\n  if (path.length === 0) return ret;\n  const isAbsolute = path.charCodeAt(0) === CHAR_FORWARD_SLASH;\n  let start: number;\n  if (isAbsolute) {\n    ret.root = \"/\";\n    start = 1;\n  } else {\n    start = 0;\n  }\n  let startDot = -1;\n  let startPart = 0;\n  let end = -1;\n  let matchedSlash = true;\n  let i = path.length - 1;\n\n  // Track the state of characters (if any) we see before our first dot and\n  // after any path separator we find\n  let preDotState = 0;\n\n  // Get non-dir info\n  for (; i >= start; --i) {\n    const code = path.charCodeAt(i);\n    if (code === CHAR_FORWARD_SLASH) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now\n      if (!matchedSlash) {\n        startPart = i + 1;\n        break;\n      }\n      continue;\n    }\n    if (end === -1) {\n      // We saw the first non-path separator, mark this as the end of our\n      // extension\n      matchedSlash = false;\n      end = i + 1;\n    }\n    if (code === CHAR_DOT) {\n      // If this is our first dot, mark it as the start of our extension\n      if (startDot === -1) startDot = i;\n      else if (preDotState !== 1) preDotState = 1;\n    } else if (startDot !== -1) {\n      // We saw a non-dot and non-path separator before our dot, so we should\n      // have a good chance at having a non-empty extension\n      preDotState = -1;\n    }\n  }\n\n  if (\n    startDot === -1 ||\n    end === -1 ||\n    // We saw a non-dot character immediately before the dot\n    preDotState === 0 ||\n    // The (right-most) trimmed path component is exactly '..'\n    (preDotState === 1 && startDot === end - 1 && startDot === startPart + 1)\n  ) {\n    if (end !== -1) {\n      if (startPart === 0 && isAbsolute) {\n        ret.base = ret.name = path.slice(1, end);\n      } else {\n        ret.base = ret.name = path.slice(startPart, end);\n      }\n    }\n  } else {\n    if (startPart === 0 && isAbsolute) {\n      ret.name = path.slice(1, startDot);\n      ret.base = path.slice(1, end);\n    } else {\n      ret.name = path.slice(startPart, startDot);\n      ret.base = path.slice(startPart, end);\n    }\n    ret.ext = path.slice(startDot, end);\n  }\n\n  if (startPart > 0) ret.dir = path.slice(0, startPart - 1);\n  else if (isAbsolute) ret.dir = \"/\";\n\n  return ret;\n}\n\n/**\n * Converts a file URL to a path string.\n *\n * ```ts\n *      import { fromFileUrl } from \"./posix.ts\";\n *      fromFileUrl(\"file:///home/foo\"); // \"/home/foo\"\n * ```\n * @param url of a file URL\n */\nexport function fromFileUrl(url: string | URL): string {\n  url = url instanceof URL ? url : new URL(url);\n  if (url.protocol != \"file:\") {\n    throw new TypeError(\"Must be a file URL.\");\n  }\n  return decodeURIComponent(\n    url.pathname.replace(/%(?![0-9A-Fa-f]{2})/g, \"%25\"),\n  );\n}\n\n/**\n * Converts a path string to a file URL.\n *\n * ```ts\n *      import { toFileUrl } from \"./posix.ts\";\n *      toFileUrl(\"/home/foo\"); // new URL(\"file:///home/foo\")\n * ```\n * @param path to convert to file URL\n */\nexport function toFileUrl(path: string): URL {\n  if (!isAbsolute(path)) {\n    throw new TypeError(\"Must be an absolute path.\");\n  }\n  const url = new URL(\"file:///\");\n  url.pathname = encodeWhitespace(\n    path.replace(/%/g, \"%25\").replace(/\\\\/g, \"%5C\"),\n  );\n  return url;\n}","// Copyright 2018-2022 the Deno authors. All rights reserved. MIT license.\n// This module is browser compatible.\nimport type { OSType } from \"./_constants\";\nimport * as _posix from \"./posix\";\nimport { SEP, SEP_PATTERN } from \"./_constants\";\n\nconst path = _posix;\nconst { join, normalize } = path;\n\nexport interface GlobOptions {\n  /** Extended glob syntax.\n   * See https://www.linuxjournal.com/content/bash-extended-globbing. Defaults\n   * to true. */\n  extended?: boolean;\n  /** Globstar syntax.\n   * See https://www.linuxjournal.com/content/globstar-new-bash-globbing-option.\n   * If false, `**` is treated like `*`. Defaults to true. */\n  globstar?: boolean;\n  /** Whether globstar should be case insensitive. */\n  caseInsensitive?: boolean;\n  /** Operating system. Defaults to the native OS. */\n  os?: OSType;\n}\n\nexport type GlobToRegExpOptions = GlobOptions;\n\nconst regExpEscapeChars = [\n  \"!\",\n  \"$\",\n  \"(\",\n  \")\",\n  \"*\",\n  \"+\",\n  \".\",\n  \"=\",\n  \"?\",\n  \"[\",\n  \"\\\\\",\n  \"^\",\n  \"{\",\n  \"|\",\n];\nconst rangeEscapeChars = [\"-\", \"\\\\\", \"]\"];\n\n/** Convert a glob string to a regular expression.\n *\n * Tries to match bash glob expansion as closely as possible.\n *\n * Basic glob syntax:\n * - `*` - Matches everything without leaving the path segment.\n * - `?` - Matches any single character.\n * - `{foo,bar}` - Matches `foo` or `bar`.\n * - `[abcd]` - Matches `a`, `b`, `c` or `d`.\n * - `[a-d]` - Matches `a`, `b`, `c` or `d`.\n * - `[!abcd]` - Matches any single character besides `a`, `b`, `c` or `d`.\n * - `[[:<class>:]]` - Matches any character belonging to `<class>`.\n *     - `[[:alnum:]]` - Matches any digit or letter.\n *     - `[[:digit:]abc]` - Matches any digit, `a`, `b` or `c`.\n *     - See https://facelessuser.github.io/wcmatch/glob/#posix-character-classes\n *       for a complete list of supported character classes.\n * - `\\` - Escapes the next character for an `os` other than `\"windows\"`.\n * - \\` - Escapes the next character for `os` set to `\"windows\"`.\n * - `/` - Path separator.\n * - `\\` - Additional path separator only for `os` set to `\"windows\"`.\n *\n * Extended syntax:\n * - Requires `{ extended: true }`.\n * - `?(foo|bar)` - Matches 0 or 1 instance of `{foo,bar}`.\n * - `@(foo|bar)` - Matches 1 instance of `{foo,bar}`. They behave the same.\n * - `*(foo|bar)` - Matches _n_ instances of `{foo,bar}`.\n * - `+(foo|bar)` - Matches _n > 0_ instances of `{foo,bar}`.\n * - `!(foo|bar)` - Matches anything other than `{foo,bar}`.\n * - See https://www.linuxjournal.com/content/bash-extended-globbing.\n *\n * Globstar syntax:\n * - Requires `{ globstar: true }`.\n * - `**` - Matches any number of any path segments.\n *     - Must comprise its entire path segment in the provided glob.\n * - See https://www.linuxjournal.com/content/globstar-new-bash-globbing-option.\n *\n * Note the following properties:\n * - The generated `RegExp` is anchored at both start and end.\n * - Repeating and trailing separators are tolerated. Trailing separators in the\n *   provided glob have no meaning and are discarded.\n * - Absolute globs will only match absolute paths, etc.\n * - Empty globs will match nothing.\n * - Any special glob syntax must be contained to one path segment. For example,\n *   `?(foo|bar/baz)` is invalid. The separator will take precedence and the\n *   first segment ends with an unclosed group.\n * - If a path segment ends with unclosed groups or a dangling escape prefix, a\n *   parse error has occurred. Every character for that segment is taken\n *   literally in this event.\n *\n * Limitations:\n * - A negative group like `!(foo|bar)` will wrongly be converted to a negative\n *   look-ahead followed by a wildcard. This means that `!(foo).js` will wrongly\n *   fail to match `foobar.js`, even though `foobar` is not `foo`. Effectively,\n *   `!(foo|bar)` is treated like `!(@(foo|bar)*)`. This will work correctly if\n *   the group occurs not nested at the end of the segment. */\nexport function globToRegExp(\n  glob: string,\n  {\n    extended = true,\n    globstar: globstarOption = true,\n    os = \"linux\",\n    caseInsensitive = false,\n  }: GlobToRegExpOptions = {},\n): RegExp {\n  if (glob == \"\") {\n    return /(?!)/;\n  }\n\n  const sep = os == \"windows\" ? \"(?:\\\\\\\\|/)+\" : \"/+\";\n  const sepMaybe = os == \"windows\" ? \"(?:\\\\\\\\|/)*\" : \"/*\";\n  const seps = os == \"windows\" ? [\"\\\\\", \"/\"] : [\"/\"];\n  const globstar = os == \"windows\"\n    ? \"(?:[^\\\\\\\\/]*(?:\\\\\\\\|/|$)+)*\"\n    : \"(?:[^/]*(?:/|$)+)*\";\n  const wildcard = os == \"windows\" ? \"[^\\\\\\\\/]*\" : \"[^/]*\";\n  const escapePrefix = os == \"windows\" ? \"`\" : \"\\\\\";\n\n  // Remove trailing separators.\n  let newLength = glob.length;\n  for (; newLength > 1 && seps.includes(glob[newLength - 1]); newLength--);\n  glob = glob.slice(0, newLength);\n\n  let regExpString = \"\";\n\n  // Terminates correctly. Trust that `j` is incremented every iteration.\n  for (let j = 0; j < glob.length;) {\n    let segment = \"\";\n    const groupStack: string[] = [];\n    let inRange = false;\n    let inEscape = false;\n    let endsWithSep = false;\n    let i = j;\n\n    // Terminates with `i` at the non-inclusive end of the current segment.\n    for (; i < glob.length && !seps.includes(glob[i]); i++) {\n      if (inEscape) {\n        inEscape = false;\n        const escapeChars = inRange ? rangeEscapeChars : regExpEscapeChars;\n        segment += escapeChars.includes(glob[i]) ? `\\\\${glob[i]}` : glob[i];\n        continue;\n      }\n\n      if (glob[i] == escapePrefix) {\n        inEscape = true;\n        continue;\n      }\n\n      if (glob[i] == \"[\") {\n        if (!inRange) {\n          inRange = true;\n          segment += \"[\";\n          if (glob[i + 1] == \"!\") {\n            i++;\n            segment += \"^\";\n          } else if (glob[i + 1] == \"^\") {\n            i++;\n            segment += \"\\\\^\";\n          }\n          continue;\n        } else if (glob[i + 1] == \":\") {\n          let k = i + 1;\n          let value = \"\";\n          while (glob[k + 1] != null && glob[k + 1] != \":\") {\n            value += glob[k + 1];\n            k++;\n          }\n          if (glob[k + 1] == \":\" && glob[k + 2] == \"]\") {\n            i = k + 2;\n            if (value == \"alnum\") segment += \"\\\\dA-Za-z\";\n            else if (value == \"alpha\") segment += \"A-Za-z\";\n            else if (value == \"ascii\") segment += \"\\x00-\\x7F\";\n            else if (value == \"blank\") segment += \"\\t \";\n            else if (value == \"cntrl\") segment += \"\\x00-\\x1F\\x7F\";\n            else if (value == \"digit\") segment += \"\\\\d\";\n            else if (value == \"graph\") segment += \"\\x21-\\x7E\";\n            else if (value == \"lower\") segment += \"a-z\";\n            else if (value == \"print\") segment += \"\\x20-\\x7E\";\n            else if (value == \"punct\") {\n              segment += \"!\\\"#$%&'()*+,\\\\-./:;<=>?@[\\\\\\\\\\\\]^_‘{|}~\";\n            } else if (value == \"space\") segment += \"\\\\s\\v\";\n            else if (value == \"upper\") segment += \"A-Z\";\n            else if (value == \"word\") segment += \"\\\\w\";\n            else if (value == \"xdigit\") segment += \"\\\\dA-Fa-f\";\n            continue;\n          }\n        }\n      }\n\n      if (glob[i] == \"]\" && inRange) {\n        inRange = false;\n        segment += \"]\";\n        continue;\n      }\n\n      if (inRange) {\n        if (glob[i] == \"\\\\\") {\n          segment += \"\\\\\\\\\";\n        } else {\n          segment += glob[i];\n        }\n        continue;\n      }\n\n      if (\n        glob[i] == \")\" && groupStack.length > 0 &&\n        groupStack[groupStack.length - 1] != \"BRACE\"\n      ) {\n        segment += \")\";\n        const type = groupStack.pop()!;\n        if (type == \"!\") {\n          segment += wildcard;\n        } else if (type != \"@\") {\n          segment += type;\n        }\n        continue;\n      }\n\n      if (\n        glob[i] == \"|\" && groupStack.length > 0 &&\n        groupStack[groupStack.length - 1] != \"BRACE\"\n      ) {\n        segment += \"|\";\n        continue;\n      }\n\n      if (glob[i] == \"+\" && extended && glob[i + 1] == \"(\") {\n        i++;\n        groupStack.push(\"+\");\n        segment += \"(?:\";\n        continue;\n      }\n\n      if (glob[i] == \"@\" && extended && glob[i + 1] == \"(\") {\n        i++;\n        groupStack.push(\"@\");\n        segment += \"(?:\";\n        continue;\n      }\n\n      if (glob[i] == \"?\") {\n        if (extended && glob[i + 1] == \"(\") {\n          i++;\n          groupStack.push(\"?\");\n          segment += \"(?:\";\n        } else {\n          segment += \".\";\n        }\n        continue;\n      }\n\n      if (glob[i] == \"!\" && extended && glob[i + 1] == \"(\") {\n        i++;\n        groupStack.push(\"!\");\n        segment += \"(?!\";\n        continue;\n      }\n\n      if (glob[i] == \"{\") {\n        groupStack.push(\"BRACE\");\n        segment += \"(?:\";\n        continue;\n      }\n\n      if (glob[i] == \"}\" && groupStack[groupStack.length - 1] == \"BRACE\") {\n        groupStack.pop();\n        segment += \")\";\n        continue;\n      }\n\n      if (glob[i] == \",\" && groupStack[groupStack.length - 1] == \"BRACE\") {\n        segment += \"|\";\n        continue;\n      }\n\n      if (glob[i] == \"*\") {\n        if (extended && glob[i + 1] == \"(\") {\n          i++;\n          groupStack.push(\"*\");\n          segment += \"(?:\";\n        } else {\n          const prevChar = glob[i - 1];\n          let numStars = 1;\n          while (glob[i + 1] == \"*\") {\n            i++;\n            numStars++;\n          }\n          const nextChar = glob[i + 1];\n          if (\n            globstarOption && numStars == 2 &&\n            [...seps, undefined].includes(prevChar) &&\n            [...seps, undefined].includes(nextChar)\n          ) {\n            segment += globstar;\n            endsWithSep = true;\n          } else {\n            segment += wildcard;\n          }\n        }\n        continue;\n      }\n\n      segment += regExpEscapeChars.includes(glob[i]) ? `\\\\${glob[i]}` : glob[i];\n    }\n\n    // Check for unclosed groups or a dangling backslash.\n    if (groupStack.length > 0 || inRange || inEscape) {\n      // Parse failure. Take all characters from this segment literally.\n      segment = \"\";\n      for (const c of glob.slice(j, i)) {\n        segment += regExpEscapeChars.includes(c) ? `\\\\${c}` : c;\n        endsWithSep = false;\n      }\n    }\n\n    regExpString += segment;\n    if (!endsWithSep) {\n      regExpString += i < glob.length ? sep : sepMaybe;\n      endsWithSep = true;\n    }\n\n    // Terminates with `i` at the start of the next segment.\n    while (seps.includes(glob[i])) i++;\n\n    // Check that the next value of `j` is indeed higher than the current value.\n    if (!(i > j)) {\n      throw new Error(\"Assertion failure: i > j (potential infinite loop)\");\n    }\n    j = i;\n  }\n\n  regExpString = `^${regExpString}$`;\n  return new RegExp(regExpString, caseInsensitive ? \"i\" : \"\");\n}\n\n/** Test whether the given string is a glob */\nexport function isGlob(str: string): boolean {\n  const chars: Record<string, string> = { \"{\": \"}\", \"(\": \")\", \"[\": \"]\" };\n  const regex =\n    /\\\\(.)|(^!|\\*|\\?|[\\].+)]\\?|\\[[^\\\\\\]]+\\]|\\{[^\\\\}]+\\}|\\(\\?[:!=][^\\\\)]+\\)|\\([^|]+\\|[^\\\\)]+\\))/;\n\n  if (str === \"\") {\n    return false;\n  }\n\n  let match: RegExpExecArray | null;\n\n  while ((match = regex.exec(str))) {\n    if (match[2]) return true;\n    let idx = match.index + match[0].length;\n\n    // if an open bracket/brace/paren is escaped,\n    // set the index to the next closing character\n    const open = match[1];\n    const close = open ? chars[open] : null;\n    if (open && close) {\n      const n = str.indexOf(close, idx);\n      if (n !== -1) {\n        idx = n + 1;\n      }\n    }\n\n    str = str.slice(idx);\n  }\n\n  return false;\n}\n\n/** Like normalize(), but doesn't collapse \"**\\/..\" when `globstar` is true. */\nexport function normalizeGlob(\n  glob: string,\n  { globstar = false }: GlobOptions = {},\n): string {\n  if (glob.match(/\\0/g)) {\n    throw new Error(`Glob contains invalid characters: \"${glob}\"`);\n  }\n  if (!globstar) {\n    return normalize(glob);\n  }\n  const s = SEP_PATTERN.source;\n  const badParentPattern = new RegExp(\n    `(?<=(${s}|^)\\\\*\\\\*${s})\\\\.\\\\.(?=${s}|$)`,\n    \"g\",\n  );\n  return normalize(glob.replace(badParentPattern, \"\\0\")).replace(/\\0/g, \"..\");\n}\n\n/** Like join(), but doesn't collapse \"**\\/..\" when `globstar` is true. */\nexport function joinGlobs(\n  globs: string[],\n  { extended = true, globstar = false }: GlobOptions = {},\n): string {\n  if (!globstar || globs.length == 0) {\n    return join(...globs);\n  }\n  if (globs.length === 0) return \".\";\n  let joined: string | undefined;\n  for (const glob of globs) {\n    const path = glob;\n    if (path.length > 0) {\n      if (!joined) joined = path;\n      else joined += `${SEP}${path}`;\n    }\n  }\n  if (!joined) return \".\";\n  return normalizeGlob(joined, { extended, globstar });\n}\n","// https://deno.land/std@0.142.0/path/mod.ts\n// Copyright 2018-2022 the Deno authors. All rights reserved. MIT license.\n// Copyright the Browserify authors. MIT License.\n\n/**\n * Ported mostly from https://github.com/browserify/path-browserify/\n * This module is browser compatible.\n * @module\n */\n\nimport * as _posix from \"./posix\";\n\nconst path = _posix;\nexport const posix = _posix;\nexport const {\n  basename,\n  delimiter,\n  dirname,\n  extname,\n  format,\n  fromFileUrl,\n  isAbsolute,\n  join,\n  normalize,\n  parse,\n  relative,\n  resolve,\n  sep,\n  toFileUrl,\n  toNamespacedPath,\n} = path;\n\nexport { SEP, SEP_PATTERN } from \"./_constants\";\nexport * from \"./_interface\";\nexport * from \"./glob\";","import { isAbsolute, join } from \"../deno/path/mod\";\nimport { encodeWhitespace } from \"../deno/path/_util\";\n\nexport * from \"../deno/path/mod\";\n\n/** \n * Based on https://github.com/egoist/play-esbuild/blob/main/src/lib/path.ts#L123\n * \n * Support joining paths to a URL\n */\nexport const urlJoin = (urlStr: string, ...args: string[]) => {\n  const url = new URL(urlStr);\n  url.pathname = encodeWhitespace(\n    join(url.pathname, ...args).replace(/%/g, \"%25\").replace(/\\\\/g, \"%5C\"),\n  );\n  return url.toString();\n};\n\n/**\n * An import counts as a bare import if it's neither a relative import of an absolute import\n */\nexport const isBareImport = (importStr: string) => {\n  return /^(?!\\.).*/.test(importStr) && !isAbsolute(importStr);\n};","import type { Loader } from \"esbuild-wasm\";\nimport { extname } from \"./path\";\n\n/** Based on https://github.com/egoist/play-esbuild/blob/main/src/lib/esbuild.ts */\nexport const RESOLVE_EXTENSIONS = [\".tsx\", \".ts\", \".jsx\", \".js\", \".css\", \".json\"];\n\n/**\n * Based on the file extention determine the esbuild loader to use\n */\nexport const inferLoader = (urlStr: string): Loader => {\n  const ext = extname(urlStr);\n  if (RESOLVE_EXTENSIONS.includes(ext))\n    // Resolve all .js and .jsx files to .ts and .tsx files\n    return (/\\.js(x)?$/.test(ext) ? ext.replace(/^\\.js/, \".ts\") : ext).slice(1) as Loader;\n\n  if (ext === \".mjs\" || ext === \".cjs\") return \"ts\"; // \"js\"\n  if (ext === \".mts\" || ext === \".cts\") return \"ts\";\n\n  if (ext == \".scss\") return \"css\";\n\n  if (ext == \".png\" || ext == \".jpeg\" || ext == \".ttf\") return \"dataurl\";\n  if (ext == \".svg\" || ext == \".html\" || ext == \".txt\") return \"text\";\n  if (ext == \".wasm\") return \"file\";\n\n  return ext.length ? \"text\" : \"ts\";\n};","// Based on https://github.com/okikio/bundle/blob/main/src/ts/plugins/virtual-fs.ts\nimport type { BuildConfig, LocalState } from \"../build\";\nimport type { StateArray } from \"../configs/state\";\nimport type { EVENTS } from \"../configs/events\";\nimport type { ESBUILD } from \"../types\";\n\nimport { inferLoader } from \"../utils/loader\";\nexport const VIRTUAL_FILESYSTEM_NAMESPACE = \"virtual-filesystem\";\nexport const VIRTUAL_FS = (events: typeof EVENTS, state: StateArray<LocalState>, config: BuildConfig): ESBUILD.Plugin => {\n  const FileSystem = config.filesystem;\n\n  return {\n    name: VIRTUAL_FILESYSTEM_NAMESPACE,\n    setup(build) {\n      build.onResolve({ filter: /.*/ }, (args) => {\n        return {\n          path: args.path,\n          pluginData: args.pluginData ?? {},\n          namespace: VIRTUAL_FILESYSTEM_NAMESPACE\n        };\n      });\n\n      build.onLoad({ filter: /.*/, namespace: VIRTUAL_FILESYSTEM_NAMESPACE }, async (args) => {\n        const resolvedPath = await FileSystem.resolve(args.path, args?.pluginData?.importer);\n        const content = await FileSystem.get(args.path, \"buffer\", args?.pluginData?.importer);\n\n        return {\n          contents: content,\n          pluginData: {\n            importer: resolvedPath,\n          },\n          loader: inferLoader(resolvedPath)\n        };\n      });\n    },\n  };\n};","// export const { encode } = new TextEncoder();\n// export const { decode } = new TextDecoder();\n\nexport const encode = (str: string) => new TextEncoder().encode(str);\nexport const decode = (buf: BufferSource) => new TextDecoder().decode(buf);","/**\n * The default CDN host\n */\nexport const DEFAULT_CDN_HOST = \"https://unpkg.com\";\n\n/**\n * Returns the CDN style supported by certain CDN's\n * e.g. \n * - `npm` - unpkg, skypack, esm.sh, and jsdelivr all support `npm` style imports for example they support adding versions to their URLs like this `https://unpkg.com/@okikio/animate@beta`\n * - `github` - github, and jsdelivr.gh both support `github` style imports, as in they don't support adding versions to their URLs like this `https://cdn.jsdelivr.net/gh/jquery/jquery/dist/jquery.min.js`\n * - `deno` - deno supports `deno` style imports, as in they don't support adding versions to their URLs like this `https://deno.land/x/brotli/mod.ts`\n * - `other` - CDNs that haven't been added to the list\n */\nexport const getCDNStyle = (urlStr: string) => {\n  if (\n    /^(skypack|esm|esm\\.sh|unpkg|jsdelivr|esm\\.run)\\:?/.test(urlStr) ||\n    /^https?:\\/\\/(cdn\\.skypack\\.dev|cdn\\.esm\\.sh|cdn\\.jsdelivr\\.net\\/npm|unpkg\\.com)/.test(urlStr)\n  ) return \"npm\";\n\n  else if (\n    /^(jsdelivr\\.gh|github)\\:?/.test(urlStr) ||\n    /^https?:\\/\\/(cdn\\.jsdelivr\\.net\\/gh|raw\\.githubusercontent\\.com)/.test(urlStr)\n  ) return \"github\";\n\n  else if (\n    /^(deno)\\:?/.test(urlStr) ||\n    /^https?:\\/\\/(deno\\.land\\/x)/.test(urlStr)\n  ) return \"deno\";\n\n  return \"other\";\n};\n\n/**\n * Based on the URL scheme of the import, this method will return an actual CDN host origin to use,\n * e.g. \n * ```ts\n * getCDNHost(\"react\") //= https://unpkg.com\n * getCDNHost(\"react\", \"https://cdn.skypack.dev\") //= https://cdn.skypack.dev/\n * \n * // CDN URL Schemes take precedence above everything\n * getCDNHost(\"esm:react\", \"https://cdn.skypack.dev\") //= https://cdn.esm.sh/\n * ```\n * \n * > _**Note**: The returned CDN URL string will end with a '/' e.g. `https://cdn.esm.sh/`_\n * \n * @param importStr imports to find a CDN for\n * @param cdn The default CDN host to use. This can change based on the config of the user. This may be diregarded if the `importStr` has a CDN URL Scheme\n * @returns CDN URL host string\n */\nexport const getCDNOrigin = (importStr: string, cdn = DEFAULT_CDN_HOST) => {\n  // `skypack:` --> `https://cdn.skypack.dev`\n  if (/^skypack\\:/.test(importStr))\n    cdn = \"https://cdn.skypack.dev\";\n\n  // `esm.sh:` or `esm:` --> `https://cdn.esm.sh`\n  else if (/^(esm\\.sh|esm)\\:/.test(importStr))\n    cdn = \"https://cdn.esm.sh\";\n\n  // `unpkg:` --> `https://unpkg.com`\n  else if (/^unpkg\\:/.test(importStr))\n    cdn = \"https://unpkg.com\";\n\n  // (NPM) `jsdelivr:` or `esm.run:` --> `https://cdn.jsdelivr.net/npm`\n  else if (/^(jsdelivr|esm\\.run)\\:/.test(importStr))\n    cdn = \"https://cdn.jsdelivr.net/npm\";\n\n  // (GitHub) `jsdelivr.gh:` --> `https://cdn.jsdelivr.net/gh`\n  else if (/^(jsdelivr\\.gh)\\:/.test(importStr))\n    cdn = \"https://cdn.jsdelivr.net/gh\";\n\n  // `deno:` --> `https://deno.land/x`\n  else if (/^(deno)\\:/.test(importStr))\n    cdn = \"https://deno.land/x\";\n\n  // `github:` --> `https://raw.githubusercontent.com`\n  else if (/^(github)\\:/.test(importStr))\n    cdn = \"https://raw.githubusercontent.com\";\n\n  return /\\/$/.test(cdn) ? cdn : `${cdn}/`;\n};\n\n/**\n * Remove CDN URL Schemes like `deno:...`, `unpkg:...`, etc... and known CDN hosts, e.g. `https://raw.githubusercontent.com/...`, `https://cdn.skypack.dev/...`, etc...  Leaving only the import path\n */\nexport const getPureImportPath = (importStr: string) =>\n  importStr\n    .replace(/^(skypack|esm|esm\\.sh|unpkg|jsdelivr|jsdelivr\\.gh|esm\\.run|deno|github)\\:/, \"\")\n    .replace(/^https?:\\/\\/(cdn\\.skypack\\.dev|cdn\\.esm\\.sh|cdn\\.jsdelivr\\.net\\/npm|unpkg\\.com|cdn\\.jsdelivr\\.net\\/gh|raw\\.githubusercontent\\.com|deno\\.land\\/x)/, \"\")\n    .replace(/^\\//, \"\");\n\n/**\n * Generates a CDN URL for an import, taking advantage of CDN URL Schemes in imports and the default CDN hosts parameter to decide the CDN host\n * Read through {@link getCDNOrigin} and {@link getPureImportPath}\n */\nexport const getCDNUrl = (importStr: string, cdn = DEFAULT_CDN_HOST) => {\n  const origin = getCDNOrigin(importStr, cdn);\n  const path = getPureImportPath(importStr);\n  const url = new URL(path, origin);\n  return { import: importStr, path, origin, cdn, url };\n};\n\n","import type { BuildConfig, LocalState } from \"../build\";\nimport type { StateArray } from \"../configs/state\";\nimport type { EVENTS } from \"../configs/events\";\nimport type { ESBUILD } from \"../types\";\n\nimport { encode } from \"../utils/encode-decode\";\nimport { getCDNUrl } from \"../utils/util-cdn\";\n\n/** External Plugin Namespace */\nexport const EXTERNALS_NAMESPACE = \"external-globals\";\n\n/** An empty export as a Uint8Array */\nexport const EMPTY_EXPORT = encode(\"export default {}\");\n\n/** List of polyfillable native node modules, you should now use aliases to polyfill features */\nexport const PolyfillMap = {\n  \"console\": \"console-browserify\",\n  \"constants\": \"constants-browserify\",\n  \"crypto\": \"crypto-browserify\",\n  \"http\": \"http-browserify\",\n  \"buffer\": \"buffer\",\n  \"Dirent\": \"dirent\",\n  \"vm\": \"vm-browserify\",\n  \"zlib\": \"zlib-browserify\",\n  \"assert\": \"assert\",\n  \"child_process\": \"child_process\",\n  \"cluster\": \"child_process\",\n  \"dgram\": \"dgram\",\n  \"dns\": \"dns\",\n  \"domain\": \"domain-browser\",\n  \"events\": \"events\",\n  \"https\": \"https\",\n  \"module\": \"module\",\n  \"net\": \"net\",\n  \"path\": \"path-browserify\",\n  \"punycode\": \"punycode\",\n  \"querystring\": \"querystring\",\n  \"readline\": \"readline\",\n  \"repl\": \"repl\",\n  \"stream\": \"stream\",\n  \"string_decoder\": \"string_decoder\",\n  \"sys\": \"sys\",\n  \"timers\": \"timers\",\n  \"tls\": \"tls\",\n  \"tty\": \"tty-browserify\",\n  \"url\": \"url\",\n  \"util\": \"util\",\n  \"_shims\": \"_shims\",\n  \"_stream_duplex\": \"_stream_duplex\",\n  \"_stream_readable\": \"_stream_readable\",\n  \"_stream_writable\": \"_stream_writable\",\n  \"_stream_transform\": \"_stream_transform\",\n  \"_stream_passthrough\": \"_stream_passthrough\",\n  process: \"process/browser\",\n  fs: \"memfs\",\n  os: \"os-browserify/browser\",\n  \"v8\": \"v8\",\n  \"node-inspect\": \"node-inspect\",\n  \"_linklist\": \"_linklist\",\n  \"_stream_wrap\": \"_stream_wrap\"\n};\n\n/** Array of native node packages (that are polyfillable) */\nexport const PolyfillKeys = Object.keys(PolyfillMap);\n/** API's & Packages that were later removed from nodejs */\nexport const DeprecatedAPIs = [\"v8/tools/codemap\", \"v8/tools/consarray\", \"v8/tools/csvparser\", \"v8/tools/logreader\", \"v8/tools/profile_view\", \"v8/tools/profile\", \"v8/tools/SourceMap\", \"v8/tools/splaytree\", \"v8/tools/tickprocessor-driver\", \"v8/tools/tickprocessor\", \"node-inspect/lib/_inspect\", \"node-inspect/lib/internal/inspect_client \", \"node-inspect/lib/internal/inspect_repl\", \"_linklist\", \"_stream_wrap\"];\n/** Packages `bundle` should ignore, including deprecated apis, and polyfillable API's */\nexport const ExternalPackages = [\"chokidar\", \"yargs\", \"fsevents\", \"worker_threads\", \"async_hooks\", \"diagnostics_channel\", \"http2\", \"inspector\", \"perf_hooks\", \"trace_events\", \"wasi\", ...DeprecatedAPIs, ...PolyfillKeys];\n\n/** Based on https://github.com/egoist/play-esbuild/blob/7e34470f9e6ddcd9376704cd8b988577ddcd46c9/src/lib/esbuild.ts#L51 */\nexport const isExternal = (id: string, external: string[] = []) => {\n  return [...ExternalPackages, ...external].find((it: string): boolean => {\n    if (it === id) return true; // import 'foo' & external: ['foo']\n    if (id.startsWith(`${it}/`)) return true; // import 'foo/bar.js' & external: ['foo']\n    return false;\n  });\n};\n\n/**\n * Esbuild EXTERNAL plugin \n * \n * @param external List of packages to marks as external\n */\nexport function EXTERNAL (events: typeof EVENTS, state: StateArray<LocalState>, config: BuildConfig): ESBUILD.Plugin {\n  const { external = [] } = config?.esbuild ?? {}; \n  return {\n    name: EXTERNALS_NAMESPACE,\n    setup(build) {\n      // Intercept import paths starting with \"http:\" and \"https:\" so\n      // esbuild doesn't attempt to map them to a file system location.\n      // Tag them with the \"http-url\" namespace to associate them with\n      // this plugin.\n      build.onResolve({ filter: /.*/ }, (args) => {\n        const path = args.path.replace(/^node\\:/, \"\");\n        const { path: argPath } = getCDNUrl(path);\n\n        if (isExternal(argPath, external)) {\n          return {\n            path: argPath,\n            namespace: EXTERNALS_NAMESPACE,\n            external: true\n          };\n        }\n      });\n\n      // When a URL is loaded, we want to actually download the content\n      // from the internet. This has just enough logic to be able to\n      // handle the example import from https://cdn.esm.sh/ but in reality this\n      // would probably need to be more complex.\n      // \n      // We also want to intercept all import paths inside downloaded\n      // files and resolve them against the original URL. All of these\n      // files will be in the \"http-url\" namespace. Make sure to keep\n      // the newly resolved URL in the \"http-url\" namespace so imports\n      // inside it will also be resolved as URLs recursively.\n      build.onLoad({ filter: /.*/, namespace: EXTERNALS_NAMESPACE }, (args) => {\n        return {\n          pluginName: EXTERNALS_NAMESPACE,\n          contents: EMPTY_EXPORT,\n          warnings: [{\n            text: `${args.path} is marked as an external module and will be ignored.`,\n            details: `\"${args.path}\" is a built-in node module thus can't be bundled by https://bundlejs.com, sorry about that.`\n          }]\n        };\n      });\n    },\n  };\n}","/** \n * Based on `resolve.exports` (https://npmjs.com/resolve.exports) by @lukeed (https://github.com/lukeed)\n */\n\n/**\n * @param {object} exports\n * @param {Set<string>} keys\n */\nexport function loop(exports: Record<any, any>, keys: Set<string>) {\n  if (typeof exports === \"string\") {\n    return exports;\n  }\n\n  if (exports) {\n    let idx, tmp;\n    if (Array.isArray(exports)) {\n      for (idx = 0; idx < exports.length; idx++) {\n        if (tmp = loop(exports[idx], keys)) return tmp;\n      }\n    } else {\n      for (idx in exports) {\n        if (keys.has(idx)) {\n          return loop(exports[idx], keys);\n        }\n      }\n    }\n  }\n}\n\n/**\n * @param {string} name The package name\n * @param {string} entry The target entry, eg \".\"\n * @param {number} [condition] Unmatched condition?\n */\nexport function bail(name: string, entry: string, condition?: number) {\n  throw new Error(\n    condition\n      ? `No known conditions for \"${entry}\" entry in \"${name}\" package`\n      : `Missing \"${entry}\" export in \"${name}\" package`\n  );\n}\n\n/**\n * @param {string} name the package name\n * @param {string} entry the target path/import\n */\nexport function toName(name: string, entry: string) {\n  return entry === name ? \".\"\n    : entry[0] === \".\" ? entry\n      : entry.replace(new RegExp(\"^\" + name + \"\\/\"), \"./\");\n}\n\n\nexport type Options = {\n\tbrowser?: boolean;\n\tconditions?: readonly string[];\n\trequire?: boolean;\n\tunsafe?: false;\n} | {\n\tconditions?: readonly string[];\n\tunsafe?: true;\n}\n\n/**\n * @param {object} pkg package.json contents\n * @param {string} [entry] entry name or import path\n * @param {object} [options]\n * @param {boolean} [options.browser]\n * @param {boolean} [options.require]\n * @param {string[]} [options.conditions]\n * @param {boolean} [options.unsafe]\n */\nexport function resolveExports<T = Record<any, any>>(pkg: T, entry = \".\", options: Options = {}): string | void {\n  const { name, exports } = pkg as unknown as Record<any, any>;\n\n  if (exports) {\n    // @ts-ignore\n    const { browser, require, unsafe, conditions = [] } = options;\n\n    let target = toName(name, entry);\n    if (target[0] !== \".\") target = \"./\" + target;\n\n    if (typeof exports === \"string\") {\n      return target === \".\" ? exports : bail(name, target);\n    }\n\n    const allows = new Set([\"default\", ...conditions]);\n    unsafe || allows.add(require ? \"require\" : \"import\");\n    unsafe || allows.add(browser ? \"browser\" : \"node\");\n\n    let key, tmp, isSingle = false;\n\n    for (key in exports) {\n      isSingle = key[0] !== \".\";\n      break;\n    }\n\n    if (isSingle) {\n      return target === \".\"\n        ? loop(exports, allows) || bail(name, target, 1)\n        : bail(name, target);\n    }\n\n    if (tmp = exports[target]) {\n      return loop(tmp, allows) || bail(name, target, 1);\n    }\n\n    for (key in exports) {\n      tmp = key[key.length - 1];\n      if (tmp === \"/\" && target.startsWith(key)) {\n        return (tmp = loop(exports[key], allows))\n          ? (tmp + target.substring(key.length))\n          : bail(name, target, 1);\n      }\n      if (tmp === \"*\" && target.startsWith(key.slice(0, -1))) {\n        // do not trigger if no *content* to inject\n        if (target.substring(key.length - 1).length > 0) {\n          return (tmp = loop(exports[key], allows))\n            ? tmp.replace(\"*\", target.substring(key.length - 1))\n            : bail(name, target, 1);\n        }\n      }\n    }\n\n    return bail(name, target);\n  }\n}\n\nexport type BrowserFiles = Record<string, string | false>;\n\n/**\n * @param {object} pkg\n * @param {object} [options]\n * @param {string|boolean} [options.browser]\n * @param {string[]} [options.fields]\n */\nexport function legacy<T = Record<any, any>>(pkg: T, options?: { browser: true, fields?: string[] }): BrowserFiles | string | void;\nexport function legacy<T = Record<any, any>>(pkg: T, options?: { browser: string, fields?: string[] }): string | false | void;\nexport function legacy<T = Record<any, any>>(pkg: T, options?: { browser: false, fields?: string[] }): string | void;\nexport function legacy<T = Record<any, any>>(pkg: T, options: {\n\tbrowser?: boolean | string;\n\tfields?: string[];\n} = {}): BrowserFiles | string | false | void {\n  let i = 0, value,\n    browser = options.browser,\n    fields = options.fields || [\"module\", \"main\"];\n\n  if (browser && !fields.includes(\"browser\")) {\n    fields.unshift(\"browser\");\n  }\n\n  for (; i < fields.length; i++) {\n    if (value = pkg[fields[i]]) {\n      if (typeof value == \"string\") {\n        //\n      } else if (typeof value == \"object\" && fields[i] == \"browser\") {\n        if (typeof browser == \"string\") {\n          value = value[browser = toName((pkg as unknown as { name: string }).name, browser)];\n          if (value == null) return browser;\n        }\n      } else {\n        continue;\n      }\n\n      return typeof value == \"string\"\n        ? (\"./\" + value.replace(/^\\.?\\//, \"\"))\n        : value;\n    }\n  }\n}","/** \n * Based on `parse-package-name` (https://npmjs.com/parse-package-name) by @egoist (https://github.com/egoist) \n */\n\n/** Parsed a scoped package name into name, version, and path. */\nexport const RE_SCOPED = /^(@[^\\/]+\\/[^@\\/]+)(?:@([^\\/]+))?(\\/.*)?$/;\n\n/** Parsed a non-scoped package name into name, version, path */\nexport const RE_NON_SCOPED = /^([^@\\/]+)(?:@([^\\/]+))?(\\/.*)?$/;\n\nexport function parsePackageName(input: string) {\n  const m = RE_SCOPED.exec(input) || RE_NON_SCOPED.exec(input);\n\n  if (!m) {\n    throw new Error(`[parse-package-name] invalid package name: ${input}`);\n  }\n\n  return {\n    name: m[1] || \"\",\n    version: m[2] || \"latest\",\n    path: m[3] || \"\",\n  };\n}\n\nexport default parsePackageName;","export const CACHE = new Map();\nexport const CACHE_NAME = \"EXTERNAL_FETCHES\";\nexport const newRequest = async (cache: Cache, request: RequestInfo, fetchOpts?: RequestInit) => {\n  const networkResponse: Response = await fetch(request, fetchOpts);\n\n  const clonedResponse = networkResponse.clone();\n  if (\"caches\" in globalThis)\n    cache.put(request, clonedResponse);\n  else\n    CACHE.set(request, clonedResponse);\n\n  return networkResponse;\n};\n\nexport let OPEN_CACHE: Cache;\nexport const openCache = async () => {\n  if (OPEN_CACHE) return OPEN_CACHE;\n  return (OPEN_CACHE = await caches.open(CACHE_NAME));\n};\n\nexport const getRequest = async (url: RequestInfo | URL, permanent = false, fetchOpts?: RequestInit) => {\n  const request = \"Request\" in globalThis ? new Request(url.toString()) : url.toString();\n  let response: Response;\n\n  let cache: Cache;\n  let cacheResponse: Response;\n\n  // In specific situations the browser will sometimes disable access to cache storage, \n  // so, I create my own in memory cache\n  if (\"caches\" in globalThis) {\n    cache = await openCache();\n    cacheResponse = await cache.match(request);\n  } else {\n    cacheResponse = CACHE.get(request);\n  }\n\n  response = cacheResponse;\n\n  // If permanent is true, use the cache first and only go to the network if there is nothing in the cache, \n  // otherwise, still use cache first, but in the background queue up a network request\n  if (!cacheResponse)\n    response = await newRequest(cache, request, fetchOpts);\n  else if (!permanent)\n    newRequest(cache, request, fetchOpts);\n\n  return response.clone();\n};\n","/** \n * Based on `resolve.exports` (https://npmjs.com/resolve.exports) by @lukeed (https://github.com/lukeed), but tweaked to work for imports\n */\nimport { toName, bail, loop } from \"./resolve-exports\";\n\nexport interface ResolveImportOptions { \n\tbrowser?: boolean;\n\trequire?: boolean;\n\tconditions?: string[];\n\tunsafe?: boolean;\n}\n\n/**\n * @param {object} pkg package.json contents\n * @param {string} [entry] entry name or import path\n * @param {object} [options]\n * @param {boolean} [options.browser]\n * @param {boolean} [options.require]\n * @param {string[]} [options.conditions]\n * @param {boolean} [options.unsafe]\n */\nexport function resolveImports(pkg: Record<any, any>, entry = \".\", options: ResolveImportOptions = {}) {\n  const { name, imports } = pkg;\n\n  if (imports) {\n    const { browser, require, unsafe, conditions = [] } = options;\n\n    const target = toName(name, entry);\n    // if (target[0] !== '.') target = './' + target;\n\n    if (typeof imports === \"string\") {\n      return target === \"#\" ? imports : bail(name, target);\n    }\n\n    const allows = new Set([\"default\", ...conditions]);\n    unsafe || allows.add(require ? \"require\" : \"import\");\n    unsafe || allows.add(browser ? \"browser\" : \"node\");\n\n    let key, tmp, isSingle = false;\n\n    for (key in imports) {\n      isSingle = key[0] !== \"#\";\n      break;\n    }\n\n    if (isSingle) {\n      return target === \"#\"\n        ? loop(imports, allows) || bail(name, target, 1)\n        : bail(name, target);\n    }\n\n    if (tmp = imports[target]) {\n      return loop(tmp, allows) || bail(name, target, 1);\n    }\n\n    for (key in imports) {\n      tmp = key[key.length - 1];\n      if (tmp === \"/\" && target.startsWith(key)) {\n        return (tmp = loop(imports[key], allows))\n          ? (tmp + target.substring(key.length))\n          : bail(name, target, 1);\n      }\n      if (tmp === \"*\" && target.startsWith(key.slice(0, -1))) {\n        // do not trigger if no *content* to inject\n        if (target.substring(key.length - 1).length > 0) {\n          return (tmp = loop(imports[key], allows))\n            ? tmp.replace(\"*\", target.substring(key.length - 1))\n            : bail(name, target, 1);\n        }\n      }\n    }\n\n    return bail(name, target);\n  }\n}","import type { BuildConfig, LocalState } from \"../build\";\nimport type { StateArray } from \"../configs/state\";\nimport type { EVENTS } from \"../configs/events\";\nimport type { ESBUILD } from \"../types\";\n\nimport { HTTP_NAMESPACE } from \"./http\";\nimport { resolveExports, legacy } from \"../utils/resolve-exports\";\nimport { parsePackageName as parsePackageName } from \"../utils/parse-package-name\";\n\n\nimport { isBareImport } from \"../utils/path\";\nimport { getRequest } from \"../utils/fetch-and-cache\";\n\nimport { getCDNUrl, getCDNStyle , DEFAULT_CDN_HOST } from \"../utils/util-cdn\";\nimport { resolveImports } from \"../utils/resolve-imports\";\n\n/** CDN Plugin Namespace */\nexport const CDN_NAMESPACE = \"cdn-url\";\n\n/**\n * Resolution algorithm for the esbuild CDN plugin \n * \n * @param cdn The default CDN to use\n * @param logger Console log\n */\nexport const CDN_RESOLVE = (cdn = DEFAULT_CDN_HOST, events: typeof EVENTS) => {\n  return async (args: ESBUILD.OnResolveArgs): Promise<ESBUILD.OnResolveResult> => {\n    if (isBareImport(args.path)) {\n      // Support a different default CDN + allow for custom CDN url schemes\n      const { path: argPath, origin } = getCDNUrl(args.path, cdn);\n\n      // npm standard CDNs, e.g. unpkg, skypack, esm.sh, etc...\n      const NPM_CDN = getCDNStyle(origin) == \"npm\";\n\n      // Heavily based off of https://github.com/egoist/play-esbuild/blob/main/src/lib/esbuild.ts\n      const parsed = parsePackageName(argPath);\n      let subpath = parsed.path;\n      let pkg = args.pluginData?.pkg ?? {};\n\n      // Resolving imports from the package.json, if said import starts with \"#\" \n      // If an import starts with \"#\" then it's a subpath-import\n      // https://nodejs.org/api/packages.html#subpath-imports\n      if (argPath[0] == \"#\") {\n        const path = resolveImports({ ...pkg, exports: pkg.imports }, argPath, {\n          require: args.kind === \"require-call\" || args.kind === \"require-resolve\"\n        });\n\n        if (typeof path === \"string\") {\n          subpath = path.replace(/^\\.?\\/?/, \"/\");\n\n          if (subpath && subpath[0] !== \"/\")\n            subpath = `/${subpath}`;\n\n          const version = NPM_CDN ? \"@\" + pkg.version : \"\";\n          const { url: { href } } = getCDNUrl(`${pkg.name}${version}${subpath}`);\n          return {\n            namespace: HTTP_NAMESPACE,\n            path: href,\n            pluginData: { pkg }\n          };\n        }\n      }\n\n      // Are there an dependecies???? Well Goood.\n      const depsExists = \"dependencies\" in pkg || \"devDependencies\" in pkg || \"peerDependencies\" in pkg;\n      if (depsExists && !/\\S+@\\S+/.test(argPath)) {\n        const {\n          devDependencies = {},\n          dependencies = {},\n          peerDependencies = {}\n        } = pkg;\n\n        const deps = Object.assign({}, devDependencies, peerDependencies, dependencies);\n        const keys = Object.keys(deps);\n\n        if (keys.includes(argPath))\n          parsed.version = deps[argPath];\n      }\n\n      // If the CDN supports package.json and some other npm stuff, it counts as an npm CDN\n      if (NPM_CDN) {\n        try {\n          const { url: PACKAGE_JSON_URL } = getCDNUrl(`${parsed.name}@${parsed.version}/package.json`, origin);\n\n          // Strongly cache package.json files\n          pkg = await getRequest(PACKAGE_JSON_URL, true).then((res) => res.json());\n          const path = resolveExports(pkg, subpath ? \".\" + subpath.replace(/^\\.?\\/?/, \"/\") : \".\", {\n            require: args.kind === \"require-call\" || args.kind === \"require-resolve\",\n          }) || legacy(pkg);\n\n          if (typeof path === \"string\")\n            subpath = path.replace(/^\\.?\\/?/, \"/\").replace(/\\.js\\.js$/, \".js\");\n\n          if (subpath && subpath[0] !== \"/\")\n            subpath = `/${subpath}`;\n        } catch (e) {\n          events\n            .emit(\n              \"logger.warn\",\n              `You may want to change CDNs. The current CDN ${!/unpkg\\.com/.test(origin) ? `\"${origin}\" doesn't` : `path \"${origin}${argPath}\" may not`} support package.json files.\\nThere is a chance the CDN you're using doesn't support looking through the package.json of packages. bundlejs will switch to inaccurate guesses for package versions. For package.json support you may wish to use https://unpkg.com or other CDN's that support package.json.`\n            )\n            .emit(\"logger.warn\", e);\n        }\n      }\n\n      // If the CDN is npm based then it should add the parsed version to the URL\n      // e.g. https://unpkg.com/spring-easing@v1.0.0/\n      const version = NPM_CDN ? \"@\" + parsed.version : \"\";\n      const { url } = getCDNUrl(`${parsed.name}${version}${subpath}`, origin);\n      return {\n        namespace: HTTP_NAMESPACE,\n        path: url.toString(),\n        pluginData: { pkg }\n      };\n    }\n  };\n};\n\n/**\n * Esbuild CDN plugin \n * \n * @param cdn The default CDN to use\n * @param logger Console log\n */\nexport function CDN (events: typeof EVENTS, state: StateArray<LocalState>, config: BuildConfig): ESBUILD.Plugin {\n  // Convert CDN values to URL origins\n  const { origin: cdn } = !/:/.test(config?.cdn) ? getCDNUrl(config?.cdn + \":\") : getCDNUrl(config?.cdn);\n  const FileSystem = config.filesystem; \n  return {\n    name: CDN_NAMESPACE,\n    setup(build) {\n      // Resolve bare imports to the CDN required using different URL schemes\n      build.onResolve({ filter: /.*/ }, CDN_RESOLVE(cdn, events));\n      build.onResolve({ filter: /.*/, namespace: CDN_NAMESPACE }, CDN_RESOLVE(cdn, events));\n    },\n  };\n}\n","/** Based on https://github.com/hardfist/neo-tools/blob/main/packages/bundler/src/plugins/http.ts */\nimport type { BuildConfig, LocalState } from \"../build\";\nimport type { StateArray } from \"../configs/state\";\nimport type { EVENTS } from \"../configs/events\";\nimport type { ESBUILD } from \"../types\";\n\nimport { CDN_RESOLVE } from \"./cdn\";\nimport { getRequest } from \"../utils/fetch-and-cache\";\nimport { decode } from \"../utils/encode-decode\";\n\nimport { getCDNUrl, DEFAULT_CDN_HOST, getCDNStyle } from \"../utils/util-cdn\";\nimport { inferLoader } from \"../utils/loader\";\n\nimport { urlJoin, extname, isBareImport } from \"../utils/path\";\n\n/** HTTP Plugin Namespace */\nexport const HTTP_NAMESPACE = \"http-url\";\n\n/**\n * Fetches packages\n * \n * @param url package url to fetch\n * @param logger Console log\n */\nexport const fetchPkg = async (url: string, events: typeof EVENTS) => {\n  try {\n    const response = await getRequest(url);\n    if (!response.ok)\n      throw new Error(`Couldn't load ${response.url} (${response.status} code)`);\n\n    events.emit(\"logger.info\", `Fetch ${url}`);\n\n    return {\n      url: response.url,\n      content: new Uint8Array(await response.arrayBuffer()),\n    };\n  } catch (err) {\n    throw new Error(`[getRequest] Failed at request (${url})\\n${err.toString()}`);\n  }\n};\n\n/**\n * Fetches assets from a js file, e.g. assets like WASM, Workers, etc... \n * External assets are referenced using this syntax, e.g. new URL(\"...\", import.meta.url)\n * Any external assets found inside said original js file, are fetched and stored\n * \n * @param path Path for original js files \n * @param content Content of original js files\n * @param namespace esbuild plugin namespace\n * @param logger Console log\n */\nexport const fetchAssets = async (path: string, content: Uint8Array, namespace: string, events: typeof EVENTS, config: BuildConfig) => {\n  const rgx = /new URL\\(['\"`](.*)['\"`],(?:\\s+)?import\\.meta\\.url(?:\\s+)?\\)/g;\n  const parentURL = new URL(\"./\", path).toString();\n  const FileSystem = config.filesystem;\n\n  const code = decode(content);\n  const matches = Array.from(code.matchAll(rgx)) as RegExpMatchArray[];\n\n  const promises = matches.map(async ([, assetURL]) => {\n    const { content: asset, url } = await fetchPkg(urlJoin(parentURL, assetURL), events);\n\n    // Create a virtual file system for storing assets\n    // This is for building a package bundle analyzer \n    FileSystem.set(namespace + \":\" + url, content);\n\n    return {\n      path: assetURL, contents: asset,\n      get text() { return decode(asset); }\n    };\n  });\n\n  return await Promise.allSettled(promises);\n};\n\n/**\n * Resolution algorithm for the esbuild HTTP plugin\n * \n * @param host The default host origin to use if an import doesn't already have one\n * @param logger Console log\n */\nexport const HTTP_RESOLVE = (host = DEFAULT_CDN_HOST, events: typeof EVENTS) => {\n  return async (args: ESBUILD.OnResolveArgs): Promise<ESBUILD.OnResolveResult> => {\n    // Some packages use \"../../\" with the assumption that \"/\" is equal to \"/index.js\", this is supposed to fix that bug\n    const argPath = args.path.replace(/\\/$/, \"/index\");\n\n    // If the import path isn't relative do this...\n    if (!argPath.startsWith(\".\")) {\n      // If the import is an http import load the content via the http plugins loader\n      if (/^https?:\\/\\//.test(argPath)) {\n        return {\n          path: argPath,\n          namespace: HTTP_NAMESPACE,\n          pluginData: { pkg: args.pluginData?.pkg },\n        };\n      }\n\n      const pathOrigin = new URL(\n        // Use the parent files URL as a host\n        urlJoin(args.pluginData?.url ? args.pluginData?.url : host, \"../\", argPath)\n      ).origin;\n\n      // npm standard CDNs, e.g. unpkg, skypack, esm.sh, etc...\n      const NPM_CDN = getCDNStyle(pathOrigin) == \"npm\";\n      const origin = NPM_CDN ? pathOrigin : host;\n\n      // If the import is a bare import, use the CDN plugins resolution algorithm\n      if (isBareImport(argPath)) {\n        return CDN_RESOLVE(origin, events)(args);\n      } else {\n        /** \n         * If the import is neither an http import or a bare import (module import), then it is an absolute import.\n         * Therefore, load the content via the http plugins loader, but make sure that the absolute URL doesn't go past the root URL\n         * \n         * e.g. \n         * To load `jquery` from jsdelivr, the CDN root needs to `https://cdn.jsdelivr.net/npm`, \n         * thus the final URL is https://cdn.jsdelivr.net/npm/jquery\n         * \n         * The problem is that if a user using absolute URL's aims for the root domain, \n         * the result should be `https://cdn.jsdelivr.net`, but what we really want is for our use case is\n         * a root of `https://cdn.jsdelivr.net/npm`\n         * \n         * So, we treat the path as a CDN and force all URLs to use CDN origins as the root domain\n        */\n        return {\n          path: getCDNUrl(argPath, origin).url.toString(),\n          namespace: HTTP_NAMESPACE,\n          pluginData: { pkg: args.pluginData?.pkg },\n        };\n      }\n    }\n\n    // For relative imports\n    const path = urlJoin(args.pluginData?.url, \"../\", argPath);\n    return {\n      path,\n      namespace: HTTP_NAMESPACE,\n      pluginData: { pkg: args.pluginData?.pkg },\n    };\n  };\n};\n\n/**\n * Esbuild HTTP plugin \n * \n * @param assets Array to store fetched assets\n * @param host The default host origin to use if an import doesn't already have one\n * @param logger Console log\n */\nexport function HTTP (events: typeof EVENTS, state: StateArray<LocalState>, config: BuildConfig): ESBUILD.Plugin {\n  // Convert CDN values to URL origins\n  const { origin: host } = !/:/.test(config?.cdn) ? getCDNUrl(config?.cdn + \":\") : getCDNUrl(config?.cdn);\n  const FileSystem = config.filesystem;\n\n  const [get, set] = state;\n  const assets = get()[\"assets\"] ?? [];\n  return {\n    name: HTTP_NAMESPACE,\n    setup(build) {\n      // Intercept import paths starting with \"http:\" and \"https:\" so\n      // esbuild doesn't attempt to map them to a file system location.\n      // Tag them with the \"http-url\" namespace to associate them with\n      // this plugin.\n      build.onResolve({ filter: /^https?:\\/\\// }, args => {\n        return {\n          path: args.path,\n          namespace: HTTP_NAMESPACE,\n        };\n      });\n\n      // We also want to intercept all import paths inside downloaded\n      // files and resolve them against the original URL. All of these\n      // files will be in the \"http-url\" namespace. Make sure to keep\n      // the newly resolved URL in the \"http-url\" namespace so imports\n      // inside it will also be resolved as URLs recursively.\n      build.onResolve({ filter: /.*/, namespace: HTTP_NAMESPACE }, HTTP_RESOLVE(host, events));\n\n      // When a URL is loaded, we want to actually download the content\n      // from the internet. This has just enough logic to be able to\n      // handle the example import from https://cdn.esm.sh/ but in reality this\n      // would probably need to be more complex.\n      build.onLoad({ filter: /.*/, namespace: HTTP_NAMESPACE }, async (args) => {\n        // Some typescript files don't have file extensions but you can't fetch a file without their file extension\n        // so bundle tries to solve for that\n        const ext = extname(args.path);\n        const argPath = (suffix = \"\") => ext.length > 0 ? args.path : args.path + suffix;\n        let content: Uint8Array, url: string;\n\n        // Imports have various extentions, fetch each extention to confirm what the user meant\n        const exts = ext.length > 0 ? [\"\"] : [\"\", \".ts\", \".tsx\", \".js\", \".mjs\", \".cjs\"];\n        const extLength = exts.length;\n        let err: Error;\n\n        for (let i = 0; i < extLength; i++) {\n          const extPath = exts[i];\n          try {\n            ({ content, url } = await fetchPkg(argPath(extPath), events));\n            break;\n          } catch (e) {\n            if (i == 0)\n              err = e as Error;\n\n            // If after checking all the different file extensions none of them are valid\n            // Throw the first fetch error encountered, as that is generally the most accurate error\n            if (i >= extLength - 1) {\n              events.emit(\"logger.error\", e.toString());\n              throw err;\n            }\n          }\n        }\n\n        // Create a virtual file system for storing node modules\n        // This is for building a package bundle analyzer \n        await FileSystem.set(args.namespace + \":\" + args.path, content);\n\n        const _assetResults =\n          (await fetchAssets(url, content, args.namespace, events, config))\n            .filter((result) => {\n              if (result.status == \"rejected\") {\n                events.emit(\"logger:warn\", \"Asset fetch failed.\\n\" + result?.reason?.toString());\n                return false;\n              } else return true;\n            })\n            .map((result) => {\n              if (result.status == \"fulfilled\")\n                return result.value;\n            });\n\n        set({ assets: assets.concat(_assetResults) });\n        return {\n          contents: content,\n          loader: inferLoader(url),\n          pluginData: { url, pkg: args.pluginData?.pkg },\n        };\n      });\n    },\n  };\n}","import type { BuildConfig, LocalState } from \"../build\";\nimport type { StateArray } from \"../configs/state\";\nimport type { EVENTS } from \"../configs/events\";\nimport type { ESBUILD } from \"../types\";\n\nimport { EXTERNALS_NAMESPACE } from \"./external\";\nimport { HTTP_RESOLVE } from \"./http\";\nimport { parsePackageName } from \"../utils/parse-package-name\";\n\nimport { getCDNUrl, DEFAULT_CDN_HOST } from \"../utils/util-cdn\";\nimport { isBareImport } from \"../utils/path\";\n\n/** Alias Plugin Namespace */\nexport const ALIAS_NAMESPACE = \"alias-globals\";\n\n/**\n * Checks if a package has an alias\n * \n * @param id The package to find an alias for \n * @param aliases An object with package as the key and the package alias as the value, e.g. { \"fs\": \"memfs\" }\n */\nexport const isAlias = (id: string, aliases = {}) => {\n  if (!isBareImport(id)) return false;\n\n  const aliasKeys = Object.keys(aliases);\n  const path = id.replace(/^node\\:/, \"\");\n  const pkgDetails = parsePackageName(path);\n\n  return aliasKeys.find((it: string): boolean => {\n    return pkgDetails.name === it; // import 'foo' & alias: { 'foo': 'bar@5.0' }\n  });\n};\n\n/**\n * Resolution algorithm for the esbuild ALIAS plugin \n * \n * @param aliases An object with package as the key and the package alias as the value, e.g. { \"fs\": \"memfs\" }\n * @param host The default host origin to use if an import doesn't already have one\n * @param logger Console log\n */\nexport const ALIAS_RESOLVE = (aliases = {}, host = DEFAULT_CDN_HOST, events: typeof EVENTS) => {\n  return async (args: ESBUILD.OnResolveArgs): Promise<ESBUILD.OnResolveResult> => {\n    const path = args.path.replace(/^node\\:/, \"\");\n    const { path: argPath } = getCDNUrl(path);\n\n    if (isAlias(argPath, aliases)) {\n      const pkgDetails = parsePackageName(argPath);\n      const aliasPath = aliases[pkgDetails.name];\n      return HTTP_RESOLVE(host, events)({\n        ...args,\n        path: aliasPath\n      });\n    }\n  };\n};\n\n/**\n * Esbuild ALIAS plugin \n * \n * @param aliases An object with package as the key and the package alias as the value, e.g. { \"fs\": \"memfs\" }\n * @param host The default host origin to use if an import doesn't already have one\n * @param logger Console log\n */\nexport const ALIAS = (events: typeof EVENTS, state: StateArray<LocalState>, config: BuildConfig): ESBUILD.Plugin => {\n  // Convert CDN values to URL origins\n  const { origin: host } = !/:/.test(config?.cdn) ? getCDNUrl(config?.cdn + \":\") : getCDNUrl(config?.cdn);\n  const aliases = config.alias ?? {};\n  return {\n    name: ALIAS_NAMESPACE,\n    setup(build) {\n      // Intercept import paths starting with \"http:\" and \"https:\" so\n      // esbuild doesn't attempt to map them to a file system location.\n      // Tag them with the \"http-url\" namespace to associate them with\n      // this plugin.\n      build.onResolve({ filter: /^node\\:.*/ }, (args) => {\n        if (isAlias(args.path, aliases))\n          return ALIAS_RESOLVE(aliases, host, events)(args);\n\n        return {\n          path: args.path,\n          namespace: EXTERNALS_NAMESPACE,\n          external: true\n        };\n      });\n\n      // We also want to intercept all import paths inside downloaded\n      // files and resolve them against the original URL. All of these\n      // files will be in the \"http-url\" namespace. Make sure to keep\n      // the newly resolved URL in the \"http-url\" namespace so imports\n      // inside it will also be resolved as URLs recursively.\n      build.onResolve({ filter: /.*/ }, ALIAS_RESOLVE(aliases, host, events));\n      build.onResolve({ filter: /.*/, namespace: ALIAS_NAMESPACE }, ALIAS_RESOLVE(aliases, host, events));\n    },\n  };\n};","import { decode, encode } from \"./encode-decode\";\nimport { dirname, resolve } from \"../deno/path/mod\";\n\n/** Virtual Filesystem Storage */\nexport const FileSystem = new Map<string, Uint8Array>();\n\n/**\n * Resolves path to a file in the virtual file system storage \n * \n * @param path the relative or absolute path to resolve to\n * @param importer an absolute path to use to determine relative file paths\n * @returns resolved final path\n */\nexport const getResolvedPath = async (path: string, importer?: string) => {\n  let resolvedPath = path;\n  if (importer && path.startsWith(\".\"))\n    resolvedPath = resolve(dirname(importer), path);\n\n  if (FileSystem.has(resolvedPath)) return resolvedPath;\n  throw `File \"${resolvedPath}\" does not exist`;\n};\n\n/**\n * Retrevies file from virtual file system storage in either string or uint8array buffer format\n * \n * @param path path of file in virtual file system storage\n * @param type format to retrieve file in, buffer and string are the 2 option available\n * @param importer an absolute path to use to determine a relative file path\n * @returns file from file system storage in either string format or as a Uint8Array buffer\n */\nexport const getFile = async (path: string, type: \"string\" | \"buffer\" = \"buffer\", importer?: string) => {\n  const resolvedPath = await getResolvedPath(path, importer);\n\n  if (FileSystem.has(resolvedPath)) {\n    const file = FileSystem.get(resolvedPath);\n    return type == \"string\" ? decode(file) : file;\n  }\n};\n\n/**\n * Writes file to filesystem in either string or uint8array buffer format\n * \n * @param path path of file in virtual file system storage\n * @param content contents of file to store, you can store buffers and/or strings\n * @param importer an absolute path to use to determine a relative file path\n */\nexport const setFile = async (path: string, content: Uint8Array | string, importer?: string) => {\n  let resolvedPath = path;\n  if (importer && path.startsWith(\".\"))\n    resolvedPath = resolve(dirname(importer), path);\n\n  try {\n    FileSystem.set(resolvedPath, content instanceof Uint8Array ? content : encode(content));\n  } catch (e) {\n    throw `Error occurred while writing to \"${resolvedPath}\"`;\n  }\n};","// Based off of @hyrious esbuild-repl https://github.com/hyrious/esbuild-repl/blob/main/src/helpers/ansi.ts\n// https://github.com/evanw/esbuild/blob/master/internal/logger/logger.go\nexport const ESCAPE_TO_COLOR = {\n  \"37\": \"dim\",\n  \"31\": \"red\",\n  \"32\": \"green\",\n  \"34\": \"blue\",\n  \"36\": \"cyan\",\n  \"35\": \"magenta\",\n  \"33\": \"yellow\",\n  \"41;31\": \"red-bg-red\",\n  \"41;97\": \"red-bg-white\",\n  \"42;32\": \"green-bg-green\",\n  \"42;97\": \"green-bg-white\",\n  \"44;34\": \"blue-bg-blue\",\n  \"44;97\": \"blue-bg-white\",\n  \"46;36\": \"cyan-bg-cyan\",\n  \"46;30\": \"cyan-bg-black\",\n  \"45;35\": \"magenta-bg-magenta\",\n  \"45;30\": \"magenta-bg-black\",\n  \"43;33\": \"yellow-bg-yellow\",\n  \"43;30\": \"yellow-bg-black\",\n} as const;\n\nexport type Escape = \"0\" | \"1\" | \"4\" | keyof typeof ESCAPE_TO_COLOR;\nexport type Color = typeof ESCAPE_TO_COLOR[keyof typeof ESCAPE_TO_COLOR];\n\n// https://github.com/sindresorhus/escape-goat\nexport function htmlEscape(string: string) {\n  return string\n    .replace(/\\<br\\>/g, \"\\n\")\n    .replace(/\\&/g, \"&amp;\")\n    .replace(/\\\"/g, \"&quot;\")\n    .replace(/\\'/g, \"&#39;\")\n    .replace(/\\</g, \"&lt;\")\n    .replace(/\\>/g, \"&gt;\");\n}\n\nexport class AnsiBuffer {\n  result = \"\";\n  _stack: string[] = [];\n  _bold = false;\n  _underline = false;\n  _link = false;\n  text(text: string) {\n    this.result += htmlEscape(text);\n  }\n  reset() {\n    let close: string | undefined;\n    while ((close = this._stack.pop())) {\n      this.result += close;\n    }\n  }\n  bold() {\n    if (!this._bold) {\n      this._bold = true;\n      this.result += \"<strong>\";\n      this._stack.push(\"</strong>\");\n    }\n  }\n  underline() {\n    if (!this._underline) {\n      this._underline = true;\n      this.result += \"<ins>\";\n      this._stack.push(\"</ins>\");\n    }\n  }\n  last() {\n    return this._stack[this._stack.length - 1];\n  }\n  color(color: Color) {\n    let close: string | undefined;\n    while ((close = this.last()) === \"</span>\") {\n      this._stack.pop();\n      this.result += close;\n    }\n    this.result += `<span class=\"color-${color}\">`;\n    this._stack.push(\"</span>\");\n  }\n  done() {\n    this.reset();\n    return this.result;\n  }\n}\n\nexport function render(ansi: string) {\n  ansi = ansi.trimEnd();\n  let i = 0;\n  const buffer = new AnsiBuffer();\n  for (const m of ansi.matchAll(/\\x1B\\[([\\d;]+)m/g)) {\n    const escape = m[1] as Escape;\n    buffer.text(ansi.slice(i, m.index));\n    i = m.index! + m[0].length;\n    /*  */ if (escape === \"0\") {\n      buffer.reset();\n    } else if (escape === \"1\") {\n      buffer.bold();\n    } else if (escape === \"4\") {\n      buffer.underline();\n    } else if (ESCAPE_TO_COLOR[escape]) {\n      buffer.color(ESCAPE_TO_COLOR[escape]);\n    }\n  }\n  if (i < ansi.length) {\n    buffer.text(ansi.slice(i));\n  }\n  return buffer.done();\n}\n\nexport { render as ansi };\nexport default render;","import type { PartialMessage } from \"esbuild-wasm\";\n\nimport { ansi } from \"./ansi\";\n\n/** \n * Inspired by https://github.com/egoist/play-esbuild/blob/main/src/lib/esbuild.ts\n * I didn't even know this was exported by esbuild, great job @egoist\n*/\nexport const createNotice = async (errors: PartialMessage[], kind: \"error\" | \"warning\" = \"error\", color = true) => {\n  const { formatMessages } = await import(\"esbuild-wasm\");\n  const notices = await formatMessages(errors, { color, kind });\n  return notices.map((msg) => !color ? msg : ansi(msg.replace(/(\\s+)(\\d+)(\\s+)\\│/g, \"\\n$1$2$3│\")));\n};\n\nexport default createNotice;","import type { CommonConfigOptions, ESBUILD } from \"./types\";\n\nimport { VIRTUAL_FS } from \"./plugins/virtual-fs\";\nimport { EXTERNAL } from \"./plugins/external\";\nimport { ALIAS } from \"./plugins/alias\";\nimport { HTTP } from \"./plugins/http\";\nimport { CDN } from \"./plugins/cdn\";\n\nimport { EVENTS } from \"./configs/events\";\nimport { createConfig } from \"./configs/config\";\nimport { PLATFORM_AUTO } from \"./configs/platform\";\nimport { createState, getState, setState } from \"./configs/state\";\n\nimport { FileSystem, getFile, setFile, getResolvedPath } from \"./utils/filesystem\";\nimport { createNotice } from \"./utils/create-notice\";\nimport { DEFAULT_CDN_HOST } from \"./utils/util-cdn\";\nimport { init } from \"./init\";\n\n/**\n * Local state available to all plugins\n */\nexport type LocalState = {\n  /**\n   * Assets are files during the build process that esbuild can't handle natively, \n   * e.g. fetching web workers using the `new URL(\"...\", import.meta.url)`\n   */\n  assets?: ESBUILD.OutputFile[],\n\n  /**\n   * Array storing the [getter, setter] of the global state\n   */\n  GLOBAL?: [typeof getState, typeof setState],\n\n  [key: string]: unknown\n}\n\nexport type BuildConfig = CommonConfigOptions & {\n  /** esbuild config options https://esbuild.github.io/api/#build-api */\n  esbuild?: ESBUILD.BuildOptions,\n\n  /** The default CDN to import packages from */\n  cdn?: \"https://unpkg.com\" | \"https://esm.run\" | \"https://cdn.esm.sh\" | \"https://cdn.esm.sh\" | \"https://cdn.skypack.dev\" | \"https://cdn.jsdelivr.net/npm\" | \"https://cdn.jsdelivr.net/gh\" | \"https://deno.land/x\" | \"https://raw.githubusercontent.com\" | \"unpkg\" | \"esm.run\" | \"esm.sh\" | \"esm\" | \"skypack\" | \"jsdelivr\" | \"jsdelivr.gh\" | \"github\" | \"deno\" | (string & object),\n\n  /** Aliases for replacing packages with different ones, e.g. replace \"fs\" with \"memfs\", so, it can work on the web, etc... */\n  alias?: Record<string, string>,\n\n  /**\n   * Enables converting ascii logs to HTML so virtual consoles can handle the logs and print with color\n   */\n  ascii?: \"html\" | \"html-and-ascii\" | \"ascii\",\n\n  /**\n   * A virtual file system where you can input files, get, set and read files\n   */\n  filesystem?: {\n    /** Virtual Filesystem Storage */\n    files?: typeof FileSystem,\n\n    /**\n     * Retrevies file from virtual file system storage in either string or uint8array buffer format\n     * \n     * @param path path of file in virtual file system storage\n     * @param type format to retrieve file in, buffer and string are the 2 option available\n     * @param importer an absolute path to use to determine a relative file path\n     * @returns file from file system storage in either string format or as a Uint8Array buffer\n     */\n    get?: typeof getFile,\n\n    /**\n     * Writes file to filesystem in either string or uint8array buffer format\n     * \n     * @param path path of file in virtual file system storage\n     * @param content contents of file to store, you can store buffers and/or strings\n     * @param importer an absolute path to use to determine a relative file path\n     */\n    set?: typeof setFile,\n\n    /**\n     * Resolves path to a file in the virtual file system storage \n     * \n     * @param path the relative or absolute path to resolve to\n     * @param importer an absolute path to use to determine relative file paths\n     * @returns resolved final path\n     */\n    resolve?: typeof getResolvedPath,\n\n    /**\n     * Clear all files from the virtual filesystem storage\n     */\n    clear?: typeof FileSystem.clear,\n  },\n\n  /**\n   * Documentation: https://esbuild.github.io/api/#entry-points\n   */\n  entryPoints?: ESBUILD.BuildOptions[\"entryPoints\"]\n};\n\n/**\n * Default build config\n */\nexport const BUILD_CONFIG: BuildConfig = {\n  \"entryPoints\": [\"/index.tsx\"],\n  \"cdn\": DEFAULT_CDN_HOST,\n\n  \"esbuild\": {\n    \"color\": true,\n    \"globalName\": \"BundledCode\",\n\n    \"logLevel\": \"info\",\n    \"sourcemap\": false,\n    \"incremental\": false,\n\n    \"target\": [\"esnext\"],\n    \"format\": \"esm\",\n    \"bundle\": true,\n    \"minify\": true,\n\n    \"treeShaking\": true,\n    \"platform\": \"browser\"\n  },\n\n  \"ascii\": \"ascii\",\n  filesystem: {\n    files: FileSystem,\n    get: getFile,\n    set: setFile,\n    resolve: getResolvedPath,\n    clear: () => FileSystem.clear(),\n  },\n  init: {\n    platform: PLATFORM_AUTO\n  }\n};\n\nexport type BuildResult = (ESBUILD.BuildResult | ESBUILD.BuildIncremental) & {\n  outputs: ESBUILD.OutputFile[];\n  contents: ESBUILD.OutputFile[];\n};\n\nexport async function build(opts: BuildConfig = {}): Promise<BuildResult> {\n  if (!getState(\"initialized\"))\n    EVENTS.emit(\"init.loading\");\n\n  const CONFIG = createConfig(\"build\", opts);\n  const STATE = createState<LocalState>({ assets: [], GLOBAL: [getState, setState] });\n  const [get] = STATE;\n\n  const { platform, ...initOpts } = CONFIG.init ?? {};\n  const { build: bundle } = await init(platform, initOpts);\n  const { define = {}, ...esbuildOpts } = CONFIG.esbuild ?? {};\n\n  // Stores content from all external outputed files, this is for checking the gzip size when dealing with CSS and other external files\n  let outputs: ESBUILD.OutputFile[] = [];\n  let contents: ESBUILD.OutputFile[] = [];\n  let result: ESBUILD.BuildResult | ESBUILD.BuildIncremental = null;\n\n  try {\n    try {\n      const key = \"p.env.NODE_ENV\".replace(\"p.\", \"process.\");\n      result = await bundle({\n        entryPoints: CONFIG?.entryPoints ?? [],\n        loader: {\n          \".png\": \"file\",\n          \".jpeg\": \"file\",\n          \".ttf\": \"file\",\n          \".svg\": \"text\",\n          \".html\": \"text\",\n          \".scss\": \"css\"\n        },\n        define: {\n          \"__NODE__\": \"false\",\n          [key]: \"\\\"production\\\"\",\n          ...define\n        },\n        write: false,\n        outdir: \"/\",\n        plugins: [\n          ALIAS(EVENTS, STATE, CONFIG),\n          EXTERNAL(EVENTS, STATE, CONFIG),\n          HTTP(EVENTS, STATE, CONFIG),\n          CDN(EVENTS, STATE, CONFIG),\n          VIRTUAL_FS(EVENTS, STATE, CONFIG),\n        ],\n        ...esbuildOpts,\n      });\n    } catch (e) {\n      if (e.errors) {\n        // Log errors with added color info. to the virtual console\n        const asciMsgs = [...await createNotice(e.errors, \"error\", false)];\n        const htmlMsgs = [...await createNotice(e.errors, \"error\")];\n\n        EVENTS.emit(\"logger.error\", asciMsgs, htmlMsgs);\n\n        const message = (htmlMsgs.length > 1 ? `${htmlMsgs.length} error(s) ` : \"\") + \"(if you are having trouble solving this issue, please create a new issue in the repo, https://github.com/okikio/bundle)\";\n        EVENTS.emit(\"logger.error\", message);\n        return;\n      } else throw e;\n    }\n\n    // Create an array of assets and actual output files, this will later be used to calculate total file size\n    outputs = await Promise.all(\n      [...get()[\"assets\"]]\n        .concat(result?.outputFiles as ESBUILD.OutputFile[])\n    );\n\n    contents = await Promise.all(\n      outputs\n        ?.map(({ path, text, contents }): ESBUILD.OutputFile => {\n          if (/\\.map$/.test(path))\n            return null;\n\n          // For debugging reasons, if the user chooses verbose, print all the content to the Shared Worker console\n          if (esbuildOpts?.logLevel == \"verbose\") {\n            const ignoreFile = /\\.(wasm|png|jpeg|webp)$/.test(path);\n            if (ignoreFile) {\n              EVENTS.emit(\"logger.log\", \"Output File: \" + path);\n            } else {\n              EVENTS.emit(\"logger.log\", \"Output File: \" + path + \"\\n\" + text);\n            }\n          }\n\n          return { path, text, contents };\n        })\n\n        // Remove null output files\n        ?.filter(x => ![undefined, null].includes(x))\n    );\n\n    // Ensure a fresh filesystem on every run\n    FileSystem.clear();\n\n    return {\n      /** \n       * The output and asset files without unnecessary croft, e.g. `.map` sourcemap files \n       */\n      contents,\n\n      /**\n       * The output and asset files with `.map` sourcemap files \n       */\n      outputs,\n\n      ...result\n    };\n  } catch (e) { \n    EVENTS.emit(\"build.error\", e);\n  }\n}","/**\n * Based on `pretty-bytes` (https://npmjs.com/pretty-bytes) by @sindresorhus (https://github.com/sindresorhus)\n * Based on `byte` (https://npmjs.com/bytes) by @visionmedia (https://github.com/visionmedia)\n * \n * bytes\n * Copyright(c) 2012-2014 TJ Holowaychuk\n * Copyright(c) 2015 Jed Watson\n * MIT Licensed\n */\n\nexport const BYTE_UNITS = [\n  \"B\",\n  \"kB\",\n  \"MB\",\n  \"GB\",\n  \"TB\",\n  \"PB\",\n  \"EB\",\n  \"ZB\",\n  \"YB\",\n];\n\nexport const BIBYTE_UNITS = [\n  \"B\",\n  \"kiB\",\n  \"MiB\",\n  \"GiB\",\n  \"TiB\",\n  \"PiB\",\n  \"EiB\",\n  \"ZiB\",\n  \"YiB\",\n];\n\nexport const BIT_UNITS = [\n  \"b\",\n  \"kbit\",\n  \"Mbit\",\n  \"Gbit\",\n  \"Tbit\",\n  \"Pbit\",\n  \"Ebit\",\n  \"Zbit\",\n  \"Ybit\",\n];\n\nexport const BIBIT_UNITS = [\n  \"b\",\n  \"kibit\",\n  \"Mibit\",\n  \"Gibit\",\n  \"Tibit\",\n  \"Pibit\",\n  \"Eibit\",\n  \"Zibit\",\n  \"Yibit\",\n];\n\n/** \n * Formats the given number using `Number#toLocaleString`.\n * - If locale is a string, the value is expected to be a locale-key (for example: `de`).\n * - If locale is true, the system default locale is used for translation.\n * - If no value for locale is specified, the number is returned unmodified.\n*/\nexport const toLocaleString = (number, locale, options) => {\n  let result = number;\n  if (typeof locale === \"string\" || Array.isArray(locale)) {\n    result = number.toLocaleString(locale, options);\n  } else if (locale === true || options !== undefined) {\n    result = number.toLocaleString(undefined, options);\n  }\n\n  return result;\n};\n\n/**\n * Convert bytes to a human readable string: `1337` → `1.34 kB`.\n * \n * Format the given value in bytes into a string.\n *\n * If the value is negative, it is kept as such. If it is a float,\n * it is rounded.\n * \n * @param number - The number to format.\n * \n * @example\n * ```\n * import prettyBytes from 'pretty-bytes';\n * prettyBytes(1337);\n * //=> '1.34 kB'\n * prettyBytes(100);\n * //=> '100 B'\n * // Display file size differences\n * prettyBytes(42, {signed: true});\n * //=> '+42 B'\n * // Localized output using German locale\n * prettyBytes(1337, {locale: 'de'});\n * //=> '1,34 kB'\n * ```\n */\nexport default function bytes(number: number, options?: PrettyByteOptions) {\n  if (!Number.isFinite(number)) {\n    throw new TypeError(`Expected a finite number, got ${typeof number}: ${number}`);\n  }\n\n  options = {\n    bits: false,\n    binary: false,\n    ...options,\n  };\n\n  const UNITS = options.bits\n    ? (options.binary ? BIBIT_UNITS : BIT_UNITS)\n    : (options.binary ? BIBYTE_UNITS : BYTE_UNITS);\n\n  if (options.signed && number === 0) {\n    return ` 0 ${UNITS[0]}`;\n  }\n\n  const isNegative = number < 0;\n  const prefix = isNegative ? \"-\" : (options.signed ? \"+\" : \"\");\n\n  if (isNegative) {\n    number = -number;\n  }\n\n  let localeOptions;\n\n  if (options.minimumFractionDigits !== undefined) {\n    localeOptions = { minimumFractionDigits: options.minimumFractionDigits };\n  }\n\n  if (options.maximumFractionDigits !== undefined) {\n    localeOptions = { maximumFractionDigits: options.maximumFractionDigits, ...localeOptions };\n  }\n\n  if (number < 1) {\n    const numberString = toLocaleString(number, options.locale, localeOptions);\n    return prefix + numberString + \" \" + UNITS[0];\n  }\n\n  const exponent = Math.min(Math.floor(options.binary ? Math.log(number) / Math.log(1024) : Math.log10(number) / 3), UNITS.length - 1);\n  number /= (options.binary ? 1024 : 1000) ** exponent;\n\n  if (!localeOptions) {\n    // @ts-ignore\n    number = number.toPrecision(3);\n  }\n\n  const numberString = toLocaleString(Number(number), options.locale, localeOptions);\n  const unit = UNITS[exponent];\n\n  return prefix + numberString + \" \" + unit;\n}\n\nexport { bytes, bytes as formatBytes, bytes as prettyBytes };\n\nexport interface PrettyByteOptions {\n  /**\n   * Include plus sign for positive numbers. If the difference is exactly zero a space character will be prepended instead for better alignment.\n   * @default false\n   */\n  readonly signed?: boolean;\n\n  /**\n   * - If `false`: Output won't be localized.\n   * - If `true`: Localize the output using the system/browser locale.\n   * - If `string`: Expects a [BCP 47 language tag](https://en.wikipedia.org/wiki/IETF_language_tag) (For example: `en`, `de`, …)\n   * - If `string[]`: Expects a list of [BCP 47 language tags](https://en.wikipedia.org/wiki/IETF_language_tag) (For example: `en`, `de`, …)\n   * @default false\n   */\n  readonly locale?: boolean | string | readonly string[];\n\n  /**\n   * Format the number as [bits](https://en.wikipedia.org/wiki/Bit) instead of [bytes](https://en.wikipedia.org/wiki/Byte). This can be useful when, for example, referring to [bit rate](https://en.wikipedia.org/wiki/Bit_rate).\n   * @default false\n   * @example\n   * ```\n   * import prettyBytes from 'pretty-bytes';\n   * prettyBytes(1337, {bits: true});\n   * //=> '1.34 kbit'\n   * ```\n   */\n  readonly bits?: boolean;\n\n  /**\n   * Format the number using the [Binary Prefix](https://en.wikipedia.org/wiki/Binary_prefix) instead of the [SI Prefix](https://en.wikipedia.org/wiki/SI_prefix). This can be useful for presenting memory amounts. However, this should not be used for presenting file sizes.\n   * @default false\n   * @example\n   * ```\n   * import prettyBytes from 'pretty-bytes';\n   * prettyBytes(1000, {binary: true});\n   * //=> '1000 bit'\n   * prettyBytes(1024, {binary: true});\n   * //=> '1 kiB'\n   * ```\n   */\n  readonly binary?: boolean;\n\n  /**\n   * The minimum number of fraction digits to display.\n   * If neither `minimumFractionDigits` or `maximumFractionDigits` are set, the default behavior is to round to 3 significant digits.\n   * @default undefined\n   * ```\n   * import prettyBytes from 'pretty-bytes';\n   * // Show the number with at least 3 fractional digits\n   * prettyBytes(1900, {minimumFractionDigits: 3});\n   * //=> '1.900 kB'\n   * prettyBytes(1900);\n   * //=> '1.9 kB'\n   * ```\n   */\n  readonly minimumFractionDigits?: number;\n\n  /**\n   * The maximum number of fraction digits to display.\n   * If neither `minimumFractionDigits` or `maximumFractionDigits` are set, the default behavior is to round to 3 significant digits.\n   * @default undefined\n   * ```\n   * import prettyBytes from 'pretty-bytes';\n   * // Show the number with at most 1 fractional digit\n   * prettyBytes(1920, {maximumFractionDigits: 1});\n   * //=> '1.9 kB'\n   * prettyBytes(1920);\n   * //=> '1.92 kB'\n   * ```\n   */\n  readonly maximumFractionDigits?: number;\n}","import { bytes } from \"./utils/pretty-bytes\";\nimport { encode } from \"./utils/encode-decode\";\nimport { createConfig } from \"./configs/config\";\n\n/** The compression algorithim to use, there are currently 3 options \"gzip\", \"brotli\", and \"lz4\" */\nexport type CompressionType = \"gzip\" | \"brotli\" | \"lz4\";\nexport type CompressionOptions = {\n  /** The compression algorithim to use, there are currently 3 options \"gzip\", \"brotli\", and \"lz4\" */\n  type: CompressionType,\n\n  /** Compression quality ranging from 1 to 11 */\n  quality: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11\n};\n\nexport type CompressConfig = CompressionOptions | CompressionType;\n\n/**\n * Default compress config\n */\nexport const COMPRESS_CONFIG: CompressionOptions = {\n  type: \"gzip\",\n  quality: 9\n};\n\n/**\n * Use multiple compression algorithims & pretty-bytes for the total gzip, brotli and/or lz4 compressed size\n * \n * @param inputs An array of input files to compress\n * @param opts \n * The compression algorithim to use, there are currently 3 options \"gzip\", \"brotli\", and \"lz4\". \n * You can also configure the quality of the compression using an object,\n * \n * e.g.\n * ```ts\n * {\n *   ...\n *   \"compression\": {\n *     \"type\": \"brotli\",\n *     \"quality\": 5\n *   }\n * }\n * ```\n * \n * @returns The compressed size, the initial size, and the compression format used\n */\nexport async function compress(inputs: Uint8Array[] | string[] = [], opts: CompressConfig = {} as CompressionOptions) {\n  const { type, quality } = createConfig(\"compress\", opts);\n\n  // Convert inputs to binary in Uint8Array form\n  const contents = inputs.map((input: Uint8Array | string) => {\n    return input instanceof Uint8Array ? input : encode(input);\n  });\n\n  // Total uncompressed size\n  const totalByteLength = bytes(\n    contents.reduce((acc, content) => acc + content.byteLength, 0)\n  ) as string;\n\n  // Choose a different compression function based on the compression type\n  const compressionMap = await (async () => {\n    switch (type) {\n      case \"lz4\": {\n        const { compress: lz4_compress, getWASM } = await import(\"./deno/lz4/mod\");\n        await getWASM();\n\n        return async (code: Uint8Array) => await lz4_compress(code);\n      }\n      case \"brotli\": {\n        const { compress, getWASM } = await import(\"./deno/brotli/mod\");\n        await getWASM();\n\n        return async (code: Uint8Array) => await compress(code, code.length, quality);\n      }\n      default: {\n        const { gzip, getWASM } = await import(\"./deno/denoflate/mod\");\n        await getWASM();\n\n        return async (code: Uint8Array) => await gzip(code, quality);\n      }\n    }\n  })();\n\n  // Compress all binary contents according to the compression map\n  const compressedContent = await Promise.all(\n    contents.map((content) => compressionMap(content))\n  );\n\n  // Convert sizes to human readable formats, e.g. 10000 bytes to 10MB\n  const totalCompressedSize = bytes(\n    compressedContent.reduce((acc, { length }) => acc + length, 0)\n  );\n\n  return {\n    type,\n    content: compressedContent,\n\n    totalByteLength,\n    totalCompressedSize,\n\n    initialSize: `${totalByteLength}`,\n    size: `${totalCompressedSize} (${type})`\n  };\n}\n\nexport { };","export const isObject = (obj: any) => typeof obj === \"object\" && obj != null;\nexport const isPrimitive = (val) => (typeof val === \"object\" ? val === null : typeof val !== \"function\");\nexport const isValidKey = key => {\n  return key !== \"__proto__\" && key !== \"constructor\" && key !== \"prototype\";\n};\n\n// Based on https://gist.github.com/egardner/efd34f270cc33db67c0246e837689cb9\n// Deep Equality comparison example\n//\n// This is an example of how to implement an object-comparison function in \n// JavaScript (ES5+). A few points of interest here:\n//\n// * You can get an array of all an object's properties in ES5+ by calling\n//   the class method Object.keys(obj). \n// * The function recursively calls itself in the for / in loop when it\n//   compares the contents of each property\n// * You can hide a \"private\" function inside a function of this kind by\n//   placing one function declaration inside of another. The inner function\n//   is not hoisted out into the global scope, so it is only visible inside\n//   of the parent function.\n// * The reason this nested helper function is necessary is that \n//   `typeof null` is still \"object\" in JS, a major \"gotcha\" to watch out for.\n//\nexport const deepEqual = (obj1: any, obj2: any) => {\n  if (obj1 === obj2) {\n    return true;\n  } else if (isObject(obj1) && isObject(obj2)) {\n    if (Object.keys(obj1).length !== Object.keys(obj2).length) { return false; }\n    for (const prop in obj1) {\n      if (!deepEqual(obj1[prop], obj2[prop])) return false;\n    }\n\n    return true;\n  }\n};\n\n/** Compares 2 objects and only keep the keys that are different in both objects */\nexport const deepDiff = (obj1: any, obj2: any) => {\n  const keys = Object.keys(obj2);\n  const result = {};\n  let i = 0;\n  for (; i < keys.length; i++) {\n    const key = keys[i];\n    const value = obj2[key];\n\n    if (key in obj1) {\n      const bothAreArrays = Array.isArray(obj1[key]) && Array.isArray(value);\n      if (obj1[key] == value) {\n        continue;\n      } else if (bothAreArrays) {\n        if (!deepEqual(obj1[key], value))\n          result[key] = value;\n        else continue;\n      } else if (isObject(obj1[key]) && isObject(value)) {\n        // Remove empty objects\n        const diff = deepDiff(obj1[key], value);\n        if (Object.keys(diff).length)\n          result[key] = diff;\n      } else {\n        result[key] = value;\n      }\n    } else {\n      result[key] = value;\n    }\n  }\n\n  return result;\n};\n\n/*!\n * Based on assign-deep <https://github.com/jonschlinkert/assign-deep>\n *\n * Copyright (c) 2017-present, Jon Schlinkert.\n * Released under the MIT License.\n */\nexport function deepAssign(target, ...args) {\n  let i = 0;\n  if (isPrimitive(target)) target = args[i++];\n  if (!target) target = {};\n  for (; i < args.length; i++) {\n    if (isObject(args[i])) {\n      for (const key of Object.keys(args[i])) {\n        if (isValidKey(key)) {\n          if (isObject(target[key]) && isObject(args[i][key])) {\n            target[key] = deepAssign(Array.isArray(target[key]) ? [] : {}, target[key], args[i][key]);\n          } else {\n            target[key] = args[i][key];\n          }\n        }\n      }\n    }\n  }\n\n  return target;\n}\n","import type { BuildConfig } from \"../build\";\nimport type { TransformConfig } from \"../transform\";\nimport type { CompressConfig, CompressionOptions } from \"../compress\";\n\nimport { BUILD_CONFIG } from \"../build\";\nimport { TRANSFORM_CONFIG } from \"../transform\";\nimport { COMPRESS_CONFIG } from \"../compress\";\n\nimport { deepAssign } from \"../utils/deep-equal\";\n\n/**\n * Creates the config needed for the transform, build, and compress functions\n * @param type The type of config needed\n * @param opts The option(s) to use to create the config\n * @returns An object representing the configuration for that type of function\n */\nexport function createConfig<T extends \"build\", O extends BuildConfig>(type: T, opts?: O): BuildConfig;\nexport function createConfig<T extends \"compress\", O extends CompressConfig>(type: T, opts?: O): CompressionOptions;\nexport function createConfig<T extends \"transform\", O extends TransformConfig>(type: T, opts?: O): TransformConfig;\nexport function createConfig<T extends \"transform\" | \"build\" | \"compress\", O extends TransformConfig | BuildConfig | CompressConfig>(type: T, opts?: O) {\n  if (type == \"transform\") {\n    return deepAssign({}, TRANSFORM_CONFIG, opts) as TransformConfig;\n  } else if (type == \"compress\") {\n    return deepAssign({}, COMPRESS_CONFIG, typeof opts == \"string\" ? { type: opts } : opts) as CompressionOptions;\n  } else {\n    return deepAssign({}, BUILD_CONFIG, opts) as BuildConfig;\n  }\n}","import type { CommonConfigOptions, ESBUILD } from \"./types\";\n\nimport { getState } from \"./configs/state\";\nimport { PLATFORM_AUTO } from \"./configs/platform\";\nimport { createConfig } from \"./configs/config\";\nimport { EVENTS } from \"./configs/events\";\n\nimport { createNotice } from \"./utils/create-notice\";\nimport { init } from \"./init\";\n\nexport type TransformConfig = CommonConfigOptions & {\n  /* https://esbuild.github.io/api/#transform-api */\n  esbuild?: ESBUILD.TransformOptions,\n};\n\n/**\n * Default transform config\n */\nexport const TRANSFORM_CONFIG: TransformConfig = {\n  \"esbuild\": {\n    \"target\": [\"esnext\"],\n    \"format\": \"esm\",\n    \"minify\": true,\n\n    \"treeShaking\": true,\n    \"platform\": \"browser\"\n  },\n  init: {\n    platform: PLATFORM_AUTO\n  }\n};\n\nexport async function transform(input: string | Uint8Array, opts: TransformConfig = {}) {\n  if (!getState(\"initialized\"))\n    EVENTS.emit(\"init.loading\");\n\n  const CONFIG = createConfig(\"transform\", opts);\n\n  const { platform, ...initOpts } = CONFIG.init;\n  const { transform } = await init(platform, initOpts);\n  const { define = {}, ...esbuildOpts } = CONFIG.esbuild ?? {};\n\n  // Stores content from all external outputed files, this is for checking the gzip size when dealing with CSS and other external files\n  let result: ESBUILD.TransformResult;\n\n  try {\n    try {\n      const key = \"p.env.NODE_ENV\".replace(\"p.\", \"process.\");\n      result = await transform(input, {\n        define: {\n          \"__NODE__\": \"false\",\n          [key]: \"\\\"production\\\"\",\n          ...define\n        },\n        ...esbuildOpts,\n      });\n    } catch (e) {\n      if (e.errors) {\n        // Log errors with added color info. to the virtual console\n        const asciMsgs = [...await createNotice(e.errors, \"error\", false)];\n        const htmlMsgs = [...await createNotice(e.errors, \"error\")];\n\n        EVENTS.emit(\"logger.error\", asciMsgs, htmlMsgs);\n\n        const message = (htmlMsgs.length > 1 ? `${htmlMsgs.length} error(s) ` : \"\") + \"(if you are having trouble solving this issue, please create a new issue in the repo, https://github.com/okikio/bundle)\";\n        EVENTS.emit(\"logger.error\", message);\n        return;\n      } else throw e;\n    }\n\n    return result;\n  } catch (e) { }\n}","// Based on https://davidwalsh.name/javascript-debounce-function\n// Returns a function, that, as long as it continues to be invoked, will not\n// be triggered. The function will be called after it stops being called for\n// N milliseconds. If `immediate` is passed, trigger the function on the\n// leading edge, instead of the trailing.\nexport const debounce = (func: (...args: any[]) => any, wait = 300, immediate?: boolean) => {\n  let timeout: number | null;\n  return function (...args: any[]) {\n    const context = this;\n    const later = () => {\n      timeout = null;\n      if (!immediate) func.apply(context, args);\n    };\n\n    const callNow = immediate && !timeout;\n    clearTimeout(timeout);\n\n    // @ts-ignore\n    timeout = setTimeout(later, wait);\n    if (callNow) func.apply(context, args);\n  };\n};","/**\n * Based on `@amoutonbrady/lz-string` (https://npmjs.com/@amoutonbrady/lz-string) by @amoutonbrady (https://github.com/amoutonbrady)\n */\n\n// private property\nexport const keyStrBase64 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\nexport const keyStrUriSafe = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+-$\";\nexport const baseReverseDic: Record<string, Record<string, number>> = {};\n\nexport function getBaseValue(alphabet: string, character: string) {\n  if (!baseReverseDic[alphabet]) {\n    baseReverseDic[alphabet] = {};\n\n    for (let i = 0; i < alphabet.length; i++) {\n      baseReverseDic[alphabet][alphabet.charAt(i)] = i;\n    }\n  }\n\n  return baseReverseDic[alphabet][character];\n}\n\nexport function compressToBase64(input: string): string {\n  if (input == null) return \"\";\n  const res = _compress(input, 6, (a) => keyStrBase64.charAt(a));\n\n  // To produce valid Base64\n  switch (res.length % 4) {\n  default: // When could this happen ?\n  case 0:\n    return res;\n  case 1:\n    return res + \"===\";\n  case 2:\n    return res + \"==\";\n  case 3:\n    return res + \"=\";\n  }\n}\n\nexport function decompressFromBase64(input: string): string | null {\n  if (input == null) return \"\";\n  if (input == \"\") return null;\n  return _decompress(input.length, 32, (index) => getBaseValue(keyStrBase64, input.charAt(index)));\n}\n\n//compress into a string that is already URI encoded\nexport function compressToURL(input: string): string {\n  if (input == null) return \"\";\n  return _compress(input, 6, (a) => keyStrUriSafe.charAt(a));\n}\n\n//decompress from an output of decompressFromURL\nexport function decompressFromURL(input: string): string | null {\n  if (input == null) return \"\";\n  if (input == \"\") return null;\n  input = input.replaceAll(\" \", \"+\");\n\n  return _decompress(input.length, 32, (index) => getBaseValue(keyStrUriSafe, input.charAt(index)));\n}\n\nexport function compress(uncompressed: string): string {\n  return _compress(uncompressed, 16, String.fromCharCode);\n}\n\nexport function decompress(compressed: null | string): string | null {\n  if (compressed == null) return \"\";\n  if (compressed == \"\") return null;\n  return _decompress(compressed.length, 32768, (index) => compressed.charCodeAt(index));\n}\n\n/**\n * @internal\n */\nexport function _compress(\n  uncompressed: null | string,\n  bitsPerChar: number,\n  getCharFromInt: (int: number) => string,\n) {\n  if (uncompressed == null) return \"\";\n\n  const contextData = [];\n  const contextDictionary: Record<string, number> = {};\n  const contextDictionaryToCreate: Record<string, boolean> = {};\n\n  let i: number;\n  let j: number;\n  let value: number;\n\n  let contextC = \"\";\n  let contextW = \"\";\n  let contextWc = \"\";\n\n  // Compensate for the first entry which should not count\n  let contextEnlargeIn = 2;\n  let contextDictSize = 3;\n  let contextNumBits = 2;\n  let contextDataVal = 0;\n  let contextDataPosition = 0;\n\n  for (j = 0; j < uncompressed.length; j += 1) {\n    contextC = uncompressed.charAt(j);\n\n    if (!Object.prototype.hasOwnProperty.call(contextDictionary, contextC)) {\n      contextDictionary[contextC] = contextDictSize++;\n      contextDictionaryToCreate[contextC] = true;\n    }\n\n    contextWc = contextW + contextC;\n\n    if (Object.prototype.hasOwnProperty.call(contextDictionary, contextWc)) {\n      contextW = contextWc;\n    } else {\n      if (Object.prototype.hasOwnProperty.call(contextDictionaryToCreate, contextW)) {\n        if (contextW.charCodeAt(0) < 256) {\n          for (i = 0; i < contextNumBits; i++) {\n            contextDataVal = contextDataVal << 1;\n            if (contextDataPosition == bitsPerChar - 1) {\n              contextDataPosition = 0;\n              contextData.push(getCharFromInt(contextDataVal));\n              contextDataVal = 0;\n            } else {\n              contextDataPosition++;\n            }\n          }\n          value = contextW.charCodeAt(0);\n          for (i = 0; i < 8; i++) {\n            contextDataVal = (contextDataVal << 1) | (value & 1);\n            if (contextDataPosition == bitsPerChar - 1) {\n              contextDataPosition = 0;\n              contextData.push(getCharFromInt(contextDataVal));\n              contextDataVal = 0;\n            } else {\n              contextDataPosition++;\n            }\n            value = value >> 1;\n          }\n        } else {\n          value = 1;\n          for (i = 0; i < contextNumBits; i++) {\n            contextDataVal = (contextDataVal << 1) | value;\n            if (contextDataPosition == bitsPerChar - 1) {\n              contextDataPosition = 0;\n              contextData.push(getCharFromInt(contextDataVal));\n              contextDataVal = 0;\n            } else {\n              contextDataPosition++;\n            }\n            value = 0;\n          }\n          value = contextW.charCodeAt(0);\n          for (i = 0; i < 16; i++) {\n            contextDataVal = (contextDataVal << 1) | (value & 1);\n            if (contextDataPosition == bitsPerChar - 1) {\n              contextDataPosition = 0;\n              contextData.push(getCharFromInt(contextDataVal));\n              contextDataVal = 0;\n            } else {\n              contextDataPosition++;\n            }\n            value = value >> 1;\n          }\n        }\n        contextEnlargeIn--;\n        if (contextEnlargeIn == 0) {\n          contextEnlargeIn = Math.pow(2, contextNumBits);\n          contextNumBits++;\n        }\n        delete contextDictionaryToCreate[contextW];\n      } else {\n        value = contextDictionary[contextW];\n        for (i = 0; i < contextNumBits; i++) {\n          contextDataVal = (contextDataVal << 1) | (value & 1);\n          if (contextDataPosition == bitsPerChar - 1) {\n            contextDataPosition = 0;\n            contextData.push(getCharFromInt(contextDataVal));\n            contextDataVal = 0;\n          } else {\n            contextDataPosition++;\n          }\n          value = value >> 1;\n        }\n      }\n      contextEnlargeIn--;\n      if (contextEnlargeIn == 0) {\n        contextEnlargeIn = Math.pow(2, contextNumBits);\n        contextNumBits++;\n      }\n      // Add wc to the dictionary.\n      contextDictionary[contextWc] = contextDictSize++;\n      contextW = String(contextC);\n    }\n  }\n\n  // Output the code for w.\n  if (contextW !== \"\") {\n    if (Object.prototype.hasOwnProperty.call(contextDictionaryToCreate, contextW)) {\n      if (contextW.charCodeAt(0) < 256) {\n        for (i = 0; i < contextNumBits; i++) {\n          contextDataVal = contextDataVal << 1;\n          if (contextDataPosition == bitsPerChar - 1) {\n            contextDataPosition = 0;\n            contextData.push(getCharFromInt(contextDataVal));\n            contextDataVal = 0;\n          } else {\n            contextDataPosition++;\n          }\n        }\n        value = contextW.charCodeAt(0);\n        for (i = 0; i < 8; i++) {\n          contextDataVal = (contextDataVal << 1) | (value & 1);\n          if (contextDataPosition == bitsPerChar - 1) {\n            contextDataPosition = 0;\n            contextData.push(getCharFromInt(contextDataVal));\n            contextDataVal = 0;\n          } else {\n            contextDataPosition++;\n          }\n          value = value >> 1;\n        }\n      } else {\n        value = 1;\n        for (i = 0; i < contextNumBits; i++) {\n          contextDataVal = (contextDataVal << 1) | value;\n          if (contextDataPosition == bitsPerChar - 1) {\n            contextDataPosition = 0;\n            contextData.push(getCharFromInt(contextDataVal));\n            contextDataVal = 0;\n          } else {\n            contextDataPosition++;\n          }\n          value = 0;\n        }\n        value = contextW.charCodeAt(0);\n        for (i = 0; i < 16; i++) {\n          contextDataVal = (contextDataVal << 1) | (value & 1);\n          if (contextDataPosition == bitsPerChar - 1) {\n            contextDataPosition = 0;\n            contextData.push(getCharFromInt(contextDataVal));\n            contextDataVal = 0;\n          } else {\n            contextDataPosition++;\n          }\n          value = value >> 1;\n        }\n      }\n      contextEnlargeIn--;\n      if (contextEnlargeIn == 0) {\n        contextEnlargeIn = Math.pow(2, contextNumBits);\n        contextNumBits++;\n      }\n      delete contextDictionaryToCreate[contextW];\n    } else {\n      value = contextDictionary[contextW];\n      for (i = 0; i < contextNumBits; i++) {\n        contextDataVal = (contextDataVal << 1) | (value & 1);\n        if (contextDataPosition == bitsPerChar - 1) {\n          contextDataPosition = 0;\n          contextData.push(getCharFromInt(contextDataVal));\n          contextDataVal = 0;\n        } else {\n          contextDataPosition++;\n        }\n        value = value >> 1;\n      }\n    }\n    contextEnlargeIn--;\n    if (contextEnlargeIn == 0) {\n      contextEnlargeIn = Math.pow(2, contextNumBits);\n      contextNumBits++;\n    }\n  }\n\n  // Mark the end of the stream\n  value = 2;\n\n  for (i = 0; i < contextNumBits; i++) {\n    contextDataVal = (contextDataVal << 1) | (value & 1);\n    if (contextDataPosition == bitsPerChar - 1) {\n      contextDataPosition = 0;\n      contextData.push(getCharFromInt(contextDataVal));\n      contextDataVal = 0;\n    } else contextDataPosition++;\n\n    value = value >> 1;\n  }\n\n  // Flush the last char\n  while (true) {\n    contextDataVal = contextDataVal << 1;\n    if (contextDataPosition == bitsPerChar - 1) {\n      contextData.push(getCharFromInt(contextDataVal));\n      break;\n    } else contextDataPosition++;\n  }\n\n  return contextData.join(\"\");\n}\n\n/**\n * @internal\n */\nexport function _decompress(length: number, resetValue: number, getNextValue: (index: number) => number) {\n  const dictionary: (string | number)[] = [];\n  let next: number;\n  let enlargeIn = 4;\n  let dictSize = 4;\n  let numBits = 3;\n  let entry = \"\";\n  const result = [];\n  let i: number;\n  let w: string | number;\n  let bits: number;\n  let resb: number;\n  let maxpower: number;\n  let power: number;\n  let c: string | number;\n  const data = { val: getNextValue(0), position: resetValue, index: 1 };\n\n  for (i = 0; i < 3; i += 1) dictionary[i] = i;\n\n  bits = 0;\n  maxpower = Math.pow(2, 2);\n  power = 1;\n  while (power != maxpower) {\n    resb = data.val & data.position;\n    data.position >>= 1;\n    if (data.position == 0) {\n      data.position = resetValue;\n      data.val = getNextValue(data.index++);\n    }\n    bits |= (resb > 0 ? 1 : 0) * power;\n    power <<= 1;\n  }\n\n  switch ((next = bits)) {\n  case 0:\n    bits = 0;\n    maxpower = Math.pow(2, 8);\n    power = 1;\n    while (power != maxpower) {\n      resb = data.val & data.position;\n      data.position >>= 1;\n      if (data.position == 0) {\n        data.position = resetValue;\n        data.val = getNextValue(data.index++);\n      }\n      bits |= (resb > 0 ? 1 : 0) * power;\n      power <<= 1;\n    }\n    c = String.fromCharCode(bits);\n    break;\n  case 1:\n    bits = 0;\n    maxpower = Math.pow(2, 16);\n    power = 1;\n    while (power != maxpower) {\n      resb = data.val & data.position;\n      data.position >>= 1;\n      if (data.position == 0) {\n        data.position = resetValue;\n        data.val = getNextValue(data.index++);\n      }\n      bits |= (resb > 0 ? 1 : 0) * power;\n      power <<= 1;\n    }\n    c = String.fromCharCode(bits);\n    break;\n  case 2:\n    return \"\";\n  }\n  dictionary[3] = c! as string;\n  w = c!;\n  result.push(c!);\n  while (true) {\n    if (data.index > length) {\n      return \"\";\n    }\n\n    bits = 0;\n    maxpower = Math.pow(2, numBits);\n    power = 1;\n    while (power != maxpower) {\n      resb = data.val & data.position;\n      data.position >>= 1;\n      if (data.position == 0) {\n        data.position = resetValue;\n        data.val = getNextValue(data.index++);\n      }\n      bits |= (resb > 0 ? 1 : 0) * power;\n      power <<= 1;\n    }\n\n    switch ((c = bits)) {\n    case 0:\n      bits = 0;\n      maxpower = Math.pow(2, 8);\n      power = 1;\n      while (power != maxpower) {\n        resb = data.val & data.position;\n        data.position >>= 1;\n        if (data.position == 0) {\n          data.position = resetValue;\n          data.val = getNextValue(data.index++);\n        }\n        bits |= (resb > 0 ? 1 : 0) * power;\n        power <<= 1;\n      }\n\n      dictionary[dictSize++] = String.fromCharCode(bits);\n      c = dictSize - 1;\n      enlargeIn--;\n      break;\n    case 1:\n      bits = 0;\n      maxpower = Math.pow(2, 16);\n      power = 1;\n      while (power != maxpower) {\n        resb = data.val & data.position;\n        data.position >>= 1;\n        if (data.position == 0) {\n          data.position = resetValue;\n          data.val = getNextValue(data.index++);\n        }\n        bits |= (resb > 0 ? 1 : 0) * power;\n        power <<= 1;\n      }\n      dictionary[dictSize++] = String.fromCharCode(bits);\n      c = dictSize - 1;\n      enlargeIn--;\n      break;\n    case 2:\n      return result.join(\"\");\n    }\n\n    if (enlargeIn == 0) {\n      enlargeIn = Math.pow(2, numBits);\n      numBits++;\n    }\n\n    if (dictionary[c]) {\n      entry = dictionary[c] as string;\n    } else {\n      if (c === dictSize && typeof w === \"string\") {\n        entry = w + w.charAt(0);\n      } else {\n        return null;\n      }\n    }\n    result.push(entry);\n\n    // Add w+entry[0] to the dictionary.\n    dictionary[dictSize++] = w + entry.charAt(0);\n    enlargeIn--;\n\n    w = entry;\n\n    if (enlargeIn == 0) {\n      enlargeIn = Math.pow(2, numBits);\n      numBits++;\n    }\n  }\n}","/**\n * Based on `semver` (https://npmjs.com/semver) by @npm (https://github.com/npm) a stripped down version that only allows for selecting the max satisfying version of a range of versions.\n */\n\n// Note: this is the semver.org version of the spec that it implements\n// Not necessarily the package version of this code.\nexport const SEMVER_SPEC_VERSION = \"2.0.0\";\n\nexport const MAX_LENGTH = 256;\nexport const MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER ||\n/* istanbul ignore next */ 9007199254740991;\n\n// Max safe segment length for coercion.\nexport const MAX_SAFE_COMPONENT_LENGTH = 16;\n\nexport let R = 0;\n\nexport const createToken = (pattern: string, isGlobal?) => {\n  const index = R++;\n  return { index, pattern, regex: new RegExp(pattern, isGlobal ? \"g\" : undefined) };\n};\n\nconst NUMERICIDENTIFIER = \"0|[1-9]\\\\d*\";\nconst NUMERICIDENTIFIERLOOSE = \"[0-9]+\";\n\nconst NONNUMERICIDENTIFIER = \"\\\\d*[a-zA-Z-][a-zA-Z0-9-]*\";\n\nconst PRERELEASEIDENTIFIER = `(?:${NUMERICIDENTIFIER}|${NONNUMERICIDENTIFIER})`;\nconst PRERELEASEIDENTIFIERLOOSE = `(?:${NUMERICIDENTIFIERLOOSE}|${NONNUMERICIDENTIFIER})`;\n\nconst BUILDIDENTIFIER = \"[0-9A-Za-z-]+\";\n\nconst MAINVERSION = `(${NUMERICIDENTIFIER})\\\\.` + `(${NUMERICIDENTIFIER})\\\\.` + `(${NUMERICIDENTIFIER})`;\nconst MAINVERSIONLOOSE = `(${NUMERICIDENTIFIERLOOSE})\\\\.` + `(${NUMERICIDENTIFIERLOOSE})\\\\.` + `(${NUMERICIDENTIFIERLOOSE})`;\n\nconst BUILD = `(?:\\\\+(${BUILDIDENTIFIER}(?:\\\\.${BUILDIDENTIFIER})*))`;\n\nconst PRERELEASE = `(?:-(${PRERELEASEIDENTIFIER}(?:\\\\.${PRERELEASEIDENTIFIER})*))`;\nconst PRERELEASELOOSE = `(?:-?(${PRERELEASEIDENTIFIERLOOSE}(?:\\\\.${PRERELEASEIDENTIFIERLOOSE})*))`;\n\nconst FULLPLAIN = `v?${MAINVERSION}${PRERELEASE}?${BUILD}?`;\nconst LOOSEPLAIN = `[v=\\\\s]*${MAINVERSIONLOOSE}${PRERELEASELOOSE}?${BUILD}?`;\n\nconst XRANGEIDENTIFIER = `${NUMERICIDENTIFIER}|x|X|\\\\*`;\nconst XRANGEIDENTIFIERLOOSE = `${NUMERICIDENTIFIERLOOSE}|x|X|\\\\*`;\n\nconst GTLT = \"((?:<|>)?=?)\";\n\nconst XRANGEPLAIN = `[v=\\\\s]*(${XRANGEIDENTIFIER})` + `(?:\\\\.(${XRANGEIDENTIFIER})` + `(?:\\\\.(${XRANGEIDENTIFIER})` + `(?:${PRERELEASE})?${BUILD}?` + \")?)?\";\n\nconst XRANGEPLAINLOOSE = `[v=\\\\s]*(${XRANGEIDENTIFIERLOOSE})` + `(?:\\\\.(${XRANGEIDENTIFIERLOOSE})` + `(?:\\\\.(${XRANGEIDENTIFIERLOOSE})` + `(?:${PRERELEASELOOSE})?${BUILD}?` + \")?)?\";\n\nconst COERCE = `${\"(^|[^\\\\d])\" + \"(\\\\d{1,\"}${MAX_SAFE_COMPONENT_LENGTH}})` + `(?:\\\\.(\\\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?` + `(?:\\\\.(\\\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?` + \"(?:$|[^\\\\d])\";\n\nconst LONETILDE = \"(?:~>?)\";\nconst LONECARET = \"(?:\\\\^)\";\n\nexport const tokens = {\n  // The following Regular Expressions can be used for tokenizing,\n  // validating, and parsing SemVer version strings.\n\n  // ## Numeric Identifier\n  // A single `0`, or a non-zero digit followed by zero or more digits.\n\n  NUMERICIDENTIFIER: createToken(NUMERICIDENTIFIER),\n  NUMERICIDENTIFIERLOOSE: createToken(NUMERICIDENTIFIERLOOSE),\n\n  // ## Non-numeric Identifier\n  // Zero or more digits, followed by a letter or hyphen, and then zero or\n  // more letters, digits, or hyphens.\n\n  NONNUMERICIDENTIFIER: createToken(NONNUMERICIDENTIFIER),\n\n  // ## Main Version\n  // Three dot-separated numeric identifiers.\n\n  MAINVERSION: createToken(MAINVERSION),\n\n  MAINVERSIONLOOSE: createToken(MAINVERSIONLOOSE),\n\n  // ## Pre-release Version Identifier\n  // A numeric identifier, or a non-numeric identifier.\n\n  PRERELEASEIDENTIFIER: createToken(PRERELEASEIDENTIFIER),\n\n  PRERELEASEIDENTIFIERLOOSE: createToken(PRERELEASEIDENTIFIERLOOSE),\n\n  // ## Pre-release Version\n  // Hyphen, followed by one or more dot-separated pre-release version\n  // identifiers.\n\n  PRERELEASE: createToken(PRERELEASE),\n\n  PRERELEASELOOSE: createToken(PRERELEASELOOSE),\n\n  // ## Build Metadata Identifier\n  // Any combination of digits, letters, or hyphens.\n\n  BUILDIDENTIFIER: createToken(BUILDIDENTIFIER),\n\n  // ## Build Metadata\n  // Plus sign, followed by one or more period-separated build metadata\n  // identifiers.\n\n  BUILD: createToken(BUILD),\n\n  // ## Full Version String\n  // A main version, followed optionally by a pre-release version and\n  // build metadata.\n\n  // Note that the only major, minor, patch, and pre-release sections of\n  // the version string are capturing groups.  The build metadata is not a\n  // capturing group, because it should not ever be used in version\n  // comparison.\n\n  FULLPLAIN: createToken(FULLPLAIN),\n\n  FULL: createToken(`^${FULLPLAIN}$`),\n\n  // like full, but allows v1.2.3 and =1.2.3, which people do sometimes.\n  // also, 1.0.0alpha1 (prerelease without the hyphen) which is pretty\n  // common in the npm registry.\n  LOOSEPLAIN: createToken(LOOSEPLAIN),\n\n  LOOSE: createToken(`^${LOOSEPLAIN}$`),\n\n  GTLT: createToken(GTLT),\n\n  // Something like \"2.*\" or \"1.2.x\".\n  // Note that \"x.x\" is a valid xRange identifer, meaning \"any version\"\n  // Only the first item is strictly required.\n  XRANGEIDENTIFIERLOOSE: createToken(XRANGEIDENTIFIERLOOSE),\n  XRANGEIDENTIFIER: createToken(XRANGEIDENTIFIER),\n\n  XRANGEPLAIN: createToken(XRANGEPLAIN),\n\n  XRANGEPLAINLOOSE: createToken(XRANGEPLAINLOOSE),\n\n  XRANGE: createToken(`^${GTLT}\\\\s*${XRANGEPLAIN}$`),\n  XRANGELOOSE: createToken(`^${GTLT}\\\\s*${XRANGEPLAINLOOSE}$`),\n\n  // Coercion.\n  // Extract anything that could conceivably be a part of a valid semver\n  COERCE: createToken(COERCE),\n  COERCERTL: createToken(COERCE, true),\n\n  // Tilde ranges.\n  // Meaning is \"reasonably at or greater than\"\n  LONETILDE: createToken(\"(?:~>?)\"),\n\n  TILDETRIM: createToken(`(\\\\s*)${LONETILDE}\\\\s+`, true),\n\n  TILDE: createToken(`^${LONETILDE}${XRANGEPLAIN}$`),\n  TILDELOOSE: createToken(`^${LONETILDE}${XRANGEPLAINLOOSE}$`),\n\n  // Caret ranges.\n  // Meaning is \"at least and backwards compatible with\"\n  LONECARET: createToken(\"(?:\\\\^)\"),\n\n  CARETTRIM: createToken(`(\\\\s*)${LONECARET}\\\\s+`, true),\n\n  CARET: createToken(`^${LONECARET}${XRANGEPLAIN}$`),\n  CARETLOOSE: createToken(`^${LONECARET}${XRANGEPLAINLOOSE}$`),\n\n  // A simple gt/lt/eq thing, or just \"\" to indicate \"any version\"\n  COMPARATORLOOSE: createToken(`^${GTLT}\\\\s*(${LOOSEPLAIN})$|^$`),\n  COMPARATOR: createToken(`^${GTLT}\\\\s*(${FULLPLAIN})$|^$`),\n\n  // An expression to strip any whitespace between the gtlt and the thing\n  // it modifies, so that `> 1.2.3` ==> `>1.2.3`\n  COMPARATORTRIM: createToken(`(\\\\s*)${GTLT\n  }\\\\s*(${LOOSEPLAIN}|${XRANGEPLAIN})`, true),\n\n  // Something like `1.2.3 - 1.2.4`\n  // Note that these all use the loose form, because they'll be\n  // checked against either the strict or loose comparator form\n  // later.\n  HYPHENRANGE: createToken(`^\\\\s*(${XRANGEPLAIN})` +\n    \"\\\\s+-\\\\s+\" +\n    `(${XRANGEPLAIN})` +\n    \"\\\\s*$\"),\n\n  HYPHENRANGELOOSE: createToken(`^\\\\s*(${XRANGEPLAINLOOSE})` +\n    \"\\\\s+-\\\\s+\" +\n    `(${XRANGEPLAINLOOSE})` +\n    \"\\\\s*$\"),\n\n  // Star ranges basically just allow anything at all.\n  STAR: createToken(\"(<|>)?=?\\\\s*\\\\*\"),\n  // >=0.0.0 is like a star\n  GTE0: createToken(\"^\\\\s*>=\\\\s*0\\\\.0\\\\.0\\\\s*$\"),\n  GTE0PRE: createToken(\"^\\\\s*>=\\\\s*0\\\\.0\\\\.0-0\\\\s*$\"),\n};\n\n// parse out just the options we care about so we always get a consistent\n// obj with keys in a consistent order.\nconst opts = [\"includePrerelease\", \"loose\", \"rtl\"];\nexport const parseOptions = options =>\n  !options ? {}\n    : typeof options !== \"object\" ? { loose: true }\n      : opts.filter(k => options[k]).reduce((o, k) => {\n        o[k] = true;\n        return o;\n      }, {});\n\nexport const numeric = /^[0-9]+$/;\n\n/**\n * Compares two identifiers, must be numeric strings or truthy/falsy values.\n *\n * Sorts in ascending order when passed to `Array.sort()`.\n */\nexport const compareIdentifiers = (a: string | number, b: string | number): 1 | 0 | -1 => {\n  const anum = numeric.test(a as string);\n  const bnum = numeric.test(b as string);\n\n  let _a: number | string = a;\n  let _b: number | string = b;\n\n  if (anum && bnum) {\n    _a = +a;\n    _b = +b;\n  }\n\n  return _a === _b ? 0\n    : (anum && !bnum) ? -1\n      : (bnum && !anum) ? 1\n        : _a < _b ? -1\n          : 1;\n};\n\nexport interface Options {\n  loose?: boolean | undefined;\n  includePrerelease?: boolean | undefined;\n}\n\nexport class SemVer {\n  raw: string;\n  loose: boolean;\n  options: Options;\n\n  major: number;\n  minor: number;\n  patch: number;\n  version: string;\n  build: ReadonlyArray<string>;\n  prerelease: ReadonlyArray<string | number>;\n  includePrerelease: boolean | undefined;\n\n  constructor(version: string | SemVer, options?: boolean | Options) {\n    options = parseOptions(options);\n\n    if (version instanceof SemVer) {\n      if (version.loose === !!options.loose &&\n        version.includePrerelease === !!options.includePrerelease) {\n        return version;\n      } else {\n        version = version.version;\n      }\n    } else if (typeof version !== \"string\") {\n      throw new TypeError(`Invalid Version: ${version}`);\n    }\n\n    if (version.length > MAX_LENGTH) {\n      throw new TypeError(\n        `version is longer than ${MAX_LENGTH} characters`\n      );\n    }\n\n    this.options = options;\n    this.loose = !!options.loose;\n    // this isn't actually relevant for versions, but keep it so that we\n    // don't run into trouble passing this.options around.\n    this.includePrerelease = !!options.includePrerelease;\n\n    const m = version.trim().match(options.loose ? tokens.LOOSE.regex : tokens.FULL.regex);\n\n    if (!m) {\n      throw new TypeError(`Invalid Version: ${version}`);\n    }\n\n    this.raw = version;\n\n    // these are actually numbers\n    this.major = +m[1];\n    this.minor = +m[2];\n    this.patch = +m[3];\n\n    if (this.major > MAX_SAFE_INTEGER || this.major < 0) {\n      throw new TypeError(\"Invalid major version\");\n    }\n\n    if (this.minor > MAX_SAFE_INTEGER || this.minor < 0) {\n      throw new TypeError(\"Invalid minor version\");\n    }\n\n    if (this.patch > MAX_SAFE_INTEGER || this.patch < 0) {\n      throw new TypeError(\"Invalid patch version\");\n    }\n\n    // numberify any prerelease numeric ids\n    if (!m[4]) {\n      this.prerelease = [];\n    } else {\n      this.prerelease = m[4].split(\".\").map((id) => {\n        if (/^[0-9]+$/.test(id)) {\n          const num = +id;\n          if (num >= 0 && num < MAX_SAFE_INTEGER) {\n            return num;\n          }\n        }\n        return id;\n      });\n    }\n\n    this.build = m[5] ? m[5].split(\".\") : [];\n    this.format();\n  }\n\n  format() {\n    this.version = `${this.major}.${this.minor}.${this.patch}`;\n    if (this.prerelease.length) {\n      this.version += `-${this.prerelease.join(\".\")}`;\n    }\n    return this.version;\n  }\n\n  toString() {\n    return this.version;\n  }\n\n  /**\n   * Compares two versions excluding build identifiers (the bit after `+` in the semantic version string).\n   *\n   * @return\n   * - `0` if `this` == `other`\n   * - `1` if `this` is greater\n   * - `-1` if `other` is greater.\n   */\n  compare(other: string | SemVer): 1 | 0 | -1 {\n    if (!(other instanceof SemVer)) {\n      if (typeof other === \"string\" && other === this.version) {\n        return 0;\n      }\n      other = new SemVer(other, this.options);\n    }\n\n    if (other.version === this.version) {\n      return 0;\n    }\n\n    return this.compareMain(other) || this.comparePre(other);\n  }\n\n  /**\n   * Compares the release portion of two versions.\n   *\n   * @return\n   * - `0` if `this` == `other`\n   * - `1` if `this` is greater\n   * - `-1` if `other` is greater.\n   */\n  compareMain(other: string | SemVer): 1 | 0 | -1 {\n    if (!(other instanceof SemVer)) {\n      other = new SemVer(other, this.options);\n    }\n\n    return (\n      compareIdentifiers(this.major, other.major) ||\n      compareIdentifiers(this.minor, other.minor) ||\n      compareIdentifiers(this.patch, other.patch)\n    );\n  }\n\n  /**\n   * Compares the prerelease portion of two versions.\n   *\n   * @return\n   * - `0` if `this` == `other`\n   * - `1` if `this` is greater\n   * - `-1` if `other` is greater.\n   */\n  comparePre(other: string | SemVer): 1 | 0 | -1 {\n    if (!(other instanceof SemVer)) {\n      other = new SemVer(other, this.options);\n    }\n\n    // NOT having a prerelease is > having one\n    if (this.prerelease.length && !other.prerelease.length) {\n      return -1;\n    } else if (!this.prerelease.length && other.prerelease.length) {\n      return 1;\n    } else if (!this.prerelease.length && !other.prerelease.length) {\n      return 0;\n    }\n\n    let i = 0;\n    do {\n      const a = this.prerelease[i];\n      const b = other.prerelease[i];\n      if (a === undefined && b === undefined) {\n        return 0;\n      } else if (b === undefined) {\n        return 1;\n      } else if (a === undefined) {\n        return -1;\n      } else if (a === b) {\n        continue;\n      } else {\n        return compareIdentifiers(a, b);\n      }\n    } while (++i);\n  }\n}\n\nexport const ANY = Symbol(\"SemVer ANY\");\n\nexport type ComparatorOperator = \"\" | \"=\" | \"<\" | \">\" | \"<=\" | \">=\";\nexport class Comparator {\n  semver: SemVer | typeof ANY;\n  operator: ComparatorOperator;\n  value: string;\n  loose: boolean;\n  options: Options;\n\n  constructor(comp: string | Comparator, optionsOrLoose?: boolean | Options) {\n    optionsOrLoose = parseOptions(optionsOrLoose);\n\n    if (comp instanceof Comparator) {\n      if (comp.loose === !!optionsOrLoose.loose) {\n        return comp;\n      } else {\n        comp = comp.value;\n      }\n    }\n\n    this.options = optionsOrLoose;\n    this.loose = !!optionsOrLoose.loose;\n    this.parse(comp);\n\n    if (this.semver === ANY) {\n      this.value = \"\";\n    } else {\n      this.value = this.operator + this.semver.version;\n    }\n\n  }\n\n  parse(comp: string) {\n    const r = this.options.loose ? tokens.COMPARATORLOOSE.regex : tokens.COMPARATOR.regex;\n    const m = comp.match(r);\n\n    if (!m) {\n      throw new TypeError(`Invalid comparator: ${comp}`);\n    }\n\n    this.operator = (m[1] !== undefined ? m[1] : \"\") as ComparatorOperator;\n    if (this.operator === \"=\") {\n      this.operator = \"\";\n    }\n\n    // if it literally is just '>' or '' then allow anything.\n    if (!m[2]) {\n      this.semver = ANY;\n    } else {\n      this.semver = new SemVer(m[2], this.options.loose);\n    }\n  }\n\n  toString() {\n    return this.value;\n  }\n}\n\nconst cache = new Map<string, Comparator[]>();\nconst cacheLastAccessTime = new Map<string, number>();\nconst cacheLimit = 1000;\n\nexport const caretTrimReplace = \"$1^\";\nexport const tildeTrimReplace = \"$1~\";\nexport const comparatorTrimReplace = \"$1$2$3\";\n\nexport const isNullSet = c => c.value === \"<0.0.0-0\";\nexport const isAny = c => c.value === \"\";\n\n\n// comprised of xranges, tildes, stars, and gtlt's at this point.\n// already replaced the hyphen ranges\n// turn into a set of JUST comparators.\nexport const parseComparator = (comp, options) => {\n  comp = replaceCarets(comp, options);\n  comp = replaceTildes(comp, options);\n  comp = replaceXRanges(comp, options);\n  comp = replaceStars(comp, options);\n  return comp;\n};\n\nexport const isX = id => !id || id.toLowerCase() === \"x\" || id === \"*\";\n\n// ~, ~> --> * (any, kinda silly)\n// ~2, ~2.x, ~2.x.x, ~>2, ~>2.x ~>2.x.x --> >=2.0.0 <3.0.0-0\n// ~2.0, ~2.0.x, ~>2.0, ~>2.0.x --> >=2.0.0 <2.1.0-0\n// ~1.2, ~1.2.x, ~>1.2, ~>1.2.x --> >=1.2.0 <1.3.0-0\n// ~1.2.3, ~>1.2.3 --> >=1.2.3 <1.3.0-0\n// ~1.2.0, ~>1.2.0 --> >=1.2.0 <1.3.0-0\nexport const replaceTildes = (comp, options) =>\n  comp.trim().split(/\\s+/).map((c) => {\n    return replaceTilde(c, options);\n  }).join(\" \");\n\nexport const replaceTilde = (comp, options) => {\n  const r = options.loose ? tokens.TILDELOOSE.regex : tokens.TILDE.regex;\n  return comp.replace(r, (_, M, m, p, pr) => {\n    let ret;\n\n    if (isX(M)) {\n      ret = \"\";\n    } else if (isX(m)) {\n      ret = `>=${M}.0.0 <${+M + 1}.0.0-0`;\n    } else if (isX(p)) {\n      // ~1.2 == >=1.2.0 <1.3.0-0\n      ret = `>=${M}.${m}.0 <${M}.${+m + 1}.0-0`;\n    } else if (pr) {\n      ret = `>=${M}.${m}.${p}-${pr\n      } <${M}.${+m + 1}.0-0`;\n    } else {\n      // ~1.2.3 == >=1.2.3 <1.3.0-0\n      ret = `>=${M}.${m}.${p\n      } <${M}.${+m + 1}.0-0`;\n    }\n\n    return ret;\n  });\n};\n\n// ^ --> * (any, kinda silly)\n// ^2, ^2.x, ^2.x.x --> >=2.0.0 <3.0.0-0\n// ^2.0, ^2.0.x --> >=2.0.0 <3.0.0-0\n// ^1.2, ^1.2.x --> >=1.2.0 <2.0.0-0\n// ^1.2.3 --> >=1.2.3 <2.0.0-0\n// ^1.2.0 --> >=1.2.0 <2.0.0-0\nexport const replaceCarets = (comp, options) =>\n  comp.trim().split(/\\s+/).map((c) => {\n    return replaceCaret(c, options);\n  }).join(\" \");\n\nexport const replaceCaret = (comp, options) => {\n  const r = options.loose ? tokens.CARETLOOSE.regex : tokens.CARET.regex;\n  const z = options.includePrerelease ? \"-0\" : \"\";\n  return comp.replace(r, (_, M, m, p, pr) => {\n    let ret;\n\n    if (isX(M)) {\n      ret = \"\";\n    } else if (isX(m)) {\n      ret = `>=${M}.0.0${z} <${+M + 1}.0.0-0`;\n    } else if (isX(p)) {\n      if (M === \"0\") {\n        ret = `>=${M}.${m}.0${z} <${M}.${+m + 1}.0-0`;\n      } else {\n        ret = `>=${M}.${m}.0${z} <${+M + 1}.0.0-0`;\n      }\n    } else if (pr) {\n      if (M === \"0\") {\n        if (m === \"0\") {\n          ret = `>=${M}.${m}.${p}-${pr\n          } <${M}.${m}.${+p + 1}-0`;\n        } else {\n          ret = `>=${M}.${m}.${p}-${pr\n          } <${M}.${+m + 1}.0-0`;\n        }\n      } else {\n        ret = `>=${M}.${m}.${p}-${pr\n        } <${+M + 1}.0.0-0`;\n      }\n    } else {\n      if (M === \"0\") {\n        if (m === \"0\") {\n          ret = `>=${M}.${m}.${p\n          }${z} <${M}.${m}.${+p + 1}-0`;\n        } else {\n          ret = `>=${M}.${m}.${p\n          }${z} <${M}.${+m + 1}.0-0`;\n        }\n      } else {\n        ret = `>=${M}.${m}.${p\n        } <${+M + 1}.0.0-0`;\n      }\n    }\n\n    return ret;\n  });\n};\n\nexport const replaceXRanges = (comp, options) => {\n  return comp.split(/\\s+/).map((c) => {\n    return replaceXRange(c, options);\n  }).join(\" \");\n};\n\nexport const replaceXRange = (comp, options) => {\n  comp = comp.trim();\n  const r = options.loose ? tokens.XRANGELOOSE.regex : tokens.XRANGE.regex;\n  return comp.replace(r, (ret, gtlt, M, m, p, pr) => {\n    const xM = isX(M);\n    const xm = xM || isX(m);\n    const xp = xm || isX(p);\n    const anyX = xp;\n\n    if (gtlt === \"=\" && anyX) {\n      gtlt = \"\";\n    }\n\n    // if we're including prereleases in the match, then we need\n    // to fix this to -0, the lowest possible prerelease value\n    pr = options.includePrerelease ? \"-0\" : \"\";\n\n    if (xM) {\n      if (gtlt === \">\" || gtlt === \"<\") {\n        // nothing is allowed\n        ret = \"<0.0.0-0\";\n      } else {\n        // nothing is forbidden\n        ret = \"*\";\n      }\n    } else if (gtlt && anyX) {\n      // we know patch is an x, because we have any x at all.\n      // replace X with 0\n      if (xm) {\n        m = 0;\n      }\n      p = 0;\n\n      if (gtlt === \">\") {\n        // >1 => >=2.0.0\n        // >1.2 => >=1.3.0\n        gtlt = \">=\";\n        if (xm) {\n          M = +M + 1;\n          m = 0;\n          p = 0;\n        } else {\n          m = +m + 1;\n          p = 0;\n        }\n      } else if (gtlt === \"<=\") {\n        // <=0.7.x is actually <0.8.0, since any 0.7.x should\n        // pass.  Similarly, <=7.x is actually <8.0.0, etc.\n        gtlt = \"<\";\n        if (xm) {\n          M = +M + 1;\n        } else {\n          m = +m + 1;\n        }\n      }\n\n      if (gtlt === \"<\") {\n        pr = \"-0\";\n      }\n\n      ret = `${gtlt + M}.${m}.${p}${pr}`;\n    } else if (xm) {\n      ret = `>=${M}.0.0${pr} <${+M + 1}.0.0-0`;\n    } else if (xp) {\n      ret = `>=${M}.${m}.0${pr\n      } <${M}.${+m + 1}.0-0`;\n    }\n\n\n    return ret;\n  });\n};\n\n// Because * is AND-ed with everything else in the comparator,\n// and '' means \"any version\", just remove the *s entirely.\nexport const replaceStars = (comp, options) => {\n  // Looseness is ignored here.  star is always as loose as it gets!\n  return comp.trim().replace(tokens.STAR.regex, \"\");\n};\n\nexport const replaceGTE0 = (comp, options) => {\n  return comp.trim()\n    .replace(tokens[options.includePrerelease ? \"GTE0PRE\" : \"GTE0\"].regex, \"\");\n};\n\n// This function is passed to string.replace(tokens.HYPHENRANGE.regex)\n// M, m, patch, prerelease, build\n// 1.2 - 3.4.5 => >=1.2.0 <=3.4.5\n// 1.2.3 - 3.4 => >=1.2.0 <3.5.0-0 Any 3.4.x will do\n// 1.2 - 3.4 => >=1.2.0 <3.5.0-0\nexport const hyphenReplace = incPr => ($0,\n  from, fM, fm, fp, fpr, fb,\n  to, tM, tm, tp, tpr, tb) => {\n  if (isX(fM)) {\n    from = \"\";\n  } else if (isX(fm)) {\n    from = `>=${fM}.0.0${incPr ? \"-0\" : \"\"}`;\n  } else if (isX(fp)) {\n    from = `>=${fM}.${fm}.0${incPr ? \"-0\" : \"\"}`;\n  } else if (fpr) {\n    from = `>=${from}`;\n  } else {\n    from = `>=${from}${incPr ? \"-0\" : \"\"}`;\n  }\n\n  if (isX(tM)) {\n    to = \"\";\n  } else if (isX(tm)) {\n    to = `<${+tM + 1}.0.0-0`;\n  } else if (isX(tp)) {\n    to = `<${tM}.${+tm + 1}.0-0`;\n  } else if (tpr) {\n    to = `<=${tM}.${tm}.${tp}-${tpr}`;\n  } else if (incPr) {\n    to = `<${tM}.${tm}.${+tp + 1}-0`;\n  } else {\n    to = `<=${to}`;\n  }\n\n  return (`${from} ${to}`).trim();\n};\n\nexport const testSet = (set, version, options) => {\n  for (let i = 0; i < set.length; i++) {\n    if (!set[i].test(version)) {\n      return false;\n    }\n  }\n\n  if (version.prerelease.length && !options.includePrerelease) {\n    // Find the set of versions that are allowed to have prereleases\n    // For example, ^1.2.3-pr.1 desugars to >=1.2.3-pr.1 <2.0.0\n    // That should allow `1.2.3-pr.2` to pass.\n    // However, `1.2.4-alpha.notready` should NOT be allowed,\n    // even though it's within the range set by the comparators.\n    for (let i = 0; i < set.length; i++) {\n      if (set[i].semver === ANY) {\n        continue;\n      }\n\n      if (set[i].semver.prerelease.length > 0) {\n        const allowed = set[i].semver;\n        if (allowed.major === version.major &&\n          allowed.minor === version.minor &&\n          allowed.patch === version.patch) {\n          return true;\n        }\n      }\n    }\n\n    // Version has a -pre, but it's not one of the ones we like.\n    return false;\n  }\n\n  return true;\n};\n\n// hoisted class for cyclic dependency\nexport class Range {\n  range: string;\n  raw: string;\n  loose: boolean;\n  options: Options;\n  includePrerelease: boolean;\n  set: ReadonlyArray<ReadonlyArray<Comparator>>;\n\n  constructor(range: string | Range, optionsOrLoose?: boolean | Options) {\n    optionsOrLoose = parseOptions(optionsOrLoose);\n\n    if (range instanceof Range) {\n      if (\n        range.loose === !!optionsOrLoose.loose &&\n        range.includePrerelease === !!optionsOrLoose.includePrerelease\n      ) {\n        return range;\n      } else {\n        return new Range(range.raw, optionsOrLoose);\n      }\n    }\n\n    this.options = optionsOrLoose;\n    this.loose = !!optionsOrLoose.loose;\n    this.includePrerelease = !!optionsOrLoose.includePrerelease;\n\n    // First, split based on boolean or ||\n    this.raw = range;\n    this.set = range\n      .split(\"||\")\n      // map the range to a 2d array of comparators\n      .map(r => this.parseRange(r.trim()))\n      // throw out any comparator lists that are empty\n      // this generally means that it was not a valid range, which is allowed\n      // in loose mode, but will still throw if the WHOLE range is invalid.\n      .filter(c => c.length);\n\n    if (!this.set.length) {\n      throw new TypeError(`Invalid SemVer Range: ${range}`);\n    }\n\n    // if we have any that are not the null set, throw out null sets.\n    if (this.set.length > 1) {\n      // keep the first one, in case they're all null sets\n      const first = this.set[0];\n      this.set = this.set.filter(c => !isNullSet(c[0]));\n      if (this.set.length === 0) {\n        this.set = [first];\n      } else if (this.set.length > 1) {\n        // if we have any that are *, then the range is just *\n        for (const c of this.set) {\n          if (c.length === 1 && isAny(c[0])) {\n            this.set = [c];\n            break;\n          }\n        }\n      }\n    }\n\n    this.format();\n  }\n\n  format() {\n    this.range = this.set\n      .map((comps) => {\n        return comps.join(\" \").trim();\n      })\n      .join(\"||\")\n      .trim();\n    return this.range;\n  }\n\n  toString() {\n    return this.range;\n  }\n\n  parseRange(range: string): ReadonlyArray<Comparator> {\n    range = range.trim();\n\n    // memoize range parsing for performance.\n    // this is a very hot path, and fully deterministic.\n    const memoOpts = Object.keys(this.options).join(\",\");\n    const memoKey = `parseRange:${memoOpts}:${range}`;\n    if (cache.has(memoKey)) {\n      cacheLastAccessTime.set(memoKey, Date.now());\n      return cache.get(memoKey);\n    }\n\n    const loose = this.options.loose;\n    // `1.2.3 - 1.2.4` => `>=1.2.3 <=1.2.4`\n    const hr = loose ? tokens.HYPHENRANGELOOSE.regex : tokens.HYPHENRANGE.regex;\n    range = range.replace(hr, hyphenReplace(this.options.includePrerelease));\n    // `> 1.2.3 < 1.2.5` => `>1.2.3 <1.2.5`\n    range = range.replace(tokens.COMPARATORTRIM.regex, comparatorTrimReplace);\n\n    // `~ 1.2.3` => `~1.2.3`\n    range = range.replace(tokens.TILDETRIM.regex, tildeTrimReplace);\n\n    // `^ 1.2.3` => `^1.2.3`\n    range = range.replace(tokens.CARETTRIM.regex, caretTrimReplace);\n\n    // normalize spaces\n    range = range.split(/\\s+/).join(\" \");\n\n    // At this point, the range is completely trimmed and\n    // ready to be split into comparators.\n\n    let rangeList = range\n      .split(\" \")\n      .map(comp => parseComparator(comp, this.options))\n      .join(\" \")\n      .split(/\\s+/)\n      // >=0.0.0 is equivalent to *\n      .map(comp => replaceGTE0(comp, this.options));\n\n    if (loose) {\n      // in loose mode, throw out any that are not valid comparators\n      rangeList = rangeList.filter(comp => {\n        return !!comp.match(tokens.COMPARATORLOOSE.regex);\n      });\n    }\n\n    // if any comparators are the null set, then replace with JUST null set\n    // if more than one comparator, remove any * comparators\n    // also, don't include the same comparator more than once\n    const rangeMap = new Map();\n    const comparators = rangeList.map(comp => new Comparator(comp, this.options));\n    for (const comp of comparators) {\n      if (isNullSet(comp)) {\n        return [comp];\n      }\n      rangeMap.set(comp.value, comp);\n    }\n    if (rangeMap.size > 1 && rangeMap.has(\"\")) {\n      rangeMap.delete(\"\");\n    }\n\n    const result = [...rangeMap.values()];\n    const cacheValue = result;\n    cache.set(memoKey, cacheValue);\n    cacheLastAccessTime.set(memoKey, Date.now());\n\n    if (cache.size >= cacheLimit) {\n      const sortedCacheItems = [...cacheLastAccessTime.entries()].sort((a, b) => a[1] - b[1]);\n      const oldestKey = sortedCacheItems[0][0];\n\n      cache.delete(oldestKey);\n      cacheLastAccessTime.delete(oldestKey);\n    }\n    return result;\n  }\n\n  // if ANY of the sets match ALL of its comparators, then pass\n  test(version: string | SemVer): boolean {\n    if (!version) {\n      return false;\n    }\n\n    if (typeof version === \"string\") {\n      try {\n        version = new SemVer(version, this.options);\n      } catch (er) {\n        return false;\n      }\n    }\n\n    for (let i = 0; i < this.set.length; i++) {\n      if (testSet(this.set[i], version, this.options)) {\n        return true;\n      }\n    }\n    return false;\n  }\n}\n\n/**\n * Return the highest version in the list that satisfies the range, or null if none of them do.\n */\nexport function maxSatisfying<T extends string | SemVer>(versions: ReadonlyArray<T>, range: string | Range, optionsOrLoose?: boolean | Options): T | null {\n  let max = null;\n  let maxSV = null;\n  let rangeObj = null;\n  try {\n    rangeObj = new Range(range, optionsOrLoose);\n  } catch (er) {\n    return null;\n  }\n  versions.forEach((v) => {\n    if (rangeObj.test(v)) {\n      // satisfies(v, range, options)\n      if (!max || maxSV.compare(v) === -1) {\n        // compare(max, v, true)\n        max = v;\n        maxSV = new SemVer(max, optionsOrLoose);\n      }\n    }\n  });\n  return max;\n}\n\nexport default maxSatisfying;","import { getRequest } from \"./fetch-and-cache\";\nimport { parsePackageName } from \"./parse-package-name\";\nimport { maxSatisfying } from \"./semver\";\n\n/**\n * Returns registry url for packages which have an input string\n * \n * @param input package to generate npm registry url for; it supports adding package versions \"@okikio/animate@1.0\"\n * @returns the proper npm registry url with package input package versions etc...\n */\nexport const getRegistryURL = (input: string) => {\n  const host = \"https://registry.npmjs.com\";\n\n  const { name, version, path } = parsePackageName(input);\n  const searchURL = `${host}/-/v1/search?text=${encodeURIComponent(name)}&popularity=0.5&size=30`;\n  const packageVersionURL = `${host}/${name}/${version}`;\n  const packageURL = `${host}/${name}`;\n\n  return { searchURL, packageURL, packageVersionURL, version, name, path };\n};\n\n/**\n * Searches the npm registry for packages with matching names\n * \n * @param input package name to search for; it supports adding package versions \"@okikio/animate@1.0\", but will ignore them\n * @returns resulting package info.\n */\nexport const getPackages = async (input: string) => {\n  const { searchURL } = getRegistryURL(input);\n  let result: any;\n\n  try {\n    const response = await getRequest(searchURL, false);\n    result = await response.json();\n  } catch (e) {\n    console.warn(e);\n    throw e;\n  }\n\n  const packages = result?.objects;\n  return { packages, info: result };\n};\n\n/**\n * Searches the npm registry for a package with the same name\n * \n * @param input package name to search for; it supports adding package versions \"@okikio/animate@1.0\", but will ignore them\n * @returns resulting package info.\n */\nexport const getPackage = async (input: string) => {\n  const { packageURL } = getRegistryURL(input);\n\n  try {\n    const response = await getRequest(packageURL, false);\n    return await response.json();\n  } catch (e) {\n    console.warn(e);\n    throw e;\n  }\n};\n\n/**\n * Searches the npm registry for a package with the same name\n * \n * @param input package name to search for; it supports adding package versions \"@okikio/animate@1.0\", but will ignore them\n * @returns resulting package info.\n */\nexport const getPackageOfVersion = async (input: string) => {\n  const { packageVersionURL } = getRegistryURL(input);\n\n  try {\n    const response = await getRequest(packageVersionURL, false);\n    return await response.json();\n  } catch (e) {\n    console.warn(e);\n    throw e;\n  }\n};\n\n/**\n * Searches the npm registry for a package an lists out all it versions with an object of available { versions, tags }.\n * \n * @param input package name to search for; it supports adding package versions \"@okikio/animate@1.0\", but will ignore them\n * @returns resulting package info.\n */\nexport const getPackageVersions = async (input: string) => {\n  try {\n    const pkg = await getPackage(input);\n    const versions = Object.keys(pkg.versions);\n    const tags = pkg[\"dist-tags\"];\n    return { versions, tags };\n  } catch (e) {\n    console.warn(e);\n    throw e;\n  }\n};\n\n/**\n * Searches the npm registry for a package with matching names\n * \n * @param input package name to search for; it supports adding package versions \"@okikio/animate@1.0\", and will use that to resolve the package version\n * @returns resulting package info.\n */\nexport const resolveVersion = async (input: string) => {\n  try {\n    let { version: range } = getRegistryURL(input);\n    const versionsAndTags = await getPackageVersions(input);\n    if (versionsAndTags) {\n      const { versions, tags } = versionsAndTags;\n\n      if (range in tags) {\n        range = tags[range];\n      }\n\n      return versions.includes(range)\n        ? range\n        : maxSatisfying(versions, range) as string;\n    }\n  } catch (e) {\n    console.warn(e);\n    throw e;\n  }\n};\n/**\n * Searches the npm registry for a package with the same name, it then resolves the package version making sure it's valid, and give the appropriate package that matches the version set\n * \n * @param input package name to search for; it supports adding package versions \"@okikio/animate@1.0\", and will use that to resolve the package version\n * @returns resulting package info.\n */\nexport const getResolvedPackage = async (input: string) => {\n  try {\n    const { name } = getRegistryURL(input);\n    const version = await resolveVersion(input);\n\n    return await getPackageOfVersion(`${name}@${version}`);\n  } catch (e) {\n    console.warn(e);\n    throw e;\n  }\n};","// https://deno.land/x/brotli@v0.1.4/mod.ts\n// Copyright 2020-present the denosaurs team. All rights reserved. MIT license.\n// import init, {\n//     source,\n//     compress as wasm_compress,\n//     decompress as wasm_decompress,\n// } from \"./wasm\";\n\nconst initialized = false;\nlet initWASM: typeof import(\"./wasm\");\nexport const getWASM = async () => {\n  if (initWASM) return initWASM;\n\n  const wasm = await import(\"./wasm\");\n  const { default: init, source } = wasm;\n    \n  if (!initialized) await init(await source());\n  return (initWASM = wasm);\n};\n\n/**\n * Compress a byte array.\n *\n * ```typescript\n * import { compress } from \"https://deno.land/x/brotli/mod.ts\";\n * const text = new TextEncoder().encode(\"X\".repeat(64));\n * console.log(text.length);                   // 64 Bytes\n * console.log(compress(text).length);         // 10 Bytes\n * ```\n *\n * @param input Input data.\n * @param bufferSize Read buffer size\n * @param quality Controls the compression-speed vs compression-\n * density tradeoff. The higher the quality, the slower the compression.\n * @param lgwin Base 2 logarithm of the sliding window size.\n */\nexport async function compress(\n  input: Uint8Array,\n  bufferSize = 4096,\n  quality = 6,\n  lgwin = 22,\n): Promise<Uint8Array> {\n  const { compress } = await getWASM();\n  return compress(input, bufferSize, quality, lgwin);\n}\n\n/**\n * Decompress a byte array.\n *\n * ```typescript\n * import { decompress } from \"https://deno.land/x/brotli/mod.ts\";\n * const compressed = Uint8Array.from([ 27, 63, 0, 0, 36, 176, 226, 153, 64, 18 ]);\n * console.log(compressed.length);             // 10 Bytes\n * console.log(decompress(compressed).length); // 64 Bytes\n * ```\n *\n * @param input Input data.\n * @param bufferSize Read buffer size\n */\nexport async function decompress(\n  input: Uint8Array,\n  bufferSize = 4096,\n): Promise<Uint8Array> {\n  const { decompress } = await getWASM();\n  return decompress(input, bufferSize);\n}","// https://deno.land/x/denoflate@1.2.1/mod.ts\n// export {\n//   deflate,\n//   inflate,\n//   gzip,\n//   gunzip,\n//   zlib,\n//   unzlib\n// } from \"./pkg/denoflate.js\";\n\nimport type { InitOutput } from \"./pkg/denoflate\";\n// import init from \"./pkg/denoflate.js\"; \n\n// @ts-ignore\n// import { wasm as WASM } from \"./pkg/denoflate_bg.wasm.js\";\n// import { source } from \"./pkg/wasm.ts\";\n\nlet wasm: InitOutput;\nlet initWASM: typeof import(\"./pkg/denoflate.js\");\nexport const getWASM = async (src?: Uint8Array) => {\n  if (initWASM) return initWASM;\n\n  const _exports = await import(\"./pkg/denoflate.js\");\n  const { default: init } = _exports;\n\n  const { wasm: WASM } = (await import(\"./pkg/denoflate_bg.wasm.js\")) as unknown as { wasm: () => Promise<Uint8Array> };\n  (wasm = await init(src ?? await WASM()));\n\n  return (initWASM = _exports);\n}\n\nexport async function deflate(input: Uint8Array, compression?: number) {\n  return (await getWASM()).deflate(input, compression);\n}\n\nexport async function inflate(input: Uint8Array) {\n  return (await getWASM()).inflate(input);\n}\n\nexport async function gzip(input: Uint8Array, compression?: number) {\n  return (await getWASM()).gzip(input, compression);\n}\n\nexport async function gunzip(input: Uint8Array) {\n  return (await getWASM()).gunzip(input);\n}\n\nexport async function zlib(input: Uint8Array, compression?: number) {\n  return (await getWASM()).zlib(input, compression);\n}\n\nexport async function unzlib(input: Uint8Array) {\n  return (await getWASM()).unzlib(input);\n}\n\nexport default wasm;\n","// https://deno.land/x/lz4@v0.1.2/mod.ts\n// Copyright 2020-present the denosaurs team. All rights reserved. MIT license.\n\n// import init, {\n//     source,\n//     lz4_compress,\n//     lz4_decompress,\n// } from \"./wasm\";\n\nconst initialized = false;\nlet initWASM: typeof import(\"./wasm\");\nexport const getWASM = async () => {\n  if (initWASM) return initWASM;\n\n  const wasm = await import(\"./wasm\");\n  const { default: init, source } = wasm;\n    \n  if (!initialized) await init(await source());\n  return (initWASM = wasm);\n};\n\n/**\n * Compress a byte array using lz4.\n *\n * ```typescript\n * import { compress } from \"https://deno.land/x/lz4/mod.ts\";\n * const text = new TextEncoder().encode(\"X\".repeat(64));\n * console.log(text.length);                   // 64 Bytes\n * console.log(compress(text).length);         // 6  Bytes\n * ```\n *\n * @param input Input data.\n */\nexport async function compress(input: Uint8Array): Promise<Uint8Array> {\n  const { lz4_compress } = await getWASM();\n  return lz4_compress(input);\n}\n\n/**\n * Decompress a byte array using lz4.\n *\n * ```typescript\n * import { decompress } from \"https://deno.land/x/lz4/mod.ts\";\n * const compressed = Uint8Array.from([ 31, 88, 1, 0, 44, 0 ]);\n * console.log(compressed.length);             // 6 Bytes\n * console.log(decompress(compressed).length); // 64 Bytes\n * ```\n *\n * @param input Input data.\n */\nexport async function decompress(input: Uint8Array): Promise<Uint8Array> {\n  const { lz4_decompress } = await getWASM();\n  return lz4_decompress(input);\n}","// https://deno.land/std@0.61.0/encoding/base64.ts\n// Copyright 2018-2020 the Deno authors. All rights reserved. MIT license.\n\n/**\n * Converts given data with base64 encoding\n * @param data input to encode\n */\nexport function encode(data: string | ArrayBuffer): string {\n  if (typeof data === \"string\") {\n    return btoa(data);\n  } else {\n    const d = new Uint8Array(data);\n    let dataString = \"\";\n    for (let i = 0; i < d.length; ++i) {\n      dataString += String.fromCharCode(d[i]);\n    }\n\n    return btoa(dataString);\n  }\n}\n\n/**\n * Converts given base64 encoded data back to original\n * @param data input to decode\n */\nexport function decode(data: string): ArrayBuffer {\n  const binaryString = decodeString(data);\n  const binary = new Uint8Array(binaryString.length);\n  for (let i = 0; i < binary.length; ++i) {\n    binary[i] = binaryString.charCodeAt(i);\n  }\n\n  return binary.buffer;\n}\n\n/**\n * Decodes data assuming the output is in string type\n * @param data input to decode\n */\nexport function decodeString(data: string): string {\n  return atob(data);\n}"],"names":["PLATFORM_AUTO","o","n","b","p","e","t","h","c","y","r","i","a","l","s","u","f","EVENTS_OPTS","EVENTS","EventEmitter","STATE","getState","name","setState","value","createState","initial","result","getEsbuild","platform","version","init","opts","esbuild","ESBUILD_WASM","error","CHAR_DOT","CHAR_FORWARD_SLASH","SEP","SEP_PATTERN","assertPath","path","isPosixPathSeparator","code","normalizeString","allowAboveRoot","separator","isPathSeparator","res","lastSegmentLength","lastSlash","dots","len","lastSlashIndex","_format","sep","pathObject","dir","base","WHITESPACE_ENCODINGS","encodeWhitespace","string","delimiter","resolve","pathSegments","resolvedPath","resolvedAbsolute","Deno","normalize","isAbsolute","trailingSeparator","join","paths","joined","relative","from","to","fromStart","fromEnd","fromLen","toStart","toEnd","toLen","length","lastCommonSep","fromCode","toCode","out","toNamespacedPath","dirname","hasRoot","end","matchedSlash","basename","ext","start","extIdx","firstNonSlashEnd","extname","startDot","startPart","preDotState","format","parse","ret","fromFileUrl","url","toFileUrl","_posix","regExpEscapeChars","rangeEscapeChars","globToRegExp","glob","extended","globstarOption","os","caseInsensitive","sepMaybe","seps","globstar","wildcard","escapePrefix","newLength","regExpString","j","segment","groupStack","inRange","inEscape","endsWithSep","k","type","prevChar","numStars","nextChar","isGlob","str","chars","regex","match","idx","open","close","normalizeGlob","badParentPattern","joinGlobs","globs","posix","urlJoin","urlStr","args","isBareImport","importStr","RESOLVE_EXTENSIONS","inferLoader","VIRTUAL_FILESYSTEM_NAMESPACE","VIRTUAL_FS","events","state","config","FileSystem","build","encode","decode","buf","DEFAULT_CDN_HOST","getCDNStyle","getCDNOrigin","cdn","getPureImportPath","getCDNUrl","origin","EXTERNALS_NAMESPACE","EMPTY_EXPORT","PolyfillMap","PolyfillKeys","DeprecatedAPIs","ExternalPackages","isExternal","id","external","it","EXTERNAL","argPath","loop","exports","keys","tmp","bail","entry","condition","toName","resolveExports","pkg","options","browser","require","unsafe","conditions","target","allows","key","isSingle","legacy","fields","RE_SCOPED","RE_NON_SCOPED","parsePackageName","input","m","CACHE","CACHE_NAME","newRequest","cache","request","fetchOpts","networkResponse","clonedResponse","OPEN_CACHE","openCache","getRequest","permanent","response","cacheResponse","resolveImports","imports","CDN_NAMESPACE","CDN_RESOLVE","NPM_CDN","parsed","subpath","href","HTTP_NAMESPACE","devDependencies","dependencies","peerDependencies","deps","PACKAGE_JSON_URL","CDN","fetchPkg","err","fetchAssets","content","namespace","rgx","parentURL","promises","assetURL","asset","HTTP_RESOLVE","host","pathOrigin","HTTP","get","set","assets","suffix","exts","extLength","extPath","_assetResults","ALIAS_NAMESPACE","isAlias","aliases","aliasKeys","pkgDetails","ALIAS_RESOLVE","aliasPath","ALIAS","getResolvedPath","importer","getFile","file","setFile","ESCAPE_TO_COLOR","htmlEscape","AnsiBuffer","text","color","render","ansi","buffer","escape","createNotice","errors","kind","formatMessages","msg","BUILD_CONFIG","CONFIG","createConfig","initOpts","bundle","define","esbuildOpts","outputs","contents","asciMsgs","htmlMsgs","message","x","BYTE_UNITS","BIBYTE_UNITS","BIT_UNITS","BIBIT_UNITS","toLocaleString","number","locale","bytes","UNITS","isNegative","prefix","localeOptions","numberString","exponent","unit","COMPRESS_CONFIG","compress","inputs","quality","totalByteLength","acc","compressionMap","lz4_compress","getWASM","mod$1","mod$3","gzip","mod$2","compressedContent","totalCompressedSize","isObject","obj","isPrimitive","val","isValidKey","deepEqual","obj1","obj2","prop","deepDiff","bothAreArrays","diff","deepAssign","TRANSFORM_CONFIG","transform","debounce","func","wait","immediate","timeout","context","later","callNow","keyStrBase64","keyStrUriSafe","baseReverseDic","getBaseValue","alphabet","character","compressToBase64","_compress","decompressFromBase64","_decompress","index","compressToURL","decompressFromURL","uncompressed","decompress","compressed","bitsPerChar","getCharFromInt","contextData","contextDictionary","contextDictionaryToCreate","contextC","contextW","contextWc","contextEnlargeIn","contextDictSize","contextNumBits","contextDataVal","contextDataPosition","resetValue","getNextValue","dictionary","enlargeIn","dictSize","numBits","w","bits","resb","maxpower","power","data","SEMVER_SPEC_VERSION","MAX_LENGTH","MAX_SAFE_INTEGER","MAX_SAFE_COMPONENT_LENGTH","R","createToken","pattern","isGlobal","NUMERICIDENTIFIER","NUMERICIDENTIFIERLOOSE","NONNUMERICIDENTIFIER","PRERELEASEIDENTIFIER","PRERELEASEIDENTIFIERLOOSE","BUILDIDENTIFIER","MAINVERSION","MAINVERSIONLOOSE","BUILD","PRERELEASE","PRERELEASELOOSE","FULLPLAIN","LOOSEPLAIN","XRANGEIDENTIFIER","XRANGEIDENTIFIERLOOSE","GTLT","XRANGEPLAIN","XRANGEPLAINLOOSE","COERCE","LONETILDE","LONECARET","tokens","parseOptions","numeric","compareIdentifiers","anum","bnum","_a","_b","SemVer","num","other","ANY","Comparator","comp","optionsOrLoose","cacheLastAccessTime","cacheLimit","caretTrimReplace","tildeTrimReplace","comparatorTrimReplace","isNullSet","isAny","parseComparator","replaceCarets","replaceTildes","replaceXRanges","replaceStars","isX","replaceTilde","_","M","pr","replaceCaret","z","replaceXRange","gtlt","xM","xm","xp","anyX","replaceGTE0","hyphenReplace","incPr","$0","fM","fm","fp","fpr","fb","tM","tm","tp","tpr","tb","testSet","allowed","Range","range","first","comps","memoKey","loose","hr","rangeList","rangeMap","comparators","cacheValue","oldestKey","maxSatisfying","versions","max","maxSV","rangeObj","v","getRegistryURL","searchURL","packageVersionURL","packageURL","getPackages","getPackage","getPackageOfVersion","getPackageVersions","tags","resolveVersion","versionsAndTags","getResolvedPackage","initWASM","wasm","source","bufferSize","lgwin","src","_exports","WASM","deflate","compression","inflate","gunzip","zlib","unzlib","wasm$1","lz4_decompress","d","dataString","binaryString","decodeString","binary"],"mappings":"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"}