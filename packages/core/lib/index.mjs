var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp.call(b2, prop))
      __defNormalProp(a2, prop, b2[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b2)) {
      if (__propIsEnum.call(b2, prop))
        __defNormalProp(a2, prop, b2[prop]);
    }
  return a2;
};
var __spreadProps = (a2, b2) => __defProps(a2, __getOwnPropDescs(b2));
var __objRest = (source2, exclude) => {
  var target = {};
  for (var prop in source2)
    if (__hasOwnProp.call(source2, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source2[prop];
  if (source2 != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source2)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source2, prop))
        target[prop] = source2[prop];
    }
  return target;
};
const import_meta = {};
const isObject = (obj) => typeof obj === "object" && obj != null;
const isPrimitive = (val) => typeof val === "object" ? val === null : typeof val !== "function";
const isValidKey = (key) => {
  return key !== "__proto__" && key !== "constructor" && key !== "prototype";
};
const deepEqual = (obj1, obj2) => {
  if (obj1 === obj2) {
    return true;
  } else if (isObject(obj1) && isObject(obj2)) {
    if (Object.keys(obj1).length !== Object.keys(obj2).length) {
      return false;
    }
    for (var prop in obj1) {
      if (!deepEqual(obj1[prop], obj2[prop]))
        return false;
    }
    return true;
  }
};
const deepDiff = (obj1, obj2) => {
  let keys = Object.keys(obj2);
  let result = {};
  let i = 0;
  for (; i < keys.length; i++) {
    let key = keys[i];
    let value = obj2[key];
    if (key in obj1) {
      let bothAreArrays = Array.isArray(obj1[key]) && Array.isArray(value);
      if (obj1[key] == value) {
        continue;
      } else if (bothAreArrays) {
        if (!deepEqual(obj1[key], value))
          result[key] = value;
        else
          continue;
      } else if (isObject(obj1[key]) && isObject(value)) {
        let diff = deepDiff(obj1[key], value);
        if (Object.keys(diff).length)
          result[key] = diff;
      } else {
        result[key] = value;
      }
    } else {
      result[key] = value;
    }
  }
  return result;
};
/*!
 * Based on assign-deep <https://github.com/jonschlinkert/assign-deep>
 *
 * Copyright (c) 2017-present, Jon Schlinkert.
 * Released under the MIT License.
 */
const deepAssign = (target, ...args) => {
  let i = 0;
  if (isPrimitive(target))
    target = args[i++];
  if (!target)
    target = {};
  for (; i < args.length; i++) {
    if (isObject(args[i])) {
      for (const key of Object.keys(args[i])) {
        if (isValidKey(key)) {
          if (isObject(target[key]) && isObject(args[i][key])) {
            target[key] = deepAssign(Array.isArray(target[key]) ? [] : {}, target[key], args[i][key]);
          } else {
            target[key] = args[i][key];
          }
        }
      }
    }
  }
  return target;
};
const DEFAULT_CDN_HOST = "https://unpkg.com";
const getCDNStyle = (urlStr) => {
  if (/^(skypack|esm|esm\.sh|unpkg|jsdelivr|esm\.run)\:?/.test(urlStr) || /^https?:\/\/(cdn\.skypack\.dev|cdn\.esm\.sh|cdn\.jsdelivr\.net\/npm|unpkg\.com)/.test(urlStr))
    return "npm";
  else if (/^(jsdelivr\.gh|github)\:?/.test(urlStr) || /^https?:\/\/(cdn\.jsdelivr\.net\/gh|raw\.githubusercontent\.com)/.test(urlStr))
    return "github";
  else if (/^(deno)\:?/.test(urlStr) || /^https?:\/\/(deno\.land\/x)/.test(urlStr))
    return "deno";
  return "other";
};
const getCDNOrigin = (importStr, cdn = DEFAULT_CDN_HOST) => {
  if (/^skypack\:/.test(importStr))
    cdn = `https://cdn.skypack.dev`;
  else if (/^(esm\.sh|esm)\:/.test(importStr))
    cdn = `https://cdn.esm.sh`;
  else if (/^unpkg\:/.test(importStr))
    cdn = `https://unpkg.com`;
  else if (/^(jsdelivr|esm\.run)\:/.test(importStr))
    cdn = `https://cdn.jsdelivr.net/npm`;
  else if (/^(jsdelivr\.gh)\:/.test(importStr))
    cdn = `https://cdn.jsdelivr.net/gh`;
  else if (/^(deno)\:/.test(importStr))
    cdn = `https://deno.land/x`;
  else if (/^(github)\:/.test(importStr))
    cdn = `https://raw.githubusercontent.com`;
  return /\/$/.test(cdn) ? cdn : `${cdn}/`;
};
const getPureImportPath = (importStr) => importStr.replace(/^(skypack|esm|esm\.sh|unpkg|jsdelivr|jsdelivr\.gh|esm\.run|deno|github)\:/, "").replace(/^https?:\/\/(cdn\.skypack\.dev|cdn\.esm\.sh|cdn\.jsdelivr\.net\/npm|unpkg\.com|cdn\.jsdelivr\.net\/gh|raw\.githubusercontent\.com|deno\.land\/x)/, "").replace(/^\//, "");
const getCDNUrl = (importStr, cdn = DEFAULT_CDN_HOST) => {
  let origin = getCDNOrigin(importStr, cdn);
  let path2 = getPureImportPath(importStr);
  let url = new URL(path2, origin);
  return { import: importStr, path: path2, origin, cdn, url };
};
const EasyDefaultConfig = {
  "cdn": DEFAULT_CDN_HOST,
  "compression": "gzip",
  "analysis": false,
  "esbuild": {
    "target": ["esnext"],
    "format": "esm",
    "bundle": true,
    "minify": true,
    "treeShaking": true,
    "platform": "browser"
  }
};
const DefaultConfig = deepAssign({}, EasyDefaultConfig, {
  "esbuild": {
    "color": true,
    "globalName": "BundledCode",
    "logLevel": "info",
    "sourcemap": false,
    "incremental": false
  }
});
const ESCAPE_TO_COLOR = {
  "37": "dim",
  "31": "red",
  "32": "green",
  "34": "blue",
  "36": "cyan",
  "35": "magenta",
  "33": "yellow",
  "41;31": "red-bg-red",
  "41;97": "red-bg-white",
  "42;32": "green-bg-green",
  "42;97": "green-bg-white",
  "44;34": "blue-bg-blue",
  "44;97": "blue-bg-white",
  "46;36": "cyan-bg-cyan",
  "46;30": "cyan-bg-black",
  "45;35": "magenta-bg-magenta",
  "45;30": "magenta-bg-black",
  "43;33": "yellow-bg-yellow",
  "43;30": "yellow-bg-black"
};
function htmlEscape(string) {
  return string.replace(/\<br\>/g, "\n").replace(/\&/g, "&amp;").replace(/\"/g, "&quot;").replace(/\'/g, "&#39;").replace(/\</g, "&lt;").replace(/\>/g, "&gt;");
}
class AnsiBuffer {
  constructor() {
    this.result = "";
    this._stack = [];
    this._bold = false;
    this._underline = false;
    this._link = false;
  }
  text(text) {
    this.result += htmlEscape(text);
  }
  reset() {
    let close;
    while (close = this._stack.pop()) {
      this.result += close;
    }
  }
  bold() {
    if (!this._bold) {
      this._bold = true;
      this.result += "<strong>";
      this._stack.push("</strong>");
    }
  }
  underline() {
    if (!this._underline) {
      this._underline = true;
      this.result += "<ins>";
      this._stack.push("</ins>");
    }
  }
  last() {
    return this._stack[this._stack.length - 1];
  }
  color(color) {
    let close;
    while ((close = this.last()) === "</span>") {
      this._stack.pop();
      this.result += close;
    }
    this.result += `<span class="color-${color}">`;
    this._stack.push("</span>");
  }
  done() {
    this.reset();
    return this.result;
  }
}
function render(ansi) {
  ansi = ansi.trimEnd();
  let i = 0;
  const buffer = new AnsiBuffer();
  for (let m2 of ansi.matchAll(/\x1B\[([\d;]+)m/g)) {
    const escape = m2[1];
    buffer.text(ansi.slice(i, m2.index));
    i = m2.index + m2[0].length;
    if (escape === "0") {
      buffer.reset();
    } else if (escape === "1") {
      buffer.bold();
    } else if (escape === "4") {
      buffer.underline();
    } else if (ESCAPE_TO_COLOR[escape]) {
      buffer.color(ESCAPE_TO_COLOR[escape]);
    }
  }
  if (i < ansi.length) {
    buffer.text(ansi.slice(i));
  }
  return buffer.done();
}
const debounce = (func, wait = 300, immediate) => {
  let timeout;
  return function(...args) {
    let context = this;
    let later = () => {
      timeout = null;
      if (!immediate)
        func.apply(context, args);
    };
    let callNow = immediate && !timeout;
    clearTimeout(timeout);
    timeout = setTimeout(later, wait);
    if (callNow)
      func.apply(context, args);
  };
};
const encode = (str) => new TextEncoder().encode(str);
const decode = (buf) => new TextDecoder().decode(buf);
const CACHE = /* @__PURE__ */ new Map();
const CACHE_NAME = "EXTERNAL_FETCHES";
const newRequest = async (cache, request, fetchOpts) => {
  let networkResponse = await fetch(request, fetchOpts);
  let clonedResponse = networkResponse.clone();
  if ("caches" in globalThis)
    cache.put(request, clonedResponse);
  else
    CACHE.set(request, clonedResponse);
  return networkResponse;
};
const getRequest = async (url, permanent = false, fetchOpts) => {
  let request = new Request(url.toString());
  let response;
  let cache;
  let cacheResponse;
  if ("caches" in globalThis) {
    cache = await caches.open(CACHE_NAME);
    cacheResponse = await cache.match(request);
  } else {
    cacheResponse = CACHE.get(request);
  }
  response = cacheResponse;
  if (!cacheResponse)
    response = await newRequest(cache, request, fetchOpts);
  else if (!permanent)
    newRequest(cache, request, fetchOpts);
  return response.clone();
};
const CHAR_DOT = 46;
const CHAR_FORWARD_SLASH = 47;
const SEP = "/";
const SEP_PATTERN = /\/+/;
function assertPath(path2) {
  if (typeof path2 !== "string") {
    throw new TypeError(`Path must be a string. Received ${JSON.stringify(path2)}`);
  }
}
function isPosixPathSeparator(code) {
  return code === CHAR_FORWARD_SLASH;
}
function normalizeString(path2, allowAboveRoot, separator, isPathSeparator2) {
  let res = "";
  let lastSegmentLength = 0;
  let lastSlash = -1;
  let dots = 0;
  let code;
  for (let i = 0, len = path2.length; i <= len; ++i) {
    if (i < len)
      code = path2.charCodeAt(i);
    else if (isPathSeparator2(code))
      break;
    else
      code = CHAR_FORWARD_SLASH;
    if (isPathSeparator2(code)) {
      if (lastSlash === i - 1 || dots === 1)
        ;
      else if (lastSlash !== i - 1 && dots === 2) {
        if (res.length < 2 || lastSegmentLength !== 2 || res.charCodeAt(res.length - 1) !== CHAR_DOT || res.charCodeAt(res.length - 2) !== CHAR_DOT) {
          if (res.length > 2) {
            const lastSlashIndex = res.lastIndexOf(separator);
            if (lastSlashIndex === -1) {
              res = "";
              lastSegmentLength = 0;
            } else {
              res = res.slice(0, lastSlashIndex);
              lastSegmentLength = res.length - 1 - res.lastIndexOf(separator);
            }
            lastSlash = i;
            dots = 0;
            continue;
          } else if (res.length === 2 || res.length === 1) {
            res = "";
            lastSegmentLength = 0;
            lastSlash = i;
            dots = 0;
            continue;
          }
        }
        if (allowAboveRoot) {
          if (res.length > 0)
            res += `${separator}..`;
          else
            res = "..";
          lastSegmentLength = 2;
        }
      } else {
        if (res.length > 0)
          res += separator + path2.slice(lastSlash + 1, i);
        else
          res = path2.slice(lastSlash + 1, i);
        lastSegmentLength = i - lastSlash - 1;
      }
      lastSlash = i;
      dots = 0;
    } else if (code === CHAR_DOT && dots !== -1) {
      ++dots;
    } else {
      dots = -1;
    }
  }
  return res;
}
function _format(sep2, pathObject) {
  const dir = pathObject.dir || pathObject.root;
  const base = pathObject.base || (pathObject.name || "") + (pathObject.ext || "");
  if (!dir)
    return base;
  if (dir === pathObject.root)
    return dir + base;
  return dir + sep2 + base;
}
const WHITESPACE_ENCODINGS = {
  "	": "%09",
  "\n": "%0A",
  "\v": "%0B",
  "\f": "%0C",
  "\r": "%0D",
  " ": "%20"
};
function encodeWhitespace(string) {
  return string.replaceAll(/[\s]/g, (c2) => {
    var _a2;
    return (_a2 = WHITESPACE_ENCODINGS[c2]) != null ? _a2 : c2;
  });
}
const sep$1 = "/";
const delimiter$1 = ":";
function resolve$2(...pathSegments) {
  var _a2, _b;
  let resolvedPath = "";
  let resolvedAbsolute = false;
  for (let i = pathSegments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
    let path2;
    if (i >= 0)
      path2 = pathSegments[i];
    else {
      const { Deno } = globalThis;
      if (typeof (Deno == null ? void 0 : Deno.cwd) !== "function") {
        throw new TypeError("Resolved a relative path without a CWD.");
      }
      path2 = (_b = (_a2 = Deno == null ? void 0 : Deno.cwd) == null ? void 0 : _a2.call(Deno)) != null ? _b : "/";
    }
    assertPath(path2);
    if (path2.length === 0) {
      continue;
    }
    resolvedPath = `${path2}/${resolvedPath}`;
    resolvedAbsolute = path2.charCodeAt(0) === CHAR_FORWARD_SLASH;
  }
  resolvedPath = normalizeString(resolvedPath, !resolvedAbsolute, "/", isPosixPathSeparator);
  if (resolvedAbsolute) {
    if (resolvedPath.length > 0)
      return `/${resolvedPath}`;
    else
      return "/";
  } else if (resolvedPath.length > 0)
    return resolvedPath;
  else
    return ".";
}
function normalize$2(path2) {
  assertPath(path2);
  if (path2.length === 0)
    return ".";
  const isAbsolute2 = path2.charCodeAt(0) === CHAR_FORWARD_SLASH;
  const trailingSeparator = path2.charCodeAt(path2.length - 1) === CHAR_FORWARD_SLASH;
  path2 = normalizeString(path2, !isAbsolute2, "/", isPosixPathSeparator);
  if (path2.length === 0 && !isAbsolute2)
    path2 = ".";
  if (path2.length > 0 && trailingSeparator)
    path2 += "/";
  if (isAbsolute2)
    return `/${path2}`;
  return path2;
}
function isAbsolute$1(path2) {
  assertPath(path2);
  return path2.length > 0 && path2.charCodeAt(0) === CHAR_FORWARD_SLASH;
}
function join$2(...paths) {
  if (paths.length === 0)
    return ".";
  let joined;
  for (let i = 0, len = paths.length; i < len; ++i) {
    const path2 = paths[i];
    assertPath(path2);
    if (path2.length > 0) {
      if (!joined)
        joined = path2;
      else
        joined += `/${path2}`;
    }
  }
  if (!joined)
    return ".";
  return normalize$2(joined);
}
function relative$1(from, to2) {
  assertPath(from);
  assertPath(to2);
  if (from === to2)
    return "";
  from = resolve$2(from);
  to2 = resolve$2(to2);
  if (from === to2)
    return "";
  let fromStart = 1;
  const fromEnd = from.length;
  for (; fromStart < fromEnd; ++fromStart) {
    if (from.charCodeAt(fromStart) !== CHAR_FORWARD_SLASH)
      break;
  }
  const fromLen = fromEnd - fromStart;
  let toStart = 1;
  const toEnd = to2.length;
  for (; toStart < toEnd; ++toStart) {
    if (to2.charCodeAt(toStart) !== CHAR_FORWARD_SLASH)
      break;
  }
  const toLen = toEnd - toStart;
  const length = fromLen < toLen ? fromLen : toLen;
  let lastCommonSep = -1;
  let i = 0;
  for (; i <= length; ++i) {
    if (i === length) {
      if (toLen > length) {
        if (to2.charCodeAt(toStart + i) === CHAR_FORWARD_SLASH) {
          return to2.slice(toStart + i + 1);
        } else if (i === 0) {
          return to2.slice(toStart + i);
        }
      } else if (fromLen > length) {
        if (from.charCodeAt(fromStart + i) === CHAR_FORWARD_SLASH) {
          lastCommonSep = i;
        } else if (i === 0) {
          lastCommonSep = 0;
        }
      }
      break;
    }
    const fromCode = from.charCodeAt(fromStart + i);
    const toCode = to2.charCodeAt(toStart + i);
    if (fromCode !== toCode)
      break;
    else if (fromCode === CHAR_FORWARD_SLASH)
      lastCommonSep = i;
  }
  let out = "";
  for (i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i) {
    if (i === fromEnd || from.charCodeAt(i) === CHAR_FORWARD_SLASH) {
      if (out.length === 0)
        out += "..";
      else
        out += "/..";
    }
  }
  if (out.length > 0)
    return out + to2.slice(toStart + lastCommonSep);
  else {
    toStart += lastCommonSep;
    if (to2.charCodeAt(toStart) === CHAR_FORWARD_SLASH)
      ++toStart;
    return to2.slice(toStart);
  }
}
function toNamespacedPath$1(path2) {
  return path2;
}
function dirname$1(path2) {
  assertPath(path2);
  if (path2.length === 0)
    return ".";
  const hasRoot = path2.charCodeAt(0) === CHAR_FORWARD_SLASH;
  let end = -1;
  let matchedSlash = true;
  for (let i = path2.length - 1; i >= 1; --i) {
    if (path2.charCodeAt(i) === CHAR_FORWARD_SLASH) {
      if (!matchedSlash) {
        end = i;
        break;
      }
    } else {
      matchedSlash = false;
    }
  }
  if (end === -1)
    return hasRoot ? "/" : ".";
  if (hasRoot && end === 1)
    return "//";
  return path2.slice(0, end);
}
function basename$1(path2, ext = "") {
  if (ext !== void 0 && typeof ext !== "string") {
    throw new TypeError('"ext" argument must be a string');
  }
  assertPath(path2);
  let start = 0;
  let end = -1;
  let matchedSlash = true;
  let i;
  if (ext !== void 0 && ext.length > 0 && ext.length <= path2.length) {
    if (ext.length === path2.length && ext === path2)
      return "";
    let extIdx = ext.length - 1;
    let firstNonSlashEnd = -1;
    for (i = path2.length - 1; i >= 0; --i) {
      const code = path2.charCodeAt(i);
      if (code === CHAR_FORWARD_SLASH) {
        if (!matchedSlash) {
          start = i + 1;
          break;
        }
      } else {
        if (firstNonSlashEnd === -1) {
          matchedSlash = false;
          firstNonSlashEnd = i + 1;
        }
        if (extIdx >= 0) {
          if (code === ext.charCodeAt(extIdx)) {
            if (--extIdx === -1) {
              end = i;
            }
          } else {
            extIdx = -1;
            end = firstNonSlashEnd;
          }
        }
      }
    }
    if (start === end)
      end = firstNonSlashEnd;
    else if (end === -1)
      end = path2.length;
    return path2.slice(start, end);
  } else {
    for (i = path2.length - 1; i >= 0; --i) {
      if (path2.charCodeAt(i) === CHAR_FORWARD_SLASH) {
        if (!matchedSlash) {
          start = i + 1;
          break;
        }
      } else if (end === -1) {
        matchedSlash = false;
        end = i + 1;
      }
    }
    if (end === -1)
      return "";
    return path2.slice(start, end);
  }
}
function extname$1(path2) {
  assertPath(path2);
  let startDot = -1;
  let startPart = 0;
  let end = -1;
  let matchedSlash = true;
  let preDotState = 0;
  for (let i = path2.length - 1; i >= 0; --i) {
    const code = path2.charCodeAt(i);
    if (code === CHAR_FORWARD_SLASH) {
      if (!matchedSlash) {
        startPart = i + 1;
        break;
      }
      continue;
    }
    if (end === -1) {
      matchedSlash = false;
      end = i + 1;
    }
    if (code === CHAR_DOT) {
      if (startDot === -1)
        startDot = i;
      else if (preDotState !== 1)
        preDotState = 1;
    } else if (startDot !== -1) {
      preDotState = -1;
    }
  }
  if (startDot === -1 || end === -1 || preDotState === 0 || preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
    return "";
  }
  return path2.slice(startDot, end);
}
function format$1(pathObject) {
  if (pathObject === null || typeof pathObject !== "object") {
    throw new TypeError(`The "pathObject" argument must be of type Object. Received type ${typeof pathObject}`);
  }
  return _format("/", pathObject);
}
function parse$2(path2) {
  assertPath(path2);
  const ret = { root: "", dir: "", base: "", ext: "", name: "" };
  if (path2.length === 0)
    return ret;
  const isAbsolute2 = path2.charCodeAt(0) === CHAR_FORWARD_SLASH;
  let start;
  if (isAbsolute2) {
    ret.root = "/";
    start = 1;
  } else {
    start = 0;
  }
  let startDot = -1;
  let startPart = 0;
  let end = -1;
  let matchedSlash = true;
  let i = path2.length - 1;
  let preDotState = 0;
  for (; i >= start; --i) {
    const code = path2.charCodeAt(i);
    if (code === CHAR_FORWARD_SLASH) {
      if (!matchedSlash) {
        startPart = i + 1;
        break;
      }
      continue;
    }
    if (end === -1) {
      matchedSlash = false;
      end = i + 1;
    }
    if (code === CHAR_DOT) {
      if (startDot === -1)
        startDot = i;
      else if (preDotState !== 1)
        preDotState = 1;
    } else if (startDot !== -1) {
      preDotState = -1;
    }
  }
  if (startDot === -1 || end === -1 || preDotState === 0 || preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
    if (end !== -1) {
      if (startPart === 0 && isAbsolute2) {
        ret.base = ret.name = path2.slice(1, end);
      } else {
        ret.base = ret.name = path2.slice(startPart, end);
      }
    }
  } else {
    if (startPart === 0 && isAbsolute2) {
      ret.name = path2.slice(1, startDot);
      ret.base = path2.slice(1, end);
    } else {
      ret.name = path2.slice(startPart, startDot);
      ret.base = path2.slice(startPart, end);
    }
    ret.ext = path2.slice(startDot, end);
  }
  if (startPart > 0)
    ret.dir = path2.slice(0, startPart - 1);
  else if (isAbsolute2)
    ret.dir = "/";
  return ret;
}
function fromFileUrl$1(url) {
  url = url instanceof URL ? url : new URL(url);
  if (url.protocol != "file:") {
    throw new TypeError("Must be a file URL.");
  }
  return decodeURIComponent(url.pathname.replace(/%(?![0-9A-Fa-f]{2})/g, "%25"));
}
function toFileUrl$1(path2) {
  if (!isAbsolute$1(path2)) {
    throw new TypeError("Must be an absolute path.");
  }
  const url = new URL("file:///");
  url.pathname = encodeWhitespace(path2.replace(/%/g, "%25").replace(/\\/g, "%5C"));
  return url;
}
var _posix = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  sep: sep$1,
  delimiter: delimiter$1,
  resolve: resolve$2,
  normalize: normalize$2,
  isAbsolute: isAbsolute$1,
  join: join$2,
  relative: relative$1,
  toNamespacedPath: toNamespacedPath$1,
  dirname: dirname$1,
  basename: basename$1,
  extname: extname$1,
  format: format$1,
  parse: parse$2,
  fromFileUrl: fromFileUrl$1,
  toFileUrl: toFileUrl$1
}, Symbol.toStringTag, { value: "Module" }));
const path$1 = _posix;
const { join: join$1, normalize: normalize$1 } = path$1;
const regExpEscapeChars = [
  "!",
  "$",
  "(",
  ")",
  "*",
  "+",
  ".",
  "=",
  "?",
  "[",
  "\\",
  "^",
  "{",
  "|"
];
const rangeEscapeChars = ["-", "\\", "]"];
function globToRegExp(glob, {
  extended = true,
  globstar: globstarOption = true,
  os: os2 = "linux",
  caseInsensitive = false
} = {}) {
  if (glob == "") {
    return /(?!)/;
  }
  const sep2 = os2 == "windows" ? "(?:\\\\|/)+" : "/+";
  const sepMaybe = os2 == "windows" ? "(?:\\\\|/)*" : "/*";
  const seps = os2 == "windows" ? ["\\", "/"] : ["/"];
  const globstar = os2 == "windows" ? "(?:[^\\\\/]*(?:\\\\|/|$)+)*" : "(?:[^/]*(?:/|$)+)*";
  const wildcard = os2 == "windows" ? "[^\\\\/]*" : "[^/]*";
  const escapePrefix = os2 == "windows" ? "`" : "\\";
  let newLength = glob.length;
  for (; newLength > 1 && seps.includes(glob[newLength - 1]); newLength--)
    ;
  glob = glob.slice(0, newLength);
  let regExpString = "";
  for (let j2 = 0; j2 < glob.length; ) {
    let segment = "";
    const groupStack = [];
    let inRange = false;
    let inEscape = false;
    let endsWithSep = false;
    let i = j2;
    for (; i < glob.length && !seps.includes(glob[i]); i++) {
      if (inEscape) {
        inEscape = false;
        const escapeChars = inRange ? rangeEscapeChars : regExpEscapeChars;
        segment += escapeChars.includes(glob[i]) ? `\\${glob[i]}` : glob[i];
        continue;
      }
      if (glob[i] == escapePrefix) {
        inEscape = true;
        continue;
      }
      if (glob[i] == "[") {
        if (!inRange) {
          inRange = true;
          segment += "[";
          if (glob[i + 1] == "!") {
            i++;
            segment += "^";
          } else if (glob[i + 1] == "^") {
            i++;
            segment += "\\^";
          }
          continue;
        } else if (glob[i + 1] == ":") {
          let k2 = i + 1;
          let value = "";
          while (glob[k2 + 1] != null && glob[k2 + 1] != ":") {
            value += glob[k2 + 1];
            k2++;
          }
          if (glob[k2 + 1] == ":" && glob[k2 + 2] == "]") {
            i = k2 + 2;
            if (value == "alnum")
              segment += "\\dA-Za-z";
            else if (value == "alpha")
              segment += "A-Za-z";
            else if (value == "ascii")
              segment += "\0-\x7F";
            else if (value == "blank")
              segment += "	 ";
            else if (value == "cntrl")
              segment += "\0-\x7F";
            else if (value == "digit")
              segment += "\\d";
            else if (value == "graph")
              segment += "!-~";
            else if (value == "lower")
              segment += "a-z";
            else if (value == "print")
              segment += " -~";
            else if (value == "punct") {
              segment += `!"#$%&'()*+,\\-./:;<=>?@[\\\\\\]^_\u2018{|}~`;
            } else if (value == "space")
              segment += "\\s\v";
            else if (value == "upper")
              segment += "A-Z";
            else if (value == "word")
              segment += "\\w";
            else if (value == "xdigit")
              segment += "\\dA-Fa-f";
            continue;
          }
        }
      }
      if (glob[i] == "]" && inRange) {
        inRange = false;
        segment += "]";
        continue;
      }
      if (inRange) {
        if (glob[i] == "\\") {
          segment += `\\\\`;
        } else {
          segment += glob[i];
        }
        continue;
      }
      if (glob[i] == ")" && groupStack.length > 0 && groupStack[groupStack.length - 1] != "BRACE") {
        segment += ")";
        const type = groupStack.pop();
        if (type == "!") {
          segment += wildcard;
        } else if (type != "@") {
          segment += type;
        }
        continue;
      }
      if (glob[i] == "|" && groupStack.length > 0 && groupStack[groupStack.length - 1] != "BRACE") {
        segment += "|";
        continue;
      }
      if (glob[i] == "+" && extended && glob[i + 1] == "(") {
        i++;
        groupStack.push("+");
        segment += "(?:";
        continue;
      }
      if (glob[i] == "@" && extended && glob[i + 1] == "(") {
        i++;
        groupStack.push("@");
        segment += "(?:";
        continue;
      }
      if (glob[i] == "?") {
        if (extended && glob[i + 1] == "(") {
          i++;
          groupStack.push("?");
          segment += "(?:";
        } else {
          segment += ".";
        }
        continue;
      }
      if (glob[i] == "!" && extended && glob[i + 1] == "(") {
        i++;
        groupStack.push("!");
        segment += "(?!";
        continue;
      }
      if (glob[i] == "{") {
        groupStack.push("BRACE");
        segment += "(?:";
        continue;
      }
      if (glob[i] == "}" && groupStack[groupStack.length - 1] == "BRACE") {
        groupStack.pop();
        segment += ")";
        continue;
      }
      if (glob[i] == "," && groupStack[groupStack.length - 1] == "BRACE") {
        segment += "|";
        continue;
      }
      if (glob[i] == "*") {
        if (extended && glob[i + 1] == "(") {
          i++;
          groupStack.push("*");
          segment += "(?:";
        } else {
          const prevChar = glob[i - 1];
          let numStars = 1;
          while (glob[i + 1] == "*") {
            i++;
            numStars++;
          }
          const nextChar = glob[i + 1];
          if (globstarOption && numStars == 2 && [...seps, void 0].includes(prevChar) && [...seps, void 0].includes(nextChar)) {
            segment += globstar;
            endsWithSep = true;
          } else {
            segment += wildcard;
          }
        }
        continue;
      }
      segment += regExpEscapeChars.includes(glob[i]) ? `\\${glob[i]}` : glob[i];
    }
    if (groupStack.length > 0 || inRange || inEscape) {
      segment = "";
      for (const c2 of glob.slice(j2, i)) {
        segment += regExpEscapeChars.includes(c2) ? `\\${c2}` : c2;
        endsWithSep = false;
      }
    }
    regExpString += segment;
    if (!endsWithSep) {
      regExpString += i < glob.length ? sep2 : sepMaybe;
      endsWithSep = true;
    }
    while (seps.includes(glob[i]))
      i++;
    if (!(i > j2)) {
      throw new Error("Assertion failure: i > j (potential infinite loop)");
    }
    j2 = i;
  }
  regExpString = `^${regExpString}$`;
  return new RegExp(regExpString, caseInsensitive ? "i" : "");
}
function isGlob(str) {
  const chars = { "{": "}", "(": ")", "[": "]" };
  const regex = /\\(.)|(^!|\*|\?|[\].+)]\?|\[[^\\\]]+\]|\{[^\\}]+\}|\(\?[:!=][^\\)]+\)|\([^|]+\|[^\\)]+\))/;
  if (str === "") {
    return false;
  }
  let match;
  while (match = regex.exec(str)) {
    if (match[2])
      return true;
    let idx = match.index + match[0].length;
    const open = match[1];
    const close = open ? chars[open] : null;
    if (open && close) {
      const n2 = str.indexOf(close, idx);
      if (n2 !== -1) {
        idx = n2 + 1;
      }
    }
    str = str.slice(idx);
  }
  return false;
}
function normalizeGlob(glob, { globstar = false } = {}) {
  if (glob.match(/\0/g)) {
    throw new Error(`Glob contains invalid characters: "${glob}"`);
  }
  if (!globstar) {
    return normalize$1(glob);
  }
  const s = SEP_PATTERN.source;
  const badParentPattern = new RegExp(`(?<=(${s}|^)\\*\\*${s})\\.\\.(?=${s}|$)`, "g");
  return normalize$1(glob.replace(badParentPattern, "\0")).replace(/\0/g, "..");
}
function joinGlobs(globs, { extended = true, globstar = false } = {}) {
  if (!globstar || globs.length == 0) {
    return join$1(...globs);
  }
  if (globs.length === 0)
    return ".";
  let joined;
  for (const glob of globs) {
    const path2 = glob;
    if (path2.length > 0) {
      if (!joined)
        joined = path2;
      else
        joined += `${SEP}${path2}`;
    }
  }
  if (!joined)
    return ".";
  return normalizeGlob(joined, { extended, globstar });
}
const path = _posix;
const posix = _posix;
const {
  basename,
  delimiter,
  dirname,
  extname,
  format,
  fromFileUrl,
  isAbsolute,
  join,
  normalize,
  parse: parse$1,
  relative,
  resolve: resolve$1,
  sep,
  toFileUrl,
  toNamespacedPath
} = path;
var mod$3 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  posix,
  basename,
  delimiter,
  dirname,
  extname,
  format,
  fromFileUrl,
  isAbsolute,
  join,
  normalize,
  parse: parse$1,
  relative,
  resolve: resolve$1,
  sep,
  toFileUrl,
  toNamespacedPath,
  SEP,
  SEP_PATTERN,
  globToRegExp,
  isGlob,
  normalizeGlob,
  joinGlobs
}, Symbol.toStringTag, { value: "Module" }));
const FileSystem = /* @__PURE__ */ new Map();
const getResolvedPath = (path2, importer) => {
  let resolvedPath = path2;
  if (importer && path2.startsWith("."))
    resolvedPath = resolve$1(dirname(importer), path2);
  if (FileSystem.has(resolvedPath))
    return resolvedPath;
  throw `File "${resolvedPath}" does not exist`;
};
const getFile = (path2, type = "buffer", importer) => {
  let resolvedPath = getResolvedPath(path2, importer);
  if (FileSystem.has(resolvedPath)) {
    let file = FileSystem.get(resolvedPath);
    return type == "string" ? decode(file) : file;
  }
};
const setFile = (path2, content, importer) => {
  let resolvedPath = path2;
  if (importer && path2.startsWith("."))
    resolvedPath = resolve$1(dirname(importer), path2);
  try {
    FileSystem.set(resolvedPath, content instanceof Uint8Array ? content : encode(content));
  } catch (e) {
    throw `Error occurred while writing to "${resolvedPath}"`;
  }
};
const urlJoin = (urlStr, ...args) => {
  const url = new URL(urlStr);
  url.pathname = encodeWhitespace(join(url.pathname, ...args).replace(/%/g, "%25").replace(/\\/g, "%5C"));
  return url.toString();
};
const isBareImport = (importStr) => {
  return /^(?!\.).*/.test(importStr) && !isAbsolute(importStr);
};
const RESOLVE_EXTENSIONS = [".tsx", ".ts", ".jsx", ".js", ".css", ".json"];
const inferLoader = (urlStr) => {
  const ext = extname(urlStr);
  if (RESOLVE_EXTENSIONS.includes(ext))
    return (/\.js(x)?$/.test(ext) ? ext.replace(/^\.js/, ".ts") : ext).slice(1);
  if (ext === ".mjs" || ext === ".cjs")
    return "ts";
  if (ext === ".mts" || ext === ".cts")
    return "ts";
  if (ext == ".scss")
    return "css";
  if (ext == ".png" || ext == ".jpeg" || ext == ".ttf")
    return "dataurl";
  if (ext == ".svg" || ext == ".html" || ext == ".txt")
    return "text";
  if (ext == ".wasm")
    return "file";
  return ext.length ? "text" : "ts";
};
var y$1 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+-$", x$1 = {};
function M$1(r2, s) {
  if (!x$1[r2]) {
    x$1[r2] = {};
    for (let f2 = 0; f2 < r2.length; f2++)
      x$1[r2][r2.charAt(f2)] = f2;
  }
  return x$1[r2][s];
}
function k$1(r2) {
  return r2 == null ? "" : r2 == "" ? null : (r2 = r2.replaceAll(" ", "+"), A$2(r2.length, 32, (s) => M$1(y$1, r2.charAt(s))));
}
function A$2(r2, s, f2) {
  let p2 = [], h2 = 4, i = 4, w2 = 3, o2 = "", g2 = [], u2, d2, l2, a2, c2, e, t, n2 = { val: f2(0), position: s, index: 1 };
  for (u2 = 0; u2 < 3; u2 += 1)
    p2[u2] = u2;
  for (l2 = 0, c2 = Math.pow(2, 2), e = 1; e != c2; )
    a2 = n2.val & n2.position, n2.position >>= 1, n2.position == 0 && (n2.position = s, n2.val = f2(n2.index++)), l2 |= (a2 > 0 ? 1 : 0) * e, e <<= 1;
  switch (l2) {
    case 0:
      for (l2 = 0, c2 = Math.pow(2, 8), e = 1; e != c2; )
        a2 = n2.val & n2.position, n2.position >>= 1, n2.position == 0 && (n2.position = s, n2.val = f2(n2.index++)), l2 |= (a2 > 0 ? 1 : 0) * e, e <<= 1;
      t = String.fromCharCode(l2);
      break;
    case 1:
      for (l2 = 0, c2 = Math.pow(2, 16), e = 1; e != c2; )
        a2 = n2.val & n2.position, n2.position >>= 1, n2.position == 0 && (n2.position = s, n2.val = f2(n2.index++)), l2 |= (a2 > 0 ? 1 : 0) * e, e <<= 1;
      t = String.fromCharCode(l2);
      break;
    case 2:
      return "";
  }
  for (p2[3] = t, d2 = t, g2.push(t); ; ) {
    if (n2.index > r2)
      return "";
    for (l2 = 0, c2 = Math.pow(2, w2), e = 1; e != c2; )
      a2 = n2.val & n2.position, n2.position >>= 1, n2.position == 0 && (n2.position = s, n2.val = f2(n2.index++)), l2 |= (a2 > 0 ? 1 : 0) * e, e <<= 1;
    switch (t = l2) {
      case 0:
        for (l2 = 0, c2 = Math.pow(2, 8), e = 1; e != c2; )
          a2 = n2.val & n2.position, n2.position >>= 1, n2.position == 0 && (n2.position = s, n2.val = f2(n2.index++)), l2 |= (a2 > 0 ? 1 : 0) * e, e <<= 1;
        p2[i++] = String.fromCharCode(l2), t = i - 1, h2--;
        break;
      case 1:
        for (l2 = 0, c2 = Math.pow(2, 16), e = 1; e != c2; )
          a2 = n2.val & n2.position, n2.position >>= 1, n2.position == 0 && (n2.position = s, n2.val = f2(n2.index++)), l2 |= (a2 > 0 ? 1 : 0) * e, e <<= 1;
        p2[i++] = String.fromCharCode(l2), t = i - 1, h2--;
        break;
      case 2:
        return g2.join("");
    }
    if (h2 == 0 && (h2 = Math.pow(2, w2), w2++), p2[t])
      o2 = p2[t];
    else if (t === i && typeof d2 == "string")
      o2 = d2 + d2.charAt(0);
    else
      return null;
    g2.push(o2), p2[i++] = d2 + o2.charAt(0), h2--, d2 = o2, h2 == 0 && (h2 = Math.pow(2, w2), w2++);
  }
}
const parseTreeshakeExports = (str) => (str != null ? str : "").split(/\],/).map((str2) => str2.replace(/\[|\]/g, ""));
const parseShareQuery = (shareURL) => {
  try {
    const searchParams = shareURL.searchParams;
    let result = "";
    let query = searchParams.get("query") || searchParams.get("q");
    let treeshake2 = searchParams.get("treeshake");
    if (query) {
      let queryArr = query.trim().split(",");
      let treeshakeArr = parseTreeshakeExports((treeshake2 != null ? treeshake2 : "").trim());
      result += "// Click Build for the Bundled, Minified & Compressed package size\n" + queryArr.map((q2, i) => {
        let treeshakeExports = treeshakeArr[i] && treeshakeArr[i].trim() !== "*" ? treeshakeArr[i].trim().split(",").join(", ") : "*";
        let [
          ,
          ,
          declaration = "export",
          module
        ] = /^(\((.*)\))?(.*)/.exec(q2);
        return `${declaration} ${treeshakeExports} from ${JSON.stringify(module)};`;
      }).join("\n");
    }
    let share = searchParams.get("share");
    if (share)
      result += "\n" + k$1(share.trim());
    let plaintext = searchParams.get("text");
    if (plaintext) {
      result += "\n" + JSON.parse(/^["']/.test(plaintext) && /["']$/.test(plaintext) ? plaintext : JSON.stringify("" + plaintext).replace(/\\\\/g, "\\"));
    }
    return result.trim();
  } catch (e) {
  }
};
const parseConfig = (shareURL) => {
  var _a2;
  try {
    const searchParams = shareURL.searchParams;
    const config = (_a2 = searchParams.get("config")) != null ? _a2 : "{}";
    return deepAssign({}, EasyDefaultConfig, JSON.parse(config ? config : "{}"));
  } catch (e) {
  }
};
var RE_SCOPED = /^(@[^\/]+\/[^@\/]+)(?:@([^\/]+))?(\/.*)?$/;
var RE_NON_SCOPED = /^([^@\/]+)(?:@([^\/]+))?(\/.*)?$/;
function parse(input) {
  const m2 = RE_SCOPED.exec(input) || RE_NON_SCOPED.exec(input);
  if (!m2) {
    throw new Error(`[parse-package-name] invalid package name: ${input}`);
  }
  return {
    name: m2[1] || "",
    version: m2[2] || "latest",
    path: m2[3] || ""
  };
}
const getRegistryURL = (input) => {
  const host = "https://registry.npmjs.com";
  let { name, version, path: path2 } = parse(input);
  let searchURL = `${host}/-/v1/search?text=${encodeURIComponent(name)}&popularity=0.5&size=30`;
  let packageURL = `${host}/${name}/${version}`;
  return { searchURL, packageURL, version, name, path: path2 };
};
const getPackages = async (input) => {
  let { searchURL } = getRegistryURL(input);
  let result;
  try {
    let response = await getRequest(searchURL, false);
    result = await response.json();
  } catch (e) {
    console.warn(e);
    throw e;
  }
  let packages = result == null ? void 0 : result.objects;
  return { packages, info: result };
};
const getPackage = async (input) => {
  let { packageURL } = getRegistryURL(input);
  let result;
  try {
    let response = await getRequest(packageURL, false);
    result = await response.json();
  } catch (e) {
    console.warn(e);
    throw e;
  }
  return result;
};
function loop$1(imports, keys) {
  if (typeof imports === "string") {
    return imports;
  }
  if (imports) {
    let idx, tmp;
    if (Array.isArray(imports)) {
      for (idx = 0; idx < imports.length; idx++) {
        if (tmp = loop$1(imports[idx], keys))
          return tmp;
      }
    } else {
      for (idx in imports) {
        if (keys.has(idx)) {
          return loop$1(imports[idx], keys);
        }
      }
    }
  }
}
function bail$1(name, entry, condition) {
  throw new Error(condition ? `No known conditions for "${entry}" entry in "${name}" package` : `Missing "${entry}" import in "${name}" package`);
}
function toName$1(name, entry) {
  return entry === name ? "." : entry[0] === "." ? entry : entry.replace(new RegExp("^" + name + "/"), "./");
}
function resolveImports(pkg, entry = ".", options = {}) {
  let { name, imports } = pkg;
  if (imports) {
    let { browser, require: require2, unsafe, conditions = [] } = options;
    let target = toName$1(name, entry);
    if (typeof imports === "string") {
      return target === "#" ? imports : bail$1(name, target);
    }
    let allows = /* @__PURE__ */ new Set(["default", ...conditions]);
    unsafe || allows.add(require2 ? "require" : "import");
    unsafe || allows.add(browser ? "browser" : "node");
    let key, tmp, isSingle = false;
    for (key in imports) {
      isSingle = key[0] !== "#";
      break;
    }
    if (isSingle) {
      return target === "#" ? loop$1(imports, allows) || bail$1(name, target, 1) : bail$1(name, target);
    }
    if (tmp = imports[target]) {
      return loop$1(tmp, allows) || bail$1(name, target, 1);
    }
    for (key in imports) {
      tmp = key[key.length - 1];
      if (tmp === "/" && target.startsWith(key)) {
        return (tmp = loop$1(imports[key], allows)) ? tmp + target.substring(key.length) : bail$1(name, target, 1);
      }
      if (tmp === "*" && target.startsWith(key.slice(0, -1))) {
        if (target.substring(key.length - 1).length > 0) {
          return (tmp = loop$1(imports[key], allows)) ? tmp.replace("*", target.substring(key.length - 1)) : bail$1(name, target, 1);
        }
      }
    }
    return bail$1(name, target);
  }
}
/*
  @license
	Rollup.js v2.75.4
	Tue, 31 May 2022 11:26:29 GMT - commit 0409bf0d8859a43f2d5d40dc23ebf74afadb83f7

	https://github.com/rollup/rollup

	Released under the MIT License.
*/
for (var e = "2.75.4", t = {}, s = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=", i = 0; i < s.length; i++)
  t[s.charCodeAt(i)] = i;
function n(e, t, s) {
  s === 4 ? e.push([t[0], t[1], t[2], t[3]]) : s === 5 ? e.push([t[0], t[1], t[2], t[3], t[4]]) : s === 1 && e.push([t[0]]);
}
function r(e) {
  var t = "";
  e = e < 0 ? -e << 1 | 1 : e << 1;
  do {
    var i = 31 & e;
    (e >>>= 5) > 0 && (i |= 32), t += s[i];
  } while (e > 0);
  return t;
}
class a {
  constructor(e) {
    this.bits = e instanceof a ? e.bits.slice() : [];
  }
  add(e) {
    this.bits[e >> 5] |= 1 << (31 & e);
  }
  has(e) {
    return !!(this.bits[e >> 5] & 1 << (31 & e));
  }
}
class o$1 {
  constructor(e, t, s) {
    this.start = e, this.end = t, this.original = s, this.intro = "", this.outro = "", this.content = s, this.storeName = false, this.edited = false, Object.defineProperties(this, { previous: { writable: true, value: null }, next: { writable: true, value: null } });
  }
  appendLeft(e) {
    this.outro += e;
  }
  appendRight(e) {
    this.intro = this.intro + e;
  }
  clone() {
    const e = new o$1(this.start, this.end, this.original);
    return e.intro = this.intro, e.outro = this.outro, e.content = this.content, e.storeName = this.storeName, e.edited = this.edited, e;
  }
  contains(e) {
    return this.start < e && e < this.end;
  }
  eachNext(e) {
    let t = this;
    for (; t; )
      e(t), t = t.next;
  }
  eachPrevious(e) {
    let t = this;
    for (; t; )
      e(t), t = t.previous;
  }
  edit(e, t, s) {
    return this.content = e, s || (this.intro = "", this.outro = ""), this.storeName = t, this.edited = true, this;
  }
  prependLeft(e) {
    this.outro = e + this.outro;
  }
  prependRight(e) {
    this.intro = e + this.intro;
  }
  split(e) {
    const t = e - this.start, s = this.original.slice(0, t), i = this.original.slice(t);
    this.original = s;
    const n2 = new o$1(e, this.end, i);
    return n2.outro = this.outro, this.outro = "", this.end = e, this.edited ? (n2.edit("", false), this.content = "") : this.content = s, n2.next = this.next, n2.next && (n2.next.previous = n2), n2.previous = this, this.next = n2, n2;
  }
  toString() {
    return this.intro + this.content + this.outro;
  }
  trimEnd(e) {
    if (this.outro = this.outro.replace(e, ""), this.outro.length)
      return true;
    const t = this.content.replace(e, "");
    return t.length ? (t !== this.content && this.split(this.start + t.length).edit("", void 0, true), true) : (this.edit("", void 0, true), this.intro = this.intro.replace(e, ""), !!this.intro.length || void 0);
  }
  trimStart(e) {
    if (this.intro = this.intro.replace(e, ""), this.intro.length)
      return true;
    const t = this.content.replace(e, "");
    return t.length ? (t !== this.content && (this.split(this.end - t.length), this.edit("", void 0, true)), true) : (this.edit("", void 0, true), this.outro = this.outro.replace(e, ""), !!this.outro.length || void 0);
  }
}
let h = () => {
  throw new Error("Unsupported environment: `window.btoa` or `Buffer` should be supported.");
};
typeof window != "undefined" && typeof window.btoa == "function" ? h = (e) => window.btoa(unescape(encodeURIComponent(e))) : typeof Buffer == "function" && (h = (e) => Buffer.from(e, "utf-8").toString("base64"));
class l {
  constructor(e) {
    this.version = 3, this.file = e.file, this.sources = e.sources, this.sourcesContent = e.sourcesContent, this.names = e.names, this.mappings = function(e2) {
      for (var t = 0, s = 0, i = 0, n2 = 0, a2 = "", o2 = 0; o2 < e2.length; o2++) {
        var h2 = e2[o2];
        if (o2 > 0 && (a2 += ";"), h2.length !== 0) {
          for (var l2 = 0, c2 = [], u2 = 0, d2 = h2; u2 < d2.length; u2++) {
            var p2 = d2[u2], f2 = r(p2[0] - l2);
            l2 = p2[0], p2.length > 1 && (f2 += r(p2[1] - t) + r(p2[2] - s) + r(p2[3] - i), t = p2[1], s = p2[2], i = p2[3]), p2.length === 5 && (f2 += r(p2[4] - n2), n2 = p2[4]), c2.push(f2);
          }
          a2 += c2.join(",");
        }
      }
      return a2;
    }(e.mappings);
  }
  toString() {
    return JSON.stringify(this);
  }
  toUrl() {
    return "data:application/json;charset=utf-8;base64," + h(this.toString());
  }
}
function c(e) {
  const t = e.split("\n"), s = t.filter((e2) => /^\t+/.test(e2)), i = t.filter((e2) => /^ {2,}/.test(e2));
  if (s.length === 0 && i.length === 0)
    return null;
  if (s.length >= i.length)
    return "	";
  const n2 = i.reduce((e2, t2) => {
    const s2 = /^ +/.exec(t2)[0].length;
    return Math.min(s2, e2);
  }, 1 / 0);
  return new Array(n2 + 1).join(" ");
}
function u(e, t) {
  const s = e.split(/[/\\]/), i = t.split(/[/\\]/);
  for (s.pop(); s[0] === i[0]; )
    s.shift(), i.shift();
  if (s.length) {
    let e2 = s.length;
    for (; e2--; )
      s[e2] = "..";
  }
  return s.concat(i).join("/");
}
const d = Object.prototype.toString;
function p(e) {
  return d.call(e) === "[object Object]";
}
function f(e) {
  const t = e.split("\n"), s = [];
  for (let e2 = 0, i = 0; e2 < t.length; e2++)
    s.push(i), i += t[e2].length + 1;
  return function(e2) {
    let t2 = 0, i = s.length;
    for (; t2 < i; ) {
      const n3 = t2 + i >> 1;
      e2 < s[n3] ? i = n3 : t2 = n3 + 1;
    }
    const n2 = t2 - 1;
    return { line: n2, column: e2 - s[n2] };
  };
}
class m {
  constructor(e) {
    this.hires = e, this.generatedCodeLine = 0, this.generatedCodeColumn = 0, this.raw = [], this.rawSegments = this.raw[this.generatedCodeLine] = [], this.pending = null;
  }
  addEdit(e, t, s, i) {
    if (t.length) {
      const t2 = [this.generatedCodeColumn, e, s.line, s.column];
      i >= 0 && t2.push(i), this.rawSegments.push(t2);
    } else
      this.pending && this.rawSegments.push(this.pending);
    this.advance(t), this.pending = null;
  }
  addUneditedChunk(e, t, s, i, n2) {
    let r2 = t.start, a2 = true;
    for (; r2 < t.end; )
      (this.hires || a2 || n2.has(r2)) && this.rawSegments.push([this.generatedCodeColumn, e, i.line, i.column]), s[r2] === "\n" ? (i.line += 1, i.column = 0, this.generatedCodeLine += 1, this.raw[this.generatedCodeLine] = this.rawSegments = [], this.generatedCodeColumn = 0, a2 = true) : (i.column += 1, this.generatedCodeColumn += 1, a2 = false), r2 += 1;
    this.pending = null;
  }
  advance(e) {
    if (!e)
      return;
    const t = e.split("\n");
    if (t.length > 1) {
      for (let e2 = 0; e2 < t.length - 1; e2++)
        this.generatedCodeLine++, this.raw[this.generatedCodeLine] = this.rawSegments = [];
      this.generatedCodeColumn = 0;
    }
    this.generatedCodeColumn += t[t.length - 1].length;
  }
}
const g$2 = "\n", y = { insertLeft: false, insertRight: false, storeName: false };
class E$2 {
  constructor(e, t = {}) {
    const s = new o$1(0, e.length, e);
    Object.defineProperties(this, { original: { writable: true, value: e }, outro: { writable: true, value: "" }, intro: { writable: true, value: "" }, firstChunk: { writable: true, value: s }, lastChunk: { writable: true, value: s }, lastSearchedChunk: { writable: true, value: s }, byStart: { writable: true, value: {} }, byEnd: { writable: true, value: {} }, filename: { writable: true, value: t.filename }, indentExclusionRanges: { writable: true, value: t.indentExclusionRanges }, sourcemapLocations: { writable: true, value: new a() }, storedNames: { writable: true, value: {} }, indentStr: { writable: true, value: c(e) } }), this.byStart[0] = s, this.byEnd[e.length] = s;
  }
  addSourcemapLocation(e) {
    this.sourcemapLocations.add(e);
  }
  append(e) {
    if (typeof e != "string")
      throw new TypeError("outro content must be a string");
    return this.outro += e, this;
  }
  appendLeft(e, t) {
    if (typeof t != "string")
      throw new TypeError("inserted content must be a string");
    this._split(e);
    const s = this.byEnd[e];
    return s ? s.appendLeft(t) : this.intro += t, this;
  }
  appendRight(e, t) {
    if (typeof t != "string")
      throw new TypeError("inserted content must be a string");
    this._split(e);
    const s = this.byStart[e];
    return s ? s.appendRight(t) : this.outro += t, this;
  }
  clone() {
    const e = new E$2(this.original, { filename: this.filename });
    let t = this.firstChunk, s = e.firstChunk = e.lastSearchedChunk = t.clone();
    for (; t; ) {
      e.byStart[s.start] = s, e.byEnd[s.end] = s;
      const i = t.next, n2 = i && i.clone();
      n2 && (s.next = n2, n2.previous = s, s = n2), t = i;
    }
    return e.lastChunk = s, this.indentExclusionRanges && (e.indentExclusionRanges = this.indentExclusionRanges.slice()), e.sourcemapLocations = new a(this.sourcemapLocations), e.intro = this.intro, e.outro = this.outro, e;
  }
  generateDecodedMap(e) {
    e = e || {};
    const t = Object.keys(this.storedNames), s = new m(e.hires), i = f(this.original);
    return this.intro && s.advance(this.intro), this.firstChunk.eachNext((e2) => {
      const n2 = i(e2.start);
      e2.intro.length && s.advance(e2.intro), e2.edited ? s.addEdit(0, e2.content, n2, e2.storeName ? t.indexOf(e2.original) : -1) : s.addUneditedChunk(0, e2, this.original, n2, this.sourcemapLocations), e2.outro.length && s.advance(e2.outro);
    }), { file: e.file ? e.file.split(/[/\\]/).pop() : null, sources: [e.source ? u(e.file || "", e.source) : null], sourcesContent: e.includeContent ? [this.original] : [null], names: t, mappings: s.raw };
  }
  generateMap(e) {
    return new l(this.generateDecodedMap(e));
  }
  getIndentString() {
    return this.indentStr === null ? "	" : this.indentStr;
  }
  indent(e, t) {
    const s = /^[^\r\n]/gm;
    if (p(e) && (t = e, e = void 0), (e = e !== void 0 ? e : this.indentStr || "	") === "")
      return this;
    const i = {};
    if ((t = t || {}).exclude) {
      (typeof t.exclude[0] == "number" ? [t.exclude] : t.exclude).forEach((e2) => {
        for (let t2 = e2[0]; t2 < e2[1]; t2 += 1)
          i[t2] = true;
      });
    }
    let n2 = t.indentStart !== false;
    const r2 = (t2) => n2 ? `${e}${t2}` : (n2 = true, t2);
    this.intro = this.intro.replace(s, r2);
    let a2 = 0, o2 = this.firstChunk;
    for (; o2; ) {
      const t2 = o2.end;
      if (o2.edited)
        i[a2] || (o2.content = o2.content.replace(s, r2), o2.content.length && (n2 = o2.content[o2.content.length - 1] === "\n"));
      else
        for (a2 = o2.start; a2 < t2; ) {
          if (!i[a2]) {
            const t3 = this.original[a2];
            t3 === "\n" ? n2 = true : t3 !== "\r" && n2 && (n2 = false, a2 === o2.start || (this._splitChunk(o2, a2), o2 = o2.next), o2.prependRight(e));
          }
          a2 += 1;
        }
      a2 = o2.end, o2 = o2.next;
    }
    return this.outro = this.outro.replace(s, r2), this;
  }
  insert() {
    throw new Error("magicString.insert(...) is deprecated. Use prependRight(...) or appendLeft(...)");
  }
  insertLeft(e, t) {
    return y.insertLeft || (console.warn("magicString.insertLeft(...) is deprecated. Use magicString.appendLeft(...) instead"), y.insertLeft = true), this.appendLeft(e, t);
  }
  insertRight(e, t) {
    return y.insertRight || (console.warn("magicString.insertRight(...) is deprecated. Use magicString.prependRight(...) instead"), y.insertRight = true), this.prependRight(e, t);
  }
  move(e, t, s) {
    if (s >= e && s <= t)
      throw new Error("Cannot move a selection inside itself");
    this._split(e), this._split(t), this._split(s);
    const i = this.byStart[e], n2 = this.byEnd[t], r2 = i.previous, a2 = n2.next, o2 = this.byStart[s];
    if (!o2 && n2 === this.lastChunk)
      return this;
    const h2 = o2 ? o2.previous : this.lastChunk;
    return r2 && (r2.next = a2), a2 && (a2.previous = r2), h2 && (h2.next = i), o2 && (o2.previous = n2), i.previous || (this.firstChunk = n2.next), n2.next || (this.lastChunk = i.previous, this.lastChunk.next = null), i.previous = h2, n2.next = o2 || null, h2 || (this.firstChunk = i), o2 || (this.lastChunk = n2), this;
  }
  overwrite(e, t, s, i) {
    if (typeof s != "string")
      throw new TypeError("replacement content must be a string");
    for (; e < 0; )
      e += this.original.length;
    for (; t < 0; )
      t += this.original.length;
    if (t > this.original.length)
      throw new Error("end is out of bounds");
    if (e === t)
      throw new Error("Cannot overwrite a zero-length range \u2013 use appendLeft or prependRight instead");
    this._split(e), this._split(t), i === true && (y.storeName || (console.warn("The final argument to magicString.overwrite(...) should be an options object. See https://github.com/rich-harris/magic-string"), y.storeName = true), i = { storeName: true });
    const n2 = i !== void 0 && i.storeName, r2 = i !== void 0 && i.contentOnly;
    if (n2) {
      const s2 = this.original.slice(e, t);
      Object.defineProperty(this.storedNames, s2, { writable: true, value: true, enumerable: true });
    }
    const a2 = this.byStart[e], h2 = this.byEnd[t];
    if (a2) {
      let e2 = a2;
      for (; e2 !== h2; ) {
        if (e2.next !== this.byStart[e2.end])
          throw new Error("Cannot overwrite across a split point");
        e2 = e2.next, e2.edit("", false);
      }
      a2.edit(s, n2, r2);
    } else {
      const i2 = new o$1(e, t, "").edit(s, n2);
      h2.next = i2, i2.previous = h2;
    }
    return this;
  }
  prepend(e) {
    if (typeof e != "string")
      throw new TypeError("outro content must be a string");
    return this.intro = e + this.intro, this;
  }
  prependLeft(e, t) {
    if (typeof t != "string")
      throw new TypeError("inserted content must be a string");
    this._split(e);
    const s = this.byEnd[e];
    return s ? s.prependLeft(t) : this.intro = t + this.intro, this;
  }
  prependRight(e, t) {
    if (typeof t != "string")
      throw new TypeError("inserted content must be a string");
    this._split(e);
    const s = this.byStart[e];
    return s ? s.prependRight(t) : this.outro = t + this.outro, this;
  }
  remove(e, t) {
    for (; e < 0; )
      e += this.original.length;
    for (; t < 0; )
      t += this.original.length;
    if (e === t)
      return this;
    if (e < 0 || t > this.original.length)
      throw new Error("Character is out of bounds");
    if (e > t)
      throw new Error("end must be greater than start");
    this._split(e), this._split(t);
    let s = this.byStart[e];
    for (; s; )
      s.intro = "", s.outro = "", s.edit(""), s = t > s.end ? this.byStart[s.end] : null;
    return this;
  }
  lastChar() {
    if (this.outro.length)
      return this.outro[this.outro.length - 1];
    let e = this.lastChunk;
    do {
      if (e.outro.length)
        return e.outro[e.outro.length - 1];
      if (e.content.length)
        return e.content[e.content.length - 1];
      if (e.intro.length)
        return e.intro[e.intro.length - 1];
    } while (e = e.previous);
    return this.intro.length ? this.intro[this.intro.length - 1] : "";
  }
  lastLine() {
    let e = this.outro.lastIndexOf(g$2);
    if (e !== -1)
      return this.outro.substr(e + 1);
    let t = this.outro, s = this.lastChunk;
    do {
      if (s.outro.length > 0) {
        if (e = s.outro.lastIndexOf(g$2), e !== -1)
          return s.outro.substr(e + 1) + t;
        t = s.outro + t;
      }
      if (s.content.length > 0) {
        if (e = s.content.lastIndexOf(g$2), e !== -1)
          return s.content.substr(e + 1) + t;
        t = s.content + t;
      }
      if (s.intro.length > 0) {
        if (e = s.intro.lastIndexOf(g$2), e !== -1)
          return s.intro.substr(e + 1) + t;
        t = s.intro + t;
      }
    } while (s = s.previous);
    return e = this.intro.lastIndexOf(g$2), e !== -1 ? this.intro.substr(e + 1) + t : this.intro + t;
  }
  slice(e = 0, t = this.original.length) {
    for (; e < 0; )
      e += this.original.length;
    for (; t < 0; )
      t += this.original.length;
    let s = "", i = this.firstChunk;
    for (; i && (i.start > e || i.end <= e); ) {
      if (i.start < t && i.end >= t)
        return s;
      i = i.next;
    }
    if (i && i.edited && i.start !== e)
      throw new Error(`Cannot use replaced character ${e} as slice start anchor.`);
    const n2 = i;
    for (; i; ) {
      !i.intro || n2 === i && i.start !== e || (s += i.intro);
      const r2 = i.start < t && i.end >= t;
      if (r2 && i.edited && i.end !== t)
        throw new Error(`Cannot use replaced character ${t} as slice end anchor.`);
      const a2 = n2 === i ? e - i.start : 0, o2 = r2 ? i.content.length + t - i.end : i.content.length;
      if (s += i.content.slice(a2, o2), !i.outro || r2 && i.end !== t || (s += i.outro), r2)
        break;
      i = i.next;
    }
    return s;
  }
  snip(e, t) {
    const s = this.clone();
    return s.remove(0, e), s.remove(t, s.original.length), s;
  }
  _split(e) {
    if (this.byStart[e] || this.byEnd[e])
      return;
    let t = this.lastSearchedChunk;
    const s = e > t.end;
    for (; t; ) {
      if (t.contains(e))
        return this._splitChunk(t, e);
      t = s ? this.byStart[t.end] : this.byEnd[t.start];
    }
  }
  _splitChunk(e, t) {
    if (e.edited && e.content.length) {
      const s2 = f(this.original)(t);
      throw new Error(`Cannot split a chunk that has already been edited (${s2.line}:${s2.column} \u2013 "${e.original}")`);
    }
    const s = e.split(t);
    return this.byEnd[t] = e, this.byStart[t] = s, this.byEnd[s.end] = s, e === this.lastChunk && (this.lastChunk = s), this.lastSearchedChunk = e, true;
  }
  toString() {
    let e = this.intro, t = this.firstChunk;
    for (; t; )
      e += t.toString(), t = t.next;
    return e + this.outro;
  }
  isEmpty() {
    let e = this.firstChunk;
    do {
      if (e.intro.length && e.intro.trim() || e.content.length && e.content.trim() || e.outro.length && e.outro.trim())
        return false;
    } while (e = e.next);
    return true;
  }
  length() {
    let e = this.firstChunk, t = 0;
    do {
      t += e.intro.length + e.content.length + e.outro.length;
    } while (e = e.next);
    return t;
  }
  trimLines() {
    return this.trim("[\\r\\n]");
  }
  trim(e) {
    return this.trimStart(e).trimEnd(e);
  }
  trimEndAborted(e) {
    const t = new RegExp((e || "\\s") + "+$");
    if (this.outro = this.outro.replace(t, ""), this.outro.length)
      return true;
    let s = this.lastChunk;
    do {
      const e2 = s.end, i = s.trimEnd(t);
      if (s.end !== e2 && (this.lastChunk === s && (this.lastChunk = s.next), this.byEnd[s.end] = s, this.byStart[s.next.start] = s.next, this.byEnd[s.next.end] = s.next), i)
        return true;
      s = s.previous;
    } while (s);
    return false;
  }
  trimEnd(e) {
    return this.trimEndAborted(e), this;
  }
  trimStartAborted(e) {
    const t = new RegExp("^" + (e || "\\s") + "+");
    if (this.intro = this.intro.replace(t, ""), this.intro.length)
      return true;
    let s = this.firstChunk;
    do {
      const e2 = s.end, i = s.trimStart(t);
      if (s.end !== e2 && (s === this.lastChunk && (this.lastChunk = s.next), this.byEnd[s.end] = s, this.byStart[s.next.start] = s.next, this.byEnd[s.next.end] = s.next), i)
        return true;
      s = s.next;
    } while (s);
    return false;
  }
  trimStart(e) {
    return this.trimStartAborted(e), this;
  }
  hasChanged() {
    return this.original !== this.toString();
  }
  replace(e, t) {
    function s(e2, s2) {
      return typeof t == "string" ? t.replace(/\$(\$|&|\d+)/g, (t2, s3) => {
        if (s3 === "$")
          return "$";
        if (s3 === "&")
          return e2[0];
        return +s3 < e2.length ? e2[+s3] : `$${s3}`;
      }) : t(...e2, e2.index, s2, e2.groups);
    }
    if (typeof e != "string" && e.global) {
      (function(e2, t2) {
        let s2;
        const i = [];
        for (; s2 = e2.exec(t2); )
          i.push(s2);
        return i;
      })(e, this.original).forEach((e2) => {
        e2.index != null && this.overwrite(e2.index, e2.index + e2[0].length, s(e2, this.original));
      });
    } else {
      const t2 = this.original.match(e);
      t2 && t2.index != null && this.overwrite(t2.index, t2.index + t2[0].length, s(t2, this.original));
    }
    return this;
  }
}
const x = Object.prototype.hasOwnProperty;
class v {
  constructor(e = {}) {
    this.intro = e.intro || "", this.separator = e.separator !== void 0 ? e.separator : "\n", this.sources = [], this.uniqueSources = [], this.uniqueSourceIndexByFilename = {};
  }
  addSource(e) {
    if (e instanceof E$2)
      return this.addSource({ content: e, filename: e.filename, separator: this.separator });
    if (!p(e) || !e.content)
      throw new Error("bundle.addSource() takes an object with a `content` property, which should be an instance of MagicString, and an optional `filename`");
    if (["filename", "indentExclusionRanges", "separator"].forEach((t) => {
      x.call(e, t) || (e[t] = e.content[t]);
    }), e.separator === void 0 && (e.separator = this.separator), e.filename)
      if (x.call(this.uniqueSourceIndexByFilename, e.filename)) {
        const t = this.uniqueSources[this.uniqueSourceIndexByFilename[e.filename]];
        if (e.content.original !== t.content)
          throw new Error(`Illegal source: same filename (${e.filename}), different contents`);
      } else
        this.uniqueSourceIndexByFilename[e.filename] = this.uniqueSources.length, this.uniqueSources.push({ filename: e.filename, content: e.content.original });
    return this.sources.push(e), this;
  }
  append(e, t) {
    return this.addSource({ content: new E$2(e), separator: t && t.separator || "" }), this;
  }
  clone() {
    const e = new v({ intro: this.intro, separator: this.separator });
    return this.sources.forEach((t) => {
      e.addSource({ filename: t.filename, content: t.content.clone(), separator: t.separator });
    }), e;
  }
  generateDecodedMap(e = {}) {
    const t = [];
    this.sources.forEach((e2) => {
      Object.keys(e2.content.storedNames).forEach((e3) => {
        ~t.indexOf(e3) || t.push(e3);
      });
    });
    const s = new m(e.hires);
    return this.intro && s.advance(this.intro), this.sources.forEach((e2, i) => {
      i > 0 && s.advance(this.separator);
      const n2 = e2.filename ? this.uniqueSourceIndexByFilename[e2.filename] : -1, r2 = e2.content, a2 = f(r2.original);
      r2.intro && s.advance(r2.intro), r2.firstChunk.eachNext((i2) => {
        const o2 = a2(i2.start);
        i2.intro.length && s.advance(i2.intro), e2.filename ? i2.edited ? s.addEdit(n2, i2.content, o2, i2.storeName ? t.indexOf(i2.original) : -1) : s.addUneditedChunk(n2, i2, r2.original, o2, r2.sourcemapLocations) : s.advance(i2.content), i2.outro.length && s.advance(i2.outro);
      }), r2.outro && s.advance(r2.outro);
    }), { file: e.file ? e.file.split(/[/\\]/).pop() : null, sources: this.uniqueSources.map((t2) => e.file ? u(e.file, t2.filename) : t2.filename), sourcesContent: this.uniqueSources.map((t2) => e.includeContent ? t2.content : null), names: t, mappings: s.raw };
  }
  generateMap(e) {
    return new l(this.generateDecodedMap(e));
  }
  getIndentString() {
    const e = {};
    return this.sources.forEach((t) => {
      const s = t.content.indentStr;
      s !== null && (e[s] || (e[s] = 0), e[s] += 1);
    }), Object.keys(e).sort((t, s) => e[t] - e[s])[0] || "	";
  }
  indent(e) {
    if (arguments.length || (e = this.getIndentString()), e === "")
      return this;
    let t = !this.intro || this.intro.slice(-1) === "\n";
    return this.sources.forEach((s, i) => {
      const n2 = s.separator !== void 0 ? s.separator : this.separator, r2 = t || i > 0 && /\r?\n$/.test(n2);
      s.content.indent(e, { exclude: s.indentExclusionRanges, indentStart: r2 }), t = s.content.lastChar() === "\n";
    }), this.intro && (this.intro = e + this.intro.replace(/^[^\n]/gm, (t2, s) => s > 0 ? e + t2 : t2)), this;
  }
  prepend(e) {
    return this.intro = e + this.intro, this;
  }
  toString() {
    const e = this.sources.map((e2, t) => {
      const s = e2.separator !== void 0 ? e2.separator : this.separator;
      return (t > 0 ? s : "") + e2.content.toString();
    }).join("");
    return this.intro + e;
  }
  isEmpty() {
    return (!this.intro.length || !this.intro.trim()) && !this.sources.some((e) => !e.content.isEmpty());
  }
  length() {
    return this.sources.reduce((e, t) => e + t.content.length(), this.intro.length);
  }
  trimLines() {
    return this.trim("[\\r\\n]");
  }
  trim(e) {
    return this.trimStart(e).trimEnd(e);
  }
  trimStart(e) {
    const t = new RegExp("^" + (e || "\\s") + "+");
    if (this.intro = this.intro.replace(t, ""), !this.intro) {
      let t2, s = 0;
      do {
        if (t2 = this.sources[s++], !t2)
          break;
      } while (!t2.content.trimStartAborted(e));
    }
    return this;
  }
  trimEnd(e) {
    const t = new RegExp((e || "\\s") + "+$");
    let s, i = this.sources.length - 1;
    do {
      if (s = this.sources[i--], !s) {
        this.intro = this.intro.replace(t, "");
        break;
      }
    } while (!s.content.trimEndAborted(e));
    return this;
  }
}
const b = /^(?:\/|(?:[A-Za-z]:)?[\\|/])/, A$1 = /^\.?\.\//, S = /\\/g, P = /[/\\]/, k = /\.[^.]+$/;
function w$2(e) {
  return b.test(e);
}
function C$2(e) {
  return A$1.test(e);
}
function I$2(e) {
  return e.replace(S, "/");
}
function _(e) {
  return e.split(P).pop() || "";
}
function N(e) {
  const t = /[/\\][^/\\]*$/.exec(e);
  if (!t)
    return ".";
  const s = e.slice(0, -t[0].length);
  return s || "/";
}
function $(e) {
  const t = k.exec(_(e));
  return t ? t[0] : "";
}
function T(e, t) {
  const s = e.split(P).filter(Boolean), i = t.split(P).filter(Boolean);
  for (s[0] === "." && s.shift(), i[0] === "." && i.shift(); s[0] && i[0] && s[0] === i[0]; )
    s.shift(), i.shift();
  for (; i[0] === ".." && s.length > 0; )
    i.shift(), s.pop();
  for (; s.pop(); )
    i.unshift("..");
  return i.join("/");
}
function R(...e) {
  const t = e.shift();
  if (!t)
    return "/";
  let s = t.split(P);
  for (const t2 of e)
    if (w$2(t2))
      s = t2.split(P);
    else {
      const e2 = t2.split(P);
      for (; e2[0] === "." || e2[0] === ".."; ) {
        e2.shift() === ".." && s.pop();
      }
      s.push(...e2);
    }
  return s.join("/");
}
function M(e, t, s) {
  const i = e.get(t);
  if (i)
    return i;
  const n2 = s();
  return e.set(t, n2), n2;
}
const D$2 = Symbol("Unknown Key"), L = Symbol("Unknown Non-Accessor Key"), O = Symbol("Unknown Integer"), V = [], B$2 = [D$2], F$1 = [L], z = [O], W = Symbol("Entities");
class j {
  constructor() {
    this.entityPaths = Object.create(null, { [W]: { value: /* @__PURE__ */ new Set() } });
  }
  trackEntityAtPathAndGetIfTracked(e, t) {
    const s = this.getEntities(e);
    return !!s.has(t) || (s.add(t), false);
  }
  withTrackedEntityAtPath(e, t, s, i) {
    const n2 = this.getEntities(e);
    if (n2.has(t))
      return i;
    n2.add(t);
    const r2 = s();
    return n2.delete(t), r2;
  }
  getEntities(e) {
    let t = this.entityPaths;
    for (const s of e)
      t = t[s] = t[s] || Object.create(null, { [W]: { value: /* @__PURE__ */ new Set() } });
    return t[W];
  }
}
const U = new j();
class G$1 {
  constructor() {
    this.entityPaths = Object.create(null, { [W]: { value: /* @__PURE__ */ new Map() } });
  }
  trackEntityAtPathAndGetIfTracked(e, t, s) {
    let i = this.entityPaths;
    for (const t2 of e)
      i = i[t2] = i[t2] || Object.create(null, { [W]: { value: /* @__PURE__ */ new Map() } });
    const n2 = M(i[W], t, () => /* @__PURE__ */ new Set());
    return !!n2.has(s) || (n2.add(s), false);
  }
}
const H = Symbol("Unknown Value"), q = Symbol("Unknown Truthy Value");
class K {
  constructor() {
    this.included = false;
  }
  deoptimizeCallParameters() {
  }
  deoptimizePath(e) {
  }
  deoptimizeThisOnEventAtPath(e, t, s, i) {
    s.deoptimizePath(B$2);
  }
  getLiteralValueAtPath(e, t, s) {
    return H;
  }
  getReturnExpressionWhenCalledAtPath(e, t, s, i) {
    return X;
  }
  hasEffectsWhenAccessedAtPath(e, t) {
    return true;
  }
  hasEffectsWhenAssignedAtPath(e, t) {
    return true;
  }
  hasEffectsWhenCalledAtPath(e, t, s) {
    return true;
  }
  include(e, t, s) {
    this.included = true;
  }
  includeCallArguments(e, t) {
    for (const s of t)
      s.include(e, false);
  }
  shouldBeIncluded(e) {
    return true;
  }
}
const X = new class extends K {
}();
class Y extends K {
  constructor(e) {
    super(), this.name = e, this.alwaysRendered = false, this.initReached = false, this.isId = false, this.isReassigned = false, this.kind = null, this.renderBaseName = null, this.renderName = null;
  }
  addReference(e) {
  }
  getBaseVariableName() {
    return this.renderBaseName || this.renderName || this.name;
  }
  getName(e) {
    const t = this.renderName || this.name;
    return this.renderBaseName ? `${this.renderBaseName}${e(t)}` : t;
  }
  hasEffectsWhenAccessedAtPath(e, t) {
    return e.length > 0;
  }
  include() {
    this.included = true;
  }
  markCalledFromTryStatement() {
  }
  setRenderNames(e, t) {
    this.renderBaseName = e, this.renderName = t;
  }
}
class Q$2 extends Y {
  constructor(e, t) {
    super(t), this.referenced = false, this.module = e, this.isNamespace = t === "*";
  }
  addReference(e) {
    this.referenced = true, this.name !== "default" && this.name !== "*" || this.module.suggestName(e.name);
  }
  hasEffectsWhenAccessedAtPath(e) {
    return e.length > (this.isNamespace ? 1 : 0);
  }
  include() {
    this.included || (this.included = true, this.module.used = true);
  }
}
const Z = Object.freeze(/* @__PURE__ */ Object.create(null)), J = Object.freeze({}), ee = Object.freeze([]);
function te(e, t, s) {
  if (typeof s == "number")
    throw new Error("locate takes a { startIndex, offsetLine, offsetColumn } object as the third argument");
  return function(e2, t2) {
    t2 === void 0 && (t2 = {});
    var s2 = t2.offsetLine || 0, i = t2.offsetColumn || 0, n2 = e2.split("\n"), r2 = 0, a2 = n2.map(function(e3, t3) {
      var s3 = r2 + e3.length + 1, i2 = { start: r2, end: s3, line: t3 };
      return r2 = s3, i2;
    }), o2 = 0;
    function h2(e3, t3) {
      return e3.start <= t3 && t3 < e3.end;
    }
    function l2(e3, t3) {
      return { line: s2 + e3.line, column: i + t3 - e3.start, character: t3 };
    }
    return function(t3, s3) {
      typeof t3 == "string" && (t3 = e2.indexOf(t3, s3 || 0));
      for (var i2 = a2[o2], n3 = t3 >= i2.end ? 1 : -1; i2; ) {
        if (h2(i2, t3))
          return l2(i2, t3);
        i2 = a2[o2 += n3];
      }
    };
  }(e, s)(t, s && s.startIndex);
}
function se(e) {
  return e.replace(/^\t+/, (e2) => e2.split("	").join("  "));
}
function ie(e, t) {
  const s = e.length <= 1, i = e.map((e2) => `"${e2}"`);
  let n2 = s ? i[0] : `${i.slice(0, -1).join(", ")} and ${i.slice(-1)[0]}`;
  return t && (n2 += ` ${s ? t[0] : t[1]}`), n2;
}
function ne(e) {
  const t = _(e);
  return t.substring(0, t.length - $(e).length);
}
function re(e) {
  return w$2(e) ? T(R(), e) : e;
}
function ae(e) {
  return e[0] === "/" || e[0] === "." && (e[1] === "/" || e[1] === ".") || w$2(e);
}
const oe = /^(\.\.\/)*\.\.$/;
function he(e, t, s, i) {
  let n2 = I$2(T(N(e), t));
  if (s && n2.endsWith(".js") && (n2 = n2.slice(0, -3)), i) {
    if (n2 === "")
      return "../" + _(t);
    if (oe.test(n2))
      return n2.split("/").concat(["..", _(t)]).join("/");
  }
  return n2 ? n2.startsWith("..") ? n2 : "./" + n2 : ".";
}
function le(e) {
  throw e instanceof Error || (e = Object.assign(new Error(e.message), e)), e;
}
function ce(e, t, s, i) {
  if (typeof t == "object") {
    const { line: s2, column: n2 } = t;
    e.loc = { column: n2, file: i, line: s2 };
  } else {
    e.pos = t;
    const { line: n2, column: r2 } = te(s, t, { offsetLine: 1 });
    e.loc = { column: r2, file: i, line: n2 };
  }
  if (e.frame === void 0) {
    const { line: t2, column: i2 } = e.loc;
    e.frame = function(e2, t3, s2) {
      let i3 = e2.split("\n");
      const n2 = Math.max(0, t3 - 3);
      let r2 = Math.min(t3 + 2, i3.length);
      for (i3 = i3.slice(n2, r2); !/\S/.test(i3[i3.length - 1]); )
        i3.pop(), r2 -= 1;
      const a2 = String(r2).length;
      return i3.map((e3, i4) => {
        const r3 = n2 + i4 + 1 === t3;
        let o2 = String(i4 + n2 + 1);
        for (; o2.length < a2; )
          o2 = ` ${o2}`;
        if (r3) {
          const t4 = function(e4) {
            let t5 = "";
            for (; e4--; )
              t5 += " ";
            return t5;
          }(a2 + 2 + se(e3.slice(0, s2)).length) + "^";
          return `${o2}: ${se(e3)}
${t4}`;
        }
        return `${o2}: ${se(e3)}`;
      }).join("\n");
    }(s, t2, i2);
  }
}
var ue;
function de({ fileName: e, code: t }, s) {
  const i = { code: ue.CHUNK_INVALID, message: `Chunk "${e}" is not valid JavaScript: ${s.message}.` };
  return ce(i, s.loc, t, e), i;
}
function pe(e, t, s) {
  return { code: "INVALID_EXPORT_OPTION", message: `"${e}" was specified for "output.exports", but entry module "${re(s)}" has the following exports: ${t.join(", ")}` };
}
function fe(e, t, s, i) {
  return { code: ue.INVALID_OPTION, message: `Invalid value ${i !== void 0 ? `${JSON.stringify(i)} ` : ""}for option "${e}" - ${s}.`, url: `https://rollupjs.org/guide/en/#${t}` };
}
function me(e, t, s) {
  return { code: ue.MISSING_EXPORT, message: `'${e}' is not exported by ${re(s)}, imported by ${re(t)}`, url: "https://rollupjs.org/guide/en/#error-name-is-not-exported-by-module" };
}
function ge(e) {
  const t = Array.from(e.implicitlyLoadedBefore, (e2) => re(e2.id)).sort();
  return { code: ue.MISSING_IMPLICIT_DEPENDANT, message: `Module "${re(e.id)}" that should be implicitly loaded before ${ie(t)} is not included in the module graph. Either it was not imported by an included module or only via a tree-shaken dynamic import, or no imported bindings were used and it had otherwise no side-effects.` };
}
function ye(e, t, s) {
  const i = s ? "reexport" : "import";
  return { code: ue.UNEXPECTED_NAMED_IMPORT, id: e, message: `The named export "${t}" was ${i}ed from the external module ${re(e)} even though its interop type is "defaultOnly". Either remove or change this ${i} or change the value of the "output.interop" option.`, url: "https://rollupjs.org/guide/en/#outputinterop" };
}
function Ee(e) {
  return { code: ue.UNEXPECTED_NAMED_IMPORT, id: e, message: `There was a namespace "*" reexport from the external module ${re(e)} even though its interop type is "defaultOnly". This will be ignored as namespace reexports only reexport named exports. If this is not intended, either remove or change this reexport or change the value of the "output.interop" option.`, url: "https://rollupjs.org/guide/en/#outputinterop" };
}
function xe(e) {
  return { code: ue.VALIDATION_ERROR, message: e };
}
function ve() {
  return { code: ue.ALREADY_CLOSED, message: 'Bundle is already closed, no more calls to "generate" or "write" are allowed.' };
}
function be(e, t, s) {
  Ae(e, t, s.onwarn, s.strictDeprecations);
}
function Ae(e, t, s, i) {
  if (t || i) {
    const t2 = function(e2) {
      return __spreadValues({ code: ue.DEPRECATED_FEATURE }, typeof e2 == "string" ? { message: e2 } : e2);
    }(e);
    if (i)
      return le(t2);
    s(t2);
  }
}
!function(e) {
  e.ALREADY_CLOSED = "ALREADY_CLOSED", e.ASSET_NOT_FINALISED = "ASSET_NOT_FINALISED", e.ASSET_NOT_FOUND = "ASSET_NOT_FOUND", e.ASSET_SOURCE_ALREADY_SET = "ASSET_SOURCE_ALREADY_SET", e.ASSET_SOURCE_MISSING = "ASSET_SOURCE_MISSING", e.BAD_LOADER = "BAD_LOADER", e.CANNOT_EMIT_FROM_OPTIONS_HOOK = "CANNOT_EMIT_FROM_OPTIONS_HOOK", e.CHUNK_NOT_GENERATED = "CHUNK_NOT_GENERATED", e.CHUNK_INVALID = "CHUNK_INVALID", e.CIRCULAR_REEXPORT = "CIRCULAR_REEXPORT", e.CYCLIC_CROSS_CHUNK_REEXPORT = "CYCLIC_CROSS_CHUNK_REEXPORT", e.DEPRECATED_FEATURE = "DEPRECATED_FEATURE", e.EXTERNAL_SYNTHETIC_EXPORTS = "EXTERNAL_SYNTHETIC_EXPORTS", e.FILE_NAME_CONFLICT = "FILE_NAME_CONFLICT", e.FILE_NOT_FOUND = "FILE_NOT_FOUND", e.INPUT_HOOK_IN_OUTPUT_PLUGIN = "INPUT_HOOK_IN_OUTPUT_PLUGIN", e.INVALID_CHUNK = "INVALID_CHUNK", e.INVALID_EXPORT_OPTION = "INVALID_EXPORT_OPTION", e.INVALID_EXTERNAL_ID = "INVALID_EXTERNAL_ID", e.INVALID_OPTION = "INVALID_OPTION", e.INVALID_PLUGIN_HOOK = "INVALID_PLUGIN_HOOK", e.INVALID_ROLLUP_PHASE = "INVALID_ROLLUP_PHASE", e.MISSING_EXPORT = "MISSING_EXPORT", e.MISSING_IMPLICIT_DEPENDANT = "MISSING_IMPLICIT_DEPENDANT", e.MIXED_EXPORTS = "MIXED_EXPORTS", e.NAMESPACE_CONFLICT = "NAMESPACE_CONFLICT", e.AMBIGUOUS_EXTERNAL_NAMESPACES = "AMBIGUOUS_EXTERNAL_NAMESPACES", e.NO_TRANSFORM_MAP_OR_AST_WITHOUT_CODE = "NO_TRANSFORM_MAP_OR_AST_WITHOUT_CODE", e.PLUGIN_ERROR = "PLUGIN_ERROR", e.PREFER_NAMED_EXPORTS = "PREFER_NAMED_EXPORTS", e.SYNTHETIC_NAMED_EXPORTS_NEED_NAMESPACE_EXPORT = "SYNTHETIC_NAMED_EXPORTS_NEED_NAMESPACE_EXPORT", e.UNEXPECTED_NAMED_IMPORT = "UNEXPECTED_NAMED_IMPORT", e.UNRESOLVED_ENTRY = "UNRESOLVED_ENTRY", e.UNRESOLVED_IMPORT = "UNRESOLVED_IMPORT", e.VALIDATION_ERROR = "VALIDATION_ERROR";
}(ue || (ue = {}));
var Se = /* @__PURE__ */ new Set(["await", "break", "case", "catch", "class", "const", "continue", "debugger", "default", "delete", "do", "else", "enum", "eval", "export", "extends", "false", "finally", "for", "function", "if", "implements", "import", "in", "instanceof", "interface", "let", "NaN", "new", "null", "package", "private", "protected", "public", "return", "static", "super", "switch", "this", "throw", "true", "try", "typeof", "undefined", "var", "void", "while", "with", "yield"]);
const Pe = /[^$_a-zA-Z0-9]/g, ke = (e) => /\d/.test(e[0]);
function we(e) {
  return e = e.replace(/-(\w)/g, (e2, t) => t.toUpperCase()).replace(Pe, "_"), (ke(e) || Se.has(e)) && (e = `_${e}`), e || "_";
}
class Ce {
  constructor(e, t, s, i, n2) {
    this.options = e, this.id = t, this.renormalizeRenderPath = n2, this.declarations = /* @__PURE__ */ new Map(), this.defaultVariableName = "", this.dynamicImporters = [], this.execIndex = 1 / 0, this.exportedVariables = /* @__PURE__ */ new Map(), this.importers = [], this.mostCommonSuggestion = 0, this.nameSuggestions = /* @__PURE__ */ new Map(), this.namespaceVariableName = "", this.reexported = false, this.renderPath = void 0, this.used = false, this.variableName = "", this.suggestedVariableName = we(t.split(/[\\/]/).pop());
    const { importers: r2, dynamicImporters: a2 } = this, o2 = this.info = { ast: null, code: null, dynamicallyImportedIdResolutions: ee, dynamicallyImportedIds: ee, get dynamicImporters() {
      return a2.sort();
    }, hasDefaultExport: null, get hasModuleSideEffects() {
      return be("Accessing ModuleInfo.hasModuleSideEffects from plugins is deprecated. Please use ModuleInfo.moduleSideEffects instead.", false, e), o2.moduleSideEffects;
    }, id: t, implicitlyLoadedAfterOneOf: ee, implicitlyLoadedBefore: ee, importedIdResolutions: ee, importedIds: ee, get importers() {
      return r2.sort();
    }, isEntry: false, isExternal: true, isIncluded: null, meta: i, moduleSideEffects: s, syntheticNamedExports: false };
    Object.defineProperty(this.info, "hasModuleSideEffects", { enumerable: false });
  }
  getVariableForExportName(e) {
    const t = this.declarations.get(e);
    if (t)
      return [t];
    const s = new Q$2(this, e);
    return this.declarations.set(e, s), this.exportedVariables.set(s, e), [s];
  }
  setRenderPath(e, t) {
    this.renderPath = typeof e.paths == "function" ? e.paths(this.id) : e.paths[this.id], this.renderPath || (this.renderPath = this.renormalizeRenderPath ? I$2(T(t, this.id)) : this.id);
  }
  suggestName(e) {
    var t;
    const s = ((t = this.nameSuggestions.get(e)) !== null && t !== void 0 ? t : 0) + 1;
    this.nameSuggestions.set(e, s), s > this.mostCommonSuggestion && (this.mostCommonSuggestion = s, this.suggestedVariableName = e);
  }
  warnUnusedImports() {
    const e = Array.from(this.declarations).filter(([e2, t2]) => e2 !== "*" && !t2.included && !this.reexported && !t2.referenced).map(([e2]) => e2);
    if (e.length === 0)
      return;
    const t = /* @__PURE__ */ new Set();
    for (const s2 of e)
      for (const e2 of this.declarations.get(s2).module.importers)
        t.add(e2);
    const s = [...t];
    this.options.onwarn({ code: "UNUSED_EXTERNAL_IMPORT", message: `${ie(e, ["is", "are"])} imported from external module "${this.id}" but never used in ${ie(s.map((e2) => re(e2)))}.`, names: e, source: this.id, sources: s });
  }
}
const Ie = { ArrayPattern(e, t) {
  for (const s of t.elements)
    s && Ie[s.type](e, s);
}, AssignmentPattern(e, t) {
  Ie[t.left.type](e, t.left);
}, Identifier(e, t) {
  e.push(t.name);
}, MemberExpression() {
}, ObjectPattern(e, t) {
  for (const s of t.properties)
    s.type === "RestElement" ? Ie.RestElement(e, s) : Ie[s.value.type](e, s.value);
}, RestElement(e, t) {
  Ie[t.argument.type](e, t.argument);
} }, _e = function(e) {
  const t = [];
  return Ie[e.type](t, e), t;
};
new Set("break case class catch const continue debugger default delete do else export extends finally for function if import in instanceof let new return super switch this throw try typeof var void while with yield enum await implements package protected static interface private public arguments Infinity NaN undefined null true false eval uneval isFinite isNaN parseFloat parseInt decodeURI decodeURIComponent encodeURI encodeURIComponent escape unescape Object Function Boolean Symbol Error EvalError InternalError RangeError ReferenceError SyntaxError TypeError URIError Number Math Date String RegExp Array Int8Array Uint8Array Uint8ClampedArray Int16Array Uint16Array Int32Array Uint32Array Float32Array Float64Array Map Set WeakMap WeakSet SIMD ArrayBuffer DataView JSON Promise Generator GeneratorFunction Reflect Proxy Intl".split(" ")).add("");
function Ne() {
  return { brokenFlow: 0, includedCallArguments: /* @__PURE__ */ new Set(), includedLabels: /* @__PURE__ */ new Set() };
}
function $e() {
  return { accessed: new j(), assigned: new j(), brokenFlow: 0, called: new G$1(), ignore: { breaks: false, continues: false, labels: /* @__PURE__ */ new Set(), returnYield: false }, includedLabels: /* @__PURE__ */ new Set(), instantiated: new G$1(), replacedVariableInits: /* @__PURE__ */ new Map() };
}
const Te = [];
function Re(e, t = null) {
  return Object.create(t, e);
}
const Me = new class extends K {
  getLiteralValueAtPath() {
  }
}(), De = { value: { hasEffectsWhenCalled: null, returns: X } }, Le = new class extends K {
  getReturnExpressionWhenCalledAtPath(e) {
    return e.length === 1 ? Ke(Ue, e[0]) : X;
  }
  hasEffectsWhenAccessedAtPath(e) {
    return e.length > 1;
  }
  hasEffectsWhenCalledAtPath(e, t, s) {
    return e.length !== 1 || qe(Ue, e[0], t, s);
  }
}(), Oe = { value: { hasEffectsWhenCalled: null, returns: Le } }, Ve = new class extends K {
  getReturnExpressionWhenCalledAtPath(e) {
    return e.length === 1 ? Ke(Ge, e[0]) : X;
  }
  hasEffectsWhenAccessedAtPath(e) {
    return e.length > 1;
  }
  hasEffectsWhenCalledAtPath(e, t, s) {
    return e.length !== 1 || qe(Ge, e[0], t, s);
  }
}(), Be = { value: { hasEffectsWhenCalled: null, returns: Ve } }, Fe = new class extends K {
  getReturnExpressionWhenCalledAtPath(e) {
    return e.length === 1 ? Ke(He, e[0]) : X;
  }
  hasEffectsWhenAccessedAtPath(e) {
    return e.length > 1;
  }
  hasEffectsWhenCalledAtPath(e, t, s) {
    return e.length !== 1 || qe(He, e[0], t, s);
  }
}(), ze = { value: { hasEffectsWhenCalled: null, returns: Fe } }, We = { value: { hasEffectsWhenCalled(e, t) {
  const s = e.args[1];
  return e.args.length < 2 || typeof s.getLiteralValueAtPath(V, U, { deoptimizeCache() {
  } }) == "symbol" && s.hasEffectsWhenCalledAtPath(V, { args: Te, thisParam: null, withNew: false }, t);
}, returns: Fe } }, je = Re({ hasOwnProperty: Oe, isPrototypeOf: Oe, propertyIsEnumerable: Oe, toLocaleString: ze, toString: ze, valueOf: De }), Ue = Re({ valueOf: Oe }, je), Ge = Re({ toExponential: ze, toFixed: ze, toLocaleString: ze, toPrecision: ze, valueOf: Be }, je), He = Re({ anchor: ze, at: De, big: ze, blink: ze, bold: ze, charAt: ze, charCodeAt: Be, codePointAt: De, concat: ze, endsWith: Oe, fixed: ze, fontcolor: ze, fontsize: ze, includes: Oe, indexOf: Be, italics: ze, lastIndexOf: Be, link: ze, localeCompare: Be, match: De, matchAll: De, normalize: ze, padEnd: ze, padStart: ze, repeat: ze, replace: We, replaceAll: We, search: Be, slice: ze, small: ze, split: De, startsWith: Oe, strike: ze, sub: ze, substr: ze, substring: ze, sup: ze, toLocaleLowerCase: ze, toLocaleUpperCase: ze, toLowerCase: ze, toString: ze, toUpperCase: ze, trim: ze, trimEnd: ze, trimLeft: ze, trimRight: ze, trimStart: ze, valueOf: ze }, je);
function qe(e, t, s, i) {
  var n2, r2;
  return typeof t != "string" || !e[t] || (((r2 = (n2 = e[t]).hasEffectsWhenCalled) === null || r2 === void 0 ? void 0 : r2.call(n2, s, i)) || false);
}
function Ke(e, t) {
  return typeof t == "string" && e[t] ? e[t].returns : X;
}
function Xe(e, t, s) {
  s(e, t);
}
function Ye(e, t, s) {
}
var Qe = {};
Qe.Program = Qe.BlockStatement = Qe.StaticBlock = function(e, t, s) {
  for (var i = 0, n2 = e.body; i < n2.length; i += 1) {
    s(n2[i], t, "Statement");
  }
}, Qe.Statement = Xe, Qe.EmptyStatement = Ye, Qe.ExpressionStatement = Qe.ParenthesizedExpression = Qe.ChainExpression = function(e, t, s) {
  return s(e.expression, t, "Expression");
}, Qe.IfStatement = function(e, t, s) {
  s(e.test, t, "Expression"), s(e.consequent, t, "Statement"), e.alternate && s(e.alternate, t, "Statement");
}, Qe.LabeledStatement = function(e, t, s) {
  return s(e.body, t, "Statement");
}, Qe.BreakStatement = Qe.ContinueStatement = Ye, Qe.WithStatement = function(e, t, s) {
  s(e.object, t, "Expression"), s(e.body, t, "Statement");
}, Qe.SwitchStatement = function(e, t, s) {
  s(e.discriminant, t, "Expression");
  for (var i = 0, n2 = e.cases; i < n2.length; i += 1) {
    var r2 = n2[i];
    r2.test && s(r2.test, t, "Expression");
    for (var a2 = 0, o2 = r2.consequent; a2 < o2.length; a2 += 1) {
      s(o2[a2], t, "Statement");
    }
  }
}, Qe.SwitchCase = function(e, t, s) {
  e.test && s(e.test, t, "Expression");
  for (var i = 0, n2 = e.consequent; i < n2.length; i += 1) {
    s(n2[i], t, "Statement");
  }
}, Qe.ReturnStatement = Qe.YieldExpression = Qe.AwaitExpression = function(e, t, s) {
  e.argument && s(e.argument, t, "Expression");
}, Qe.ThrowStatement = Qe.SpreadElement = function(e, t, s) {
  return s(e.argument, t, "Expression");
}, Qe.TryStatement = function(e, t, s) {
  s(e.block, t, "Statement"), e.handler && s(e.handler, t), e.finalizer && s(e.finalizer, t, "Statement");
}, Qe.CatchClause = function(e, t, s) {
  e.param && s(e.param, t, "Pattern"), s(e.body, t, "Statement");
}, Qe.WhileStatement = Qe.DoWhileStatement = function(e, t, s) {
  s(e.test, t, "Expression"), s(e.body, t, "Statement");
}, Qe.ForStatement = function(e, t, s) {
  e.init && s(e.init, t, "ForInit"), e.test && s(e.test, t, "Expression"), e.update && s(e.update, t, "Expression"), s(e.body, t, "Statement");
}, Qe.ForInStatement = Qe.ForOfStatement = function(e, t, s) {
  s(e.left, t, "ForInit"), s(e.right, t, "Expression"), s(e.body, t, "Statement");
}, Qe.ForInit = function(e, t, s) {
  e.type === "VariableDeclaration" ? s(e, t) : s(e, t, "Expression");
}, Qe.DebuggerStatement = Ye, Qe.FunctionDeclaration = function(e, t, s) {
  return s(e, t, "Function");
}, Qe.VariableDeclaration = function(e, t, s) {
  for (var i = 0, n2 = e.declarations; i < n2.length; i += 1) {
    s(n2[i], t);
  }
}, Qe.VariableDeclarator = function(e, t, s) {
  s(e.id, t, "Pattern"), e.init && s(e.init, t, "Expression");
}, Qe.Function = function(e, t, s) {
  e.id && s(e.id, t, "Pattern");
  for (var i = 0, n2 = e.params; i < n2.length; i += 1) {
    s(n2[i], t, "Pattern");
  }
  s(e.body, t, e.expression ? "Expression" : "Statement");
}, Qe.Pattern = function(e, t, s) {
  e.type === "Identifier" ? s(e, t, "VariablePattern") : e.type === "MemberExpression" ? s(e, t, "MemberPattern") : s(e, t);
}, Qe.VariablePattern = Ye, Qe.MemberPattern = Xe, Qe.RestElement = function(e, t, s) {
  return s(e.argument, t, "Pattern");
}, Qe.ArrayPattern = function(e, t, s) {
  for (var i = 0, n2 = e.elements; i < n2.length; i += 1) {
    var r2 = n2[i];
    r2 && s(r2, t, "Pattern");
  }
}, Qe.ObjectPattern = function(e, t, s) {
  for (var i = 0, n2 = e.properties; i < n2.length; i += 1) {
    var r2 = n2[i];
    r2.type === "Property" ? (r2.computed && s(r2.key, t, "Expression"), s(r2.value, t, "Pattern")) : r2.type === "RestElement" && s(r2.argument, t, "Pattern");
  }
}, Qe.Expression = Xe, Qe.ThisExpression = Qe.Super = Qe.MetaProperty = Ye, Qe.ArrayExpression = function(e, t, s) {
  for (var i = 0, n2 = e.elements; i < n2.length; i += 1) {
    var r2 = n2[i];
    r2 && s(r2, t, "Expression");
  }
}, Qe.ObjectExpression = function(e, t, s) {
  for (var i = 0, n2 = e.properties; i < n2.length; i += 1) {
    s(n2[i], t);
  }
}, Qe.FunctionExpression = Qe.ArrowFunctionExpression = Qe.FunctionDeclaration, Qe.SequenceExpression = function(e, t, s) {
  for (var i = 0, n2 = e.expressions; i < n2.length; i += 1) {
    s(n2[i], t, "Expression");
  }
}, Qe.TemplateLiteral = function(e, t, s) {
  for (var i = 0, n2 = e.quasis; i < n2.length; i += 1) {
    s(n2[i], t);
  }
  for (var r2 = 0, a2 = e.expressions; r2 < a2.length; r2 += 1) {
    s(a2[r2], t, "Expression");
  }
}, Qe.TemplateElement = Ye, Qe.UnaryExpression = Qe.UpdateExpression = function(e, t, s) {
  s(e.argument, t, "Expression");
}, Qe.BinaryExpression = Qe.LogicalExpression = function(e, t, s) {
  s(e.left, t, "Expression"), s(e.right, t, "Expression");
}, Qe.AssignmentExpression = Qe.AssignmentPattern = function(e, t, s) {
  s(e.left, t, "Pattern"), s(e.right, t, "Expression");
}, Qe.ConditionalExpression = function(e, t, s) {
  s(e.test, t, "Expression"), s(e.consequent, t, "Expression"), s(e.alternate, t, "Expression");
}, Qe.NewExpression = Qe.CallExpression = function(e, t, s) {
  if (s(e.callee, t, "Expression"), e.arguments)
    for (var i = 0, n2 = e.arguments; i < n2.length; i += 1) {
      s(n2[i], t, "Expression");
    }
}, Qe.MemberExpression = function(e, t, s) {
  s(e.object, t, "Expression"), e.computed && s(e.property, t, "Expression");
}, Qe.ExportNamedDeclaration = Qe.ExportDefaultDeclaration = function(e, t, s) {
  e.declaration && s(e.declaration, t, e.type === "ExportNamedDeclaration" || e.declaration.id ? "Statement" : "Expression"), e.source && s(e.source, t, "Expression");
}, Qe.ExportAllDeclaration = function(e, t, s) {
  e.exported && s(e.exported, t), s(e.source, t, "Expression");
}, Qe.ImportDeclaration = function(e, t, s) {
  for (var i = 0, n2 = e.specifiers; i < n2.length; i += 1) {
    s(n2[i], t);
  }
  s(e.source, t, "Expression");
}, Qe.ImportExpression = function(e, t, s) {
  s(e.source, t, "Expression");
}, Qe.ImportSpecifier = Qe.ImportDefaultSpecifier = Qe.ImportNamespaceSpecifier = Qe.Identifier = Qe.PrivateIdentifier = Qe.Literal = Ye, Qe.TaggedTemplateExpression = function(e, t, s) {
  s(e.tag, t, "Expression"), s(e.quasi, t, "Expression");
}, Qe.ClassDeclaration = Qe.ClassExpression = function(e, t, s) {
  return s(e, t, "Class");
}, Qe.Class = function(e, t, s) {
  e.id && s(e.id, t, "Pattern"), e.superClass && s(e.superClass, t, "Expression"), s(e.body, t);
}, Qe.ClassBody = function(e, t, s) {
  for (var i = 0, n2 = e.body; i < n2.length; i += 1) {
    s(n2[i], t);
  }
}, Qe.MethodDefinition = Qe.PropertyDefinition = Qe.Property = function(e, t, s) {
  e.computed && s(e.key, t, "Expression"), e.value && s(e.value, t, "Expression");
};
const Je = new RegExp("^#[ \\f\\r\\t\\v\\u00a0\\u1680\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff]+sourceMappingURL=.+");
function et(e, t, s = e.type) {
  const { annotations: i } = t;
  let n2 = i[t.annotationIndex];
  for (; n2 && e.start >= n2.end; )
    it(e, n2, t.code), n2 = i[++t.annotationIndex];
  if (n2 && n2.end <= e.end)
    for (Qe[s](e, t, et); (n2 = i[t.annotationIndex]) && n2.end <= e.end; )
      ++t.annotationIndex, at(e, n2, false);
}
const tt = /[^\s(]/g, st = /\S/g;
function it(e, t, s) {
  const i = [];
  let n2;
  if (nt(s.slice(t.end, e.start), tt)) {
    const t2 = e.start;
    for (; ; ) {
      switch (i.push(e), e.type) {
        case "ExpressionStatement":
        case "ChainExpression":
          e = e.expression;
          continue;
        case "SequenceExpression":
          if (nt(s.slice(t2, e.start), st)) {
            e = e.expressions[0];
            continue;
          }
          n2 = true;
          break;
        case "ConditionalExpression":
          if (nt(s.slice(t2, e.start), st)) {
            e = e.test;
            continue;
          }
          n2 = true;
          break;
        case "LogicalExpression":
        case "BinaryExpression":
          if (nt(s.slice(t2, e.start), st)) {
            e = e.left;
            continue;
          }
          n2 = true;
          break;
        case "CallExpression":
        case "NewExpression":
          break;
        default:
          n2 = true;
      }
      break;
    }
  } else
    n2 = true;
  if (n2)
    at(e, t, false);
  else
    for (const e2 of i)
      at(e2, t, true);
}
function nt(e, t) {
  let s;
  for (; (s = t.exec(e)) !== null; ) {
    if (s[0] === "/") {
      const s2 = e.charCodeAt(t.lastIndex);
      if (s2 === 42) {
        t.lastIndex = e.indexOf("*/", t.lastIndex + 1) + 2;
        continue;
      }
      if (s2 === 47) {
        t.lastIndex = e.indexOf("\n", t.lastIndex + 1) + 1;
        continue;
      }
    }
    return t.lastIndex = 0, false;
  }
  return true;
}
const rt = /[@#]__PURE__/;
function at(e, t, s) {
  const i = s ? "_rollupAnnotations" : "_rollupRemoved", n2 = e[i];
  n2 ? n2.push(t) : e[i] = [t];
}
const ot = { Literal: [], Program: ["body"] };
class ht extends K {
  constructor(e, t, s) {
    super(), this.deoptimized = false, this.esTreeNode = e, this.keys = ot[e.type] || function(e2) {
      return ot[e2.type] = Object.keys(e2).filter((t2) => typeof e2[t2] == "object" && t2.charCodeAt(0) !== 95), ot[e2.type];
    }(e), this.parent = t, this.context = t.context, this.createScope(s), this.parseNode(e), this.initialise(), this.context.magicString.addSourcemapLocation(this.start), this.context.magicString.addSourcemapLocation(this.end);
  }
  addExportedVariables(e, t) {
  }
  bind() {
    for (const e of this.keys) {
      const t = this[e];
      if (t !== null)
        if (Array.isArray(t))
          for (const e2 of t)
            e2 == null || e2.bind();
        else
          t.bind();
    }
  }
  createScope(e) {
    this.scope = e;
  }
  hasEffects(e) {
    this.deoptimized || this.applyDeoptimizations();
    for (const t of this.keys) {
      const s = this[t];
      if (s !== null) {
        if (Array.isArray(s)) {
          for (const t2 of s)
            if (t2 == null ? void 0 : t2.hasEffects(e))
              return true;
        } else if (s.hasEffects(e))
          return true;
      }
    }
    return false;
  }
  include(e, t, s) {
    this.deoptimized || this.applyDeoptimizations(), this.included = true;
    for (const s2 of this.keys) {
      const i = this[s2];
      if (i !== null)
        if (Array.isArray(i))
          for (const s3 of i)
            s3 == null || s3.include(e, t);
        else
          i.include(e, t);
    }
  }
  initialise() {
  }
  insertSemicolon(e) {
    e.original[this.end - 1] !== ";" && e.appendLeft(this.end, ";");
  }
  parseNode(e) {
    for (const [t, s] of Object.entries(e))
      if (!this.hasOwnProperty(t))
        if (t.charCodeAt(0) === 95) {
          if (t === "_rollupAnnotations")
            this.annotations = s;
          else if (t === "_rollupRemoved")
            for (const { start: e2, end: t2 } of s)
              this.context.magicString.remove(e2, t2);
        } else if (typeof s != "object" || s === null)
          this[t] = s;
        else if (Array.isArray(s)) {
          this[t] = [];
          for (const e2 of s)
            this[t].push(e2 === null ? null : new (this.context.getNodeConstructor(e2.type))(e2, this, this.scope));
        } else
          this[t] = new (this.context.getNodeConstructor(s.type))(s, this, this.scope);
  }
  render(e, t) {
    for (const s of this.keys) {
      const i = this[s];
      if (i !== null)
        if (Array.isArray(i))
          for (const s2 of i)
            s2 == null || s2.render(e, t);
        else
          i.render(e, t);
    }
  }
  shouldBeIncluded(e) {
    return this.included || !e.brokenFlow && this.hasEffects($e());
  }
  applyDeoptimizations() {
    this.deoptimized = true;
    for (const e of this.keys) {
      const t = this[e];
      if (t !== null)
        if (Array.isArray(t))
          for (const e2 of t)
            e2 == null || e2.deoptimizePath(B$2);
        else
          t.deoptimizePath(B$2);
    }
    this.context.requestTreeshakingPass();
  }
}
class lt extends ht {
  deoptimizeThisOnEventAtPath(e, t, s, i) {
    t.length > 0 && this.argument.deoptimizeThisOnEventAtPath(e, [D$2, ...t], s, i);
  }
  hasEffects(e) {
    this.deoptimized || this.applyDeoptimizations();
    const { propertyReadSideEffects: t } = this.context.options.treeshake;
    return this.argument.hasEffects(e) || t && (t === "always" || this.argument.hasEffectsWhenAccessedAtPath(B$2, e));
  }
  applyDeoptimizations() {
    this.deoptimized = true, this.argument.deoptimizePath([D$2, D$2]), this.context.requestTreeshakingPass();
  }
}
class ct extends K {
  constructor(e) {
    super(), this.description = e;
  }
  deoptimizeThisOnEventAtPath(e, t, s) {
    e === 2 && t.length === 0 && this.description.mutatesSelfAsArray && s.deoptimizePath(z);
  }
  getReturnExpressionWhenCalledAtPath(e, t) {
    return e.length > 0 ? X : this.description.returnsPrimitive || (this.description.returns === "self" ? t.thisParam || X : this.description.returns());
  }
  hasEffectsWhenAccessedAtPath(e) {
    return e.length > 1;
  }
  hasEffectsWhenAssignedAtPath(e) {
    return e.length > 0;
  }
  hasEffectsWhenCalledAtPath(e, t, s) {
    var i, n2;
    if (e.length > 0 || this.description.mutatesSelfAsArray === true && ((i = t.thisParam) === null || i === void 0 ? void 0 : i.hasEffectsWhenAssignedAtPath(z, s)))
      return true;
    if (!this.description.callsArgs)
      return false;
    for (const e2 of this.description.callsArgs)
      if ((n2 = t.args[e2]) === null || n2 === void 0 ? void 0 : n2.hasEffectsWhenCalledAtPath(V, { args: Te, thisParam: null, withNew: false }, s))
        return true;
    return false;
  }
}
const ut = [new ct({ callsArgs: null, mutatesSelfAsArray: false, returns: null, returnsPrimitive: Le })], dt = [new ct({ callsArgs: null, mutatesSelfAsArray: false, returns: null, returnsPrimitive: Fe })], pt = [new ct({ callsArgs: null, mutatesSelfAsArray: false, returns: null, returnsPrimitive: Ve })], ft = [new ct({ callsArgs: null, mutatesSelfAsArray: false, returns: null, returnsPrimitive: X })], mt = /^\d+$/;
class gt extends K {
  constructor(e, t, s = false) {
    if (super(), this.prototypeExpression = t, this.immutable = s, this.allProperties = [], this.deoptimizedPaths = /* @__PURE__ */ Object.create(null), this.expressionsToBeDeoptimizedByKey = /* @__PURE__ */ Object.create(null), this.gettersByKey = /* @__PURE__ */ Object.create(null), this.hasLostTrack = false, this.hasUnknownDeoptimizedInteger = false, this.hasUnknownDeoptimizedProperty = false, this.propertiesAndGettersByKey = /* @__PURE__ */ Object.create(null), this.propertiesAndSettersByKey = /* @__PURE__ */ Object.create(null), this.settersByKey = /* @__PURE__ */ Object.create(null), this.thisParametersToBeDeoptimized = /* @__PURE__ */ new Set(), this.unknownIntegerProps = [], this.unmatchableGetters = [], this.unmatchablePropertiesAndGetters = [], this.unmatchableSetters = [], Array.isArray(e))
      this.buildPropertyMaps(e);
    else {
      this.propertiesAndGettersByKey = this.propertiesAndSettersByKey = e;
      for (const t2 of Object.values(e))
        this.allProperties.push(...t2);
    }
  }
  deoptimizeAllProperties(e) {
    var t;
    const s = this.hasLostTrack || this.hasUnknownDeoptimizedProperty;
    if (e ? this.hasUnknownDeoptimizedProperty = true : this.hasLostTrack = true, !s) {
      for (const e2 of Object.values(this.propertiesAndGettersByKey).concat(Object.values(this.settersByKey)))
        for (const t2 of e2)
          t2.deoptimizePath(B$2);
      (t = this.prototypeExpression) === null || t === void 0 || t.deoptimizePath([D$2, D$2]), this.deoptimizeCachedEntities();
    }
  }
  deoptimizeIntegerProperties() {
    if (!(this.hasLostTrack || this.hasUnknownDeoptimizedProperty || this.hasUnknownDeoptimizedInteger)) {
      this.hasUnknownDeoptimizedInteger = true;
      for (const [e, t] of Object.entries(this.propertiesAndGettersByKey))
        if (mt.test(e))
          for (const e2 of t)
            e2.deoptimizePath(B$2);
      this.deoptimizeCachedIntegerEntities();
    }
  }
  deoptimizePath(e) {
    var t;
    if (this.hasLostTrack || this.immutable)
      return;
    const s = e[0];
    if (e.length === 1) {
      if (typeof s != "string")
        return s === O ? this.deoptimizeIntegerProperties() : this.deoptimizeAllProperties(s === L);
      if (!this.deoptimizedPaths[s]) {
        this.deoptimizedPaths[s] = true;
        const e2 = this.expressionsToBeDeoptimizedByKey[s];
        if (e2)
          for (const t2 of e2)
            t2.deoptimizeCache();
      }
    }
    const i = e.length === 1 ? B$2 : e.slice(1);
    for (const e2 of typeof s == "string" ? (this.propertiesAndGettersByKey[s] || this.unmatchablePropertiesAndGetters).concat(this.settersByKey[s] || this.unmatchableSetters) : this.allProperties)
      e2.deoptimizePath(i);
    (t = this.prototypeExpression) === null || t === void 0 || t.deoptimizePath(e.length === 1 ? [...e, D$2] : e);
  }
  deoptimizeThisOnEventAtPath(e, t, s, i) {
    var n2;
    const [r2, ...a2] = t;
    if (this.hasLostTrack || (e === 2 || t.length > 1) && (this.hasUnknownDeoptimizedProperty || typeof r2 == "string" && this.deoptimizedPaths[r2]))
      return void s.deoptimizePath(B$2);
    const [o2, h2, l2] = e === 2 || t.length > 1 ? [this.propertiesAndGettersByKey, this.propertiesAndGettersByKey, this.unmatchablePropertiesAndGetters] : e === 0 ? [this.propertiesAndGettersByKey, this.gettersByKey, this.unmatchableGetters] : [this.propertiesAndSettersByKey, this.settersByKey, this.unmatchableSetters];
    if (typeof r2 == "string") {
      if (o2[r2]) {
        const t2 = h2[r2];
        if (t2)
          for (const n3 of t2)
            n3.deoptimizeThisOnEventAtPath(e, a2, s, i);
        return void (this.immutable || this.thisParametersToBeDeoptimized.add(s));
      }
      for (const t2 of l2)
        t2.deoptimizeThisOnEventAtPath(e, a2, s, i);
      if (mt.test(r2))
        for (const t2 of this.unknownIntegerProps)
          t2.deoptimizeThisOnEventAtPath(e, a2, s, i);
    } else {
      for (const t2 of Object.values(h2).concat([l2]))
        for (const n3 of t2)
          n3.deoptimizeThisOnEventAtPath(e, a2, s, i);
      for (const t2 of this.unknownIntegerProps)
        t2.deoptimizeThisOnEventAtPath(e, a2, s, i);
    }
    this.immutable || this.thisParametersToBeDeoptimized.add(s), (n2 = this.prototypeExpression) === null || n2 === void 0 || n2.deoptimizeThisOnEventAtPath(e, t, s, i);
  }
  getLiteralValueAtPath(e, t, s) {
    if (e.length === 0)
      return q;
    const i = e[0], n2 = this.getMemberExpressionAndTrackDeopt(i, s);
    return n2 ? n2.getLiteralValueAtPath(e.slice(1), t, s) : this.prototypeExpression ? this.prototypeExpression.getLiteralValueAtPath(e, t, s) : e.length !== 1 ? H : void 0;
  }
  getReturnExpressionWhenCalledAtPath(e, t, s, i) {
    if (e.length === 0)
      return X;
    const n2 = e[0], r2 = this.getMemberExpressionAndTrackDeopt(n2, i);
    return r2 ? r2.getReturnExpressionWhenCalledAtPath(e.slice(1), t, s, i) : this.prototypeExpression ? this.prototypeExpression.getReturnExpressionWhenCalledAtPath(e, t, s, i) : X;
  }
  hasEffectsWhenAccessedAtPath(e, t) {
    const [s, ...i] = e;
    if (e.length > 1) {
      if (typeof s != "string")
        return true;
      const n2 = this.getMemberExpression(s);
      return n2 ? n2.hasEffectsWhenAccessedAtPath(i, t) : !this.prototypeExpression || this.prototypeExpression.hasEffectsWhenAccessedAtPath(e, t);
    }
    if (this.hasLostTrack)
      return true;
    if (typeof s == "string") {
      if (this.propertiesAndGettersByKey[s]) {
        const e2 = this.gettersByKey[s];
        if (e2) {
          for (const s2 of e2)
            if (s2.hasEffectsWhenAccessedAtPath(i, t))
              return true;
        }
        return false;
      }
      for (const e2 of this.unmatchableGetters)
        if (e2.hasEffectsWhenAccessedAtPath(i, t))
          return true;
    } else
      for (const e2 of Object.values(this.gettersByKey).concat([this.unmatchableGetters]))
        for (const s2 of e2)
          if (s2.hasEffectsWhenAccessedAtPath(i, t))
            return true;
    return !!this.prototypeExpression && this.prototypeExpression.hasEffectsWhenAccessedAtPath(e, t);
  }
  hasEffectsWhenAssignedAtPath(e, t) {
    const [s, ...i] = e;
    if (e.length > 1) {
      if (typeof s != "string")
        return true;
      const n2 = this.getMemberExpression(s);
      return n2 ? n2.hasEffectsWhenAssignedAtPath(i, t) : !this.prototypeExpression || this.prototypeExpression.hasEffectsWhenAssignedAtPath(e, t);
    }
    if (s === L)
      return false;
    if (this.hasLostTrack)
      return true;
    if (typeof s == "string") {
      if (this.propertiesAndSettersByKey[s]) {
        const e2 = this.settersByKey[s];
        if (e2) {
          for (const s2 of e2)
            if (s2.hasEffectsWhenAssignedAtPath(i, t))
              return true;
        }
        return false;
      }
      for (const e2 of this.unmatchableSetters)
        if (e2.hasEffectsWhenAssignedAtPath(i, t))
          return true;
    } else
      for (const e2 of Object.values(this.settersByKey).concat([this.unmatchableSetters]))
        for (const s2 of e2)
          if (s2.hasEffectsWhenAssignedAtPath(i, t))
            return true;
    return !!this.prototypeExpression && this.prototypeExpression.hasEffectsWhenAssignedAtPath(e, t);
  }
  hasEffectsWhenCalledAtPath(e, t, s) {
    const i = e[0], n2 = this.getMemberExpression(i);
    return n2 ? n2.hasEffectsWhenCalledAtPath(e.slice(1), t, s) : !this.prototypeExpression || this.prototypeExpression.hasEffectsWhenCalledAtPath(e, t, s);
  }
  buildPropertyMaps(e) {
    const { allProperties: t, propertiesAndGettersByKey: s, propertiesAndSettersByKey: i, settersByKey: n2, gettersByKey: r2, unknownIntegerProps: a2, unmatchablePropertiesAndGetters: o2, unmatchableGetters: h2, unmatchableSetters: l2 } = this, c2 = [];
    for (let u2 = e.length - 1; u2 >= 0; u2--) {
      const { key: d2, kind: p2, property: f2 } = e[u2];
      if (t.push(f2), typeof d2 != "string") {
        if (d2 === O) {
          a2.push(f2);
          continue;
        }
        p2 === "set" && l2.push(f2), p2 === "get" && h2.push(f2), p2 !== "get" && c2.push(f2), p2 !== "set" && o2.push(f2);
      } else
        p2 === "set" ? i[d2] || (i[d2] = [f2, ...c2], n2[d2] = [f2, ...l2]) : p2 === "get" ? s[d2] || (s[d2] = [f2, ...o2], r2[d2] = [f2, ...h2]) : (i[d2] || (i[d2] = [f2, ...c2]), s[d2] || (s[d2] = [f2, ...o2]));
    }
  }
  deoptimizeCachedEntities() {
    for (const e of Object.values(this.expressionsToBeDeoptimizedByKey))
      for (const t of e)
        t.deoptimizeCache();
    for (const e of this.thisParametersToBeDeoptimized)
      e.deoptimizePath(B$2);
  }
  deoptimizeCachedIntegerEntities() {
    for (const [e, t] of Object.entries(this.expressionsToBeDeoptimizedByKey))
      if (mt.test(e))
        for (const e2 of t)
          e2.deoptimizeCache();
    for (const e of this.thisParametersToBeDeoptimized)
      e.deoptimizePath(z);
  }
  getMemberExpression(e) {
    if (this.hasLostTrack || this.hasUnknownDeoptimizedProperty || typeof e != "string" || this.hasUnknownDeoptimizedInteger && mt.test(e) || this.deoptimizedPaths[e])
      return X;
    const t = this.propertiesAndGettersByKey[e];
    return (t == null ? void 0 : t.length) === 1 ? t[0] : t || this.unmatchablePropertiesAndGetters.length > 0 || this.unknownIntegerProps.length && mt.test(e) ? X : null;
  }
  getMemberExpressionAndTrackDeopt(e, t) {
    if (typeof e != "string")
      return X;
    const s = this.getMemberExpression(e);
    if (s !== X && !this.immutable) {
      (this.expressionsToBeDeoptimizedByKey[e] = this.expressionsToBeDeoptimizedByKey[e] || []).push(t);
    }
    return s;
  }
}
const yt = (e) => typeof e == "string" && /^\d+$/.test(e), Et = new class extends K {
  deoptimizeThisOnEventAtPath(e, t, s) {
    e !== 2 || t.length !== 1 || yt(t[0]) || s.deoptimizePath(B$2);
  }
  getLiteralValueAtPath(e) {
    return e.length === 1 && yt(e[0]) ? void 0 : H;
  }
  hasEffectsWhenAccessedAtPath(e) {
    return e.length > 1;
  }
  hasEffectsWhenAssignedAtPath(e) {
    return e.length > 1;
  }
}(), xt = new gt({ __proto__: null, hasOwnProperty: ut, isPrototypeOf: ut, propertyIsEnumerable: ut, toLocaleString: dt, toString: dt, valueOf: ft }, Et, true), vt = [{ key: O, kind: "init", property: X }, { key: "length", kind: "init", property: Ve }], bt = [new ct({ callsArgs: [0], mutatesSelfAsArray: "deopt-only", returns: null, returnsPrimitive: Le })], At = [new ct({ callsArgs: [0], mutatesSelfAsArray: "deopt-only", returns: null, returnsPrimitive: Ve })], St = [new ct({ callsArgs: null, mutatesSelfAsArray: true, returns: () => new gt(vt, Tt), returnsPrimitive: null })], Pt = [new ct({ callsArgs: null, mutatesSelfAsArray: "deopt-only", returns: () => new gt(vt, Tt), returnsPrimitive: null })], kt = [new ct({ callsArgs: [0], mutatesSelfAsArray: "deopt-only", returns: () => new gt(vt, Tt), returnsPrimitive: null })], wt = [new ct({ callsArgs: null, mutatesSelfAsArray: true, returns: null, returnsPrimitive: Ve })], Ct = [new ct({ callsArgs: null, mutatesSelfAsArray: true, returns: null, returnsPrimitive: X })], It = [new ct({ callsArgs: null, mutatesSelfAsArray: "deopt-only", returns: null, returnsPrimitive: X })], _t = [new ct({ callsArgs: [0], mutatesSelfAsArray: "deopt-only", returns: null, returnsPrimitive: X })], Nt = [new ct({ callsArgs: null, mutatesSelfAsArray: true, returns: "self", returnsPrimitive: null })], $t = [new ct({ callsArgs: [0], mutatesSelfAsArray: true, returns: "self", returnsPrimitive: null })], Tt = new gt({ __proto__: null, at: It, concat: Pt, copyWithin: Nt, entries: Pt, every: bt, fill: Nt, filter: kt, find: _t, findIndex: At, findLast: _t, findLastIndex: At, flat: Pt, flatMap: kt, forEach: _t, groupBy: _t, groupByToMap: _t, includes: ut, indexOf: pt, join: dt, keys: ft, lastIndexOf: pt, map: kt, pop: Ct, push: wt, reduce: _t, reduceRight: _t, reverse: Nt, shift: Ct, slice: Pt, some: bt, sort: $t, splice: St, toLocaleString: dt, toString: dt, unshift: wt, values: It }, xt, true);
class Rt extends Y {
  constructor(e, t, s, i) {
    super(e), this.calledFromTryStatement = false, this.additionalInitializers = null, this.expressionsToBeDeoptimized = [], this.declarations = t ? [t] : [], this.init = s, this.deoptimizationTracker = i.deoptimizationTracker, this.module = i.module;
  }
  addDeclaration(e, t) {
    this.declarations.push(e);
    const s = this.markInitializersForDeoptimization();
    t !== null && s.push(t);
  }
  consolidateInitializers() {
    if (this.additionalInitializers !== null) {
      for (const e of this.additionalInitializers)
        e.deoptimizePath(B$2);
      this.additionalInitializers = null;
    }
  }
  deoptimizeCallParameters() {
    var e;
    (e = this.init) === null || e === void 0 || e.deoptimizeCallParameters();
  }
  deoptimizePath(e) {
    var t, s;
    if (!this.isReassigned && !this.deoptimizationTracker.trackEntityAtPathAndGetIfTracked(e, this))
      if (e.length === 0) {
        if (!this.isReassigned) {
          this.isReassigned = true;
          const e2 = this.expressionsToBeDeoptimized;
          this.expressionsToBeDeoptimized = [];
          for (const t2 of e2)
            t2.deoptimizeCache();
          (t = this.init) === null || t === void 0 || t.deoptimizePath(B$2);
        }
      } else
        (s = this.init) === null || s === void 0 || s.deoptimizePath(e);
  }
  deoptimizeThisOnEventAtPath(e, t, s, i) {
    if (this.isReassigned || !this.init)
      return s.deoptimizePath(B$2);
    i.withTrackedEntityAtPath(t, this.init, () => this.init.deoptimizeThisOnEventAtPath(e, t, s, i), void 0);
  }
  getLiteralValueAtPath(e, t, s) {
    return this.isReassigned || !this.init ? H : t.withTrackedEntityAtPath(e, this.init, () => (this.expressionsToBeDeoptimized.push(s), this.init.getLiteralValueAtPath(e, t, s)), H);
  }
  getReturnExpressionWhenCalledAtPath(e, t, s, i) {
    return this.isReassigned || !this.init ? X : s.withTrackedEntityAtPath(e, this.init, () => (this.expressionsToBeDeoptimized.push(i), this.init.getReturnExpressionWhenCalledAtPath(e, t, s, i)), X);
  }
  hasEffectsWhenAccessedAtPath(e, t) {
    return !!this.isReassigned || this.init && !t.accessed.trackEntityAtPathAndGetIfTracked(e, this) && this.init.hasEffectsWhenAccessedAtPath(e, t);
  }
  hasEffectsWhenAssignedAtPath(e, t) {
    return !!this.included || e.length !== 0 && (!!this.isReassigned || this.init && !t.assigned.trackEntityAtPathAndGetIfTracked(e, this) && this.init.hasEffectsWhenAssignedAtPath(e, t));
  }
  hasEffectsWhenCalledAtPath(e, t, s) {
    return !!this.isReassigned || this.init && !(t.withNew ? s.instantiated : s.called).trackEntityAtPathAndGetIfTracked(e, t, this) && this.init.hasEffectsWhenCalledAtPath(e, t, s);
  }
  include() {
    if (!this.included) {
      this.included = true;
      for (const e of this.declarations) {
        e.included || e.include(Ne(), false);
        let t = e.parent;
        for (; !t.included && (t.included = true, t.type !== "Program"); )
          t = t.parent;
      }
    }
  }
  includeCallArguments(e, t) {
    if (this.isReassigned || this.init && e.includedCallArguments.has(this.init))
      for (const s of t)
        s.include(e, false);
    else
      this.init && (e.includedCallArguments.add(this.init), this.init.includeCallArguments(e, t), e.includedCallArguments.delete(this.init));
  }
  markCalledFromTryStatement() {
    this.calledFromTryStatement = true;
  }
  markInitializersForDeoptimization() {
    return this.additionalInitializers === null && (this.additionalInitializers = this.init === null ? [] : [this.init], this.init = X, this.isReassigned = true), this.additionalInitializers;
  }
}
function Mt(e) {
  let t = "";
  do {
    const s = e % 64;
    e = Math.floor(e / 64), t = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_$"[s] + t;
  } while (e !== 0);
  return t;
}
function Dt(e, t) {
  let s = e, i = 1;
  for (; t.has(s) || Se.has(s); )
    s = `${e}$${Mt(i++)}`;
  return t.add(s), s;
}
class Lt {
  constructor() {
    this.children = [], this.variables = /* @__PURE__ */ new Map();
  }
  addDeclaration(e, t, s, i) {
    const n2 = e.name;
    let r2 = this.variables.get(n2);
    return r2 ? r2.addDeclaration(e, s) : (r2 = new Rt(e.name, e, s || Me, t), this.variables.set(n2, r2)), r2;
  }
  contains(e) {
    return this.variables.has(e);
  }
  findVariable(e) {
    throw new Error("Internal Error: findVariable needs to be implemented by a subclass");
  }
}
class Ot extends Lt {
  constructor(e) {
    super(), this.accessedOutsideVariables = /* @__PURE__ */ new Map(), this.parent = e, e.children.push(this);
  }
  addAccessedDynamicImport(e) {
    (this.accessedDynamicImports || (this.accessedDynamicImports = /* @__PURE__ */ new Set())).add(e), this.parent instanceof Ot && this.parent.addAccessedDynamicImport(e);
  }
  addAccessedGlobals(e, t) {
    const s = t.get(this) || /* @__PURE__ */ new Set();
    for (const t2 of e)
      s.add(t2);
    t.set(this, s), this.parent instanceof Ot && this.parent.addAccessedGlobals(e, t);
  }
  addNamespaceMemberAccess(e, t) {
    this.accessedOutsideVariables.set(e, t), this.parent.addNamespaceMemberAccess(e, t);
  }
  addReturnExpression(e) {
    this.parent instanceof Ot && this.parent.addReturnExpression(e);
  }
  addUsedOutsideNames(e, t, s, i) {
    for (const i2 of this.accessedOutsideVariables.values())
      i2.included && (e.add(i2.getBaseVariableName()), t === "system" && s.has(i2) && e.add("exports"));
    const n2 = i.get(this);
    if (n2)
      for (const t2 of n2)
        e.add(t2);
  }
  contains(e) {
    return this.variables.has(e) || this.parent.contains(e);
  }
  deconflict(e, t, s) {
    const i = /* @__PURE__ */ new Set();
    if (this.addUsedOutsideNames(i, e, t, s), this.accessedDynamicImports)
      for (const e2 of this.accessedDynamicImports)
        e2.inlineNamespace && i.add(e2.inlineNamespace.getBaseVariableName());
    for (const [e2, t2] of this.variables)
      (t2.included || t2.alwaysRendered) && t2.setRenderNames(null, Dt(e2, i));
    for (const i2 of this.children)
      i2.deconflict(e, t, s);
  }
  findLexicalBoundary() {
    return this.parent.findLexicalBoundary();
  }
  findVariable(e) {
    const t = this.variables.get(e) || this.accessedOutsideVariables.get(e);
    if (t)
      return t;
    const s = this.parent.findVariable(e);
    return this.accessedOutsideVariables.set(e, s), s;
  }
}
class Vt extends Ot {
  constructor(e, t) {
    super(e), this.parameters = [], this.hasRest = false, this.context = t, this.hoistedBodyVarScope = new Ot(this);
  }
  addParameterDeclaration(e) {
    const t = e.name;
    let s = this.hoistedBodyVarScope.variables.get(t);
    return s ? s.addDeclaration(e, null) : s = new Rt(t, e, X, this.context), this.variables.set(t, s), s;
  }
  addParameterVariables(e, t) {
    this.parameters = e;
    for (const t2 of e)
      for (const e2 of t2)
        e2.alwaysRendered = true;
    this.hasRest = t;
  }
  includeCallArguments(e, t) {
    let s = false, i = false;
    const n2 = this.hasRest && this.parameters[this.parameters.length - 1];
    for (const s2 of t)
      if (s2 instanceof lt) {
        for (const s3 of t)
          s3.include(e, false);
        break;
      }
    for (let r2 = t.length - 1; r2 >= 0; r2--) {
      const a2 = this.parameters[r2] || n2, o2 = t[r2];
      if (a2)
        if (s = false, a2.length === 0)
          i = true;
        else
          for (const e2 of a2)
            e2.included && (i = true), e2.calledFromTryStatement && (s = true);
      !i && o2.shouldBeIncluded(e) && (i = true), i && o2.include(e, s);
    }
  }
}
class Bt extends Vt {
  constructor() {
    super(...arguments), this.returnExpression = null, this.returnExpressions = [];
  }
  addReturnExpression(e) {
    this.returnExpressions.push(e);
  }
  getReturnExpression() {
    return this.returnExpression === null && this.updateReturnExpression(), this.returnExpression;
  }
  updateReturnExpression() {
    if (this.returnExpressions.length === 1)
      this.returnExpression = this.returnExpressions[0];
    else {
      this.returnExpression = X;
      for (const e of this.returnExpressions)
        e.deoptimizePath(B$2);
    }
  }
}
class Ft extends ht {
  addExportedVariables(e, t) {
    this.left.addExportedVariables(e, t);
  }
  declare(e, t) {
    return this.left.declare(e, t);
  }
  deoptimizePath(e) {
    e.length === 0 && this.left.deoptimizePath(e);
  }
  hasEffectsWhenAssignedAtPath(e, t) {
    return e.length > 0 || this.left.hasEffectsWhenAssignedAtPath(V, t);
  }
  include(e, t) {
    this.included = true, this.left.include(e, t), this.right.include(e, t);
  }
  markDeclarationReached() {
    this.left.markDeclarationReached();
  }
  render(e, t, { isShorthandProperty: s } = Z) {
    this.left.render(e, t, { isShorthandProperty: s }), this.right.included ? this.right.render(e, t) : e.remove(this.left.end, this.end);
  }
  applyDeoptimizations() {
    this.deoptimized = true, this.left.deoptimizePath(V), this.right.deoptimizePath(B$2), this.context.requestTreeshakingPass();
  }
}
function zt(e, t, s, i) {
  if (t.remove(s, i), e.annotations)
    for (const i2 of e.annotations) {
      if (!(i2.start < s))
        return;
      t.remove(i2.start, i2.end);
    }
}
function Wt(e, t) {
  if (e.annotations || e.parent.type !== "ExpressionStatement" || (e = e.parent), e.annotations)
    for (const s of e.annotations)
      t.remove(s.start, s.end);
}
const jt = { isNoStatement: true };
function Ut(e, t, s = 0) {
  let i, n2;
  for (i = e.indexOf(t, s); ; ) {
    if ((s = e.indexOf("/", s)) === -1 || s >= i)
      return i;
    n2 = e.charCodeAt(++s), ++s, (s = n2 === 47 ? e.indexOf("\n", s) + 1 : e.indexOf("*/", s) + 2) > i && (i = e.indexOf(t, s));
  }
}
const Gt = /\S/g;
function Ht(e, t) {
  Gt.lastIndex = t;
  return Gt.exec(e).index;
}
function qt(e) {
  let t, s, i = 0;
  for (t = e.indexOf("\n", i); ; ) {
    if (i = e.indexOf("/", i), i === -1 || i > t)
      return [t, t + 1];
    if (s = e.charCodeAt(i + 1), s === 47)
      return [i, t + 1];
    i = e.indexOf("*/", i + 3) + 2, i > t && (t = e.indexOf("\n", i));
  }
}
function Kt(e, t, s, i, n2) {
  let r2, a2, o2, h2, l2 = e[0], c2 = !l2.included || l2.needsBoundaries;
  c2 && (h2 = s + qt(t.original.slice(s, l2.start))[1]);
  for (let s2 = 1; s2 <= e.length; s2++)
    r2 = l2, a2 = h2, o2 = c2, l2 = e[s2], c2 = l2 !== void 0 && (!l2.included || l2.needsBoundaries), o2 || c2 ? (h2 = r2.end + qt(t.original.slice(r2.end, l2 === void 0 ? i : l2.start))[1], r2.included ? o2 ? r2.render(t, n2, { end: h2, start: a2 }) : r2.render(t, n2) : zt(r2, t, a2, h2)) : r2.render(t, n2);
}
function Xt(e, t, s, i) {
  const n2 = [];
  let r2, a2, o2, h2, l2, c2 = s - 1;
  for (let i2 = 0; i2 < e.length; i2++) {
    for (a2 = e[i2], r2 !== void 0 && (c2 = r2.end + Ut(t.original.slice(r2.end, a2.start), ",")), o2 = h2 = c2 + 1 + qt(t.original.slice(c2 + 1, a2.start))[1]; l2 = t.original.charCodeAt(o2), l2 === 32 || l2 === 9 || l2 === 10 || l2 === 13; )
      o2++;
    r2 !== void 0 && n2.push({ contentEnd: h2, end: o2, node: r2, separator: c2, start: s }), r2 = a2, s = o2;
  }
  return n2.push({ contentEnd: i, end: i, node: r2, separator: null, start: s }), n2;
}
function Yt(e, t, s) {
  for (; ; ) {
    const [i, n2] = qt(e.original.slice(t, s));
    if (i === -1)
      break;
    e.remove(t + i, t += n2);
  }
}
class Qt extends Ot {
  addDeclaration(e, t, s, i) {
    if (i) {
      const n2 = this.parent.addDeclaration(e, t, s, i);
      return n2.markInitializersForDeoptimization(), n2;
    }
    return super.addDeclaration(e, t, s, false);
  }
}
class Zt extends ht {
  initialise() {
    this.directive && this.directive !== "use strict" && this.parent.type === "Program" && this.context.warn({ code: "MODULE_LEVEL_DIRECTIVE", message: `Module level directives cause errors when bundled, '${this.directive}' was ignored.` }, this.start);
  }
  render(e, t) {
    super.render(e, t), this.included && this.insertSemicolon(e);
  }
  shouldBeIncluded(e) {
    return this.directive && this.directive !== "use strict" ? this.parent.type !== "Program" : super.shouldBeIncluded(e);
  }
  applyDeoptimizations() {
  }
}
class Jt extends ht {
  constructor() {
    super(...arguments), this.directlyIncluded = false;
  }
  addImplicitReturnExpressionToScope() {
    const e = this.body[this.body.length - 1];
    e && e.type === "ReturnStatement" || this.scope.addReturnExpression(X);
  }
  createScope(e) {
    this.scope = this.parent.preventChildBlockScope ? e : new Qt(e);
  }
  hasEffects(e) {
    if (this.deoptimizeBody)
      return true;
    for (const t of this.body) {
      if (e.brokenFlow)
        break;
      if (t.hasEffects(e))
        return true;
    }
    return false;
  }
  include(e, t) {
    if (!this.deoptimizeBody || !this.directlyIncluded) {
      this.included = true, this.directlyIncluded = true, this.deoptimizeBody && (t = true);
      for (const s of this.body)
        (t || s.shouldBeIncluded(e)) && s.include(e, t);
    }
  }
  initialise() {
    const e = this.body[0];
    this.deoptimizeBody = e instanceof Zt && e.directive === "use asm";
  }
  render(e, t) {
    this.body.length ? Kt(this.body, e, this.start + 1, this.end - 1, t) : super.render(e, t);
  }
}
class es extends ht {
  constructor() {
    super(...arguments), this.declarationInit = null;
  }
  addExportedVariables(e, t) {
    this.argument.addExportedVariables(e, t);
  }
  declare(e, t) {
    return this.declarationInit = t, this.argument.declare(e, X);
  }
  deoptimizePath(e) {
    e.length === 0 && this.argument.deoptimizePath(V);
  }
  hasEffectsWhenAssignedAtPath(e, t) {
    return e.length > 0 || this.argument.hasEffectsWhenAssignedAtPath(V, t);
  }
  markDeclarationReached() {
    this.argument.markDeclarationReached();
  }
  applyDeoptimizations() {
    this.deoptimized = true, this.declarationInit !== null && (this.declarationInit.deoptimizePath([D$2, D$2]), this.context.requestTreeshakingPass());
  }
}
class ts extends ht {
  constructor() {
    super(...arguments), this.objectEntity = null, this.deoptimizedReturn = false, this.forceIncludeParameters = false;
  }
  deoptimizeCache() {
    this.forceIncludeParameters = true;
  }
  deoptimizeCallParameters() {
    this.forceIncludeParameters = true;
  }
  deoptimizePath(e) {
    this.getObjectEntity().deoptimizePath(e), e.length === 1 && e[0] === D$2 && (this.forceIncludeParameters = true, this.scope.getReturnExpression().deoptimizePath(B$2));
  }
  deoptimizeThisOnEventAtPath(e, t, s, i) {
    t.length > 0 && this.getObjectEntity().deoptimizeThisOnEventAtPath(e, t, s, i);
  }
  getLiteralValueAtPath(e, t, s) {
    return this.getObjectEntity().getLiteralValueAtPath(e, t, s);
  }
  getReturnExpressionWhenCalledAtPath(e, t, s, i) {
    return e.length > 0 ? this.getObjectEntity().getReturnExpressionWhenCalledAtPath(e, t, s, i) : this.async ? (this.deoptimizedReturn || (this.deoptimizedReturn = true, this.scope.getReturnExpression().deoptimizePath(B$2), this.context.requestTreeshakingPass()), X) : this.scope.getReturnExpression();
  }
  hasEffectsWhenAccessedAtPath(e, t) {
    return this.getObjectEntity().hasEffectsWhenAccessedAtPath(e, t);
  }
  hasEffectsWhenAssignedAtPath(e, t) {
    return this.getObjectEntity().hasEffectsWhenAssignedAtPath(e, t);
  }
  hasEffectsWhenCalledAtPath(e, t, s) {
    var i;
    if (e.length > 0)
      return this.getObjectEntity().hasEffectsWhenCalledAtPath(e, t, s);
    if (this.async) {
      const { propertyReadSideEffects: e2 } = this.context.options.treeshake, t2 = this.scope.getReturnExpression();
      if (t2.hasEffectsWhenCalledAtPath(["then"], { args: Te, thisParam: null, withNew: false }, s) || e2 && (e2 === "always" || t2.hasEffectsWhenAccessedAtPath(["then"], s)))
        return true;
    }
    for (let e2 = 0; e2 < this.params.length; e2++) {
      const n2 = this.params[e2];
      if (n2 instanceof Ft) {
        if (n2.left.hasEffects(s))
          return true;
        const r2 = (i = t.args[e2]) === null || i === void 0 ? void 0 : i.getLiteralValueAtPath(V, U, this);
        if ((r2 === void 0 || r2 === H) && n2.right.hasEffects(s))
          return true;
      } else if (n2.hasEffects(s))
        return true;
    }
    return false;
  }
  include(e, t, { includeWithoutParameterDefaults: s } = Z) {
    this.deoptimized || this.applyDeoptimizations(), this.included = true;
    const { brokenFlow: i } = e;
    if (e.brokenFlow = 0, this.body.include(e, t), e.brokenFlow = i, !s || t || this.forceIncludeParameters)
      for (const s2 of this.params)
        s2.include(e, t);
  }
  includeCallArguments(e, t) {
    var s;
    for (let i = 0; i < this.params.length; i++) {
      const n2 = this.params[i];
      if (n2 instanceof Ft) {
        n2.left.shouldBeIncluded(e) && n2.left.include(e, false);
        const r2 = (s = t[i]) === null || s === void 0 ? void 0 : s.getLiteralValueAtPath(V, U, this);
        r2 !== void 0 && r2 !== H || !this.parameterVariables[i].some((e2) => e2.included) && !n2.right.shouldBeIncluded(e) || n2.right.include(e, false);
      } else
        n2.shouldBeIncluded(e) && n2.include(e, false);
    }
    this.scope.includeCallArguments(e, t);
  }
  initialise() {
    this.parameterVariables = this.params.map((e) => e.declare("parameter", X)), this.scope.addParameterVariables(this.parameterVariables, this.params[this.params.length - 1] instanceof es), this.body instanceof Jt ? this.body.addImplicitReturnExpressionToScope() : this.scope.addReturnExpression(this.body);
  }
  parseNode(e) {
    e.body.type === "BlockStatement" && (this.body = new Jt(e.body, this, this.scope.hoistedBodyVarScope)), super.parseNode(e);
  }
  applyDeoptimizations() {
    for (const e of this.params)
      e instanceof Ft && e.right.deoptimizePath(B$2);
  }
}
ts.prototype.preventChildBlockScope = true;
class ss extends ts {
  constructor() {
    super(...arguments), this.objectEntity = null;
  }
  createScope(e) {
    this.scope = new Bt(e, this.context);
  }
  hasEffects() {
    return this.deoptimized || this.applyDeoptimizations(), false;
  }
  hasEffectsWhenCalledAtPath(e, t, s) {
    if (super.hasEffectsWhenCalledAtPath(e, t, s))
      return true;
    const { ignore: i, brokenFlow: n2 } = s;
    return s.ignore = { breaks: false, continues: false, labels: /* @__PURE__ */ new Set(), returnYield: true }, !!this.body.hasEffects(s) || (s.ignore = i, s.brokenFlow = n2, false);
  }
  getObjectEntity() {
    return this.objectEntity !== null ? this.objectEntity : this.objectEntity = new gt([], xt);
  }
}
function is(e, { exportNamesByVariable: t, snippets: { _: s, getObject: i, getPropertyAccess: n2 } }, r2 = "") {
  if (e.length === 1 && t.get(e[0]).length === 1) {
    const i2 = e[0];
    return `exports('${t.get(i2)}',${s}${i2.getName(n2)}${r2})`;
  }
  {
    const s2 = [];
    for (const i2 of e)
      for (const e2 of t.get(i2))
        s2.push([e2, i2.getName(n2) + r2]);
    return `exports(${i(s2, { lineBreakIndent: null })})`;
  }
}
function ns(e, t, s, i, { exportNamesByVariable: n2, snippets: { _: r2 } }) {
  i.prependRight(t, `exports('${n2.get(e)}',${r2}`), i.appendLeft(s, ")");
}
function rs(e, t, s, i, n2, r2) {
  const { _: a2, getPropertyAccess: o2 } = r2.snippets;
  n2.appendLeft(s, `,${a2}${is([e], r2)},${a2}${e.getName(o2)}`), i && (n2.prependRight(t, "("), n2.appendLeft(s, ")"));
}
function as(e, t) {
  if (e.type === "MemberExpression")
    return !e.computed && as(e.object, e);
  if (e.type === "Identifier") {
    if (!t)
      return true;
    switch (t.type) {
      case "MemberExpression":
        return t.computed || e === t.object;
      case "MethodDefinition":
        return t.computed;
      case "PropertyDefinition":
      case "Property":
        return t.computed || e === t.value;
      case "ExportSpecifier":
      case "ImportSpecifier":
        return e === t.local;
      case "LabeledStatement":
      case "BreakStatement":
      case "ContinueStatement":
        return false;
      default:
        return true;
    }
  }
  return false;
}
const os = Symbol("Value Properties"), hs = { hasEffectsWhenCalled: () => false }, ls = { hasEffectsWhenCalled: () => true }, cs = { __proto__: null, [os]: ls }, us = { __proto__: null, [os]: hs }, ds = { __proto__: null, [os]: { hasEffectsWhenCalled: (e, t) => !e.args.length || e.args[0].hasEffectsWhenAssignedAtPath(F$1, t) } }, ps = { __proto__: null, [os]: ls, prototype: cs }, fs = { __proto__: null, [os]: hs, prototype: cs }, ms = { __proto__: null, [os]: hs, from: us, of: us, prototype: cs }, gs = { __proto__: null, [os]: hs, supportedLocalesOf: fs }, ys = { global: cs, globalThis: cs, self: cs, window: cs, __proto__: null, [os]: ls, Array: { __proto__: null, [os]: ls, from: cs, isArray: us, of: us, prototype: cs }, ArrayBuffer: { __proto__: null, [os]: hs, isView: us, prototype: cs }, Atomics: cs, BigInt: ps, BigInt64Array: ps, BigUint64Array: ps, Boolean: fs, constructor: ps, DataView: fs, Date: { __proto__: null, [os]: hs, now: us, parse: us, prototype: cs, UTC: us }, decodeURI: us, decodeURIComponent: us, encodeURI: us, encodeURIComponent: us, Error: fs, escape: us, eval: cs, EvalError: fs, Float32Array: ms, Float64Array: ms, Function: ps, hasOwnProperty: cs, Infinity: cs, Int16Array: ms, Int32Array: ms, Int8Array: ms, isFinite: us, isNaN: us, isPrototypeOf: cs, JSON: cs, Map: fs, Math: { __proto__: null, [os]: ls, abs: us, acos: us, acosh: us, asin: us, asinh: us, atan: us, atan2: us, atanh: us, cbrt: us, ceil: us, clz32: us, cos: us, cosh: us, exp: us, expm1: us, floor: us, fround: us, hypot: us, imul: us, log: us, log10: us, log1p: us, log2: us, max: us, min: us, pow: us, random: us, round: us, sign: us, sin: us, sinh: us, sqrt: us, tan: us, tanh: us, trunc: us }, NaN: cs, Number: { __proto__: null, [os]: hs, isFinite: us, isInteger: us, isNaN: us, isSafeInteger: us, parseFloat: us, parseInt: us, prototype: cs }, Object: { __proto__: null, [os]: hs, create: us, defineProperty: ds, defineProperties: ds, getOwnPropertyDescriptor: us, getOwnPropertyNames: us, getOwnPropertySymbols: us, getPrototypeOf: us, hasOwn: us, is: us, isExtensible: us, isFrozen: us, isSealed: us, keys: us, fromEntries: us, entries: us, prototype: cs }, parseFloat: us, parseInt: us, Promise: { __proto__: null, [os]: ls, all: cs, prototype: cs, race: cs, reject: cs, resolve: cs }, propertyIsEnumerable: cs, Proxy: cs, RangeError: fs, ReferenceError: fs, Reflect: cs, RegExp: fs, Set: fs, SharedArrayBuffer: ps, String: { __proto__: null, [os]: hs, fromCharCode: us, fromCodePoint: us, prototype: cs, raw: us }, Symbol: { __proto__: null, [os]: hs, for: us, keyFor: us, prototype: cs }, SyntaxError: fs, toLocaleString: cs, toString: cs, TypeError: fs, Uint16Array: ms, Uint32Array: ms, Uint8Array: ms, Uint8ClampedArray: ms, unescape: us, URIError: fs, valueOf: cs, WeakMap: fs, WeakSet: fs, clearInterval: ps, clearTimeout: ps, console: cs, Intl: { __proto__: null, [os]: ls, Collator: gs, DateTimeFormat: gs, ListFormat: gs, NumberFormat: gs, PluralRules: gs, RelativeTimeFormat: gs }, setInterval: ps, setTimeout: ps, TextDecoder: ps, TextEncoder: ps, URL: ps, URLSearchParams: ps, AbortController: ps, AbortSignal: ps, addEventListener: cs, alert: cs, AnalyserNode: ps, Animation: ps, AnimationEvent: ps, applicationCache: cs, ApplicationCache: ps, ApplicationCacheErrorEvent: ps, atob: cs, Attr: ps, Audio: ps, AudioBuffer: ps, AudioBufferSourceNode: ps, AudioContext: ps, AudioDestinationNode: ps, AudioListener: ps, AudioNode: ps, AudioParam: ps, AudioProcessingEvent: ps, AudioScheduledSourceNode: ps, AudioWorkletNode: ps, BarProp: ps, BaseAudioContext: ps, BatteryManager: ps, BeforeUnloadEvent: ps, BiquadFilterNode: ps, Blob: ps, BlobEvent: ps, blur: cs, BroadcastChannel: ps, btoa: cs, ByteLengthQueuingStrategy: ps, Cache: ps, caches: cs, CacheStorage: ps, cancelAnimationFrame: cs, cancelIdleCallback: cs, CanvasCaptureMediaStreamTrack: ps, CanvasGradient: ps, CanvasPattern: ps, CanvasRenderingContext2D: ps, ChannelMergerNode: ps, ChannelSplitterNode: ps, CharacterData: ps, clientInformation: cs, ClipboardEvent: ps, close: cs, closed: cs, CloseEvent: ps, Comment: ps, CompositionEvent: ps, confirm: cs, ConstantSourceNode: ps, ConvolverNode: ps, CountQueuingStrategy: ps, createImageBitmap: cs, Credential: ps, CredentialsContainer: ps, crypto: cs, Crypto: ps, CryptoKey: ps, CSS: ps, CSSConditionRule: ps, CSSFontFaceRule: ps, CSSGroupingRule: ps, CSSImportRule: ps, CSSKeyframeRule: ps, CSSKeyframesRule: ps, CSSMediaRule: ps, CSSNamespaceRule: ps, CSSPageRule: ps, CSSRule: ps, CSSRuleList: ps, CSSStyleDeclaration: ps, CSSStyleRule: ps, CSSStyleSheet: ps, CSSSupportsRule: ps, CustomElementRegistry: ps, customElements: cs, CustomEvent: ps, DataTransfer: ps, DataTransferItem: ps, DataTransferItemList: ps, defaultstatus: cs, defaultStatus: cs, DelayNode: ps, DeviceMotionEvent: ps, DeviceOrientationEvent: ps, devicePixelRatio: cs, dispatchEvent: cs, document: cs, Document: ps, DocumentFragment: ps, DocumentType: ps, DOMError: ps, DOMException: ps, DOMImplementation: ps, DOMMatrix: ps, DOMMatrixReadOnly: ps, DOMParser: ps, DOMPoint: ps, DOMPointReadOnly: ps, DOMQuad: ps, DOMRect: ps, DOMRectReadOnly: ps, DOMStringList: ps, DOMStringMap: ps, DOMTokenList: ps, DragEvent: ps, DynamicsCompressorNode: ps, Element: ps, ErrorEvent: ps, Event: ps, EventSource: ps, EventTarget: ps, external: cs, fetch: cs, File: ps, FileList: ps, FileReader: ps, find: cs, focus: cs, FocusEvent: ps, FontFace: ps, FontFaceSetLoadEvent: ps, FormData: ps, frames: cs, GainNode: ps, Gamepad: ps, GamepadButton: ps, GamepadEvent: ps, getComputedStyle: cs, getSelection: cs, HashChangeEvent: ps, Headers: ps, history: cs, History: ps, HTMLAllCollection: ps, HTMLAnchorElement: ps, HTMLAreaElement: ps, HTMLAudioElement: ps, HTMLBaseElement: ps, HTMLBodyElement: ps, HTMLBRElement: ps, HTMLButtonElement: ps, HTMLCanvasElement: ps, HTMLCollection: ps, HTMLContentElement: ps, HTMLDataElement: ps, HTMLDataListElement: ps, HTMLDetailsElement: ps, HTMLDialogElement: ps, HTMLDirectoryElement: ps, HTMLDivElement: ps, HTMLDListElement: ps, HTMLDocument: ps, HTMLElement: ps, HTMLEmbedElement: ps, HTMLFieldSetElement: ps, HTMLFontElement: ps, HTMLFormControlsCollection: ps, HTMLFormElement: ps, HTMLFrameElement: ps, HTMLFrameSetElement: ps, HTMLHeadElement: ps, HTMLHeadingElement: ps, HTMLHRElement: ps, HTMLHtmlElement: ps, HTMLIFrameElement: ps, HTMLImageElement: ps, HTMLInputElement: ps, HTMLLabelElement: ps, HTMLLegendElement: ps, HTMLLIElement: ps, HTMLLinkElement: ps, HTMLMapElement: ps, HTMLMarqueeElement: ps, HTMLMediaElement: ps, HTMLMenuElement: ps, HTMLMetaElement: ps, HTMLMeterElement: ps, HTMLModElement: ps, HTMLObjectElement: ps, HTMLOListElement: ps, HTMLOptGroupElement: ps, HTMLOptionElement: ps, HTMLOptionsCollection: ps, HTMLOutputElement: ps, HTMLParagraphElement: ps, HTMLParamElement: ps, HTMLPictureElement: ps, HTMLPreElement: ps, HTMLProgressElement: ps, HTMLQuoteElement: ps, HTMLScriptElement: ps, HTMLSelectElement: ps, HTMLShadowElement: ps, HTMLSlotElement: ps, HTMLSourceElement: ps, HTMLSpanElement: ps, HTMLStyleElement: ps, HTMLTableCaptionElement: ps, HTMLTableCellElement: ps, HTMLTableColElement: ps, HTMLTableElement: ps, HTMLTableRowElement: ps, HTMLTableSectionElement: ps, HTMLTemplateElement: ps, HTMLTextAreaElement: ps, HTMLTimeElement: ps, HTMLTitleElement: ps, HTMLTrackElement: ps, HTMLUListElement: ps, HTMLUnknownElement: ps, HTMLVideoElement: ps, IDBCursor: ps, IDBCursorWithValue: ps, IDBDatabase: ps, IDBFactory: ps, IDBIndex: ps, IDBKeyRange: ps, IDBObjectStore: ps, IDBOpenDBRequest: ps, IDBRequest: ps, IDBTransaction: ps, IDBVersionChangeEvent: ps, IdleDeadline: ps, IIRFilterNode: ps, Image: ps, ImageBitmap: ps, ImageBitmapRenderingContext: ps, ImageCapture: ps, ImageData: ps, indexedDB: cs, innerHeight: cs, innerWidth: cs, InputEvent: ps, IntersectionObserver: ps, IntersectionObserverEntry: ps, isSecureContext: cs, KeyboardEvent: ps, KeyframeEffect: ps, length: cs, localStorage: cs, location: cs, Location: ps, locationbar: cs, matchMedia: cs, MediaDeviceInfo: ps, MediaDevices: ps, MediaElementAudioSourceNode: ps, MediaEncryptedEvent: ps, MediaError: ps, MediaKeyMessageEvent: ps, MediaKeySession: ps, MediaKeyStatusMap: ps, MediaKeySystemAccess: ps, MediaList: ps, MediaQueryList: ps, MediaQueryListEvent: ps, MediaRecorder: ps, MediaSettingsRange: ps, MediaSource: ps, MediaStream: ps, MediaStreamAudioDestinationNode: ps, MediaStreamAudioSourceNode: ps, MediaStreamEvent: ps, MediaStreamTrack: ps, MediaStreamTrackEvent: ps, menubar: cs, MessageChannel: ps, MessageEvent: ps, MessagePort: ps, MIDIAccess: ps, MIDIConnectionEvent: ps, MIDIInput: ps, MIDIInputMap: ps, MIDIMessageEvent: ps, MIDIOutput: ps, MIDIOutputMap: ps, MIDIPort: ps, MimeType: ps, MimeTypeArray: ps, MouseEvent: ps, moveBy: cs, moveTo: cs, MutationEvent: ps, MutationObserver: ps, MutationRecord: ps, name: cs, NamedNodeMap: ps, NavigationPreloadManager: ps, navigator: cs, Navigator: ps, NetworkInformation: ps, Node: ps, NodeFilter: cs, NodeIterator: ps, NodeList: ps, Notification: ps, OfflineAudioCompletionEvent: ps, OfflineAudioContext: ps, offscreenBuffering: cs, OffscreenCanvas: ps, open: cs, openDatabase: cs, Option: ps, origin: cs, OscillatorNode: ps, outerHeight: cs, outerWidth: cs, PageTransitionEvent: ps, pageXOffset: cs, pageYOffset: cs, PannerNode: ps, parent: cs, Path2D: ps, PaymentAddress: ps, PaymentRequest: ps, PaymentRequestUpdateEvent: ps, PaymentResponse: ps, performance: cs, Performance: ps, PerformanceEntry: ps, PerformanceLongTaskTiming: ps, PerformanceMark: ps, PerformanceMeasure: ps, PerformanceNavigation: ps, PerformanceNavigationTiming: ps, PerformanceObserver: ps, PerformanceObserverEntryList: ps, PerformancePaintTiming: ps, PerformanceResourceTiming: ps, PerformanceTiming: ps, PeriodicWave: ps, Permissions: ps, PermissionStatus: ps, personalbar: cs, PhotoCapabilities: ps, Plugin: ps, PluginArray: ps, PointerEvent: ps, PopStateEvent: ps, postMessage: cs, Presentation: ps, PresentationAvailability: ps, PresentationConnection: ps, PresentationConnectionAvailableEvent: ps, PresentationConnectionCloseEvent: ps, PresentationConnectionList: ps, PresentationReceiver: ps, PresentationRequest: ps, print: cs, ProcessingInstruction: ps, ProgressEvent: ps, PromiseRejectionEvent: ps, prompt: cs, PushManager: ps, PushSubscription: ps, PushSubscriptionOptions: ps, queueMicrotask: cs, RadioNodeList: ps, Range: ps, ReadableStream: ps, RemotePlayback: ps, removeEventListener: cs, Request: ps, requestAnimationFrame: cs, requestIdleCallback: cs, resizeBy: cs, ResizeObserver: ps, ResizeObserverEntry: ps, resizeTo: cs, Response: ps, RTCCertificate: ps, RTCDataChannel: ps, RTCDataChannelEvent: ps, RTCDtlsTransport: ps, RTCIceCandidate: ps, RTCIceTransport: ps, RTCPeerConnection: ps, RTCPeerConnectionIceEvent: ps, RTCRtpReceiver: ps, RTCRtpSender: ps, RTCSctpTransport: ps, RTCSessionDescription: ps, RTCStatsReport: ps, RTCTrackEvent: ps, screen: cs, Screen: ps, screenLeft: cs, ScreenOrientation: ps, screenTop: cs, screenX: cs, screenY: cs, ScriptProcessorNode: ps, scroll: cs, scrollbars: cs, scrollBy: cs, scrollTo: cs, scrollX: cs, scrollY: cs, SecurityPolicyViolationEvent: ps, Selection: ps, ServiceWorker: ps, ServiceWorkerContainer: ps, ServiceWorkerRegistration: ps, sessionStorage: cs, ShadowRoot: ps, SharedWorker: ps, SourceBuffer: ps, SourceBufferList: ps, speechSynthesis: cs, SpeechSynthesisEvent: ps, SpeechSynthesisUtterance: ps, StaticRange: ps, status: cs, statusbar: cs, StereoPannerNode: ps, stop: cs, Storage: ps, StorageEvent: ps, StorageManager: ps, styleMedia: cs, StyleSheet: ps, StyleSheetList: ps, SubtleCrypto: ps, SVGAElement: ps, SVGAngle: ps, SVGAnimatedAngle: ps, SVGAnimatedBoolean: ps, SVGAnimatedEnumeration: ps, SVGAnimatedInteger: ps, SVGAnimatedLength: ps, SVGAnimatedLengthList: ps, SVGAnimatedNumber: ps, SVGAnimatedNumberList: ps, SVGAnimatedPreserveAspectRatio: ps, SVGAnimatedRect: ps, SVGAnimatedString: ps, SVGAnimatedTransformList: ps, SVGAnimateElement: ps, SVGAnimateMotionElement: ps, SVGAnimateTransformElement: ps, SVGAnimationElement: ps, SVGCircleElement: ps, SVGClipPathElement: ps, SVGComponentTransferFunctionElement: ps, SVGDefsElement: ps, SVGDescElement: ps, SVGDiscardElement: ps, SVGElement: ps, SVGEllipseElement: ps, SVGFEBlendElement: ps, SVGFEColorMatrixElement: ps, SVGFEComponentTransferElement: ps, SVGFECompositeElement: ps, SVGFEConvolveMatrixElement: ps, SVGFEDiffuseLightingElement: ps, SVGFEDisplacementMapElement: ps, SVGFEDistantLightElement: ps, SVGFEDropShadowElement: ps, SVGFEFloodElement: ps, SVGFEFuncAElement: ps, SVGFEFuncBElement: ps, SVGFEFuncGElement: ps, SVGFEFuncRElement: ps, SVGFEGaussianBlurElement: ps, SVGFEImageElement: ps, SVGFEMergeElement: ps, SVGFEMergeNodeElement: ps, SVGFEMorphologyElement: ps, SVGFEOffsetElement: ps, SVGFEPointLightElement: ps, SVGFESpecularLightingElement: ps, SVGFESpotLightElement: ps, SVGFETileElement: ps, SVGFETurbulenceElement: ps, SVGFilterElement: ps, SVGForeignObjectElement: ps, SVGGElement: ps, SVGGeometryElement: ps, SVGGradientElement: ps, SVGGraphicsElement: ps, SVGImageElement: ps, SVGLength: ps, SVGLengthList: ps, SVGLinearGradientElement: ps, SVGLineElement: ps, SVGMarkerElement: ps, SVGMaskElement: ps, SVGMatrix: ps, SVGMetadataElement: ps, SVGMPathElement: ps, SVGNumber: ps, SVGNumberList: ps, SVGPathElement: ps, SVGPatternElement: ps, SVGPoint: ps, SVGPointList: ps, SVGPolygonElement: ps, SVGPolylineElement: ps, SVGPreserveAspectRatio: ps, SVGRadialGradientElement: ps, SVGRect: ps, SVGRectElement: ps, SVGScriptElement: ps, SVGSetElement: ps, SVGStopElement: ps, SVGStringList: ps, SVGStyleElement: ps, SVGSVGElement: ps, SVGSwitchElement: ps, SVGSymbolElement: ps, SVGTextContentElement: ps, SVGTextElement: ps, SVGTextPathElement: ps, SVGTextPositioningElement: ps, SVGTitleElement: ps, SVGTransform: ps, SVGTransformList: ps, SVGTSpanElement: ps, SVGUnitTypes: ps, SVGUseElement: ps, SVGViewElement: ps, TaskAttributionTiming: ps, Text: ps, TextEvent: ps, TextMetrics: ps, TextTrack: ps, TextTrackCue: ps, TextTrackCueList: ps, TextTrackList: ps, TimeRanges: ps, toolbar: cs, top: cs, Touch: ps, TouchEvent: ps, TouchList: ps, TrackEvent: ps, TransitionEvent: ps, TreeWalker: ps, UIEvent: ps, ValidityState: ps, visualViewport: cs, VisualViewport: ps, VTTCue: ps, WaveShaperNode: ps, WebAssembly: cs, WebGL2RenderingContext: ps, WebGLActiveInfo: ps, WebGLBuffer: ps, WebGLContextEvent: ps, WebGLFramebuffer: ps, WebGLProgram: ps, WebGLQuery: ps, WebGLRenderbuffer: ps, WebGLRenderingContext: ps, WebGLSampler: ps, WebGLShader: ps, WebGLShaderPrecisionFormat: ps, WebGLSync: ps, WebGLTexture: ps, WebGLTransformFeedback: ps, WebGLUniformLocation: ps, WebGLVertexArrayObject: ps, WebSocket: ps, WheelEvent: ps, Window: ps, Worker: ps, WritableStream: ps, XMLDocument: ps, XMLHttpRequest: ps, XMLHttpRequestEventTarget: ps, XMLHttpRequestUpload: ps, XMLSerializer: ps, XPathEvaluator: ps, XPathExpression: ps, XPathResult: ps, XSLTProcessor: ps };
for (const e of ["window", "global", "self", "globalThis"])
  ys[e] = ys;
function Es(e) {
  let t = ys;
  for (const s of e) {
    if (typeof s != "string")
      return null;
    if (t = t[s], !t)
      return null;
  }
  return t[os];
}
class xs extends Y {
  constructor() {
    super(...arguments), this.isReassigned = true;
  }
  getLiteralValueAtPath(e, t, s) {
    return Es([this.name, ...e]) ? q : H;
  }
  hasEffectsWhenAccessedAtPath(e) {
    return e.length === 0 ? this.name !== "undefined" && !Es([this.name]) : !Es([this.name, ...e].slice(0, -1));
  }
  hasEffectsWhenCalledAtPath(e, t, s) {
    const i = Es([this.name, ...e]);
    return !i || i.hasEffectsWhenCalled(t, s);
  }
}
const vs = { __proto__: null, class: true, const: true, let: true, var: true };
class bs extends ht {
  constructor() {
    super(...arguments), this.variable = null, this.isTDZAccess = null;
  }
  addExportedVariables(e, t) {
    t.has(this.variable) && e.push(this.variable);
  }
  bind() {
    !this.variable && as(this, this.parent) && (this.variable = this.scope.findVariable(this.name), this.variable.addReference(this));
  }
  declare(e, t) {
    let s;
    const { treeshake: i } = this.context.options;
    switch (e) {
      case "var":
        s = this.scope.addDeclaration(this, this.context, t, true), i && i.correctVarValueBeforeDeclaration && s.markInitializersForDeoptimization();
        break;
      case "function":
      case "let":
      case "const":
      case "class":
        s = this.scope.addDeclaration(this, this.context, t, false);
        break;
      case "parameter":
        s = this.scope.addParameterDeclaration(this);
        break;
      default:
        throw new Error(`Internal Error: Unexpected identifier kind ${e}.`);
    }
    return s.kind = e, [this.variable = s];
  }
  deoptimizeCallParameters() {
    this.variable.deoptimizeCallParameters();
  }
  deoptimizePath(e) {
    var t;
    e.length !== 0 || this.scope.contains(this.name) || this.disallowImportReassignment(), (t = this.variable) === null || t === void 0 || t.deoptimizePath(e);
  }
  deoptimizeThisOnEventAtPath(e, t, s, i) {
    this.variable.deoptimizeThisOnEventAtPath(e, t, s, i);
  }
  getLiteralValueAtPath(e, t, s) {
    return this.getVariableRespectingTDZ().getLiteralValueAtPath(e, t, s);
  }
  getReturnExpressionWhenCalledAtPath(e, t, s, i) {
    return this.getVariableRespectingTDZ().getReturnExpressionWhenCalledAtPath(e, t, s, i);
  }
  hasEffects() {
    return this.deoptimized || this.applyDeoptimizations(), !(!this.isPossibleTDZ() || this.variable.kind === "var") || this.context.options.treeshake.unknownGlobalSideEffects && this.variable instanceof xs && this.variable.hasEffectsWhenAccessedAtPath(V);
  }
  hasEffectsWhenAccessedAtPath(e, t) {
    return this.variable !== null && this.getVariableRespectingTDZ().hasEffectsWhenAccessedAtPath(e, t);
  }
  hasEffectsWhenAssignedAtPath(e, t) {
    return (e.length > 0 ? this.getVariableRespectingTDZ() : this.variable).hasEffectsWhenAssignedAtPath(e, t);
  }
  hasEffectsWhenCalledAtPath(e, t, s) {
    return this.getVariableRespectingTDZ().hasEffectsWhenCalledAtPath(e, t, s);
  }
  include() {
    this.deoptimized || this.applyDeoptimizations(), this.included || (this.included = true, this.variable !== null && this.context.includeVariableInModule(this.variable));
  }
  includeCallArguments(e, t) {
    this.variable.includeCallArguments(e, t);
  }
  isPossibleTDZ() {
    if (this.isTDZAccess !== null)
      return this.isTDZAccess;
    if (!(this.variable instanceof Rt && this.variable.kind && this.variable.kind in vs))
      return this.isTDZAccess = false;
    let e;
    return this.variable.declarations && this.variable.declarations.length === 1 && (e = this.variable.declarations[0]) && this.start < e.start && As(this) === As(e) ? this.isTDZAccess = true : this.variable.initReached ? this.isTDZAccess = false : this.isTDZAccess = true;
  }
  markDeclarationReached() {
    this.variable.initReached = true;
  }
  render(e, { snippets: { getPropertyAccess: t } }, { renderedParentType: s, isCalleeOfRenderedParent: i, isShorthandProperty: n2 } = Z) {
    if (this.variable) {
      const r2 = this.variable.getName(t);
      r2 !== this.name && (e.overwrite(this.start, this.end, r2, { contentOnly: true, storeName: true }), n2 && e.prependRight(this.start, `${this.name}: `)), r2 === "eval" && s === "CallExpression" && i && e.appendRight(this.start, "0, ");
    }
  }
  applyDeoptimizations() {
    this.deoptimized = true, this.variable instanceof Rt && (this.variable.consolidateInitializers(), this.context.requestTreeshakingPass());
  }
  disallowImportReassignment() {
    return this.context.error({ code: "ILLEGAL_REASSIGNMENT", message: `Illegal reassignment to import '${this.name}'` }, this.start);
  }
  getVariableRespectingTDZ() {
    return this.isPossibleTDZ() ? X : this.variable;
  }
}
function As(e) {
  for (; e && !/^Program|Function/.test(e.type); )
    e = e.parent;
  return e;
}
class Ss extends ht {
  addExportedVariables(e, t) {
    for (const s of this.properties)
      s.type === "Property" ? s.value.addExportedVariables(e, t) : s.argument.addExportedVariables(e, t);
  }
  declare(e, t) {
    const s = [];
    for (const i of this.properties)
      s.push(...i.declare(e, t));
    return s;
  }
  deoptimizePath(e) {
    if (e.length === 0)
      for (const t of this.properties)
        t.deoptimizePath(e);
  }
  hasEffectsWhenAssignedAtPath(e, t) {
    if (e.length > 0)
      return true;
    for (const e2 of this.properties)
      if (e2.hasEffectsWhenAssignedAtPath(V, t))
        return true;
    return false;
  }
  markDeclarationReached() {
    for (const e of this.properties)
      e.markDeclarationReached();
  }
}
class Ps extends ht {
  hasEffects(e) {
    return this.deoptimized || this.applyDeoptimizations(), this.right.hasEffects(e) || this.left.hasEffects(e) || this.left.hasEffectsWhenAssignedAtPath(V, e);
  }
  hasEffectsWhenAccessedAtPath(e, t) {
    return e.length > 0 && this.right.hasEffectsWhenAccessedAtPath(e, t);
  }
  include(e, t) {
    let s;
    this.deoptimized || this.applyDeoptimizations(), this.included = true, (t || this.operator !== "=" || this.left.included || (s = $e(), this.left.hasEffects(s) || this.left.hasEffectsWhenAssignedAtPath(V, s))) && this.left.include(e, t), this.right.include(e, t);
  }
  render(e, t, { preventASI: s, renderedParentType: i, renderedSurroundingElement: n2 } = Z) {
    if (this.left.included)
      this.left.render(e, t), this.right.render(e, t);
    else {
      const r2 = Ht(e.original, Ut(e.original, "=", this.left.end) + 1);
      e.remove(this.start, r2), s && Yt(e, r2, this.right.start), this.right.render(e, t, { renderedParentType: i || this.parent.type, renderedSurroundingElement: n2 || this.parent.type });
    }
    if (t.format === "system")
      if (this.left instanceof bs) {
        const s2 = this.left.variable, i2 = t.exportNamesByVariable.get(s2);
        if (i2)
          return void (i2.length === 1 ? ns(s2, this.start, this.end, e, t) : rs(s2, this.start, this.end, this.parent.type !== "ExpressionStatement", e, t));
      } else {
        const s2 = [];
        if (this.left.addExportedVariables(s2, t.exportNamesByVariable), s2.length > 0)
          return void function(e2, t2, s3, i2, n3, r2) {
            const { _: a2, getDirectReturnIifeLeft: o2 } = r2.snippets;
            n3.prependRight(t2, o2(["v"], `${is(e2, r2)},${a2}v`, { needsArrowReturnParens: true, needsWrappedFunction: i2 })), n3.appendLeft(s3, ")");
          }(s2, this.start, this.end, n2 === "ExpressionStatement", e, t);
      }
    this.left.included && this.left instanceof Ss && (n2 === "ExpressionStatement" || n2 === "ArrowFunctionExpression") && (e.appendRight(this.start, "("), e.prependLeft(this.end, ")"));
  }
  applyDeoptimizations() {
    this.deoptimized = true, this.left.deoptimizePath(V), this.right.deoptimizePath(B$2), this.context.requestTreeshakingPass();
  }
}
class ks extends Rt {
  constructor(e) {
    super("arguments", null, X, e);
  }
  hasEffectsWhenAccessedAtPath(e) {
    return e.length > 1;
  }
  hasEffectsWhenAssignedAtPath() {
    return true;
  }
  hasEffectsWhenCalledAtPath() {
    return true;
  }
}
class ws extends Rt {
  constructor(e) {
    super("this", null, null, e), this.deoptimizedPaths = [], this.entitiesToBeDeoptimized = /* @__PURE__ */ new Set(), this.thisDeoptimizationList = [], this.thisDeoptimizations = new G$1();
  }
  addEntityToBeDeoptimized(e) {
    for (const t of this.deoptimizedPaths)
      e.deoptimizePath(t);
    for (const t of this.thisDeoptimizationList)
      this.applyThisDeoptimizationEvent(e, t);
    this.entitiesToBeDeoptimized.add(e);
  }
  deoptimizePath(e) {
    if (e.length !== 0 && !this.deoptimizationTracker.trackEntityAtPathAndGetIfTracked(e, this)) {
      this.deoptimizedPaths.push(e);
      for (const t of this.entitiesToBeDeoptimized)
        t.deoptimizePath(e);
    }
  }
  deoptimizeThisOnEventAtPath(e, t, s) {
    const i = { event: e, path: t, thisParameter: s };
    if (!this.thisDeoptimizations.trackEntityAtPathAndGetIfTracked(t, e, s)) {
      for (const e2 of this.entitiesToBeDeoptimized)
        this.applyThisDeoptimizationEvent(e2, i);
      this.thisDeoptimizationList.push(i);
    }
  }
  hasEffectsWhenAccessedAtPath(e, t) {
    return this.getInit(t).hasEffectsWhenAccessedAtPath(e, t) || super.hasEffectsWhenAccessedAtPath(e, t);
  }
  hasEffectsWhenAssignedAtPath(e, t) {
    return this.getInit(t).hasEffectsWhenAssignedAtPath(e, t) || super.hasEffectsWhenAssignedAtPath(e, t);
  }
  applyThisDeoptimizationEvent(e, { event: t, path: s, thisParameter: i }) {
    e.deoptimizeThisOnEventAtPath(t, s, i === this ? e : i, U);
  }
  getInit(e) {
    return e.replacedVariableInits.get(this) || X;
  }
}
class Cs extends Bt {
  constructor(e, t) {
    super(e, t), this.variables.set("arguments", this.argumentsVariable = new ks(t)), this.variables.set("this", this.thisVariable = new ws(t));
  }
  findLexicalBoundary() {
    return this;
  }
  includeCallArguments(e, t) {
    if (super.includeCallArguments(e, t), this.argumentsVariable.included)
      for (const s of t)
        s.included || s.include(e, false);
  }
}
class Is extends ts {
  constructor() {
    super(...arguments), this.objectEntity = null;
  }
  createScope(e) {
    this.scope = new Cs(e, this.context);
  }
  deoptimizeThisOnEventAtPath(e, t, s, i) {
    super.deoptimizeThisOnEventAtPath(e, t, s, i), e === 2 && t.length === 0 && this.scope.thisVariable.addEntityToBeDeoptimized(s);
  }
  hasEffects() {
    var e;
    return this.deoptimized || this.applyDeoptimizations(), !!((e = this.id) === null || e === void 0 ? void 0 : e.hasEffects());
  }
  hasEffectsWhenCalledAtPath(e, t, s) {
    if (super.hasEffectsWhenCalledAtPath(e, t, s))
      return true;
    const i = s.replacedVariableInits.get(this.scope.thisVariable);
    s.replacedVariableInits.set(this.scope.thisVariable, t.withNew ? new gt(/* @__PURE__ */ Object.create(null), xt) : X);
    const { brokenFlow: n2, ignore: r2 } = s;
    return s.ignore = { breaks: false, continues: false, labels: /* @__PURE__ */ new Set(), returnYield: true }, !!this.body.hasEffects(s) || (s.brokenFlow = n2, i ? s.replacedVariableInits.set(this.scope.thisVariable, i) : s.replacedVariableInits.delete(this.scope.thisVariable), s.ignore = r2, false);
  }
  include(e, t, { includeWithoutParameterDefaults: s } = Z) {
    var i;
    (i = this.id) === null || i === void 0 || i.include(), super.include(e, t, { includeWithoutParameterDefaults: s && !this.scope.argumentsVariable.included });
  }
  initialise() {
    var e;
    super.initialise(), (e = this.id) === null || e === void 0 || e.declare("function", this);
  }
  getObjectEntity() {
    return this.objectEntity !== null ? this.objectEntity : this.objectEntity = new gt([{ key: "prototype", kind: "init", property: new gt([], xt) }], xt);
  }
}
const _s = { "!=": (e, t) => e != t, "!==": (e, t) => e !== t, "%": (e, t) => e % t, "&": (e, t) => e & t, "*": (e, t) => e * t, "**": (e, t) => e ** t, "+": (e, t) => e + t, "-": (e, t) => e - t, "/": (e, t) => e / t, "<": (e, t) => e < t, "<<": (e, t) => e << t, "<=": (e, t) => e <= t, "==": (e, t) => e == t, "===": (e, t) => e === t, ">": (e, t) => e > t, ">=": (e, t) => e >= t, ">>": (e, t) => e >> t, ">>>": (e, t) => e >>> t, "^": (e, t) => e ^ t, "|": (e, t) => e | t };
class Ns extends ht {
  deoptimizeThisOnEventAtPath() {
  }
  getLiteralValueAtPath(e) {
    return e.length > 0 || this.value === null && this.context.code.charCodeAt(this.start) !== 110 || typeof this.value == "bigint" || this.context.code.charCodeAt(this.start) === 47 ? H : this.value;
  }
  getReturnExpressionWhenCalledAtPath(e) {
    return e.length !== 1 ? X : Ke(this.members, e[0]);
  }
  hasEffectsWhenAccessedAtPath(e) {
    return this.value === null ? e.length > 0 : e.length > 1;
  }
  hasEffectsWhenCalledAtPath(e, t, s) {
    return e.length !== 1 || qe(this.members, e[0], t, s);
  }
  initialise() {
    this.members = function(e) {
      switch (typeof e) {
        case "boolean":
          return Ue;
        case "number":
          return Ge;
        case "string":
          return He;
      }
      return /* @__PURE__ */ Object.create(null);
    }(this.value);
  }
  parseNode(e) {
    this.value = e.value, this.regex = e.regex, super.parseNode(e);
  }
  render(e) {
    typeof this.value == "string" && e.indentExclusionRanges.push([this.start + 1, this.end - 1]);
  }
}
function $s(e) {
  return e.computed ? function(e2) {
    if (e2 instanceof Ns)
      return String(e2.value);
    return null;
  }(e.property) : e.property.name;
}
function Ts(e) {
  const t = e.propertyKey, s = e.object;
  if (typeof t == "string") {
    if (s instanceof bs)
      return [{ key: s.name, pos: s.start }, { key: t, pos: e.property.start }];
    if (s instanceof Rs) {
      const i = Ts(s);
      return i && [...i, { key: t, pos: e.property.start }];
    }
  }
  return null;
}
class Rs extends ht {
  constructor() {
    super(...arguments), this.variable = null, this.bound = false, this.expressionsToBeDeoptimized = [], this.replacement = null;
  }
  bind() {
    this.bound = true;
    const e = Ts(this), t = e && this.scope.findVariable(e[0].key);
    if (t && t.isNamespace) {
      const s = this.resolveNamespaceVariables(t, e.slice(1));
      s ? typeof s == "string" ? this.replacement = s : (this.variable = s, this.scope.addNamespaceMemberAccess(function(e2) {
        let t2 = e2[0].key;
        for (let s2 = 1; s2 < e2.length; s2++)
          t2 += "." + e2[s2].key;
        return t2;
      }(e), s)) : super.bind();
    } else
      super.bind();
  }
  deoptimizeCache() {
    const e = this.expressionsToBeDeoptimized;
    this.expressionsToBeDeoptimized = [], this.propertyKey = D$2, this.object.deoptimizePath(B$2);
    for (const t of e)
      t.deoptimizeCache();
  }
  deoptimizePath(e) {
    if (e.length === 0 && this.disallowNamespaceReassignment(), this.variable)
      this.variable.deoptimizePath(e);
    else if (!this.replacement && e.length < 7) {
      const t = this.getPropertyKey();
      this.object.deoptimizePath([t === D$2 ? L : t, ...e]);
    }
  }
  deoptimizeThisOnEventAtPath(e, t, s, i) {
    this.variable ? this.variable.deoptimizeThisOnEventAtPath(e, t, s, i) : this.replacement || (t.length < 7 ? this.object.deoptimizeThisOnEventAtPath(e, [this.getPropertyKey(), ...t], s, i) : s.deoptimizePath(B$2));
  }
  getLiteralValueAtPath(e, t, s) {
    return this.variable !== null ? this.variable.getLiteralValueAtPath(e, t, s) : this.replacement ? H : (this.expressionsToBeDeoptimized.push(s), e.length < 7 ? this.object.getLiteralValueAtPath([this.getPropertyKey(), ...e], t, s) : H);
  }
  getReturnExpressionWhenCalledAtPath(e, t, s, i) {
    return this.variable !== null ? this.variable.getReturnExpressionWhenCalledAtPath(e, t, s, i) : this.replacement ? X : (this.expressionsToBeDeoptimized.push(i), e.length < 7 ? this.object.getReturnExpressionWhenCalledAtPath([this.getPropertyKey(), ...e], t, s, i) : X);
  }
  hasEffects(e) {
    this.deoptimized || this.applyDeoptimizations();
    const { propertyReadSideEffects: t } = this.context.options.treeshake;
    return this.property.hasEffects(e) || this.object.hasEffects(e) || !(this.variable || this.replacement || this.parent instanceof Ps && this.parent.operator === "=") && t && (t === "always" || this.object.hasEffectsWhenAccessedAtPath([this.getPropertyKey()], e));
  }
  hasEffectsWhenAccessedAtPath(e, t) {
    return this.variable !== null ? this.variable.hasEffectsWhenAccessedAtPath(e, t) : !!this.replacement || (!(e.length < 7) || this.object.hasEffectsWhenAccessedAtPath([this.getPropertyKey(), ...e], t));
  }
  hasEffectsWhenAssignedAtPath(e, t) {
    return this.variable !== null ? this.variable.hasEffectsWhenAssignedAtPath(e, t) : !!this.replacement || (!(e.length < 7) || this.object.hasEffectsWhenAssignedAtPath([this.getPropertyKey(), ...e], t));
  }
  hasEffectsWhenCalledAtPath(e, t, s) {
    return this.variable !== null ? this.variable.hasEffectsWhenCalledAtPath(e, t, s) : !!this.replacement || (!(e.length < 7) || this.object.hasEffectsWhenCalledAtPath([this.getPropertyKey(), ...e], t, s));
  }
  include(e, t) {
    this.deoptimized || this.applyDeoptimizations(), this.included || (this.included = true, this.variable !== null && this.context.includeVariableInModule(this.variable)), this.object.include(e, t), this.property.include(e, t);
  }
  includeCallArguments(e, t) {
    this.variable ? this.variable.includeCallArguments(e, t) : super.includeCallArguments(e, t);
  }
  initialise() {
    this.propertyKey = $s(this);
  }
  render(e, t, { renderedParentType: s, isCalleeOfRenderedParent: i, renderedSurroundingElement: n2 } = Z) {
    if (this.variable || this.replacement) {
      const { snippets: { getPropertyAccess: n3 } } = t;
      let r2 = this.variable ? this.variable.getName(n3) : this.replacement;
      s && i && (r2 = "0, " + r2), e.overwrite(this.start, this.end, r2, { contentOnly: true, storeName: true });
    } else
      s && i && e.appendRight(this.start, "0, "), this.object.render(e, t, { renderedSurroundingElement: n2 }), this.property.render(e, t);
  }
  applyDeoptimizations() {
    this.deoptimized = true;
    const { propertyReadSideEffects: e } = this.context.options.treeshake;
    this.bound && e && !this.variable && !this.replacement && (this.parent instanceof Ps && this.parent.operator === "=" || this.object.deoptimizeThisOnEventAtPath(0, [this.propertyKey], this.object, U), this.parent instanceof Ps && this.object.deoptimizeThisOnEventAtPath(1, [this.propertyKey], this.object, U), this.context.requestTreeshakingPass());
  }
  disallowNamespaceReassignment() {
    if (this.object instanceof bs) {
      this.scope.findVariable(this.object.name).isNamespace && (this.variable && this.context.includeVariableInModule(this.variable), this.context.warn({ code: "ILLEGAL_NAMESPACE_REASSIGNMENT", message: `Illegal reassignment to import '${this.object.name}'` }, this.start));
    }
  }
  getPropertyKey() {
    if (this.propertyKey === null) {
      this.propertyKey = D$2;
      const e = this.property.getLiteralValueAtPath(V, U, this);
      return this.propertyKey = typeof e == "symbol" ? D$2 : String(e);
    }
    return this.propertyKey;
  }
  resolveNamespaceVariables(e, t) {
    if (t.length === 0)
      return e;
    if (!e.isNamespace || e instanceof Q$2)
      return null;
    const s = t[0].key, i = e.context.traceExport(s);
    if (!i) {
      const i2 = e.context.fileName;
      return this.context.warn({ code: "MISSING_EXPORT", exporter: re(i2), importer: re(this.context.fileName), message: `'${s}' is not exported by '${re(i2)}'`, missing: s, url: "https://rollupjs.org/guide/en/#error-name-is-not-exported-by-module" }, t[0].pos), "undefined";
    }
    return this.resolveNamespaceVariables(i, t.slice(1));
  }
}
class Ms extends ht {
  constructor() {
    super(...arguments), this.returnExpression = null, this.deoptimizableDependentExpressions = [], this.expressionsToBeDeoptimized = /* @__PURE__ */ new Set();
  }
  deoptimizeCache() {
    if (this.returnExpression !== X) {
      this.returnExpression = X;
      for (const e of this.deoptimizableDependentExpressions)
        e.deoptimizeCache();
      for (const e of this.expressionsToBeDeoptimized)
        e.deoptimizePath(B$2);
    }
  }
  deoptimizePath(e) {
    if (e.length === 0 || this.context.deoptimizationTracker.trackEntityAtPathAndGetIfTracked(e, this))
      return;
    const t = this.getReturnExpression();
    t !== X && t.deoptimizePath(e);
  }
  deoptimizeThisOnEventAtPath(e, t, s, i) {
    const n2 = this.getReturnExpression(i);
    n2 === X ? s.deoptimizePath(B$2) : i.withTrackedEntityAtPath(t, n2, () => {
      this.expressionsToBeDeoptimized.add(s), n2.deoptimizeThisOnEventAtPath(e, t, s, i);
    }, void 0);
  }
  getLiteralValueAtPath(e, t, s) {
    const i = this.getReturnExpression(t);
    return i === X ? H : t.withTrackedEntityAtPath(e, i, () => (this.deoptimizableDependentExpressions.push(s), i.getLiteralValueAtPath(e, t, s)), H);
  }
  getReturnExpressionWhenCalledAtPath(e, t, s, i) {
    const n2 = this.getReturnExpression(s);
    return this.returnExpression === X ? X : s.withTrackedEntityAtPath(e, n2, () => (this.deoptimizableDependentExpressions.push(i), n2.getReturnExpressionWhenCalledAtPath(e, t, s, i)), X);
  }
  hasEffectsWhenAccessedAtPath(e, t) {
    return !t.accessed.trackEntityAtPathAndGetIfTracked(e, this) && this.getReturnExpression().hasEffectsWhenAccessedAtPath(e, t);
  }
  hasEffectsWhenAssignedAtPath(e, t) {
    return !t.assigned.trackEntityAtPathAndGetIfTracked(e, this) && this.getReturnExpression().hasEffectsWhenAssignedAtPath(e, t);
  }
  hasEffectsWhenCalledAtPath(e, t, s) {
    return !(t.withNew ? s.instantiated : s.called).trackEntityAtPathAndGetIfTracked(e, t, this) && this.getReturnExpression().hasEffectsWhenCalledAtPath(e, t, s);
  }
}
class Ds extends Vt {
  addDeclaration(e, t, s, i) {
    const n2 = this.variables.get(e.name);
    return n2 ? (this.parent.addDeclaration(e, t, Me, i), n2.addDeclaration(e, s), n2) : this.parent.addDeclaration(e, t, s, i);
  }
}
class Ls extends Ot {
  constructor(e, t, s) {
    super(e), this.variables.set("this", this.thisVariable = new Rt("this", null, t, s)), this.instanceScope = new Ot(this), this.instanceScope.variables.set("this", new ws(s));
  }
  findLexicalBoundary() {
    return this;
  }
}
class Os extends ht {
  constructor() {
    super(...arguments), this.accessedValue = null, this.accessorCallOptions = { args: Te, thisParam: null, withNew: false };
  }
  deoptimizeCache() {
  }
  deoptimizePath(e) {
    this.getAccessedValue().deoptimizePath(e);
  }
  deoptimizeThisOnEventAtPath(e, t, s, i) {
    return e === 0 && this.kind === "get" && t.length === 0 || e === 1 && this.kind === "set" && t.length === 0 ? this.value.deoptimizeThisOnEventAtPath(2, V, s, i) : void this.getAccessedValue().deoptimizeThisOnEventAtPath(e, t, s, i);
  }
  getLiteralValueAtPath(e, t, s) {
    return this.getAccessedValue().getLiteralValueAtPath(e, t, s);
  }
  getReturnExpressionWhenCalledAtPath(e, t, s, i) {
    return this.getAccessedValue().getReturnExpressionWhenCalledAtPath(e, t, s, i);
  }
  hasEffects(e) {
    return this.key.hasEffects(e);
  }
  hasEffectsWhenAccessedAtPath(e, t) {
    return this.kind === "get" && e.length === 0 ? this.value.hasEffectsWhenCalledAtPath(V, this.accessorCallOptions, t) : this.getAccessedValue().hasEffectsWhenAccessedAtPath(e, t);
  }
  hasEffectsWhenAssignedAtPath(e, t) {
    return this.kind === "set" ? this.value.hasEffectsWhenCalledAtPath(V, this.accessorCallOptions, t) : this.getAccessedValue().hasEffectsWhenAssignedAtPath(e, t);
  }
  hasEffectsWhenCalledAtPath(e, t, s) {
    return this.getAccessedValue().hasEffectsWhenCalledAtPath(e, t, s);
  }
  applyDeoptimizations() {
  }
  getAccessedValue() {
    return this.accessedValue === null ? this.kind === "get" ? (this.accessedValue = X, this.accessedValue = this.value.getReturnExpressionWhenCalledAtPath(V, this.accessorCallOptions, U, this)) : this.accessedValue = this.value : this.accessedValue;
  }
}
class Vs extends Os {
  applyDeoptimizations() {
  }
}
class Bs extends ht {
  deoptimizePath(e) {
    var t;
    (t = this.value) === null || t === void 0 || t.deoptimizePath(e);
  }
  deoptimizeThisOnEventAtPath(e, t, s, i) {
    var n2;
    (n2 = this.value) === null || n2 === void 0 || n2.deoptimizeThisOnEventAtPath(e, t, s, i);
  }
  getLiteralValueAtPath(e, t, s) {
    return this.value ? this.value.getLiteralValueAtPath(e, t, s) : H;
  }
  getReturnExpressionWhenCalledAtPath(e, t, s, i) {
    return this.value ? this.value.getReturnExpressionWhenCalledAtPath(e, t, s, i) : X;
  }
  hasEffects(e) {
    var t;
    return this.key.hasEffects(e) || this.static && !!((t = this.value) === null || t === void 0 ? void 0 : t.hasEffects(e));
  }
  hasEffectsWhenAccessedAtPath(e, t) {
    return !this.value || this.value.hasEffectsWhenAccessedAtPath(e, t);
  }
  hasEffectsWhenAssignedAtPath(e, t) {
    return !this.value || this.value.hasEffectsWhenAssignedAtPath(e, t);
  }
  hasEffectsWhenCalledAtPath(e, t, s) {
    return !this.value || this.value.hasEffectsWhenCalledAtPath(e, t, s);
  }
  applyDeoptimizations() {
  }
}
class Fs extends K {
  constructor(e, t) {
    super(), this.object = e, this.key = t;
  }
  deoptimizePath(e) {
    this.object.deoptimizePath([this.key, ...e]);
  }
  deoptimizeThisOnEventAtPath(e, t, s, i) {
    this.object.deoptimizeThisOnEventAtPath(e, [this.key, ...t], s, i);
  }
  getLiteralValueAtPath(e, t, s) {
    return this.object.getLiteralValueAtPath([this.key, ...e], t, s);
  }
  getReturnExpressionWhenCalledAtPath(e, t, s, i) {
    return this.object.getReturnExpressionWhenCalledAtPath([this.key, ...e], t, s, i);
  }
  hasEffectsWhenAccessedAtPath(e, t) {
    return this.object.hasEffectsWhenAccessedAtPath([this.key, ...e], t);
  }
  hasEffectsWhenAssignedAtPath(e, t) {
    return this.object.hasEffectsWhenAssignedAtPath([this.key, ...e], t);
  }
  hasEffectsWhenCalledAtPath(e, t, s) {
    return this.object.hasEffectsWhenCalledAtPath([this.key, ...e], t, s);
  }
}
class zs extends ht {
  constructor() {
    super(...arguments), this.objectEntity = null;
  }
  createScope(e) {
    this.scope = new Ot(e);
  }
  deoptimizeCache() {
    this.getObjectEntity().deoptimizeAllProperties();
  }
  deoptimizePath(e) {
    var t, s;
    this.getObjectEntity().deoptimizePath(e), e.length === 1 && e[0] === D$2 && ((t = this.classConstructor) === null || t === void 0 || t.deoptimizePath(B$2), (s = this.superClass) === null || s === void 0 || s.deoptimizePath(B$2));
  }
  deoptimizeThisOnEventAtPath(e, t, s, i) {
    this.getObjectEntity().deoptimizeThisOnEventAtPath(e, t, s, i);
  }
  getLiteralValueAtPath(e, t, s) {
    return this.getObjectEntity().getLiteralValueAtPath(e, t, s);
  }
  getReturnExpressionWhenCalledAtPath(e, t, s, i) {
    return this.getObjectEntity().getReturnExpressionWhenCalledAtPath(e, t, s, i);
  }
  hasEffects(e) {
    var t, s;
    this.deoptimized || this.applyDeoptimizations();
    const i = ((t = this.superClass) === null || t === void 0 ? void 0 : t.hasEffects(e)) || this.body.hasEffects(e);
    return (s = this.id) === null || s === void 0 || s.markDeclarationReached(), i || super.hasEffects(e);
  }
  hasEffectsWhenAccessedAtPath(e, t) {
    return this.getObjectEntity().hasEffectsWhenAccessedAtPath(e, t);
  }
  hasEffectsWhenAssignedAtPath(e, t) {
    return this.getObjectEntity().hasEffectsWhenAssignedAtPath(e, t);
  }
  hasEffectsWhenCalledAtPath(e, t, s) {
    var i;
    return e.length === 0 ? !t.withNew || (this.classConstructor !== null ? this.classConstructor.hasEffectsWhenCalledAtPath(V, t, s) : (i = this.superClass) === null || i === void 0 ? void 0 : i.hasEffectsWhenCalledAtPath(e, t, s)) || false : this.getObjectEntity().hasEffectsWhenCalledAtPath(e, t, s);
  }
  include(e, t) {
    var s;
    this.deoptimized || this.applyDeoptimizations(), this.included = true, (s = this.superClass) === null || s === void 0 || s.include(e, t), this.body.include(e, t), this.id && (this.id.markDeclarationReached(), this.id.include());
  }
  initialise() {
    var e;
    (e = this.id) === null || e === void 0 || e.declare("class", this);
    for (const e2 of this.body.body)
      if (e2 instanceof Vs && e2.kind === "constructor")
        return void (this.classConstructor = e2);
    this.classConstructor = null;
  }
  applyDeoptimizations() {
    var e, t;
    this.deoptimized = true;
    for (const t2 of this.body.body)
      t2.static || t2 instanceof Vs && t2.kind === "constructor" ? t2 instanceof Bs && ((e = t2.value) === null || e === void 0 || e.deoptimizeCallParameters()) : t2.deoptimizePath(B$2);
    (t = this.superClass) === null || t === void 0 || t.deoptimizeCallParameters(), this.context.requestTreeshakingPass();
  }
  getObjectEntity() {
    if (this.objectEntity !== null)
      return this.objectEntity;
    const e = [], t = [];
    for (const s of this.body.body) {
      const i = s.static ? e : t, n2 = s.kind;
      if (i === t && !n2)
        continue;
      const r2 = n2 === "set" || n2 === "get" ? n2 : "init";
      let a2;
      if (s.computed) {
        const e2 = s.key.getLiteralValueAtPath(V, U, this);
        if (typeof e2 == "symbol") {
          i.push({ key: D$2, kind: r2, property: s });
          continue;
        }
        a2 = String(e2);
      } else
        a2 = s.key instanceof bs ? s.key.name : String(s.key.value);
      i.push({ key: a2, kind: r2, property: s });
    }
    return e.unshift({ key: "prototype", kind: "init", property: new gt(t, this.superClass ? new Fs(this.superClass, "prototype") : xt) }), this.objectEntity = new gt(e, this.superClass || xt);
  }
}
class Ws extends zs {
  initialise() {
    super.initialise(), this.id !== null && (this.id.variable.isId = true);
  }
  parseNode(e) {
    e.id !== null && (this.id = new bs(e.id, this, this.scope.parent)), super.parseNode(e);
  }
  render(e, t) {
    const { exportNamesByVariable: s, format: i, snippets: { _: n2 } } = t;
    i === "system" && this.id && s.has(this.id.variable) && e.appendLeft(this.end, `${n2}${is([this.id.variable], t)};`), super.render(e, t);
  }
}
class js extends K {
  constructor(e) {
    super(), this.expressions = e, this.included = false;
  }
  deoptimizePath(e) {
    for (const t of this.expressions)
      t.deoptimizePath(e);
  }
  getReturnExpressionWhenCalledAtPath(e, t, s, i) {
    return new js(this.expressions.map((n2) => n2.getReturnExpressionWhenCalledAtPath(e, t, s, i)));
  }
  hasEffectsWhenAccessedAtPath(e, t) {
    for (const s of this.expressions)
      if (s.hasEffectsWhenAccessedAtPath(e, t))
        return true;
    return false;
  }
  hasEffectsWhenAssignedAtPath(e, t) {
    for (const s of this.expressions)
      if (s.hasEffectsWhenAssignedAtPath(e, t))
        return true;
    return false;
  }
  hasEffectsWhenCalledAtPath(e, t, s) {
    for (const i of this.expressions)
      if (i.hasEffectsWhenCalledAtPath(e, t, s))
        return true;
    return false;
  }
  include(e, t) {
    for (const s of this.expressions)
      s.included || s.include(e, t);
  }
}
class Us extends ht {
  hasEffects() {
    return false;
  }
  initialise() {
    this.context.addExport(this);
  }
  render(e, t, s) {
    e.remove(s.start, s.end);
  }
  applyDeoptimizations() {
  }
}
Us.prototype.needsBoundaries = true;
class Gs extends Is {
  include(e, t) {
    super.include(e, t, { includeWithoutParameterDefaults: true });
  }
  initialise() {
    super.initialise(), this.id !== null && (this.id.variable.isId = true);
  }
  parseNode(e) {
    e.id !== null && (this.id = new bs(e.id, this, this.scope.parent)), super.parseNode(e);
  }
}
class Hs extends ht {
  include(e, t) {
    super.include(e, t), t && this.context.includeVariableInModule(this.variable);
  }
  initialise() {
    const e = this.declaration;
    this.declarationName = e.id && e.id.name || this.declaration.name, this.variable = this.scope.addExportDefaultDeclaration(this.declarationName || this.context.getModuleName(), this, this.context), this.context.addExport(this);
  }
  render(e, t, s) {
    const { start: i, end: n2 } = s, r2 = function(e2, t2) {
      return Ht(e2, Ut(e2, "default", t2) + 7);
    }(e.original, this.start);
    if (this.declaration instanceof Gs)
      this.renderNamedDeclaration(e, r2, "function", "(", this.declaration.id === null, t);
    else if (this.declaration instanceof Ws)
      this.renderNamedDeclaration(e, r2, "class", "{", this.declaration.id === null, t);
    else {
      if (this.variable.getOriginalVariable() !== this.variable)
        return void zt(this, e, i, n2);
      if (!this.variable.included)
        return e.remove(this.start, r2), this.declaration.render(e, t, { renderedSurroundingElement: "ExpressionStatement" }), void (e.original[this.end - 1] !== ";" && e.appendLeft(this.end, ";"));
      this.renderVariableDeclaration(e, r2, t);
    }
    this.declaration.render(e, t);
  }
  applyDeoptimizations() {
  }
  renderNamedDeclaration(e, t, s, i, n2, r2) {
    const { exportNamesByVariable: a2, format: o2, snippets: { getPropertyAccess: h2 } } = r2, l2 = this.variable.getName(h2);
    e.remove(this.start, t), n2 && e.appendLeft(function(e2, t2, s2, i2) {
      const n3 = Ut(e2, t2, i2) + t2.length;
      e2 = e2.slice(n3, Ut(e2, s2, n3));
      const r3 = Ut(e2, "*");
      return r3 === -1 ? n3 : n3 + r3 + 1;
    }(e.original, s, i, t), ` ${l2}`), o2 === "system" && this.declaration instanceof Ws && a2.has(this.variable) && e.appendLeft(this.end, ` ${is([this.variable], r2)};`);
  }
  renderVariableDeclaration(e, t, { format: s, exportNamesByVariable: i, snippets: { cnst: n2, getPropertyAccess: r2 } }) {
    const a2 = e.original.charCodeAt(this.end - 1) === 59, o2 = s === "system" && i.get(this.variable);
    o2 ? (e.overwrite(this.start, t, `${n2} ${this.variable.getName(r2)} = exports('${o2[0]}', `), e.appendRight(a2 ? this.end - 1 : this.end, ")" + (a2 ? "" : ";"))) : (e.overwrite(this.start, t, `${n2} ${this.variable.getName(r2)} = `), a2 || e.appendLeft(this.end, ";"));
  }
}
Hs.prototype.needsBoundaries = true;
class qs extends ht {
  bind() {
    var e;
    (e = this.declaration) === null || e === void 0 || e.bind();
  }
  hasEffects(e) {
    var t;
    return !!((t = this.declaration) === null || t === void 0 ? void 0 : t.hasEffects(e));
  }
  initialise() {
    this.context.addExport(this);
  }
  render(e, t, s) {
    const { start: i, end: n2 } = s;
    this.declaration === null ? e.remove(i, n2) : (e.remove(this.start, this.declaration.start), this.declaration.render(e, t, { end: n2, start: i }));
  }
  applyDeoptimizations() {
  }
}
qs.prototype.needsBoundaries = true;
class Ks extends Qt {
  constructor() {
    super(...arguments), this.hoistedDeclarations = [];
  }
  addDeclaration(e, t, s, i) {
    return this.hoistedDeclarations.push(e), super.addDeclaration(e, t, s, i);
  }
}
const Xs = Symbol("unset");
class Ys extends ht {
  constructor() {
    super(...arguments), this.testValue = Xs;
  }
  deoptimizeCache() {
    this.testValue = H;
  }
  hasEffects(e) {
    var t;
    if (this.test.hasEffects(e))
      return true;
    const s = this.getTestValue();
    if (typeof s == "symbol") {
      const { brokenFlow: t2 } = e;
      if (this.consequent.hasEffects(e))
        return true;
      const s2 = e.brokenFlow;
      return e.brokenFlow = t2, this.alternate === null ? false : !!this.alternate.hasEffects(e) || (e.brokenFlow = e.brokenFlow < s2 ? e.brokenFlow : s2, false);
    }
    return s ? this.consequent.hasEffects(e) : !!((t = this.alternate) === null || t === void 0 ? void 0 : t.hasEffects(e));
  }
  include(e, t) {
    if (this.included = true, t)
      this.includeRecursively(t, e);
    else {
      const t2 = this.getTestValue();
      typeof t2 == "symbol" ? this.includeUnknownTest(e) : this.includeKnownTest(e, t2);
    }
  }
  parseNode(e) {
    this.consequentScope = new Ks(this.scope), this.consequent = new (this.context.getNodeConstructor(e.consequent.type))(e.consequent, this, this.consequentScope), e.alternate && (this.alternateScope = new Ks(this.scope), this.alternate = new (this.context.getNodeConstructor(e.alternate.type))(e.alternate, this, this.alternateScope)), super.parseNode(e);
  }
  render(e, t) {
    const { snippets: { getPropertyAccess: s } } = t, i = this.getTestValue(), n2 = [], r2 = this.test.included, a2 = !this.context.options.treeshake;
    r2 ? this.test.render(e, t) : e.remove(this.start, this.consequent.start), this.consequent.included && (a2 || typeof i == "symbol" || i) ? this.consequent.render(e, t) : (e.overwrite(this.consequent.start, this.consequent.end, r2 ? ";" : ""), n2.push(...this.consequentScope.hoistedDeclarations)), this.alternate && (!this.alternate.included || !a2 && typeof i != "symbol" && i ? (r2 && this.shouldKeepAlternateBranch() ? e.overwrite(this.alternate.start, this.end, ";") : e.remove(this.consequent.end, this.end), n2.push(...this.alternateScope.hoistedDeclarations)) : (r2 ? e.original.charCodeAt(this.alternate.start - 1) === 101 && e.prependLeft(this.alternate.start, " ") : e.remove(this.consequent.end, this.alternate.start), this.alternate.render(e, t))), this.renderHoistedDeclarations(n2, e, s);
  }
  applyDeoptimizations() {
  }
  getTestValue() {
    return this.testValue === Xs ? this.testValue = this.test.getLiteralValueAtPath(V, U, this) : this.testValue;
  }
  includeKnownTest(e, t) {
    var s;
    this.test.shouldBeIncluded(e) && this.test.include(e, false), t && this.consequent.shouldBeIncluded(e) && this.consequent.include(e, false, { asSingleStatement: true }), !t && ((s = this.alternate) === null || s === void 0 ? void 0 : s.shouldBeIncluded(e)) && this.alternate.include(e, false, { asSingleStatement: true });
  }
  includeRecursively(e, t) {
    var s;
    this.test.include(t, e), this.consequent.include(t, e), (s = this.alternate) === null || s === void 0 || s.include(t, e);
  }
  includeUnknownTest(e) {
    var t;
    this.test.include(e, false);
    const { brokenFlow: s } = e;
    let i = 0;
    this.consequent.shouldBeIncluded(e) && (this.consequent.include(e, false, { asSingleStatement: true }), i = e.brokenFlow, e.brokenFlow = s), ((t = this.alternate) === null || t === void 0 ? void 0 : t.shouldBeIncluded(e)) && (this.alternate.include(e, false, { asSingleStatement: true }), e.brokenFlow = e.brokenFlow < i ? e.brokenFlow : i);
  }
  renderHoistedDeclarations(e, t, s) {
    const i = [...new Set(e.map((e2) => {
      const t2 = e2.variable;
      return t2.included ? t2.getName(s) : "";
    }))].filter(Boolean).join(", ");
    if (i) {
      const e2 = this.parent.type, s2 = e2 !== "Program" && e2 !== "BlockStatement";
      t.prependRight(this.start, `${s2 ? "{ " : ""}var ${i}; `), s2 && t.appendLeft(this.end, " }");
    }
  }
  shouldKeepAlternateBranch() {
    let e = this.parent;
    do {
      if (e instanceof Ys && e.alternate)
        return true;
      if (e instanceof Jt)
        return false;
      e = e.parent;
    } while (e);
    return false;
  }
}
class Qs extends ht {
  bind() {
  }
  hasEffects() {
    return false;
  }
  initialise() {
    this.context.addImport(this);
  }
  render(e, t, s) {
    e.remove(s.start, s.end);
  }
  applyDeoptimizations() {
  }
}
Qs.prototype.needsBoundaries = true;
const Zs = { auto: "_interopDefault", default: null, defaultOnly: null, esModule: null, false: null, true: "_interopDefaultLegacy" }, Js = (e, t) => e === "esModule" || t && (e === "auto" || e === "true"), ei = { auto: "_interopNamespace", default: "_interopNamespaceDefault", defaultOnly: "_interopNamespaceDefaultOnly", esModule: null, false: null, true: "_interopNamespace" }, ti = (e, t) => Js(e, t) && Zs[e] === "_interopDefault", si = (e, t, s, i, n2, r2, a2) => {
  const o2 = new Set(e);
  for (const e2 of mi)
    t.has(e2) && o2.add(e2);
  return mi.map((e2) => o2.has(e2) ? ii[e2](s, i, n2, r2, a2, o2) : "").join("");
}, ii = { _interopDefaultLegacy(e, t, s) {
  const { _: i, getDirectReturnFunction: n2, n: r2 } = t, [a2, o2] = n2(["e"], { functionReturn: true, lineBreakIndent: null, name: "_interopDefaultLegacy" });
  return `${a2}e${i}&&${i}typeof e${i}===${i}'object'${i}&&${i}'default'${i}in e${i}?${i}${s ? ni(t) : ri(t)}${o2}${r2}${r2}`;
}, _interopDefault(e, t, s) {
  const { _: i, getDirectReturnFunction: n2, n: r2 } = t, [a2, o2] = n2(["e"], { functionReturn: true, lineBreakIndent: null, name: "_interopDefault" });
  return `${a2}e${i}&&${i}e.__esModule${i}?${i}${s ? ni(t) : ri(t)}${o2}${r2}${r2}`;
}, _interopNamespaceDefaultOnly(e, t, s, i, n2) {
  const { getDirectReturnFunction: r2, getObject: a2, n: o2 } = t, [h2, l2] = r2(["e"], { functionReturn: true, lineBreakIndent: null, name: "_interopNamespaceDefaultOnly" });
  return `${h2}${pi(i, fi(n2, a2([["__proto__", "null"], ["default", "e"]], { lineBreakIndent: null }), t))}${l2}${o2}${o2}`;
}, _interopNamespaceDefault(e, t, s, i, n2) {
  const { _: r2, n: a2 } = t;
  return `function _interopNamespaceDefault(e)${r2}{${a2}` + ai(e, e, t, s, i, n2) + `}${a2}${a2}`;
}, _interopNamespace(e, t, s, i, n2, r2) {
  const { _: a2, getDirectReturnFunction: o2, n: h2 } = t;
  if (r2.has("_interopNamespaceDefault")) {
    const [e2, t2] = o2(["e"], { functionReturn: true, lineBreakIndent: null, name: "_interopNamespace" });
    return `${e2}e${a2}&&${a2}e.__esModule${a2}?${a2}e${a2}:${a2}_interopNamespaceDefault(e)${t2}${h2}${h2}`;
  }
  return `function _interopNamespace(e)${a2}{${h2}${e}if${a2}(e${a2}&&${a2}e.__esModule)${a2}return e;${h2}` + ai(e, e, t, s, i, n2) + `}${h2}${h2}`;
}, _mergeNamespaces(e, t, s, i, n2) {
  const { _: r2, cnst: a2, n: o2 } = t, h2 = a2 === "var" && s;
  return `function _mergeNamespaces(n, m)${r2}{${o2}${e}${hi(`{${o2}${e}${e}${e}if${r2}(k${r2}!==${r2}'default'${r2}&&${r2}!(k in n))${r2}{${o2}` + (s ? h2 ? ci : ui : di)(e, e + e + e + e, t) + `${e}${e}${e}}${o2}${e}${e}}`, h2, e, t)}${o2}${e}return ${pi(i, fi(n2, "n", t))};${o2}}${o2}${o2}`;
} }, ni = ({ _: e, getObject: t }) => `e${e}:${e}${t([["default", "e"]], { lineBreakIndent: null })}`, ri = ({ _: e, getPropertyAccess: t }) => `e${t("default")}${e}:${e}e`, ai = (e, t, s, i, n2, r2) => {
  const { _: a2, cnst: o2, getObject: h2, getPropertyAccess: l2, n: c2, s: u2 } = s, d2 = `{${c2}` + (i ? li : di)(e, t + e + e, s) + `${t}${e}}`;
  return `${t}${o2} n${a2}=${a2}Object.create(null${r2 ? `,${a2}{${a2}[Symbol.toStringTag]:${a2}${gi(h2)}${a2}}` : ""});${c2}${t}if${a2}(e)${a2}{${c2}${t}${e}${oi(d2, !i, s)}${c2}${t}}${c2}${t}n${l2("default")}${a2}=${a2}e;${c2}${t}return ${pi(n2, "n")}${u2}${c2}`;
}, oi = (e, t, { _: s, cnst: i, getFunctionIntro: n2, s: r2 }) => i !== "var" || t ? `for${s}(${i} k in e)${s}${e}` : `Object.keys(e).forEach(${n2(["k"], { isAsync: false, name: null })}${e})${r2}`, hi = (e, t, s, { _: i, cnst: n2, getDirectReturnFunction: r2, getFunctionIntro: a2, n: o2 }) => {
  if (t) {
    const [t2, n3] = r2(["e"], { functionReturn: false, lineBreakIndent: { base: s, t: s }, name: null });
    return `m.forEach(${t2}e${i}&&${i}typeof e${i}!==${i}'string'${i}&&${i}!Array.isArray(e)${i}&&${i}Object.keys(e).forEach(${a2(["k"], { isAsync: false, name: null })}${e})${n3});`;
  }
  return `for${i}(var i${i}=${i}0;${i}i${i}<${i}m.length;${i}i++)${i}{${o2}${s}${s}${n2} e${i}=${i}m[i];${o2}${s}${s}if${i}(typeof e${i}!==${i}'string'${i}&&${i}!Array.isArray(e))${i}{${i}for${i}(${n2} k in e)${i}${e}${i}}${o2}${s}}`;
}, li = (e, t, s) => {
  const { _: i, n: n2 } = s;
  return `${t}if${i}(k${i}!==${i}'default')${i}{${n2}` + ci(e, t + e, s) + `${t}}${n2}`;
}, ci = (e, t, { _: s, cnst: i, getDirectReturnFunction: n2, n: r2 }) => {
  const [a2, o2] = n2([], { functionReturn: true, lineBreakIndent: null, name: null });
  return `${t}${i} d${s}=${s}Object.getOwnPropertyDescriptor(e,${s}k);${r2}${t}Object.defineProperty(n,${s}k,${s}d.get${s}?${s}d${s}:${s}{${r2}${t}${e}enumerable:${s}true,${r2}${t}${e}get:${s}${a2}e[k]${o2}${r2}${t}});${r2}`;
}, ui = (e, t, { _: s, cnst: i, getDirectReturnFunction: n2, n: r2 }) => {
  const [a2, o2] = n2([], { functionReturn: true, lineBreakIndent: null, name: null });
  return `${t}${i} d${s}=${s}Object.getOwnPropertyDescriptor(e,${s}k);${r2}${t}if${s}(d)${s}{${r2}${t}${e}Object.defineProperty(n,${s}k,${s}d.get${s}?${s}d${s}:${s}{${r2}${t}${e}${e}enumerable:${s}true,${r2}${t}${e}${e}get:${s}${a2}e[k]${o2}${r2}${t}${e}});${r2}${t}}${r2}`;
}, di = (e, t, { _: s, n: i }) => `${t}n[k]${s}=${s}e[k];${i}`, pi = (e, t) => e ? `Object.freeze(${t})` : t, fi = (e, t, { _: s, getObject: i }) => e ? `Object.defineProperty(${t},${s}Symbol.toStringTag,${s}${gi(i)})` : t, mi = Object.keys(ii);
function gi(e) {
  return e([["value", "'Module'"]], { lineBreakIndent: null });
}
function yi(e, t, s) {
  return t === "external" ? ei[String(s(e instanceof Ce ? e.id : null))] : t === "default" ? "_interopNamespaceDefaultOnly" : null;
}
const Ei = { amd: ["require"], cjs: ["require"], system: ["module"] };
const xi = "ROLLUP_ASSET_URL_", vi = "ROLLUP_FILE_URL_";
const bi = { amd: ["document", "module", "URL"], cjs: ["document", "require", "URL"], es: [], iife: ["document", "URL"], system: ["module"], umd: ["document", "require", "URL"] }, Ai = { amd: ["document", "require", "URL"], cjs: ["document", "require", "URL"], es: [], iife: ["document", "URL"], system: ["module", "URL"], umd: ["document", "require", "URL"] }, Si = (e, t = "URL") => `new ${t}(${e}).href`, Pi = (e, t = false) => Si(`'${e}', ${t ? "typeof document === 'undefined' ? location.href : " : ""}document.currentScript && document.currentScript.src || document.baseURI`), ki = (e) => (t, { chunkId: s }) => {
  const i = e(s);
  return t === null ? `({ url: ${i} })` : t === "url" ? i : "undefined";
}, wi = (e, t = false) => `${t ? "typeof document === 'undefined' ? location.href : " : ""}(document.currentScript && document.currentScript.src || new URL('${e}', document.baseURI).href)`, Ci = { amd: (e) => (e[0] !== "." && (e = "./" + e), Si(`require.toUrl('${e}'), document.baseURI`)), cjs: (e) => `(typeof document === 'undefined' ? ${Si(`'file:' + __dirname + '/${e}'`, "(require('u' + 'rl').URL)")} : ${Pi(e)})`, es: (e) => Si(`'${e}', import.meta.url`), iife: (e) => Pi(e), system: (e) => Si(`'${e}', module.meta.url`), umd: (e) => `(typeof document === 'undefined' && typeof location === 'undefined' ? ${Si(`'file:' + __dirname + '/${e}'`, "(require('u' + 'rl').URL)")} : ${Pi(e, true)})` }, Ii = { amd: ki(() => Si("module.uri, document.baseURI")), cjs: ki((e) => `(typeof document === 'undefined' ? ${Si("'file:' + __filename", "(require('u' + 'rl').URL)")} : ${wi(e)})`), iife: ki((e) => wi(e)), system: (e, { snippets: { getPropertyAccess: t } }) => e === null ? "module.meta" : `module.meta${t(e)}`, umd: ki((e) => `(typeof document === 'undefined' && typeof location === 'undefined' ? ${Si("'file:' + __filename", "(require('u' + 'rl').URL)")} : ${wi(e, true)})`) };
class _i extends Os {
  constructor() {
    super(...arguments), this.declarationInit = null;
  }
  declare(e, t) {
    return this.declarationInit = t, this.value.declare(e, X);
  }
  hasEffects(e) {
    this.deoptimized || this.applyDeoptimizations();
    const t = this.context.options.treeshake.propertyReadSideEffects;
    return this.parent.type === "ObjectPattern" && t === "always" || this.key.hasEffects(e) || this.value.hasEffects(e);
  }
  markDeclarationReached() {
    this.value.markDeclarationReached();
  }
  render(e, t) {
    this.shorthand || this.key.render(e, t), this.value.render(e, t, { isShorthandProperty: this.shorthand });
  }
  applyDeoptimizations() {
    this.deoptimized = true, this.declarationInit !== null && (this.declarationInit.deoptimizePath([D$2, D$2]), this.context.requestTreeshakingPass());
  }
}
class Ni extends ht {
  constructor() {
    super(...arguments), this.hasCachedEffect = false;
  }
  hasEffects(e) {
    if (this.hasCachedEffect)
      return true;
    for (const t of this.body)
      if (t.hasEffects(e))
        return this.hasCachedEffect = true;
    return false;
  }
  include(e, t) {
    this.included = true;
    for (const s of this.body)
      (t || s.shouldBeIncluded(e)) && s.include(e, t);
  }
  render(e, t) {
    this.body.length ? Kt(this.body, e, this.start, this.end, t) : super.render(e, t);
  }
  applyDeoptimizations() {
  }
}
class $i extends ht {
  hasEffects(e) {
    var t;
    if ((t = this.test) === null || t === void 0 ? void 0 : t.hasEffects(e))
      return true;
    for (const t2 of this.consequent) {
      if (e.brokenFlow)
        break;
      if (t2.hasEffects(e))
        return true;
    }
    return false;
  }
  include(e, t) {
    var s;
    this.included = true, (s = this.test) === null || s === void 0 || s.include(e, t);
    for (const s2 of this.consequent)
      (t || s2.shouldBeIncluded(e)) && s2.include(e, t);
  }
  render(e, t, s) {
    if (this.consequent.length) {
      this.test && this.test.render(e, t);
      const i = this.test ? this.test.end : Ut(e.original, "default", this.start) + 7, n2 = Ut(e.original, ":", i) + 1;
      Kt(this.consequent, e, n2, s.end, t);
    } else
      super.render(e, t);
  }
}
$i.prototype.needsBoundaries = true;
class Ti extends ht {
  deoptimizeThisOnEventAtPath() {
  }
  getLiteralValueAtPath(e) {
    return e.length > 0 || this.quasis.length !== 1 ? H : this.quasis[0].value.cooked;
  }
  getReturnExpressionWhenCalledAtPath(e) {
    return e.length !== 1 ? X : Ke(He, e[0]);
  }
  hasEffectsWhenAccessedAtPath(e) {
    return e.length > 1;
  }
  hasEffectsWhenCalledAtPath(e, t, s) {
    return e.length !== 1 || qe(He, e[0], t, s);
  }
  render(e, t) {
    e.indentExclusionRanges.push([this.start, this.end]), super.render(e, t);
  }
}
class Ri extends Y {
  constructor() {
    super("undefined");
  }
  getLiteralValueAtPath() {
  }
}
class Mi extends Rt {
  constructor(e, t, s) {
    super(e, t, t.declaration, s), this.hasId = false, this.originalId = null, this.originalVariable = null;
    const i = t.declaration;
    (i instanceof Gs || i instanceof Ws) && i.id ? (this.hasId = true, this.originalId = i.id) : i instanceof bs && (this.originalId = i);
  }
  addReference(e) {
    this.hasId || (this.name = e.name);
  }
  getAssignedVariableName() {
    return this.originalId && this.originalId.name || null;
  }
  getBaseVariableName() {
    const e = this.getOriginalVariable();
    return e === this ? super.getBaseVariableName() : e.getBaseVariableName();
  }
  getDirectOriginalVariable() {
    return !this.originalId || !this.hasId && (this.originalId.isPossibleTDZ() || this.originalId.variable.isReassigned || this.originalId.variable instanceof Ri || "syntheticNamespace" in this.originalId.variable) ? null : this.originalId.variable;
  }
  getName(e) {
    const t = this.getOriginalVariable();
    return t === this ? super.getName(e) : t.getName(e);
  }
  getOriginalVariable() {
    if (this.originalVariable)
      return this.originalVariable;
    let e, t = this;
    const s = /* @__PURE__ */ new Set();
    do {
      s.add(t), e = t, t = e.getDirectOriginalVariable();
    } while (t instanceof Mi && !s.has(t));
    return this.originalVariable = t || e;
  }
}
class Di extends Ot {
  constructor(e, t) {
    super(e), this.context = t, this.variables.set("this", new Rt("this", null, Me, t));
  }
  addExportDefaultDeclaration(e, t, s) {
    const i = new Mi(e, t, s);
    return this.variables.set("default", i), i;
  }
  addNamespaceMemberAccess() {
  }
  deconflict(e, t, s) {
    for (const i of this.children)
      i.deconflict(e, t, s);
  }
  findLexicalBoundary() {
    return this;
  }
  findVariable(e) {
    const t = this.variables.get(e) || this.accessedOutsideVariables.get(e);
    if (t)
      return t;
    const s = this.context.traceVariable(e) || this.parent.findVariable(e);
    return s instanceof xs && this.accessedOutsideVariables.set(e, s), s;
  }
}
const Li = { "!": (e) => !e, "+": (e) => +e, "-": (e) => -e, delete: () => H, typeof: (e) => typeof e, void: () => {
}, "~": (e) => ~e };
function Oi(e, t) {
  return e.renderBaseName !== null && t.has(e) && e.isReassigned;
}
class Vi extends ht {
  deoptimizePath() {
    for (const e of this.declarations)
      e.deoptimizePath(V);
  }
  hasEffectsWhenAssignedAtPath() {
    return false;
  }
  include(e, t, { asSingleStatement: s } = Z) {
    this.included = true;
    for (const i of this.declarations)
      (t || i.shouldBeIncluded(e)) && i.include(e, t), s && i.id.include(e, t);
  }
  initialise() {
    for (const e of this.declarations)
      e.declareDeclarator(this.kind);
  }
  render(e, t, s = Z) {
    if (function(e2, t2) {
      for (const s2 of e2) {
        if (!s2.id.included)
          return false;
        if (s2.id.type === "Identifier") {
          if (t2.has(s2.id.variable))
            return false;
        } else {
          const e3 = [];
          if (s2.id.addExportedVariables(e3, t2), e3.length > 0)
            return false;
        }
      }
      return true;
    }(this.declarations, t.exportNamesByVariable)) {
      for (const s2 of this.declarations)
        s2.render(e, t);
      s.isNoStatement || e.original.charCodeAt(this.end - 1) === 59 || e.appendLeft(this.end, ";");
    } else
      this.renderReplacedDeclarations(e, t);
  }
  applyDeoptimizations() {
  }
  renderDeclarationEnd(e, t, s, i, n2, r2, a2) {
    e.original.charCodeAt(this.end - 1) === 59 && e.remove(this.end - 1, this.end), t += ";", s !== null ? (e.original.charCodeAt(i - 1) !== 10 || e.original.charCodeAt(this.end) !== 10 && e.original.charCodeAt(this.end) !== 13 || (i--, e.original.charCodeAt(i) === 13 && i--), i === s + 1 ? e.overwrite(s, n2, t) : (e.overwrite(s, s + 1, t), e.remove(i, n2))) : e.appendLeft(n2, t), r2.length > 0 && e.appendLeft(n2, ` ${is(r2, a2)};`);
  }
  renderReplacedDeclarations(e, t) {
    const s = Xt(this.declarations, e, this.start + this.kind.length, this.end - (e.original.charCodeAt(this.end - 1) === 59 ? 1 : 0));
    let i, n2;
    n2 = Ht(e.original, this.start + this.kind.length);
    let r2 = n2 - 1;
    e.remove(this.start, r2);
    let a2, h2 = false, l2 = false, c2 = "";
    const u2 = [], d2 = function(e2, t2, s2) {
      var i2;
      let n3 = null;
      if (t2.format === "system") {
        for (const { node: r3 } of e2)
          r3.id instanceof bs && r3.init && s2.length === 0 && ((i2 = t2.exportNamesByVariable.get(r3.id.variable)) === null || i2 === void 0 ? void 0 : i2.length) === 1 ? (n3 = r3.id.variable, s2.push(n3)) : r3.id.addExportedVariables(s2, t2.exportNamesByVariable);
        s2.length > 1 ? n3 = null : n3 && (s2.length = 0);
      }
      return n3;
    }(s, t, u2);
    for (const { node: u3, start: p2, separator: f2, contentEnd: m2, end: g2 } of s)
      if (u3.included) {
        if (u3.render(e, t), a2 = "", !u3.id.included || u3.id instanceof bs && Oi(u3.id.variable, t.exportNamesByVariable))
          l2 && (c2 += ";"), h2 = false;
        else {
          if (d2 && d2 === u3.id.variable) {
            const s2 = Ut(e.original, "=", u3.id.end);
            ns(d2, Ht(e.original, s2 + 1), f2 === null ? m2 : f2, e, t);
          }
          h2 ? c2 += "," : (l2 && (c2 += ";"), a2 += `${this.kind} `, h2 = true);
        }
        n2 === r2 + 1 ? e.overwrite(r2, n2, c2 + a2) : (e.overwrite(r2, r2 + 1, c2), e.appendLeft(n2, a2)), i = m2, n2 = g2, l2 = true, r2 = f2, c2 = "";
      } else
        e.remove(p2, g2);
    this.renderDeclarationEnd(e, c2, r2, i, n2, u2, t);
  }
}
const Bi = { ArrayExpression: class extends ht {
  constructor() {
    super(...arguments), this.objectEntity = null;
  }
  deoptimizePath(e) {
    this.getObjectEntity().deoptimizePath(e);
  }
  deoptimizeThisOnEventAtPath(e, t, s, i) {
    this.getObjectEntity().deoptimizeThisOnEventAtPath(e, t, s, i);
  }
  getLiteralValueAtPath(e, t, s) {
    return this.getObjectEntity().getLiteralValueAtPath(e, t, s);
  }
  getReturnExpressionWhenCalledAtPath(e, t, s, i) {
    return this.getObjectEntity().getReturnExpressionWhenCalledAtPath(e, t, s, i);
  }
  hasEffectsWhenAccessedAtPath(e, t) {
    return this.getObjectEntity().hasEffectsWhenAccessedAtPath(e, t);
  }
  hasEffectsWhenAssignedAtPath(e, t) {
    return this.getObjectEntity().hasEffectsWhenAssignedAtPath(e, t);
  }
  hasEffectsWhenCalledAtPath(e, t, s) {
    return this.getObjectEntity().hasEffectsWhenCalledAtPath(e, t, s);
  }
  applyDeoptimizations() {
    this.deoptimized = true;
    let e = false;
    for (let t = 0; t < this.elements.length; t++) {
      const s = this.elements[t];
      s && (e || s instanceof lt ? (e = true, s.deoptimizePath(B$2)) : s.deoptimizeCallParameters());
    }
    this.context.requestTreeshakingPass();
  }
  getObjectEntity() {
    if (this.objectEntity !== null)
      return this.objectEntity;
    const e = [{ key: "length", kind: "init", property: Ve }];
    let t = false;
    for (let s = 0; s < this.elements.length; s++) {
      const i = this.elements[s];
      t || i instanceof lt ? i && (t = true, e.unshift({ key: O, kind: "init", property: i })) : i ? e.push({ key: String(s), kind: "init", property: i }) : e.push({ key: String(s), kind: "init", property: Me });
    }
    return this.objectEntity = new gt(e, Tt);
  }
}, ArrayPattern: class extends ht {
  addExportedVariables(e, t) {
    for (const s of this.elements)
      s == null || s.addExportedVariables(e, t);
  }
  declare(e) {
    const t = [];
    for (const s of this.elements)
      s !== null && t.push(...s.declare(e, X));
    return t;
  }
  deoptimizePath() {
    for (const e of this.elements)
      e == null || e.deoptimizePath(V);
  }
  hasEffectsWhenAssignedAtPath(e, t) {
    for (const e2 of this.elements)
      if (e2 == null ? void 0 : e2.hasEffectsWhenAssignedAtPath(V, t))
        return true;
    return false;
  }
  markDeclarationReached() {
    for (const e of this.elements)
      e == null || e.markDeclarationReached();
  }
}, ArrowFunctionExpression: ss, AssignmentExpression: Ps, AssignmentPattern: Ft, AwaitExpression: class extends ht {
  hasEffects() {
    return this.deoptimized || this.applyDeoptimizations(), true;
  }
  include(e, t) {
    if (this.deoptimized || this.applyDeoptimizations(), !this.included) {
      this.included = true;
      e:
        if (!this.context.usesTopLevelAwait) {
          let e2 = this.parent;
          do {
            if (e2 instanceof Is || e2 instanceof ss)
              break e;
          } while (e2 = e2.parent);
          this.context.usesTopLevelAwait = true;
        }
    }
    this.argument.include(e, t);
  }
}, BinaryExpression: class extends ht {
  deoptimizeCache() {
  }
  getLiteralValueAtPath(e, t, s) {
    if (e.length > 0)
      return H;
    const i = this.left.getLiteralValueAtPath(V, t, s);
    if (typeof i == "symbol")
      return H;
    const n2 = this.right.getLiteralValueAtPath(V, t, s);
    if (typeof n2 == "symbol")
      return H;
    const r2 = _s[this.operator];
    return r2 ? r2(i, n2) : H;
  }
  hasEffects(e) {
    return this.operator === "+" && this.parent instanceof Zt && this.left.getLiteralValueAtPath(V, U, this) === "" || super.hasEffects(e);
  }
  hasEffectsWhenAccessedAtPath(e) {
    return e.length > 1;
  }
  render(e, t, { renderedSurroundingElement: s } = Z) {
    this.left.render(e, t, { renderedSurroundingElement: s }), this.right.render(e, t);
  }
}, BlockStatement: Jt, BreakStatement: class extends ht {
  hasEffects(e) {
    if (this.label) {
      if (!e.ignore.labels.has(this.label.name))
        return true;
      e.includedLabels.add(this.label.name), e.brokenFlow = 2;
    } else {
      if (!e.ignore.breaks)
        return true;
      e.brokenFlow = 1;
    }
    return false;
  }
  include(e) {
    this.included = true, this.label && (this.label.include(), e.includedLabels.add(this.label.name)), e.brokenFlow = this.label ? 2 : 1;
  }
}, CallExpression: class extends Ms {
  bind() {
    if (super.bind(), this.callee instanceof bs) {
      this.scope.findVariable(this.callee.name).isNamespace && this.context.warn({ code: "CANNOT_CALL_NAMESPACE", message: `Cannot call a namespace ('${this.callee.name}')` }, this.start), this.callee.name === "eval" && this.context.warn({ code: "EVAL", message: "Use of eval is strongly discouraged, as it poses security risks and may cause issues with minification", url: "https://rollupjs.org/guide/en/#avoiding-eval" }, this.start);
    }
    this.callOptions = { args: this.arguments, thisParam: this.callee instanceof Rs && !this.callee.variable ? this.callee.object : null, withNew: false };
  }
  hasEffects(e) {
    try {
      for (const t of this.arguments)
        if (t.hasEffects(e))
          return true;
      return (!this.context.options.treeshake.annotations || !this.annotations) && (this.callee.hasEffects(e) || this.callee.hasEffectsWhenCalledAtPath(V, this.callOptions, e));
    } finally {
      this.deoptimized || this.applyDeoptimizations();
    }
  }
  include(e, t) {
    this.deoptimized || this.applyDeoptimizations(), t ? (super.include(e, t), t === "variables" && this.callee instanceof bs && this.callee.variable && this.callee.variable.markCalledFromTryStatement()) : (this.included = true, this.callee.include(e, false, { includeWithoutParameterDefaults: true })), this.callee.includeCallArguments(e, this.arguments);
    const s = this.getReturnExpression();
    s.included || s.include(e, false);
  }
  render(e, t, { renderedSurroundingElement: s } = Z) {
    if (this.callee.render(e, t, { isCalleeOfRenderedParent: true, renderedSurroundingElement: s }), this.arguments.length > 0)
      if (this.arguments[this.arguments.length - 1].included)
        for (const s2 of this.arguments)
          s2.render(e, t);
      else {
        let s2 = this.arguments.length - 2;
        for (; s2 >= 0 && !this.arguments[s2].included; )
          s2--;
        if (s2 >= 0) {
          for (let i = 0; i <= s2; i++)
            this.arguments[i].render(e, t);
          e.remove(Ut(e.original, ",", this.arguments[s2].end), this.end - 1);
        } else
          e.remove(Ut(e.original, "(", this.callee.end) + 1, this.end - 1);
      }
  }
  applyDeoptimizations() {
    this.deoptimized = true;
    const { thisParam: e } = this.callOptions;
    e && this.callee.deoptimizeThisOnEventAtPath(2, V, e, U);
    for (const e2 of this.arguments)
      e2.deoptimizePath(B$2);
    this.context.requestTreeshakingPass();
  }
  getReturnExpression(e = U) {
    return this.returnExpression === null ? (this.returnExpression = X, this.returnExpression = this.callee.getReturnExpressionWhenCalledAtPath(V, this.callOptions, e, this)) : this.returnExpression;
  }
}, CatchClause: class extends ht {
  createScope(e) {
    this.scope = new Ds(e, this.context);
  }
  parseNode(e) {
    const { param: t } = e;
    t && (this.param = new (this.context.getNodeConstructor(t.type))(t, this, this.scope), this.param.declare("parameter", X)), super.parseNode(e);
  }
}, ChainExpression: class extends ht {
}, ClassBody: class extends ht {
  createScope(e) {
    this.scope = new Ls(e, this.parent, this.context);
  }
  include(e, t) {
    this.included = true, this.context.includeVariableInModule(this.scope.thisVariable);
    for (const s of this.body)
      s.include(e, t);
  }
  parseNode(e) {
    const t = this.body = [];
    for (const s of e.body)
      t.push(new (this.context.getNodeConstructor(s.type))(s, this, s.static ? this.scope : this.scope.instanceScope));
    super.parseNode(e);
  }
  applyDeoptimizations() {
  }
}, ClassDeclaration: Ws, ClassExpression: class extends zs {
  render(e, t, { renderedSurroundingElement: s } = Z) {
    super.render(e, t), s === "ExpressionStatement" && (e.appendRight(this.start, "("), e.prependLeft(this.end, ")"));
  }
}, ConditionalExpression: class extends ht {
  constructor() {
    super(...arguments), this.expressionsToBeDeoptimized = [], this.isBranchResolutionAnalysed = false, this.usedBranch = null;
  }
  deoptimizeCache() {
    if (this.usedBranch !== null) {
      const e = this.usedBranch === this.consequent ? this.alternate : this.consequent;
      this.usedBranch = null, e.deoptimizePath(B$2);
      for (const e2 of this.expressionsToBeDeoptimized)
        e2.deoptimizeCache();
    }
  }
  deoptimizePath(e) {
    const t = this.getUsedBranch();
    t ? t.deoptimizePath(e) : (this.consequent.deoptimizePath(e), this.alternate.deoptimizePath(e));
  }
  deoptimizeThisOnEventAtPath(e, t, s, i) {
    this.consequent.deoptimizeThisOnEventAtPath(e, t, s, i), this.alternate.deoptimizeThisOnEventAtPath(e, t, s, i);
  }
  getLiteralValueAtPath(e, t, s) {
    const i = this.getUsedBranch();
    return i ? (this.expressionsToBeDeoptimized.push(s), i.getLiteralValueAtPath(e, t, s)) : H;
  }
  getReturnExpressionWhenCalledAtPath(e, t, s, i) {
    const n2 = this.getUsedBranch();
    return n2 ? (this.expressionsToBeDeoptimized.push(i), n2.getReturnExpressionWhenCalledAtPath(e, t, s, i)) : new js([this.consequent.getReturnExpressionWhenCalledAtPath(e, t, s, i), this.alternate.getReturnExpressionWhenCalledAtPath(e, t, s, i)]);
  }
  hasEffects(e) {
    if (this.test.hasEffects(e))
      return true;
    const t = this.getUsedBranch();
    return t ? t.hasEffects(e) : this.consequent.hasEffects(e) || this.alternate.hasEffects(e);
  }
  hasEffectsWhenAccessedAtPath(e, t) {
    const s = this.getUsedBranch();
    return s ? s.hasEffectsWhenAccessedAtPath(e, t) : this.consequent.hasEffectsWhenAccessedAtPath(e, t) || this.alternate.hasEffectsWhenAccessedAtPath(e, t);
  }
  hasEffectsWhenAssignedAtPath(e, t) {
    const s = this.getUsedBranch();
    return s ? s.hasEffectsWhenAssignedAtPath(e, t) : this.consequent.hasEffectsWhenAssignedAtPath(e, t) || this.alternate.hasEffectsWhenAssignedAtPath(e, t);
  }
  hasEffectsWhenCalledAtPath(e, t, s) {
    const i = this.getUsedBranch();
    return i ? i.hasEffectsWhenCalledAtPath(e, t, s) : this.consequent.hasEffectsWhenCalledAtPath(e, t, s) || this.alternate.hasEffectsWhenCalledAtPath(e, t, s);
  }
  include(e, t) {
    this.included = true;
    const s = this.getUsedBranch();
    t || this.test.shouldBeIncluded(e) || s === null ? (this.test.include(e, t), this.consequent.include(e, t), this.alternate.include(e, t)) : s.include(e, t);
  }
  includeCallArguments(e, t) {
    const s = this.getUsedBranch();
    s ? s.includeCallArguments(e, t) : (this.consequent.includeCallArguments(e, t), this.alternate.includeCallArguments(e, t));
  }
  render(e, t, { isCalleeOfRenderedParent: s, preventASI: i, renderedParentType: n2, renderedSurroundingElement: r2 } = Z) {
    const a2 = this.getUsedBranch();
    if (this.test.included)
      this.test.render(e, t, { renderedSurroundingElement: r2 }), this.consequent.render(e, t), this.alternate.render(e, t);
    else {
      const o2 = Ut(e.original, ":", this.consequent.end), h2 = Ht(e.original, (this.consequent.included ? Ut(e.original, "?", this.test.end) : o2) + 1);
      i && Yt(e, h2, a2.start), e.remove(this.start, h2), this.consequent.included && e.remove(o2, this.end), Wt(this, e), a2.render(e, t, { isCalleeOfRenderedParent: s, preventASI: true, renderedParentType: n2 || this.parent.type, renderedSurroundingElement: r2 || this.parent.type });
    }
  }
  getUsedBranch() {
    if (this.isBranchResolutionAnalysed)
      return this.usedBranch;
    this.isBranchResolutionAnalysed = true;
    const e = this.test.getLiteralValueAtPath(V, U, this);
    return typeof e == "symbol" ? null : this.usedBranch = e ? this.consequent : this.alternate;
  }
}, ContinueStatement: class extends ht {
  hasEffects(e) {
    if (this.label) {
      if (!e.ignore.labels.has(this.label.name))
        return true;
      e.includedLabels.add(this.label.name), e.brokenFlow = 2;
    } else {
      if (!e.ignore.continues)
        return true;
      e.brokenFlow = 1;
    }
    return false;
  }
  include(e) {
    this.included = true, this.label && (this.label.include(), e.includedLabels.add(this.label.name)), e.brokenFlow = this.label ? 2 : 1;
  }
}, DoWhileStatement: class extends ht {
  hasEffects(e) {
    if (this.test.hasEffects(e))
      return true;
    const { brokenFlow: t, ignore: { breaks: s, continues: i } } = e;
    return e.ignore.breaks = true, e.ignore.continues = true, !!this.body.hasEffects(e) || (e.ignore.breaks = s, e.ignore.continues = i, e.brokenFlow = t, false);
  }
  include(e, t) {
    this.included = true, this.test.include(e, t);
    const { brokenFlow: s } = e;
    this.body.include(e, t, { asSingleStatement: true }), e.brokenFlow = s;
  }
}, EmptyStatement: class extends ht {
  hasEffects() {
    return false;
  }
}, ExportAllDeclaration: Us, ExportDefaultDeclaration: Hs, ExportNamedDeclaration: qs, ExportSpecifier: class extends ht {
  applyDeoptimizations() {
  }
}, ExpressionStatement: Zt, ForInStatement: class extends ht {
  createScope(e) {
    this.scope = new Qt(e);
  }
  hasEffects(e) {
    if (this.deoptimized || this.applyDeoptimizations(), this.left && (this.left.hasEffects(e) || this.left.hasEffectsWhenAssignedAtPath(V, e)) || this.right && this.right.hasEffects(e))
      return true;
    const { brokenFlow: t, ignore: { breaks: s, continues: i } } = e;
    return e.ignore.breaks = true, e.ignore.continues = true, !!this.body.hasEffects(e) || (e.ignore.breaks = s, e.ignore.continues = i, e.brokenFlow = t, false);
  }
  include(e, t) {
    this.deoptimized || this.applyDeoptimizations(), this.included = true, this.left.include(e, t || true), this.right.include(e, t);
    const { brokenFlow: s } = e;
    this.body.include(e, t, { asSingleStatement: true }), e.brokenFlow = s;
  }
  render(e, t) {
    this.left.render(e, t, jt), this.right.render(e, t, jt), e.original.charCodeAt(this.right.start - 1) === 110 && e.prependLeft(this.right.start, " "), this.body.render(e, t);
  }
  applyDeoptimizations() {
    this.deoptimized = true, this.left.deoptimizePath(V), this.context.requestTreeshakingPass();
  }
}, ForOfStatement: class extends ht {
  createScope(e) {
    this.scope = new Qt(e);
  }
  hasEffects() {
    return this.deoptimized || this.applyDeoptimizations(), true;
  }
  include(e, t) {
    this.deoptimized || this.applyDeoptimizations(), this.included = true, this.left.include(e, t || true), this.right.include(e, t);
    const { brokenFlow: s } = e;
    this.body.include(e, t, { asSingleStatement: true }), e.brokenFlow = s;
  }
  render(e, t) {
    this.left.render(e, t, jt), this.right.render(e, t, jt), e.original.charCodeAt(this.right.start - 1) === 102 && e.prependLeft(this.right.start, " "), this.body.render(e, t);
  }
  applyDeoptimizations() {
    this.deoptimized = true, this.left.deoptimizePath(V), this.context.requestTreeshakingPass();
  }
}, ForStatement: class extends ht {
  createScope(e) {
    this.scope = new Qt(e);
  }
  hasEffects(e) {
    var t, s, i;
    if (((t = this.init) === null || t === void 0 ? void 0 : t.hasEffects(e)) || ((s = this.test) === null || s === void 0 ? void 0 : s.hasEffects(e)) || ((i = this.update) === null || i === void 0 ? void 0 : i.hasEffects(e)))
      return true;
    const { brokenFlow: n2, ignore: { breaks: r2, continues: a2 } } = e;
    return e.ignore.breaks = true, e.ignore.continues = true, !!this.body.hasEffects(e) || (e.ignore.breaks = r2, e.ignore.continues = a2, e.brokenFlow = n2, false);
  }
  include(e, t) {
    var s, i, n2;
    this.included = true, (s = this.init) === null || s === void 0 || s.include(e, t, { asSingleStatement: true }), (i = this.test) === null || i === void 0 || i.include(e, t);
    const { brokenFlow: r2 } = e;
    (n2 = this.update) === null || n2 === void 0 || n2.include(e, t), this.body.include(e, t, { asSingleStatement: true }), e.brokenFlow = r2;
  }
  render(e, t) {
    var s, i, n2;
    (s = this.init) === null || s === void 0 || s.render(e, t, jt), (i = this.test) === null || i === void 0 || i.render(e, t, jt), (n2 = this.update) === null || n2 === void 0 || n2.render(e, t, jt), this.body.render(e, t);
  }
}, FunctionDeclaration: Gs, FunctionExpression: class extends Is {
  render(e, t, { renderedSurroundingElement: s } = Z) {
    super.render(e, t), s === "ExpressionStatement" && (e.appendRight(this.start, "("), e.prependLeft(this.end, ")"));
  }
}, Identifier: bs, IfStatement: Ys, ImportDeclaration: Qs, ImportDefaultSpecifier: class extends ht {
  applyDeoptimizations() {
  }
}, ImportExpression: class extends ht {
  constructor() {
    super(...arguments), this.inlineNamespace = null, this.mechanism = null, this.resolution = null;
  }
  hasEffects() {
    return true;
  }
  include(e, t) {
    this.included || (this.included = true, this.context.includeDynamicImport(this), this.scope.addAccessedDynamicImport(this)), this.source.include(e, t);
  }
  initialise() {
    this.context.addDynamicImport(this);
  }
  render(e, t) {
    if (this.inlineNamespace) {
      const { snippets: { getDirectReturnFunction: s, getPropertyAccess: i } } = t, [n2, r2] = s([], { functionReturn: true, lineBreakIndent: null, name: null });
      e.overwrite(this.start, this.end, `Promise.resolve().then(${n2}${this.inlineNamespace.getName(i)}${r2})`, { contentOnly: true });
    } else
      this.mechanism && (e.overwrite(this.start, Ut(e.original, "(", this.start + 6) + 1, this.mechanism.left, { contentOnly: true }), e.overwrite(this.end - 1, this.end, this.mechanism.right, { contentOnly: true })), this.source.render(e, t);
  }
  renderFinalResolution(e, t, s, { getDirectReturnFunction: i }) {
    if (e.overwrite(this.source.start, this.source.end, t), s) {
      const [t2, n2] = i(["n"], { functionReturn: true, lineBreakIndent: null, name: null });
      e.prependLeft(this.end, `.then(${t2}n.${s}${n2})`);
    }
  }
  setExternalResolution(e, t, s, i, n2, r2) {
    const { format: a2 } = s;
    this.resolution = t;
    const o2 = [...Ei[a2] || []];
    let h2;
    ({ helper: h2, mechanism: this.mechanism } = this.getDynamicImportMechanismAndHelper(t, e, s, i, n2)), h2 && o2.push(h2), o2.length > 0 && this.scope.addAccessedGlobals(o2, r2);
  }
  setInternalResolution(e) {
    this.inlineNamespace = e;
  }
  applyDeoptimizations() {
  }
  getDynamicImportMechanismAndHelper(e, t, { compact: s, dynamicImportFunction: i, format: n2, generatedCode: { arrowFunctions: r2 }, interop: a2 }, { _: o2, getDirectReturnFunction: h2, getDirectReturnIifeLeft: l2 }, c2) {
    const u2 = c2.hookFirstSync("renderDynamicImport", [{ customResolution: typeof this.resolution == "string" ? this.resolution : null, format: n2, moduleId: this.context.module.id, targetModuleId: this.resolution && typeof this.resolution != "string" ? this.resolution.id : null }]);
    if (u2)
      return { helper: null, mechanism: u2 };
    const d2 = !this.resolution || typeof this.resolution == "string";
    switch (n2) {
      case "cjs": {
        const s2 = yi(e, t, a2);
        let i2 = "require(", n3 = ")";
        s2 && (i2 = `/*#__PURE__*/${s2}(${i2}`, n3 += ")");
        const [o3, c3] = h2([], { functionReturn: true, lineBreakIndent: null, name: null });
        return i2 = `Promise.resolve().then(${o3}${i2}`, n3 += `${c3})`, !r2 && d2 && (i2 = l2(["t"], `${i2}t${n3}`, { needsArrowReturnParens: false, needsWrappedFunction: true }), n3 = ")"), { helper: s2, mechanism: { left: i2, right: n3 } };
      }
      case "amd": {
        const i2 = s ? "c" : "resolve", n3 = s ? "e" : "reject", c3 = yi(e, t, a2), [u3, p2] = h2(["m"], { functionReturn: false, lineBreakIndent: null, name: null }), f2 = c3 ? `${u3}${i2}(/*#__PURE__*/${c3}(m))${p2}` : i2, [m2, g2] = h2([i2, n3], { functionReturn: false, lineBreakIndent: null, name: null });
        let y2 = `new Promise(${m2}require([`, E2 = `],${o2}${f2},${o2}${n3})${g2})`;
        return !r2 && d2 && (y2 = l2(["t"], `${y2}t${E2}`, { needsArrowReturnParens: false, needsWrappedFunction: true }), E2 = ")"), { helper: c3, mechanism: { left: y2, right: E2 } };
      }
      case "system":
        return { helper: null, mechanism: { left: "module.import(", right: ")" } };
      case "es":
        if (i)
          return { helper: null, mechanism: { left: `${i}(`, right: ")" } };
    }
    return { helper: null, mechanism: null };
  }
}, ImportNamespaceSpecifier: class extends ht {
  applyDeoptimizations() {
  }
}, ImportSpecifier: class extends ht {
  applyDeoptimizations() {
  }
}, LabeledStatement: class extends ht {
  hasEffects(e) {
    const t = e.brokenFlow;
    return e.ignore.labels.add(this.label.name), !!this.body.hasEffects(e) || (e.ignore.labels.delete(this.label.name), e.includedLabels.has(this.label.name) && (e.includedLabels.delete(this.label.name), e.brokenFlow = t), false);
  }
  include(e, t) {
    this.included = true;
    const s = e.brokenFlow;
    this.body.include(e, t), (t || e.includedLabels.has(this.label.name)) && (this.label.include(), e.includedLabels.delete(this.label.name), e.brokenFlow = s);
  }
  render(e, t) {
    this.label.included ? this.label.render(e, t) : e.remove(this.start, Ht(e.original, Ut(e.original, ":", this.label.end) + 1)), this.body.render(e, t);
  }
}, Literal: Ns, LogicalExpression: class extends ht {
  constructor() {
    super(...arguments), this.expressionsToBeDeoptimized = [], this.isBranchResolutionAnalysed = false, this.usedBranch = null;
  }
  deoptimizeCache() {
    if (this.usedBranch !== null) {
      const e = this.usedBranch === this.left ? this.right : this.left;
      this.usedBranch = null, e.deoptimizePath(B$2);
      for (const e2 of this.expressionsToBeDeoptimized)
        e2.deoptimizeCache();
    }
  }
  deoptimizePath(e) {
    const t = this.getUsedBranch();
    t ? t.deoptimizePath(e) : (this.left.deoptimizePath(e), this.right.deoptimizePath(e));
  }
  deoptimizeThisOnEventAtPath(e, t, s, i) {
    this.left.deoptimizeThisOnEventAtPath(e, t, s, i), this.right.deoptimizeThisOnEventAtPath(e, t, s, i);
  }
  getLiteralValueAtPath(e, t, s) {
    const i = this.getUsedBranch();
    return i ? (this.expressionsToBeDeoptimized.push(s), i.getLiteralValueAtPath(e, t, s)) : H;
  }
  getReturnExpressionWhenCalledAtPath(e, t, s, i) {
    const n2 = this.getUsedBranch();
    return n2 ? (this.expressionsToBeDeoptimized.push(i), n2.getReturnExpressionWhenCalledAtPath(e, t, s, i)) : new js([this.left.getReturnExpressionWhenCalledAtPath(e, t, s, i), this.right.getReturnExpressionWhenCalledAtPath(e, t, s, i)]);
  }
  hasEffects(e) {
    return !!this.left.hasEffects(e) || this.getUsedBranch() !== this.left && this.right.hasEffects(e);
  }
  hasEffectsWhenAccessedAtPath(e, t) {
    const s = this.getUsedBranch();
    return s ? s.hasEffectsWhenAccessedAtPath(e, t) : this.left.hasEffectsWhenAccessedAtPath(e, t) || this.right.hasEffectsWhenAccessedAtPath(e, t);
  }
  hasEffectsWhenAssignedAtPath(e, t) {
    const s = this.getUsedBranch();
    return s ? s.hasEffectsWhenAssignedAtPath(e, t) : this.left.hasEffectsWhenAssignedAtPath(e, t) || this.right.hasEffectsWhenAssignedAtPath(e, t);
  }
  hasEffectsWhenCalledAtPath(e, t, s) {
    const i = this.getUsedBranch();
    return i ? i.hasEffectsWhenCalledAtPath(e, t, s) : this.left.hasEffectsWhenCalledAtPath(e, t, s) || this.right.hasEffectsWhenCalledAtPath(e, t, s);
  }
  include(e, t) {
    this.included = true;
    const s = this.getUsedBranch();
    t || s === this.right && this.left.shouldBeIncluded(e) || !s ? (this.left.include(e, t), this.right.include(e, t)) : s.include(e, t);
  }
  render(e, t, { isCalleeOfRenderedParent: s, preventASI: i, renderedParentType: n2, renderedSurroundingElement: r2 } = Z) {
    if (this.left.included && this.right.included)
      this.left.render(e, t, { preventASI: i, renderedSurroundingElement: r2 }), this.right.render(e, t);
    else {
      const a2 = Ut(e.original, this.operator, this.left.end);
      if (this.right.included) {
        const t2 = Ht(e.original, a2 + 2);
        e.remove(this.start, t2), i && Yt(e, t2, this.right.start);
      } else
        e.remove(a2, this.end);
      Wt(this, e), this.getUsedBranch().render(e, t, { isCalleeOfRenderedParent: s, preventASI: i, renderedParentType: n2 || this.parent.type, renderedSurroundingElement: r2 || this.parent.type });
    }
  }
  getUsedBranch() {
    if (!this.isBranchResolutionAnalysed) {
      this.isBranchResolutionAnalysed = true;
      const e = this.left.getLiteralValueAtPath(V, U, this);
      if (typeof e == "symbol")
        return null;
      this.usedBranch = this.operator === "||" && e || this.operator === "&&" && !e || this.operator === "??" && e != null ? this.left : this.right;
    }
    return this.usedBranch;
  }
}, MemberExpression: Rs, MetaProperty: class extends ht {
  addAccessedGlobals(e, t) {
    const s = this.metaProperty, i = (s && (s.startsWith(vi) || s.startsWith(xi) || s.startsWith("ROLLUP_CHUNK_URL_")) ? Ai : bi)[e];
    i.length > 0 && this.scope.addAccessedGlobals(i, t);
  }
  getReferencedFileName(e) {
    const t = this.metaProperty;
    return t && t.startsWith(vi) ? e.getFileName(t.substring(vi.length)) : null;
  }
  hasEffects() {
    return false;
  }
  hasEffectsWhenAccessedAtPath(e) {
    return e.length > 1;
  }
  include() {
    if (!this.included && (this.included = true, this.meta.name === "import")) {
      this.context.addImportMeta(this);
      const e = this.parent;
      this.metaProperty = e instanceof Rs && typeof e.propertyKey == "string" ? e.propertyKey : null;
    }
  }
  renderFinalMechanism(e, t, s, i, n2) {
    var r2;
    const a2 = this.parent, o2 = this.metaProperty;
    if (o2 && (o2.startsWith(vi) || o2.startsWith(xi) || o2.startsWith("ROLLUP_CHUNK_URL_"))) {
      let i2, r3 = null, h3 = null, l2 = null;
      o2.startsWith(vi) ? (r3 = o2.substring(vi.length), i2 = n2.getFileName(r3)) : o2.startsWith(xi) ? (be(`Using the "${xi}" prefix to reference files is deprecated. Use the "${vi}" prefix instead.`, true, this.context.options), h3 = o2.substring(xi.length), i2 = n2.getFileName(h3)) : (be(`Using the "ROLLUP_CHUNK_URL_" prefix to reference files is deprecated. Use the "${vi}" prefix instead.`, true, this.context.options), l2 = o2.substring("ROLLUP_CHUNK_URL_".length), i2 = n2.getFileName(l2));
      const c2 = I$2(T(N(t), i2));
      let u2;
      return h3 !== null && (u2 = n2.hookFirstSync("resolveAssetUrl", [{ assetFileName: i2, chunkId: t, format: s, moduleId: this.context.module.id, relativeAssetPath: c2 }])), u2 || (u2 = n2.hookFirstSync("resolveFileUrl", [{ assetReferenceId: h3, chunkId: t, chunkReferenceId: l2, fileName: i2, format: s, moduleId: this.context.module.id, referenceId: r3 || h3 || l2, relativePath: c2 }]) || Ci[s](c2)), void e.overwrite(a2.start, a2.end, u2, { contentOnly: true });
    }
    const h2 = n2.hookFirstSync("resolveImportMeta", [o2, { chunkId: t, format: s, moduleId: this.context.module.id }]) || ((r2 = Ii[s]) === null || r2 === void 0 ? void 0 : r2.call(Ii, o2, { chunkId: t, snippets: i }));
    typeof h2 == "string" && (a2 instanceof Rs ? e.overwrite(a2.start, a2.end, h2, { contentOnly: true }) : e.overwrite(this.start, this.end, h2, { contentOnly: true }));
  }
}, MethodDefinition: Vs, NewExpression: class extends ht {
  hasEffects(e) {
    try {
      for (const t of this.arguments)
        if (t.hasEffects(e))
          return true;
      return (!this.context.options.treeshake.annotations || !this.annotations) && (this.callee.hasEffects(e) || this.callee.hasEffectsWhenCalledAtPath(V, this.callOptions, e));
    } finally {
      this.deoptimized || this.applyDeoptimizations();
    }
  }
  hasEffectsWhenAccessedAtPath(e) {
    return e.length > 0;
  }
  include(e, t) {
    this.deoptimized || this.applyDeoptimizations(), t ? super.include(e, t) : (this.included = true, this.callee.include(e, false)), this.callee.includeCallArguments(e, this.arguments);
  }
  initialise() {
    this.callOptions = { args: this.arguments, thisParam: null, withNew: true };
  }
  applyDeoptimizations() {
    this.deoptimized = true;
    for (const e of this.arguments)
      e.deoptimizePath(B$2);
    this.context.requestTreeshakingPass();
  }
}, ObjectExpression: class extends ht {
  constructor() {
    super(...arguments), this.objectEntity = null;
  }
  deoptimizeCache() {
    this.getObjectEntity().deoptimizeAllProperties();
  }
  deoptimizePath(e) {
    this.getObjectEntity().deoptimizePath(e);
  }
  deoptimizeThisOnEventAtPath(e, t, s, i) {
    this.getObjectEntity().deoptimizeThisOnEventAtPath(e, t, s, i);
  }
  getLiteralValueAtPath(e, t, s) {
    return this.getObjectEntity().getLiteralValueAtPath(e, t, s);
  }
  getReturnExpressionWhenCalledAtPath(e, t, s, i) {
    return this.getObjectEntity().getReturnExpressionWhenCalledAtPath(e, t, s, i);
  }
  hasEffectsWhenAccessedAtPath(e, t) {
    return this.getObjectEntity().hasEffectsWhenAccessedAtPath(e, t);
  }
  hasEffectsWhenAssignedAtPath(e, t) {
    return this.getObjectEntity().hasEffectsWhenAssignedAtPath(e, t);
  }
  hasEffectsWhenCalledAtPath(e, t, s) {
    return this.getObjectEntity().hasEffectsWhenCalledAtPath(e, t, s);
  }
  render(e, t, { renderedSurroundingElement: s } = Z) {
    super.render(e, t), s !== "ExpressionStatement" && s !== "ArrowFunctionExpression" || (e.appendRight(this.start, "("), e.prependLeft(this.end, ")"));
  }
  applyDeoptimizations() {
    this.deoptimized = true;
    for (const e of this.properties)
      e instanceof _i && e.value.deoptimizeCallParameters();
  }
  getObjectEntity() {
    if (this.objectEntity !== null)
      return this.objectEntity;
    let e = xt;
    const t = [];
    for (const s of this.properties) {
      if (s instanceof lt) {
        t.push({ key: D$2, kind: "init", property: s });
        continue;
      }
      let i;
      if (s.computed) {
        const e2 = s.key.getLiteralValueAtPath(V, U, this);
        if (typeof e2 == "symbol") {
          t.push({ key: D$2, kind: s.kind, property: s });
          continue;
        }
        i = String(e2);
      } else if (i = s.key instanceof bs ? s.key.name : String(s.key.value), i === "__proto__" && s.kind === "init") {
        e = s.value instanceof Ns && s.value.value === null ? null : s.value;
        continue;
      }
      t.push({ key: i, kind: s.kind, property: s });
    }
    return this.objectEntity = new gt(t, e);
  }
}, ObjectPattern: Ss, PrivateIdentifier: class extends ht {
}, Program: Ni, Property: _i, PropertyDefinition: Bs, RestElement: es, ReturnStatement: class extends ht {
  hasEffects(e) {
    var t;
    return !(e.ignore.returnYield && !((t = this.argument) === null || t === void 0 ? void 0 : t.hasEffects(e))) || (e.brokenFlow = 2, false);
  }
  include(e, t) {
    var s;
    this.included = true, (s = this.argument) === null || s === void 0 || s.include(e, t), e.brokenFlow = 2;
  }
  initialise() {
    this.scope.addReturnExpression(this.argument || X);
  }
  render(e, t) {
    this.argument && (this.argument.render(e, t, { preventASI: true }), this.argument.start === this.start + 6 && e.prependLeft(this.start + 6, " "));
  }
}, SequenceExpression: class extends ht {
  deoptimizePath(e) {
    this.expressions[this.expressions.length - 1].deoptimizePath(e);
  }
  deoptimizeThisOnEventAtPath(e, t, s, i) {
    this.expressions[this.expressions.length - 1].deoptimizeThisOnEventAtPath(e, t, s, i);
  }
  getLiteralValueAtPath(e, t, s) {
    return this.expressions[this.expressions.length - 1].getLiteralValueAtPath(e, t, s);
  }
  hasEffects(e) {
    for (const t of this.expressions)
      if (t.hasEffects(e))
        return true;
    return false;
  }
  hasEffectsWhenAccessedAtPath(e, t) {
    return e.length > 0 && this.expressions[this.expressions.length - 1].hasEffectsWhenAccessedAtPath(e, t);
  }
  hasEffectsWhenAssignedAtPath(e, t) {
    return this.expressions[this.expressions.length - 1].hasEffectsWhenAssignedAtPath(e, t);
  }
  hasEffectsWhenCalledAtPath(e, t, s) {
    return this.expressions[this.expressions.length - 1].hasEffectsWhenCalledAtPath(e, t, s);
  }
  include(e, t) {
    this.included = true;
    const s = this.expressions[this.expressions.length - 1];
    for (const i of this.expressions)
      (t || i === s && !(this.parent instanceof Zt) || i.shouldBeIncluded(e)) && i.include(e, t);
  }
  render(e, t, { renderedParentType: s, isCalleeOfRenderedParent: i, preventASI: n2 } = Z) {
    let r2 = 0, a2 = null;
    const o2 = this.expressions[this.expressions.length - 1];
    for (const { node: h2, separator: l2, start: c2, end: u2 } of Xt(this.expressions, e, this.start, this.end))
      if (h2.included)
        if (r2++, a2 = l2, r2 === 1 && n2 && Yt(e, c2, h2.start), r2 === 1) {
          const n3 = s || this.parent.type;
          h2.render(e, t, { isCalleeOfRenderedParent: i && h2 === o2, renderedParentType: n3, renderedSurroundingElement: n3 });
        } else
          h2.render(e, t);
      else
        zt(h2, e, c2, u2);
    a2 && e.remove(a2, this.end);
  }
}, SpreadElement: lt, StaticBlock: class extends ht {
  createScope(e) {
    this.scope = new Qt(e);
  }
  hasEffects(e) {
    for (const t of this.body)
      if (t.hasEffects(e))
        return true;
    return false;
  }
  include(e, t) {
    this.included = true;
    for (const s of this.body)
      (t || s.shouldBeIncluded(e)) && s.include(e, t);
  }
  render(e, t) {
    this.body.length ? Kt(this.body, e, this.start + 1, this.end - 1, t) : super.render(e, t);
  }
}, Super: class extends ht {
  bind() {
    this.variable = this.scope.findVariable("this");
  }
  deoptimizePath(e) {
    this.variable.deoptimizePath(e);
  }
  deoptimizeThisOnEventAtPath(e, t, s, i) {
    this.variable.deoptimizeThisOnEventAtPath(e, t, s, i);
  }
  include() {
    this.included || (this.included = true, this.context.includeVariableInModule(this.variable));
  }
}, SwitchCase: $i, SwitchStatement: class extends ht {
  createScope(e) {
    this.scope = new Qt(e);
  }
  hasEffects(e) {
    if (this.discriminant.hasEffects(e))
      return true;
    const { brokenFlow: t, ignore: { breaks: s } } = e;
    let i = 1 / 0;
    e.ignore.breaks = true;
    for (const s2 of this.cases) {
      if (s2.hasEffects(e))
        return true;
      i = e.brokenFlow < i ? e.brokenFlow : i, e.brokenFlow = t;
    }
    return this.defaultCase !== null && i !== 1 && (e.brokenFlow = i), e.ignore.breaks = s, false;
  }
  include(e, t) {
    this.included = true, this.discriminant.include(e, t);
    const { brokenFlow: s } = e;
    let i = 1 / 0, n2 = t || this.defaultCase !== null && this.defaultCase < this.cases.length - 1;
    for (let r2 = this.cases.length - 1; r2 >= 0; r2--) {
      const a2 = this.cases[r2];
      if (a2.included && (n2 = true), !n2) {
        const e2 = $e();
        e2.ignore.breaks = true, n2 = a2.hasEffects(e2);
      }
      n2 ? (a2.include(e, t), i = i < e.brokenFlow ? i : e.brokenFlow, e.brokenFlow = s) : i = s;
    }
    n2 && this.defaultCase !== null && i !== 1 && (e.brokenFlow = i);
  }
  initialise() {
    for (let e = 0; e < this.cases.length; e++)
      if (this.cases[e].test === null)
        return void (this.defaultCase = e);
    this.defaultCase = null;
  }
  render(e, t) {
    this.discriminant.render(e, t), this.cases.length > 0 && Kt(this.cases, e, this.cases[0].start, this.end - 1, t);
  }
}, TaggedTemplateExpression: class extends Ms {
  bind() {
    if (super.bind(), this.tag.type === "Identifier") {
      const e = this.tag.name;
      this.scope.findVariable(e).isNamespace && this.context.warn({ code: "CANNOT_CALL_NAMESPACE", message: `Cannot call a namespace ('${e}')` }, this.start);
    }
  }
  hasEffects(e) {
    try {
      for (const t of this.quasi.expressions)
        if (t.hasEffects(e))
          return true;
      return this.tag.hasEffects(e) || this.tag.hasEffectsWhenCalledAtPath(V, this.callOptions, e);
    } finally {
      this.deoptimized || this.applyDeoptimizations();
    }
  }
  include(e, t) {
    this.deoptimized || this.applyDeoptimizations(), t ? super.include(e, t) : (this.included = true, this.tag.include(e, t), this.quasi.include(e, t)), this.tag.includeCallArguments(e, this.callOptions.args);
    const s = this.getReturnExpression();
    s.included || s.include(e, false);
  }
  initialise() {
    this.callOptions = { args: [X, ...this.quasi.expressions], thisParam: this.tag instanceof Rs && !this.tag.variable ? this.tag.object : null, withNew: false };
  }
  render(e, t) {
    this.tag.render(e, t, { isCalleeOfRenderedParent: true }), this.quasi.render(e, t);
  }
  applyDeoptimizations() {
    this.deoptimized = true;
    const { thisParam: e } = this.callOptions;
    e && this.tag.deoptimizeThisOnEventAtPath(2, V, e, U);
    for (const e2 of this.quasi.expressions)
      e2.deoptimizePath(B$2);
    this.context.requestTreeshakingPass();
  }
  getReturnExpression(e = U) {
    return this.returnExpression === null ? (this.returnExpression = X, this.returnExpression = this.tag.getReturnExpressionWhenCalledAtPath(V, this.callOptions, e, this)) : this.returnExpression;
  }
}, TemplateElement: class extends ht {
  bind() {
  }
  hasEffects() {
    return false;
  }
  include() {
    this.included = true;
  }
  parseNode(e) {
    this.value = e.value, super.parseNode(e);
  }
  render() {
  }
}, TemplateLiteral: Ti, ThisExpression: class extends ht {
  bind() {
    this.variable = this.scope.findVariable("this");
  }
  deoptimizePath(e) {
    this.variable.deoptimizePath(e);
  }
  deoptimizeThisOnEventAtPath(e, t, s, i) {
    this.variable.deoptimizeThisOnEventAtPath(e, t, s === this ? this.variable : s, i);
  }
  hasEffectsWhenAccessedAtPath(e, t) {
    return e.length > 0 && this.variable.hasEffectsWhenAccessedAtPath(e, t);
  }
  hasEffectsWhenAssignedAtPath(e, t) {
    return this.variable.hasEffectsWhenAssignedAtPath(e, t);
  }
  include() {
    this.included || (this.included = true, this.context.includeVariableInModule(this.variable));
  }
  initialise() {
    this.alias = this.scope.findLexicalBoundary() instanceof Di ? this.context.moduleContext : null, this.alias === "undefined" && this.context.warn({ code: "THIS_IS_UNDEFINED", message: "The 'this' keyword is equivalent to 'undefined' at the top level of an ES module, and has been rewritten", url: "https://rollupjs.org/guide/en/#error-this-is-undefined" }, this.start);
  }
  render(e) {
    this.alias !== null && e.overwrite(this.start, this.end, this.alias, { contentOnly: false, storeName: true });
  }
}, ThrowStatement: class extends ht {
  hasEffects() {
    return true;
  }
  include(e, t) {
    this.included = true, this.argument.include(e, t), e.brokenFlow = 2;
  }
  render(e, t) {
    this.argument.render(e, t, { preventASI: true }), this.argument.start === this.start + 5 && e.prependLeft(this.start + 5, " ");
  }
}, TryStatement: class extends ht {
  constructor() {
    super(...arguments), this.directlyIncluded = false, this.includedLabelsAfterBlock = null;
  }
  hasEffects(e) {
    var t;
    return (this.context.options.treeshake.tryCatchDeoptimization ? this.block.body.length > 0 : this.block.hasEffects(e)) || !!((t = this.finalizer) === null || t === void 0 ? void 0 : t.hasEffects(e));
  }
  include(e, t) {
    var s, i;
    const n2 = (s = this.context.options.treeshake) === null || s === void 0 ? void 0 : s.tryCatchDeoptimization, { brokenFlow: r2 } = e;
    if (this.directlyIncluded && n2) {
      if (this.includedLabelsAfterBlock)
        for (const t2 of this.includedLabelsAfterBlock)
          e.includedLabels.add(t2);
    } else
      this.included = true, this.directlyIncluded = true, this.block.include(e, n2 ? "variables" : t), e.includedLabels.size > 0 && (this.includedLabelsAfterBlock = [...e.includedLabels]), e.brokenFlow = r2;
    this.handler !== null && (this.handler.include(e, t), e.brokenFlow = r2), (i = this.finalizer) === null || i === void 0 || i.include(e, t);
  }
}, UnaryExpression: class extends ht {
  getLiteralValueAtPath(e, t, s) {
    if (e.length > 0)
      return H;
    const i = this.argument.getLiteralValueAtPath(V, t, s);
    return typeof i == "symbol" ? H : Li[this.operator](i);
  }
  hasEffects(e) {
    return this.deoptimized || this.applyDeoptimizations(), !(this.operator === "typeof" && this.argument instanceof bs) && (this.argument.hasEffects(e) || this.operator === "delete" && this.argument.hasEffectsWhenAssignedAtPath(V, e));
  }
  hasEffectsWhenAccessedAtPath(e) {
    return this.operator === "void" ? e.length > 0 : e.length > 1;
  }
  applyDeoptimizations() {
    this.deoptimized = true, this.operator === "delete" && (this.argument.deoptimizePath(V), this.context.requestTreeshakingPass());
  }
}, UnknownNode: class extends ht {
  hasEffects() {
    return true;
  }
  include(e) {
    super.include(e, true);
  }
}, UpdateExpression: class extends ht {
  hasEffects(e) {
    return this.deoptimized || this.applyDeoptimizations(), this.argument.hasEffects(e) || this.argument.hasEffectsWhenAssignedAtPath(V, e);
  }
  hasEffectsWhenAccessedAtPath(e) {
    return e.length > 1;
  }
  render(e, t) {
    const { exportNamesByVariable: s, format: i, snippets: { _: n2 } } = t;
    if (this.argument.render(e, t), i === "system") {
      const i2 = this.argument.variable, r2 = s.get(i2);
      if (r2)
        if (this.prefix)
          r2.length === 1 ? ns(i2, this.start, this.end, e, t) : rs(i2, this.start, this.end, this.parent.type !== "ExpressionStatement", e, t);
        else {
          const s2 = this.operator[0];
          !function(e2, t2, s3, i3, n3, r3, a2) {
            const { _: o2 } = r3.snippets;
            n3.prependRight(t2, `${is([e2], r3, a2)},${o2}`), i3 && (n3.prependRight(t2, "("), n3.appendLeft(s3, ")"));
          }(i2, this.start, this.end, this.parent.type !== "ExpressionStatement", e, t, `${n2}${s2}${n2}1`);
        }
    }
  }
  applyDeoptimizations() {
    if (this.deoptimized = true, this.argument.deoptimizePath(V), this.argument instanceof bs) {
      this.scope.findVariable(this.argument.name).isReassigned = true;
    }
    this.context.requestTreeshakingPass();
  }
}, VariableDeclaration: Vi, VariableDeclarator: class extends ht {
  declareDeclarator(e) {
    this.id.declare(e, this.init || Me);
  }
  deoptimizePath(e) {
    this.id.deoptimizePath(e);
  }
  hasEffects(e) {
    var t;
    const s = (t = this.init) === null || t === void 0 ? void 0 : t.hasEffects(e);
    return this.id.markDeclarationReached(), s || this.id.hasEffects(e);
  }
  include(e, t) {
    var s;
    this.included = true, (s = this.init) === null || s === void 0 || s.include(e, t, { includeWithoutParameterDefaults: true }), this.id.markDeclarationReached(), (t || this.id.shouldBeIncluded(e)) && this.id.include(e, t);
  }
  render(e, t) {
    const { exportNamesByVariable: s, snippets: { _: i } } = t, n2 = this.id.included;
    if (n2)
      this.id.render(e, t);
    else {
      const t2 = Ut(e.original, "=", this.id.end);
      e.remove(this.start, Ht(e.original, t2 + 1));
    }
    this.init ? this.init.render(e, t, n2 ? Z : { renderedSurroundingElement: "ExpressionStatement" }) : this.id instanceof bs && Oi(this.id.variable, s) && e.appendLeft(this.end, `${i}=${i}void 0`);
  }
  applyDeoptimizations() {
  }
}, WhileStatement: class extends ht {
  hasEffects(e) {
    if (this.test.hasEffects(e))
      return true;
    const { brokenFlow: t, ignore: { breaks: s, continues: i } } = e;
    return e.ignore.breaks = true, e.ignore.continues = true, !!this.body.hasEffects(e) || (e.ignore.breaks = s, e.ignore.continues = i, e.brokenFlow = t, false);
  }
  include(e, t) {
    this.included = true, this.test.include(e, t);
    const { brokenFlow: s } = e;
    this.body.include(e, t, { asSingleStatement: true }), e.brokenFlow = s;
  }
}, YieldExpression: class extends ht {
  hasEffects(e) {
    var t;
    return this.deoptimized || this.applyDeoptimizations(), !e.ignore.returnYield || !!((t = this.argument) === null || t === void 0 ? void 0 : t.hasEffects(e));
  }
  render(e, t) {
    this.argument && (this.argument.render(e, t, { preventASI: true }), this.argument.start === this.start + 5 && e.prependLeft(this.start + 5, " "));
  }
} };
class Fi extends Y {
  constructor(e) {
    super("_missingExportShim"), this.module = e;
  }
  include() {
    super.include(), this.module.needsExportShim = true;
  }
}
class zi extends Y {
  constructor(e) {
    super(e.getModuleName()), this.memberVariables = null, this.mergedNamespaces = [], this.referencedEarly = false, this.references = [], this.context = e, this.module = e.module;
  }
  addReference(e) {
    this.references.push(e), this.name = e.name;
  }
  getMemberVariables() {
    if (this.memberVariables)
      return this.memberVariables;
    const e = /* @__PURE__ */ Object.create(null);
    for (const t of this.context.getExports().concat(this.context.getReexports()))
      if (t[0] !== "*" && t !== this.module.info.syntheticNamedExports) {
        const s = this.context.traceExport(t);
        s && (e[t] = s);
      }
    return this.memberVariables = e;
  }
  include() {
    this.included = true, this.context.includeAllExports();
  }
  prepare(e) {
    this.mergedNamespaces.length > 0 && this.module.scope.addAccessedGlobals(["_mergeNamespaces"], e);
  }
  renderBlock(e) {
    const { exportNamesByVariable: t, format: s, freeze: i, indent: n2, namespaceToStringTag: r2, snippets: { _: a2, cnst: o2, getObject: h2, getPropertyAccess: l2, n: c2, s: u2 } } = e, d2 = this.getMemberVariables(), p2 = Object.entries(d2).map(([e2, t2]) => this.referencedEarly || t2.isReassigned ? [null, `get ${e2}${a2}()${a2}{${a2}return ${t2.getName(l2)}${u2}${a2}}`] : [e2, t2.getName(l2)]);
    p2.unshift([null, `__proto__:${a2}null`]);
    let f2 = h2(p2, { lineBreakIndent: { base: "", t: n2 } });
    if (this.mergedNamespaces.length > 0) {
      const e2 = this.mergedNamespaces.map((e3) => e3.getName(l2));
      f2 = `/*#__PURE__*/_mergeNamespaces(${f2},${a2}[${e2.join(`,${a2}`)}])`;
    } else
      r2 && (f2 = `/*#__PURE__*/Object.defineProperty(${f2},${a2}Symbol.toStringTag,${a2}${gi(h2)})`), i && (f2 = `/*#__PURE__*/Object.freeze(${f2})`);
    return f2 = `${o2} ${this.getName(l2)}${a2}=${a2}${f2};`, s === "system" && t.has(this) && (f2 += `${c2}${is([this], e)};`), f2;
  }
  renderFirst() {
    return this.referencedEarly;
  }
  setMergedNamespaces(e) {
    this.mergedNamespaces = e;
    const t = this.context.getModuleExecIndex();
    for (const e2 of this.references)
      if (e2.context.getModuleExecIndex() <= t) {
        this.referencedEarly = true;
        break;
      }
  }
}
zi.prototype.isNamespace = true;
class Wi extends Y {
  constructor(e, t, s) {
    super(t), this.baseVariable = null, this.context = e, this.module = e.module, this.syntheticNamespace = s;
  }
  getBaseVariable() {
    if (this.baseVariable)
      return this.baseVariable;
    let e = this.syntheticNamespace;
    for (; e instanceof Mi || e instanceof Wi; ) {
      if (e instanceof Mi) {
        const t = e.getOriginalVariable();
        if (t === e)
          break;
        e = t;
      }
      e instanceof Wi && (e = e.syntheticNamespace);
    }
    return this.baseVariable = e;
  }
  getBaseVariableName() {
    return this.syntheticNamespace.getBaseVariableName();
  }
  getName(e) {
    return `${this.syntheticNamespace.getName(e)}${e(this.name)}`;
  }
  include() {
    this.included = true, this.context.includeVariableInModule(this.syntheticNamespace);
  }
  setRenderNames(e, t) {
    super.setRenderNames(e, t);
  }
}
var ji;
function Ui(e) {
  return e.id;
}
!function(e) {
  e[e.LOAD_AND_PARSE = 0] = "LOAD_AND_PARSE", e[e.ANALYSE = 1] = "ANALYSE", e[e.GENERATE = 2] = "GENERATE";
}(ji || (ji = {}));
var Gi = "performance" in (typeof globalThis != "undefined" ? globalThis : typeof window != "undefined" ? window : {}) ? performance : { now: () => 0 }, Hi = { memoryUsage: () => ({ heapUsed: 0 }) };
const qi = () => {
};
let Ki = /* @__PURE__ */ new Map();
function Xi(e, t) {
  switch (t) {
    case 1:
      return `# ${e}`;
    case 2:
      return `## ${e}`;
    case 3:
      return e;
    default:
      return `${"  ".repeat(t - 4)}- ${e}`;
  }
}
function Yi(e, t = 3) {
  e = Xi(e, t);
  const s = Hi.memoryUsage().heapUsed, i = Gi.now(), n2 = Ki.get(e);
  n2 === void 0 ? Ki.set(e, { memory: 0, startMemory: s, startTime: i, time: 0, totalMemory: 0 }) : (n2.startMemory = s, n2.startTime = i);
}
function Qi(e, t = 3) {
  e = Xi(e, t);
  const s = Ki.get(e);
  if (s !== void 0) {
    const e2 = Hi.memoryUsage().heapUsed;
    s.memory += e2 - s.startMemory, s.time += Gi.now() - s.startTime, s.totalMemory = Math.max(s.totalMemory, e2);
  }
}
function Zi() {
  const e = {};
  for (const [t, { memory: s, time: i, totalMemory: n2 }] of Ki)
    e[t] = [i, s, n2];
  return e;
}
let Ji = qi, en = qi;
const tn = ["load", "resolveDynamicImport", "resolveId", "transform"];
function sn(e, t) {
  for (const s of tn)
    if (s in e) {
      let i = `plugin ${t}`;
      e.name && (i += ` (${e.name})`), i += ` - ${s}`;
      const n2 = e[s];
      e[s] = function(...e2) {
        Ji(i, 4);
        const t2 = n2.apply(this, e2);
        return en(i, 4), t2 && typeof t2.then == "function" ? (Ji(`${i} (async)`, 4), t2.then((e3) => (en(`${i} (async)`, 4), e3))) : t2;
      };
    }
  return e;
}
function nn(e) {
  e.isExecuted = true;
  const t = [e], s = /* @__PURE__ */ new Set();
  for (const e2 of t)
    for (const i of [...e2.dependencies, ...e2.implicitlyLoadedBefore])
      i instanceof Ce || i.isExecuted || !i.info.moduleSideEffects && !e2.implicitlyLoadedBefore.has(i) || s.has(i.id) || (i.isExecuted = true, s.add(i.id), t.push(i));
}
const rn = { identifier: null, localName: "_missingExportShim" };
function an(e, t, s, i, n2 = /* @__PURE__ */ new Map()) {
  const r2 = n2.get(t);
  if (r2) {
    if (r2.has(e))
      return i ? [null] : le((a2 = t, o2 = e.id, { code: ue.CIRCULAR_REEXPORT, id: o2, message: `"${a2}" cannot be exported from ${re(o2)} as it is a reexport that references itself.` }));
    r2.add(e);
  } else
    n2.set(t, /* @__PURE__ */ new Set([e]));
  var a2, o2;
  return e.getVariableForExportName(t, { importerForSideEffects: s, isExportAllSearch: i, searchedNamesAndModules: n2 });
}
class on {
  constructor(e, t, s, i, n2, r2, a2) {
    this.graph = e, this.id = t, this.options = s, this.alternativeReexportModules = /* @__PURE__ */ new Map(), this.chunkFileNames = /* @__PURE__ */ new Set(), this.chunkNames = [], this.cycles = /* @__PURE__ */ new Set(), this.dependencies = /* @__PURE__ */ new Set(), this.dynamicDependencies = /* @__PURE__ */ new Set(), this.dynamicImporters = [], this.dynamicImports = [], this.execIndex = 1 / 0, this.implicitlyLoadedAfter = /* @__PURE__ */ new Set(), this.implicitlyLoadedBefore = /* @__PURE__ */ new Set(), this.importDescriptions = /* @__PURE__ */ new Map(), this.importMetas = [], this.importedFromNotTreeshaken = false, this.importers = [], this.includedDynamicImporters = [], this.includedImports = /* @__PURE__ */ new Set(), this.isExecuted = false, this.isUserDefinedEntryPoint = false, this.needsExportShim = false, this.sideEffectDependenciesByVariable = /* @__PURE__ */ new Map(), this.sources = /* @__PURE__ */ new Set(), this.usesTopLevelAwait = false, this.allExportNames = null, this.ast = null, this.exportAllModules = [], this.exportAllSources = /* @__PURE__ */ new Set(), this.exportNamesByVariable = null, this.exportShimVariable = new Fi(this), this.exports = /* @__PURE__ */ new Map(), this.namespaceReexportsByName = /* @__PURE__ */ new Map(), this.reexportDescriptions = /* @__PURE__ */ new Map(), this.relevantDependencies = null, this.syntheticExports = /* @__PURE__ */ new Map(), this.syntheticNamespace = null, this.transformDependencies = [], this.transitiveReexports = null, this.excludeFromSourcemap = /\0/.test(t), this.context = s.moduleContext(t), this.preserveSignature = this.options.preserveEntrySignatures;
    const o2 = this, { dynamicImports: h2, dynamicImporters: l2, implicitlyLoadedAfter: c2, implicitlyLoadedBefore: u2, importers: d2, reexportDescriptions: p2, sources: f2 } = this;
    this.info = { ast: null, code: null, get dynamicallyImportedIdResolutions() {
      return h2.map(({ argument: e2 }) => typeof e2 == "string" && o2.resolvedIds[e2]).filter(Boolean);
    }, get dynamicallyImportedIds() {
      return h2.map(({ id: e2 }) => e2).filter((e2) => e2 != null);
    }, get dynamicImporters() {
      return l2.sort();
    }, get hasDefaultExport() {
      return o2.ast ? o2.exports.has("default") || p2.has("default") : null;
    }, get hasModuleSideEffects() {
      return be("Accessing ModuleInfo.hasModuleSideEffects from plugins is deprecated. Please use ModuleInfo.moduleSideEffects instead.", false, s), this.moduleSideEffects;
    }, id: t, get implicitlyLoadedAfterOneOf() {
      return Array.from(c2, Ui).sort();
    }, get implicitlyLoadedBefore() {
      return Array.from(u2, Ui).sort();
    }, get importedIdResolutions() {
      return Array.from(f2, (e2) => o2.resolvedIds[e2]).filter(Boolean);
    }, get importedIds() {
      return Array.from(f2, (e2) => {
        var t2;
        return (t2 = o2.resolvedIds[e2]) === null || t2 === void 0 ? void 0 : t2.id;
      }).filter(Boolean);
    }, get importers() {
      return d2.sort();
    }, isEntry: i, isExternal: false, get isIncluded() {
      return e.phase !== ji.GENERATE ? null : o2.isIncluded();
    }, meta: __spreadValues({}, a2), moduleSideEffects: n2, syntheticNamedExports: r2 }, Object.defineProperty(this.info, "hasModuleSideEffects", { enumerable: false });
  }
  basename() {
    const e = _(this.id), t = $(this.id);
    return we(t ? e.slice(0, -t.length) : e);
  }
  bindReferences() {
    this.ast.bind();
  }
  error(e, t) {
    return this.addLocationToLogProps(e, t), le(e);
  }
  getAllExportNames() {
    if (this.allExportNames)
      return this.allExportNames;
    this.allExportNames = /* @__PURE__ */ new Set([...this.exports.keys(), ...this.reexportDescriptions.keys()]);
    for (const e of this.exportAllModules)
      if (e instanceof Ce)
        this.allExportNames.add(`*${e.id}`);
      else
        for (const t of e.getAllExportNames())
          t !== "default" && this.allExportNames.add(t);
    return typeof this.info.syntheticNamedExports == "string" && this.allExportNames.delete(this.info.syntheticNamedExports), this.allExportNames;
  }
  getDependenciesToBeIncluded() {
    if (this.relevantDependencies)
      return this.relevantDependencies;
    this.relevantDependencies = /* @__PURE__ */ new Set();
    const e = /* @__PURE__ */ new Set(), t = /* @__PURE__ */ new Set(), s = new Set(this.includedImports);
    if (this.info.isEntry || this.includedDynamicImporters.length > 0 || this.namespace.included || this.implicitlyLoadedAfter.size > 0)
      for (const e2 of [...this.getReexports(), ...this.getExports()]) {
        const [t2] = this.getVariableForExportName(e2);
        t2 && s.add(t2);
      }
    for (let i of s) {
      const s2 = this.sideEffectDependenciesByVariable.get(i);
      if (s2)
        for (const e2 of s2)
          t.add(e2);
      i instanceof Wi ? i = i.getBaseVariable() : i instanceof Mi && (i = i.getOriginalVariable()), e.add(i.module);
    }
    if (this.options.treeshake && this.info.moduleSideEffects !== "no-treeshake")
      this.addRelevantSideEffectDependencies(this.relevantDependencies, e, t);
    else
      for (const e2 of this.dependencies)
        this.relevantDependencies.add(e2);
    for (const t2 of e)
      this.relevantDependencies.add(t2);
    return this.relevantDependencies;
  }
  getExportNamesByVariable() {
    if (this.exportNamesByVariable)
      return this.exportNamesByVariable;
    const e = /* @__PURE__ */ new Map();
    for (const t of this.getAllExportNames()) {
      let [s] = this.getVariableForExportName(t);
      if (s instanceof Mi && (s = s.getOriginalVariable()), !s || !(s.included || s instanceof Q$2))
        continue;
      const i = e.get(s);
      i ? i.push(t) : e.set(s, [t]);
    }
    return this.exportNamesByVariable = e;
  }
  getExports() {
    return Array.from(this.exports.keys());
  }
  getReexports() {
    if (this.transitiveReexports)
      return this.transitiveReexports;
    this.transitiveReexports = [];
    const e = new Set(this.reexportDescriptions.keys());
    for (const t of this.exportAllModules)
      if (t instanceof Ce)
        e.add(`*${t.id}`);
      else
        for (const s of [...t.getReexports(), ...t.getExports()])
          s !== "default" && e.add(s);
    return this.transitiveReexports = [...e];
  }
  getRenderedExports() {
    const e = [], t = [];
    for (const s of this.exports.keys()) {
      const [i] = this.getVariableForExportName(s);
      (i && i.included ? e : t).push(s);
    }
    return { removedExports: t, renderedExports: e };
  }
  getSyntheticNamespace() {
    return this.syntheticNamespace === null && (this.syntheticNamespace = void 0, [this.syntheticNamespace] = this.getVariableForExportName(typeof this.info.syntheticNamedExports == "string" ? this.info.syntheticNamedExports : "default", { onlyExplicit: true })), this.syntheticNamespace ? this.syntheticNamespace : le((e = this.id, t = this.info.syntheticNamedExports, { code: ue.SYNTHETIC_NAMED_EXPORTS_NEED_NAMESPACE_EXPORT, id: e, message: `Module "${re(e)}" that is marked with 'syntheticNamedExports: ${JSON.stringify(t)}' needs ${typeof t == "string" && t !== "default" ? `an explicit export named "${t}"` : "a default export"} that does not reexport an unresolved named export of the same module.` }));
    var e, t;
  }
  getVariableForExportName(e, { importerForSideEffects: t, isExportAllSearch: s, onlyExplicit: i, searchedNamesAndModules: n2 } = J) {
    var r2;
    if (e[0] === "*") {
      if (e.length === 1)
        return [this.namespace];
      return this.graph.modulesById.get(e.slice(1)).getVariableForExportName("*");
    }
    const a2 = this.reexportDescriptions.get(e);
    if (a2) {
      const [e2] = an(a2.module, a2.localName, t, false, n2);
      return e2 ? (t && hn(e2, t, this), [e2]) : this.error(me(a2.localName, this.id, a2.module.id), a2.start);
    }
    const o2 = this.exports.get(e);
    if (o2) {
      if (o2 === rn)
        return [this.exportShimVariable];
      const e2 = o2.localName, s2 = this.traceVariable(e2, { importerForSideEffects: t, searchedNamesAndModules: n2 });
      return t && (M(t.sideEffectDependenciesByVariable, s2, () => /* @__PURE__ */ new Set()).add(this), hn(s2, t, this)), [s2];
    }
    if (i)
      return [null];
    if (e !== "default") {
      const s2 = (r2 = this.namespaceReexportsByName.get(e)) !== null && r2 !== void 0 ? r2 : this.getVariableFromNamespaceReexports(e, t, n2);
      if (this.namespaceReexportsByName.set(e, s2), s2[0])
        return s2;
    }
    return this.info.syntheticNamedExports ? [M(this.syntheticExports, e, () => new Wi(this.astContext, e, this.getSyntheticNamespace()))] : !s && this.options.shimMissingExports ? (this.shimMissingExport(e), [this.exportShimVariable]) : [null];
  }
  hasEffects() {
    return this.info.moduleSideEffects === "no-treeshake" || this.ast.included && this.ast.hasEffects($e());
  }
  include() {
    const e = Ne();
    this.ast.shouldBeIncluded(e) && this.ast.include(e, false);
  }
  includeAllExports(e) {
    this.isExecuted || (nn(this), this.graph.needsTreeshakingPass = true);
    for (const t of this.exports.keys())
      if (e || t !== this.info.syntheticNamedExports) {
        const e2 = this.getVariableForExportName(t)[0];
        e2.deoptimizePath(B$2), e2.included || this.includeVariable(e2);
      }
    for (const e2 of this.getReexports()) {
      const [t] = this.getVariableForExportName(e2);
      t && (t.deoptimizePath(B$2), t.included || this.includeVariable(t), t instanceof Q$2 && (t.module.reexported = true));
    }
    e && this.namespace.setMergedNamespaces(this.includeAndGetAdditionalMergedNamespaces());
  }
  includeAllInBundle() {
    this.ast.include(Ne(), true), this.includeAllExports(false);
  }
  isIncluded() {
    return this.ast.included || this.namespace.included || this.importedFromNotTreeshaken;
  }
  linkImports() {
    this.addModulesToImportDescriptions(this.importDescriptions), this.addModulesToImportDescriptions(this.reexportDescriptions);
    const e = [];
    for (const t of this.exportAllSources) {
      const s = this.graph.modulesById.get(this.resolvedIds[t].id);
      s instanceof Ce ? e.push(s) : this.exportAllModules.push(s);
    }
    this.exportAllModules.push(...e);
  }
  render(e) {
    const t = this.magicString.clone();
    return this.ast.render(t, e), this.usesTopLevelAwait = this.astContext.usesTopLevelAwait, t;
  }
  setSource(_a2) {
    var _b = _a2, { ast: e, code: t, customTransformCache: s, originalCode: i, originalSourcemap: n2, resolvedIds: r2, sourcemapChain: a2, transformDependencies: o2, transformFiles: h2 } = _b, l2 = __objRest(_b, ["ast", "code", "customTransformCache", "originalCode", "originalSourcemap", "resolvedIds", "sourcemapChain", "transformDependencies", "transformFiles"]);
    this.info.code = t, this.originalCode = i, this.originalSourcemap = n2, this.sourcemapChain = a2, h2 && (this.transformFiles = h2), this.transformDependencies = o2, this.customTransformCache = s, this.updateOptions(l2), Ji("generate ast", 3), e || (e = this.tryParse()), en("generate ast", 3), this.resolvedIds = r2 || /* @__PURE__ */ Object.create(null);
    const c2 = this.id;
    this.magicString = new E$2(t, { filename: this.excludeFromSourcemap ? null : c2, indentExclusionRanges: [] }), Ji("analyse ast", 3), this.astContext = { addDynamicImport: this.addDynamicImport.bind(this), addExport: this.addExport.bind(this), addImport: this.addImport.bind(this), addImportMeta: this.addImportMeta.bind(this), code: t, deoptimizationTracker: this.graph.deoptimizationTracker, error: this.error.bind(this), fileName: c2, getExports: this.getExports.bind(this), getModuleExecIndex: () => this.execIndex, getModuleName: this.basename.bind(this), getNodeConstructor: (e2) => Bi[e2] || Bi.UnknownNode, getReexports: this.getReexports.bind(this), importDescriptions: this.importDescriptions, includeAllExports: () => this.includeAllExports(true), includeDynamicImport: this.includeDynamicImport.bind(this), includeVariableInModule: this.includeVariableInModule.bind(this), magicString: this.magicString, module: this, moduleContext: this.context, options: this.options, requestTreeshakingPass: () => this.graph.needsTreeshakingPass = true, traceExport: (e2) => this.getVariableForExportName(e2)[0], traceVariable: this.traceVariable.bind(this), usesTopLevelAwait: false, warn: this.warn.bind(this) }, this.scope = new Di(this.graph.scope, this.astContext), this.namespace = new zi(this.astContext), this.ast = new Ni(e, { context: this.astContext, type: "Module" }, this.scope), this.info.ast = e, en("analyse ast", 3);
  }
  toJSON() {
    return { ast: this.ast.esTreeNode, code: this.info.code, customTransformCache: this.customTransformCache, dependencies: Array.from(this.dependencies, Ui), id: this.id, meta: this.info.meta, moduleSideEffects: this.info.moduleSideEffects, originalCode: this.originalCode, originalSourcemap: this.originalSourcemap, resolvedIds: this.resolvedIds, sourcemapChain: this.sourcemapChain, syntheticNamedExports: this.info.syntheticNamedExports, transformDependencies: this.transformDependencies, transformFiles: this.transformFiles };
  }
  traceVariable(e, { importerForSideEffects: t, isExportAllSearch: s, searchedNamesAndModules: i } = J) {
    const n2 = this.scope.variables.get(e);
    if (n2)
      return n2;
    const r2 = this.importDescriptions.get(e);
    if (r2) {
      const e2 = r2.module;
      if (e2 instanceof on && r2.name === "*")
        return e2.namespace;
      const [n3] = an(e2, r2.name, t || this, s, i);
      return n3 || this.error(me(r2.name, this.id, e2.id), r2.start);
    }
    return null;
  }
  tryParse() {
    try {
      return this.graph.contextParse(this.info.code);
    } catch (e) {
      let t = e.message.replace(/ \(\d+:\d+\)$/, "");
      return this.id.endsWith(".json") ? t += " (Note that you need @rollup/plugin-json to import JSON files)" : this.id.endsWith(".js") || (t += " (Note that you need plugins to import files that are not JavaScript)"), this.error({ code: "PARSE_ERROR", message: t, parserError: e }, e.pos);
    }
  }
  updateOptions({ meta: e, moduleSideEffects: t, syntheticNamedExports: s }) {
    t != null && (this.info.moduleSideEffects = t), s != null && (this.info.syntheticNamedExports = s), e != null && Object.assign(this.info.meta, e);
  }
  warn(e, t) {
    this.addLocationToLogProps(e, t), this.options.onwarn(e);
  }
  addDynamicImport(e) {
    let t = e.source;
    t instanceof Ti ? t.quasis.length === 1 && t.quasis[0].value.cooked && (t = t.quasis[0].value.cooked) : t instanceof Ns && typeof t.value == "string" && (t = t.value), this.dynamicImports.push({ argument: t, id: null, node: e, resolution: null });
  }
  addExport(e) {
    if (e instanceof Hs)
      this.exports.set("default", { identifier: e.variable.getAssignedVariableName(), localName: "default" });
    else if (e instanceof Us) {
      const t = e.source.value;
      if (this.sources.add(t), e.exported) {
        const s = e.exported.name;
        this.reexportDescriptions.set(s, { localName: "*", module: null, source: t, start: e.start });
      } else
        this.exportAllSources.add(t);
    } else if (e.source instanceof Ns) {
      const t = e.source.value;
      this.sources.add(t);
      for (const s of e.specifiers) {
        const e2 = s.exported.name;
        this.reexportDescriptions.set(e2, { localName: s.local.name, module: null, source: t, start: s.start });
      }
    } else if (e.declaration) {
      const t = e.declaration;
      if (t instanceof Vi)
        for (const e2 of t.declarations)
          for (const t2 of _e(e2.id))
            this.exports.set(t2, { identifier: null, localName: t2 });
      else {
        const e2 = t.id.name;
        this.exports.set(e2, { identifier: null, localName: e2 });
      }
    } else
      for (const t of e.specifiers) {
        const e2 = t.local.name, s = t.exported.name;
        this.exports.set(s, { identifier: null, localName: e2 });
      }
  }
  addImport(e) {
    const t = e.source.value;
    this.sources.add(t);
    for (const s of e.specifiers) {
      const e2 = s.type === "ImportDefaultSpecifier", i = s.type === "ImportNamespaceSpecifier", n2 = e2 ? "default" : i ? "*" : s.imported.name;
      this.importDescriptions.set(s.local.name, { module: null, name: n2, source: t, start: s.start });
    }
  }
  addImportMeta(e) {
    this.importMetas.push(e);
  }
  addLocationToLogProps(e, t) {
    e.id = this.id, e.pos = t;
    let s = this.info.code;
    const i = te(s, t, { offsetLine: 1 });
    if (i) {
      let { column: n2, line: r2 } = i;
      try {
        ({ column: n2, line: r2 } = function(e2, t2) {
          const s2 = e2.filter((e3) => !!e3.mappings);
          e:
            for (; s2.length > 0; ) {
              const e3 = s2.pop().mappings[t2.line - 1];
              if (e3) {
                const s3 = e3.filter((e4) => e4.length > 1), i2 = s3[s3.length - 1];
                for (const e4 of s3)
                  if (e4[0] >= t2.column || e4 === i2) {
                    t2 = { column: e4[3], line: e4[2] + 1 };
                    continue e;
                  }
              }
              throw new Error("Can't resolve original location of error.");
            }
          return t2;
        }(this.sourcemapChain, { column: n2, line: r2 })), s = this.originalCode;
      } catch (e2) {
        this.options.onwarn({ code: "SOURCEMAP_ERROR", id: this.id, loc: { column: n2, file: this.id, line: r2 }, message: `Error when using sourcemap for reporting an error: ${e2.message}`, pos: t });
      }
      ce(e, { column: n2, line: r2 }, s, this.id);
    }
  }
  addModulesToImportDescriptions(e) {
    for (const t of e.values()) {
      const { id: e2 } = this.resolvedIds[t.source];
      t.module = this.graph.modulesById.get(e2);
    }
  }
  addRelevantSideEffectDependencies(e, t, s) {
    const i = /* @__PURE__ */ new Set(), n2 = (r2) => {
      for (const a2 of r2)
        i.has(a2) || (i.add(a2), t.has(a2) ? e.add(a2) : (a2.info.moduleSideEffects || s.has(a2)) && (a2 instanceof Ce || a2.hasEffects() ? e.add(a2) : n2(a2.dependencies)));
    };
    n2(this.dependencies), n2(s);
  }
  getVariableFromNamespaceReexports(e, t, s) {
    let i = null;
    const n2 = /* @__PURE__ */ new Map(), r2 = /* @__PURE__ */ new Set();
    for (const a2 of this.exportAllModules) {
      if (a2.info.syntheticNamedExports === e)
        continue;
      const [o2, h2] = an(a2, e, t, true, ln(s));
      a2 instanceof Ce || h2 ? r2.add(o2) : o2 instanceof Wi ? i || (i = o2) : o2 && n2.set(o2, a2);
    }
    if (n2.size > 0) {
      const t2 = [...n2], s2 = t2[0][0];
      return t2.length === 1 ? [s2] : (this.options.onwarn(function(e2, t3, s3) {
        return { code: ue.NAMESPACE_CONFLICT, message: `Conflicting namespaces: "${re(t3)}" re-exports "${e2}" from one of the modules ${ie(s3.map((e3) => re(e3)))} (will be ignored)`, name: e2, reexporter: t3, sources: s3 };
      }(e, this.id, t2.map(([, e2]) => e2.id))), [null]);
    }
    if (r2.size > 0) {
      const t2 = [...r2], s2 = t2[0];
      return t2.length > 1 && this.options.onwarn(function(e2, t3, s3, i2) {
        return { code: ue.AMBIGUOUS_EXTERNAL_NAMESPACES, message: `Ambiguous external namespace resolution: "${re(t3)}" re-exports "${e2}" from one of the external modules ${ie(i2.map((e3) => re(e3)))}, guessing "${re(s3)}".`, name: e2, reexporter: t3, sources: i2 };
      }(e, this.id, s2.module.id, t2.map((e2) => e2.module.id))), [s2, true];
    }
    return i ? [i] : [null];
  }
  includeAndGetAdditionalMergedNamespaces() {
    const e = /* @__PURE__ */ new Set(), t = /* @__PURE__ */ new Set();
    for (const s of [this, ...this.exportAllModules])
      if (s instanceof Ce) {
        const [t2] = s.getVariableForExportName("*");
        t2.include(), this.includedImports.add(t2), e.add(t2);
      } else if (s.info.syntheticNamedExports) {
        const e2 = s.getSyntheticNamespace();
        e2.include(), this.includedImports.add(e2), t.add(e2);
      }
    return [...t, ...e];
  }
  includeDynamicImport(e) {
    const t = this.dynamicImports.find((t2) => t2.node === e).resolution;
    t instanceof on && (t.includedDynamicImporters.push(this), t.includeAllExports(true));
  }
  includeVariable(e) {
    if (!e.included) {
      e.include(), this.graph.needsTreeshakingPass = true;
      const t = e.module;
      if (t instanceof on && (t.isExecuted || nn(t), t !== this)) {
        const t2 = function(e2, t3) {
          const s = M(t3.sideEffectDependenciesByVariable, e2, () => /* @__PURE__ */ new Set());
          let i = e2;
          const n2 = /* @__PURE__ */ new Set([i]);
          for (; ; ) {
            const e3 = i.module;
            if (i = i instanceof Mi ? i.getDirectOriginalVariable() : i instanceof Wi ? i.syntheticNamespace : null, !i || n2.has(i))
              break;
            n2.add(i), s.add(e3);
            const t4 = e3.sideEffectDependenciesByVariable.get(i);
            if (t4)
              for (const e4 of t4)
                s.add(e4);
          }
          return s;
        }(e, this);
        for (const e2 of t2)
          e2.isExecuted || nn(e2);
      }
    }
  }
  includeVariableInModule(e) {
    this.includeVariable(e);
    const t = e.module;
    t && t !== this && this.includedImports.add(e);
  }
  shimMissingExport(e) {
    this.options.onwarn({ code: "SHIMMED_EXPORT", exporter: re(this.id), exportName: e, message: `Missing export "${e}" has been shimmed in module ${re(this.id)}.` }), this.exports.set(e, rn);
  }
}
function hn(e, t, s) {
  if (e.module instanceof on && e.module !== s) {
    const i = e.module.cycles;
    if (i.size > 0) {
      const n2 = s.cycles;
      for (const r2 of n2)
        if (i.has(r2)) {
          t.alternativeReexportModules.set(e, s);
          break;
        }
    }
  }
}
const ln = (e) => e && new Map(Array.from(e, ([e2, t]) => [e2, new Set(t)]));
function cn(e) {
  return e.endsWith(".js") ? e.slice(0, -3) : e;
}
function un(e, t) {
  return e.autoId ? `${e.basePath ? e.basePath + "/" : ""}${cn(t)}` : e.id || "";
}
function dn(e, t, s, i, n2, r2, a2, o2 = "return ") {
  const { _: h2, cnst: l2, getDirectReturnFunction: c2, getFunctionIntro: u2, getPropertyAccess: d2, n: p2, s: f2 } = n2;
  if (!s)
    return `${p2}${p2}${o2}${function(e2, t2, s2, i2, n3) {
      if (e2.length > 0)
        return e2[0].local;
      for (const { defaultVariableName: e3, id: r3, isChunk: a3, name: o3, namedExportsMode: h3, namespaceVariableName: l3, reexports: c3 } of t2)
        if (c3)
          return pn(o3, c3[0].imported, h3, a3, e3, l3, s2, r3, i2, n3);
    }(e, t, i, a2, d2)};`;
  let m2 = "";
  for (const { defaultVariableName: e2, id: n3, isChunk: o3, name: l3, namedExportsMode: u3, namespaceVariableName: f3, reexports: g2 } of t)
    if (g2 && s) {
      for (const t2 of g2)
        if (t2.reexported !== "*") {
          const s2 = pn(l3, t2.imported, u3, o3, e2, f3, i, n3, a2, d2);
          if (m2 && (m2 += p2), t2.imported !== "*" && t2.needsLiveBinding) {
            const [e3, i2] = c2([], { functionReturn: true, lineBreakIndent: null, name: null });
            m2 += `Object.defineProperty(exports,${h2}'${t2.reexported}',${h2}{${p2}${r2}enumerable:${h2}true,${p2}${r2}get:${h2}${e3}${s2}${i2}${p2}});`;
          } else
            m2 += `exports${d2(t2.reexported)}${h2}=${h2}${s2};`;
        }
    }
  for (const { exported: t2, local: s2 } of e) {
    const e2 = `exports${d2(t2)}`, i2 = s2;
    e2 !== i2 && (m2 && (m2 += p2), m2 += `${e2}${h2}=${h2}${i2};`);
  }
  for (const { name: e2, reexports: i2 } of t)
    if (i2 && s) {
      for (const t2 of i2)
        if (t2.reexported === "*") {
          m2 && (m2 += p2);
          const s2 = `{${p2}${r2}if${h2}(k${h2}!==${h2}'default'${h2}&&${h2}!exports.hasOwnProperty(k))${h2}${gn(e2, t2.needsLiveBinding, r2, n2)}${f2}${p2}}`;
          m2 += l2 === "var" && t2.needsLiveBinding ? `Object.keys(${e2}).forEach(${u2(["k"], { isAsync: false, name: null })}${s2});` : `for${h2}(${l2} k in ${e2})${h2}${s2}`;
        }
    }
  return m2 ? `${p2}${p2}${m2}` : "";
}
function pn(e, t, s, i, n2, r2, a2, o2, h2, l2) {
  if (t === "default") {
    if (!i) {
      const t2 = String(a2(o2)), s2 = Zs[t2] ? n2 : e;
      return Js(t2, h2) ? `${s2}${l2("default")}` : s2;
    }
    return s ? `${e}${l2("default")}` : e;
  }
  return t === "*" ? (i ? !s : ei[String(a2(o2))]) ? r2 : e : `${e}${l2(t)}`;
}
function fn(e) {
  return e([["value", "true"]], { lineBreakIndent: null });
}
function mn(e, t, s, { _: i, getObject: n2 }) {
  if (e) {
    if (t)
      return s ? `Object.defineProperties(exports,${i}${n2([["__esModule", fn(n2)], [null, `[Symbol.toStringTag]:${i}${gi(n2)}`]], { lineBreakIndent: null })});` : `Object.defineProperty(exports,${i}'__esModule',${i}${fn(n2)});`;
    if (s)
      return `Object.defineProperty(exports,${i}Symbol.toStringTag,${i}${gi(n2)});`;
  }
  return "";
}
const gn = (e, t, s, { _: i, getDirectReturnFunction: n2, n: r2 }) => {
  if (t) {
    const [t2, a2] = n2([], { functionReturn: true, lineBreakIndent: null, name: null });
    return `Object.defineProperty(exports,${i}k,${i}{${r2}${s}${s}enumerable:${i}true,${r2}${s}${s}get:${i}${t2}${e}[k]${a2}${r2}${s}})`;
  }
  return `exports[k]${i}=${i}${e}[k]`;
};
function yn(e, t, s, i, n2, r2, a2, o2) {
  const { _: h2, cnst: l2, n: c2 } = o2, u2 = /* @__PURE__ */ new Set(), d2 = [], p2 = (e2, t2, s2) => {
    u2.add(t2), d2.push(`${l2} ${e2}${h2}=${h2}/*#__PURE__*/${t2}(${s2});`);
  };
  for (const { defaultVariableName: s2, imports: i2, id: n3, isChunk: r3, name: a3, namedExportsMode: o3, namespaceVariableName: h3, reexports: l3 } of e)
    if (r3) {
      for (const { imported: e2, reexported: t2 } of [...i2 || [], ...l3 || []])
        if (e2 === "*" && t2 !== "*") {
          o3 || p2(h3, "_interopNamespaceDefaultOnly", a3);
          break;
        }
    } else {
      const e2 = String(t(n3));
      let r4 = false, o4 = false;
      for (const { imported: t2, reexported: n4 } of [...i2 || [], ...l3 || []]) {
        let i3, l4;
        t2 === "default" ? r4 || (r4 = true, s2 !== h3 && (l4 = s2, i3 = Zs[e2])) : t2 === "*" && n4 !== "*" && (o4 || (o4 = true, i3 = ei[e2], l4 = h3)), i3 && p2(l4, i3, a3);
      }
    }
  return `${si(u2, r2, a2, o2, s, i, n2)}${d2.length > 0 ? `${d2.join(c2)}${c2}${c2}` : ""}`;
}
function En(e) {
  return e[0] === "." ? cn(e) : e;
}
const xn = { assert: true, buffer: true, console: true, constants: true, domain: true, events: true, http: true, https: true, os: true, path: true, process: true, punycode: true, querystring: true, stream: true, string_decoder: true, timers: true, tty: true, url: true, util: true, vm: true, zlib: true };
function vn(e, t) {
  const s = t.map(({ id: e2 }) => e2).filter((e2) => e2 in xn);
  s.length && e({ code: "MISSING_NODE_BUILTINS", message: `Creating a browser bundle that depends on Node.js built-in modules (${ie(s)}). You might need to include https://github.com/FredKSchott/rollup-plugin-polyfill-node`, modules: s });
}
const bn = (e, t) => e.split(".").map(t).join("");
function An(e, t, s, i, { _: n2, getPropertyAccess: r2 }) {
  const a2 = e.split(".");
  a2[0] = (typeof s == "function" ? s(a2[0]) : s[a2[0]]) || a2[0];
  const o2 = a2.pop();
  let h2 = t, l2 = a2.map((e2) => (h2 += r2(e2), `${h2}${n2}=${n2}${h2}${n2}||${n2}{}`)).concat(`${h2}${r2(o2)}`).join(`,${n2}`) + `${n2}=${n2}${i}`;
  return a2.length > 0 && (l2 = `(${l2})`), l2;
}
function Sn(e) {
  let t = e.length;
  for (; t--; ) {
    const { imports: s, reexports: i } = e[t];
    if (s || i)
      return e.slice(0, t + 1);
  }
  return [];
}
const Pn = ({ dependencies: e, exports: t }) => {
  const s = new Set(t.map((e2) => e2.exported));
  s.add("default");
  for (const { reexports: t2 } of e)
    if (t2)
      for (const e2 of t2)
        e2.reexported !== "*" && s.add(e2.reexported);
  return s;
}, kn = (e, t, { _: s, cnst: i, getObject: n2, n: r2 }) => e ? `${r2}${t}${i} _starExcludes${s}=${s}${n2([...e].map((e2) => [e2, "1"]), { lineBreakIndent: { base: t, t } })};` : "", wn = (e, t, { _: s, n: i }) => e.length ? `${i}${t}var ${e.join(`,${s}`)};` : "", Cn = (e, t, s) => In(e.filter((e2) => e2.hoisted).map((e2) => ({ name: e2.exported, value: e2.local })), t, s);
function In(e, t, { _: s, n: i }) {
  return e.length === 0 ? "" : e.length === 1 ? `exports('${e[0].name}',${s}${e[0].value});${i}${i}` : `exports({${i}` + e.map(({ name: e2, value: i2 }) => `${t}${e2}:${s}${i2}`).join(`,${i}`) + `${i}});${i}${i}`;
}
const _n = (e, t, s) => In(e.filter((e2) => e2.expression).map((e2) => ({ name: e2.exported, value: e2.local })), t, s), Nn = (e, t, s) => In(e.filter((e2) => e2.local === "_missingExportShim").map((e2) => ({ name: e2.exported, value: "_missingExportShim" })), t, s);
function $n(e, t, s) {
  return e ? `${t}${bn(e, s)}` : "null";
}
var Tn = { amd: function(e, { accessedGlobals: t, dependencies: s, exports: i, hasExports: n2, id: r2, indent: a2, intro: o2, isEntryFacade: h2, isModuleFacade: l2, namedExportsMode: c2, outro: u2, snippets: d2, warn: p2 }, { amd: f2, esModule: m2, externalLiveBindings: g2, freeze: y2, interop: E2, namespaceToStringTag: x2, strict: v2 }) {
  vn(p2, s);
  const b2 = s.map((e2) => `'${En(e2.id)}'`), A2 = s.map((e2) => e2.name), { n: S2, getNonArrowFunctionIntro: P2, _: k2 } = d2;
  c2 && n2 && (A2.unshift("exports"), b2.unshift("'exports'")), t.has("require") && (A2.unshift("require"), b2.unshift("'require'")), t.has("module") && (A2.unshift("module"), b2.unshift("'module'"));
  const w2 = un(f2, r2), C2 = (w2 ? `'${w2}',${k2}` : "") + (b2.length ? `[${b2.join(`,${k2}`)}],${k2}` : ""), I2 = v2 ? `${k2}'use strict';` : "";
  e.prepend(`${o2}${yn(s, E2, g2, y2, x2, t, a2, d2)}`);
  const _2 = dn(i, s, c2, E2, d2, a2, g2);
  let N2 = mn(c2 && n2, h2 && m2, l2 && x2, d2);
  return N2 && (N2 = S2 + S2 + N2), e.append(`${_2}${N2}${u2}`), e.indent(a2).prepend(`${f2.define}(${C2}(${P2(A2, { isAsync: false, name: null })}{${I2}${S2}${S2}`).append(`${S2}${S2}}));`);
}, cjs: function(e, { accessedGlobals: t, dependencies: s, exports: i, hasExports: n2, indent: r2, intro: a2, isEntryFacade: o2, isModuleFacade: h2, namedExportsMode: l2, outro: c2, snippets: u2 }, { compact: d2, esModule: p2, externalLiveBindings: f2, freeze: m2, interop: g2, namespaceToStringTag: y2, strict: E2 }) {
  const { _: x2, n: v2 } = u2, b2 = E2 ? `'use strict';${v2}${v2}` : "";
  let A2 = mn(l2 && n2, o2 && p2, h2 && y2, u2);
  A2 && (A2 += v2 + v2);
  const S2 = function(e2, { _: t2, cnst: s2, n: i2 }, n3) {
    let r3 = "", a3 = false;
    for (const { id: o3, name: h3, reexports: l3, imports: c3 } of e2)
      l3 || c3 ? (r3 += n3 && a3 ? "," : `${r3 ? `;${i2}` : ""}${s2} `, a3 = true, r3 += `${h3}${t2}=${t2}require('${o3}')`) : (r3 && (r3 += n3 && !a3 ? "," : `;${i2}`), a3 = false, r3 += `require('${o3}')`);
    if (r3)
      return `${r3};${i2}${i2}`;
    return "";
  }(s, u2, d2), P2 = yn(s, g2, f2, m2, y2, t, r2, u2);
  e.prepend(`${b2}${a2}${A2}${S2}${P2}`);
  const k2 = dn(i, s, l2, g2, u2, r2, f2, `module.exports${x2}=${x2}`);
  return e.append(`${k2}${c2}`);
}, es: function(e, { accessedGlobals: t, indent: s, intro: i, outro: n2, dependencies: r2, exports: a2, snippets: o2 }, { externalLiveBindings: h2, freeze: l2, namespaceToStringTag: c2 }) {
  const { _: u2, n: d2 } = o2, p2 = function(e2, t2) {
    const s2 = [];
    for (const { id: i2, reexports: n3, imports: r3, name: a3 } of e2)
      if (n3 || r3) {
        if (r3) {
          let e3 = null, n4 = null;
          const a4 = [];
          for (const t3 of r3)
            t3.imported === "default" ? e3 = t3 : t3.imported === "*" ? n4 = t3 : a4.push(t3);
          n4 && s2.push(`import${t2}*${t2}as ${n4.local} from${t2}'${i2}';`), e3 && a4.length === 0 ? s2.push(`import ${e3.local} from${t2}'${i2}';`) : a4.length > 0 && s2.push(`import ${e3 ? `${e3.local},${t2}` : ""}{${t2}${a4.map((e4) => e4.imported === e4.local ? e4.imported : `${e4.imported} as ${e4.local}`).join(`,${t2}`)}${t2}}${t2}from${t2}'${i2}';`);
        }
        if (n3) {
          let e3 = null;
          const o3 = [], h3 = [];
          for (const t3 of n3)
            t3.reexported === "*" ? e3 = t3 : t3.imported === "*" ? o3.push(t3) : h3.push(t3);
          if (e3 && s2.push(`export${t2}*${t2}from${t2}'${i2}';`), o3.length > 0) {
            r3 && r3.some((e4) => e4.imported === "*" && e4.local === a3) || s2.push(`import${t2}*${t2}as ${a3} from${t2}'${i2}';`);
            for (const e4 of o3)
              s2.push(`export${t2}{${t2}${a3 === e4.reexported ? a3 : `${a3} as ${e4.reexported}`} };`);
          }
          h3.length > 0 && s2.push(`export${t2}{${t2}${h3.map((e4) => e4.imported === e4.reexported ? e4.imported : `${e4.imported} as ${e4.reexported}`).join(`,${t2}`)}${t2}}${t2}from${t2}'${i2}';`);
        }
      } else
        s2.push(`import${t2}'${i2}';`);
    return s2;
  }(r2, u2);
  p2.length > 0 && (i += p2.join(d2) + d2 + d2), (i += si(null, t, s, o2, h2, l2, c2)) && e.prepend(i);
  const f2 = function(e2, { _: t2, cnst: s2 }) {
    const i2 = [], n3 = [];
    for (const r3 of e2)
      r3.expression && i2.push(`${s2} ${r3.local}${t2}=${t2}${r3.expression};`), n3.push(r3.exported === r3.local ? r3.local : `${r3.local} as ${r3.exported}`);
    n3.length && i2.push(`export${t2}{${t2}${n3.join(`,${t2}`)}${t2}};`);
    return i2;
  }(a2, o2);
  return f2.length && e.append(d2 + d2 + f2.join(d2).trim()), n2 && e.append(n2), e.trim();
}, iife: function(e, { accessedGlobals: t, dependencies: s, exports: i, hasExports: n2, indent: r2, intro: a2, namedExportsMode: o2, outro: h2, snippets: l2, warn: c2 }, { compact: u2, esModule: d2, extend: p2, freeze: f2, externalLiveBindings: m2, globals: g2, interop: y2, name: E2, namespaceToStringTag: x2, strict: v2 }) {
  const { _: b2, cnst: A2, getNonArrowFunctionIntro: S2, getPropertyAccess: P2, n: k2 } = l2, w2 = E2 && E2.includes("."), C2 = !p2 && !w2;
  if (E2 && C2 && (ke(I2 = E2) || Se.has(I2) || Pe.test(I2)))
    return le({ code: "ILLEGAL_IDENTIFIER_AS_NAME", message: `Given name "${E2}" is not a legal JS identifier. If you need this, you can try "output.extend: true".` });
  var I2;
  vn(c2, s);
  const _2 = Sn(s), N2 = _2.map((e2) => e2.globalName || "null"), $2 = _2.map((e2) => e2.name);
  n2 && !E2 && c2({ code: "MISSING_NAME_OPTION_FOR_IIFE_EXPORT", message: 'If you do not supply "output.name", you may not be able to access the exports of an IIFE bundle.' }), o2 && n2 && (p2 ? (N2.unshift(`this${bn(E2, P2)}${b2}=${b2}this${bn(E2, P2)}${b2}||${b2}{}`), $2.unshift("exports")) : (N2.unshift("{}"), $2.unshift("exports")));
  const T2 = v2 ? `${r2}'use strict';${k2}` : "", R2 = yn(s, y2, m2, f2, x2, t, r2, l2);
  e.prepend(`${a2}${R2}`);
  let M2 = `(${S2($2, { isAsync: false, name: null })}{${k2}${T2}${k2}`;
  n2 && (!E2 || p2 && o2 || (M2 = (C2 ? `${A2} ${E2}` : `this${bn(E2, P2)}`) + `${b2}=${b2}${M2}`), w2 && (M2 = function(e2, t2, s2, { _: i2, getPropertyAccess: n3, s: r3 }, a3) {
    const o3 = e2.split(".");
    o3[0] = (typeof s2 == "function" ? s2(o3[0]) : s2[o3[0]]) || o3[0], o3.pop();
    let h3 = t2;
    return o3.map((e3) => (h3 += n3(e3), `${h3}${i2}=${i2}${h3}${i2}||${i2}{}${r3}`)).join(a3 ? "," : "\n") + (a3 && o3.length ? ";" : "\n");
  }(E2, "this", g2, l2, u2) + M2));
  let D2 = `${k2}${k2}})(${N2.join(`,${b2}`)});`;
  n2 && !p2 && o2 && (D2 = `${k2}${k2}${r2}return exports;${D2}`);
  const L2 = dn(i, s, o2, y2, l2, r2, m2);
  let O2 = mn(o2 && n2, d2, x2, l2);
  return O2 && (O2 = k2 + k2 + O2), e.append(`${L2}${O2}${h2}`), e.indent(r2).prepend(M2).append(D2);
}, system: function(e, { accessedGlobals: t, dependencies: s, exports: i, hasExports: n2, indent: r2, intro: a2, snippets: o2, outro: h2, usesTopLevelAwait: l2 }, { externalLiveBindings: c2, freeze: u2, name: d2, namespaceToStringTag: p2, strict: f2, systemNullSetters: m2 }) {
  const { _: g2, getFunctionIntro: y2, getNonArrowFunctionIntro: E2, n: x2, s: v2 } = o2, { importBindings: b2, setters: A2, starExcludes: S2 } = function(e2, t2, s2, { _: i2, cnst: n3, getObject: r3, getPropertyAccess: a3, n: o3 }) {
    const h3 = [], l3 = [];
    let c3 = null;
    for (const { imports: u3, reexports: d3 } of e2) {
      const p3 = [];
      if (u3)
        for (const e3 of u3)
          h3.push(e3.local), e3.imported === "*" ? p3.push(`${e3.local}${i2}=${i2}module;`) : p3.push(`${e3.local}${i2}=${i2}module${a3(e3.imported)};`);
      if (d3) {
        const o4 = [];
        let h4 = false;
        for (const { imported: e3, reexported: t3 } of d3)
          t3 === "*" ? h4 = true : o4.push([t3, e3 === "*" ? "module" : `module${a3(e3)}`]);
        if (o4.length > 1 || h4) {
          const a4 = r3(o4, { lineBreakIndent: null });
          h4 ? (c3 || (c3 = Pn({ dependencies: e2, exports: t2 })), p3.push(`${n3} setter${i2}=${i2}${a4};`, `for${i2}(${n3} name in module)${i2}{`, `${s2}if${i2}(!_starExcludes[name])${i2}setter[name]${i2}=${i2}module[name];`, "}", "exports(setter);")) : p3.push(`exports(${a4});`);
        } else {
          const [e3, t3] = o4[0];
          p3.push(`exports('${e3}',${i2}${t3});`);
        }
      }
      l3.push(p3.join(`${o3}${s2}${s2}${s2}`));
    }
    return { importBindings: h3, setters: l3, starExcludes: c3 };
  }(s, i, r2, o2), P2 = d2 ? `'${d2}',${g2}` : "", k2 = t.has("module") ? ["exports", "module"] : n2 ? ["exports"] : [];
  let w2 = `System.register(${P2}[` + s.map(({ id: e2 }) => `'${e2}'`).join(`,${g2}`) + `],${g2}(${E2(k2, { isAsync: false, name: null })}{${x2}${r2}${f2 ? "'use strict';" : ""}` + kn(S2, r2, o2) + wn(b2, r2, o2) + `${x2}${r2}return${g2}{${A2.length ? `${x2}${r2}${r2}setters:${g2}[${A2.map((e2) => e2 ? `${y2(["module"], { isAsync: false, name: null })}{${x2}${r2}${r2}${r2}${e2}${x2}${r2}${r2}}` : m2 ? "null" : `${y2([], { isAsync: false, name: null })}{}`).join(`,${g2}`)}],` : ""}${x2}`;
  w2 += `${r2}${r2}execute:${g2}(${E2([], { isAsync: l2, name: null })}{${x2}${x2}`;
  const C2 = `${r2}${r2}})${x2}${r2}}${v2}${x2}}));`;
  return e.prepend(a2 + si(null, t, r2, o2, c2, u2, p2) + Cn(i, r2, o2)), e.append(`${h2}${x2}${x2}` + _n(i, r2, o2) + Nn(i, r2, o2)), e.indent(`${r2}${r2}${r2}`).append(C2).prepend(w2);
}, umd: function(e, { accessedGlobals: t, dependencies: s, exports: i, hasExports: n2, id: r2, indent: a2, intro: o2, namedExportsMode: h2, outro: l2, snippets: c2, warn: u2 }, { amd: d2, compact: p2, esModule: f2, extend: m2, externalLiveBindings: g2, freeze: y2, interop: E2, name: x2, namespaceToStringTag: v2, globals: b2, noConflict: A2, strict: S2 }) {
  const { _: P2, cnst: k2, getFunctionIntro: w2, getNonArrowFunctionIntro: C2, getPropertyAccess: I2, n: _2, s: N2 } = c2, $2 = p2 ? "f" : "factory", T2 = p2 ? "g" : "global";
  if (n2 && !x2)
    return le({ code: "MISSING_NAME_OPTION_FOR_IIFE_EXPORT", message: 'You must supply "output.name" for UMD bundles that have exports so that the exports are accessible in environments without a module loader.' });
  vn(u2, s);
  const R2 = s.map((e2) => `'${En(e2.id)}'`), M2 = s.map((e2) => `require('${e2.id}')`), D2 = Sn(s), L2 = D2.map((e2) => $n(e2.globalName, T2, I2)), O2 = D2.map((e2) => e2.name);
  h2 && (n2 || A2) && (R2.unshift("'exports'"), M2.unshift("exports"), L2.unshift(An(x2, T2, b2, (m2 ? `${$n(x2, T2, I2)}${P2}||${P2}` : "") + "{}", c2)), O2.unshift("exports"));
  const V2 = un(d2, r2), B2 = (V2 ? `'${V2}',${P2}` : "") + (R2.length ? `[${R2.join(`,${P2}`)}],${P2}` : ""), F2 = d2.define, z2 = !h2 && n2 ? `module.exports${P2}=${P2}` : "", W2 = S2 ? `${P2}'use strict';${_2}` : "";
  let j2;
  if (A2) {
    const e2 = p2 ? "e" : "exports";
    let t2;
    if (!h2 && n2)
      t2 = `${k2} ${e2}${P2}=${P2}${An(x2, T2, b2, `${$2}(${L2.join(`,${P2}`)})`, c2)};`;
    else {
      t2 = `${k2} ${e2}${P2}=${P2}${L2.shift()};${_2}${a2}${a2}${$2}(${[e2].concat(L2).join(`,${P2}`)});`;
    }
    j2 = `(${w2([], { isAsync: false, name: null })}{${_2}${a2}${a2}${k2} current${P2}=${P2}${function(e3, t3, { _: s2, getPropertyAccess: i2 }) {
      let n3 = t3;
      return e3.split(".").map((e4) => n3 += i2(e4)).join(`${s2}&&${s2}`);
    }(x2, T2, c2)};${_2}${a2}${a2}${t2}${_2}${a2}${a2}${e2}.noConflict${P2}=${P2}${w2([], { isAsync: false, name: null })}{${P2}${$n(x2, T2, I2)}${P2}=${P2}current;${P2}return ${e2}${N2}${P2}};${_2}${a2}})()`;
  } else
    j2 = `${$2}(${L2.join(`,${P2}`)})`, !h2 && n2 && (j2 = An(x2, T2, b2, j2, c2));
  const U2 = n2 || A2 && h2 || L2.length > 0, G2 = [$2];
  U2 && G2.unshift(T2);
  const H2 = U2 ? `this,${P2}` : "", q2 = U2 ? `(${T2}${P2}=${P2}typeof globalThis${P2}!==${P2}'undefined'${P2}?${P2}globalThis${P2}:${P2}${T2}${P2}||${P2}self,${P2}` : "", K2 = U2 ? ")" : "", X2 = U2 ? `${a2}typeof exports${P2}===${P2}'object'${P2}&&${P2}typeof module${P2}!==${P2}'undefined'${P2}?${P2}${z2}${$2}(${M2.join(`,${P2}`)})${P2}:${_2}` : "", Y2 = `(${C2(G2, { isAsync: false, name: null })}{${_2}` + X2 + `${a2}typeof ${F2}${P2}===${P2}'function'${P2}&&${P2}${F2}.amd${P2}?${P2}${F2}(${B2}${$2})${P2}:${_2}${a2}${q2}${j2}${K2};${_2}})(${H2}(${C2(O2, { isAsync: false, name: null })}{${W2}${_2}`, Q2 = _2 + _2 + "}));";
  e.prepend(`${o2}${yn(s, E2, g2, y2, v2, t, a2, c2)}`);
  const Z2 = dn(i, s, h2, E2, c2, a2, g2);
  let J2 = mn(h2 && n2, f2, v2, c2);
  return J2 && (J2 = _2 + _2 + J2), e.append(`${Z2}${J2}${l2}`), e.trim().indent(a2).append(Q2).prepend(Y2);
} };
class Rn {
  constructor(e, t) {
    this.isOriginal = true, this.filename = e, this.content = t;
  }
  traceSegment(e, t, s) {
    return { column: t, line: e, name: s, source: this };
  }
}
class Mn {
  constructor(e, t) {
    this.sources = t, this.names = e.names, this.mappings = e.mappings;
  }
  traceMappings() {
    const e = [], t = /* @__PURE__ */ new Map(), s = [], i = [], n2 = /* @__PURE__ */ new Map(), r2 = [];
    for (const a2 of this.mappings) {
      const o2 = [];
      for (const r3 of a2) {
        if (r3.length === 1)
          continue;
        const a3 = this.sources[r3[1]];
        if (!a3)
          continue;
        const h2 = a3.traceSegment(r3[2], r3[3], r3.length === 5 ? this.names[r3[4]] : "");
        if (h2) {
          const { column: a4, line: l2, name: c2, source: { content: u2, filename: d2 } } = h2;
          let p2 = t.get(d2);
          if (p2 === void 0)
            p2 = e.length, e.push(d2), t.set(d2, p2), s[p2] = u2;
          else if (s[p2] == null)
            s[p2] = u2;
          else if (u2 != null && s[p2] !== u2)
            return le({ message: `Multiple conflicting contents for sourcemap source ${d2}` });
          const f2 = [r3[0], p2, l2, a4];
          if (c2) {
            let e2 = n2.get(c2);
            e2 === void 0 && (e2 = i.length, i.push(c2), n2.set(c2, e2)), f2[4] = e2;
          }
          o2.push(f2);
        }
      }
      r2.push(o2);
    }
    return { mappings: r2, names: i, sources: e, sourcesContent: s };
  }
  traceSegment(e, t, s) {
    const i = this.mappings[e];
    if (!i)
      return null;
    let n2 = 0, r2 = i.length - 1;
    for (; n2 <= r2; ) {
      const e2 = n2 + r2 >> 1, a2 = i[e2];
      if (a2[0] === t || n2 === r2) {
        if (a2.length == 1)
          return null;
        const e3 = this.sources[a2[1]];
        return e3 ? e3.traceSegment(a2[2], a2[3], a2.length === 5 ? this.names[a2[4]] : s) : null;
      }
      a2[0] > t ? r2 = e2 - 1 : n2 = e2 + 1;
    }
    return null;
  }
}
function Dn(e) {
  return function(t, s) {
    return s.mappings ? new Mn(s, [t]) : (e({ code: "SOURCEMAP_BROKEN", message: `Sourcemap is likely to be incorrect: a plugin (${s.plugin}) was used to transform files, but didn't generate a sourcemap for the transformation. Consult the plugin documentation for help`, plugin: s.plugin, url: "https://rollupjs.org/guide/en/#warning-sourcemap-is-likely-to-be-incorrect" }), new Mn({ mappings: [], names: [] }, [t]));
  };
}
function Ln(e, t, s, i, n2) {
  let r2;
  if (s) {
    const t2 = s.sources, i2 = s.sourcesContent || [], n3 = N(e) || ".", a2 = s.sourceRoot || ".", o2 = t2.map((e2, t3) => new Rn(R(n3, a2, e2), i2[t3]));
    r2 = new Mn(s, o2);
  } else
    r2 = new Rn(e, t);
  return i.reduce(n2, r2);
}
var On = {}, Vn = Bn;
function Bn(e, t) {
  if (!e)
    throw new Error(t || "Assertion failed");
}
Bn.equal = function(e, t, s) {
  if (e != t)
    throw new Error(s || "Assertion failed: " + e + " != " + t);
};
var Fn = { exports: {} };
typeof Object.create == "function" ? Fn.exports = function(e, t) {
  t && (e.super_ = t, e.prototype = Object.create(t.prototype, { constructor: { value: e, enumerable: false, writable: true, configurable: true } }));
} : Fn.exports = function(e, t) {
  if (t) {
    e.super_ = t;
    var s = function() {
    };
    s.prototype = t.prototype, e.prototype = new s(), e.prototype.constructor = e;
  }
};
var zn = Vn, Wn = Fn.exports;
function jn(e, t) {
  return (64512 & e.charCodeAt(t)) == 55296 && (!(t < 0 || t + 1 >= e.length) && (64512 & e.charCodeAt(t + 1)) == 56320);
}
function Un(e) {
  return (e >>> 24 | e >>> 8 & 65280 | e << 8 & 16711680 | (255 & e) << 24) >>> 0;
}
function Gn(e) {
  return e.length === 1 ? "0" + e : e;
}
function Hn(e) {
  return e.length === 7 ? "0" + e : e.length === 6 ? "00" + e : e.length === 5 ? "000" + e : e.length === 4 ? "0000" + e : e.length === 3 ? "00000" + e : e.length === 2 ? "000000" + e : e.length === 1 ? "0000000" + e : e;
}
On.inherits = Wn, On.toArray = function(e, t) {
  if (Array.isArray(e))
    return e.slice();
  if (!e)
    return [];
  var s = [];
  if (typeof e == "string")
    if (t) {
      if (t === "hex")
        for ((e = e.replace(/[^a-z0-9]+/gi, "")).length % 2 != 0 && (e = "0" + e), n2 = 0; n2 < e.length; n2 += 2)
          s.push(parseInt(e[n2] + e[n2 + 1], 16));
    } else
      for (var i = 0, n2 = 0; n2 < e.length; n2++) {
        var r2 = e.charCodeAt(n2);
        r2 < 128 ? s[i++] = r2 : r2 < 2048 ? (s[i++] = r2 >> 6 | 192, s[i++] = 63 & r2 | 128) : jn(e, n2) ? (r2 = 65536 + ((1023 & r2) << 10) + (1023 & e.charCodeAt(++n2)), s[i++] = r2 >> 18 | 240, s[i++] = r2 >> 12 & 63 | 128, s[i++] = r2 >> 6 & 63 | 128, s[i++] = 63 & r2 | 128) : (s[i++] = r2 >> 12 | 224, s[i++] = r2 >> 6 & 63 | 128, s[i++] = 63 & r2 | 128);
      }
  else
    for (n2 = 0; n2 < e.length; n2++)
      s[n2] = 0 | e[n2];
  return s;
}, On.toHex = function(e) {
  for (var t = "", s = 0; s < e.length; s++)
    t += Gn(e[s].toString(16));
  return t;
}, On.htonl = Un, On.toHex32 = function(e, t) {
  for (var s = "", i = 0; i < e.length; i++) {
    var n2 = e[i];
    t === "little" && (n2 = Un(n2)), s += Hn(n2.toString(16));
  }
  return s;
}, On.zero2 = Gn, On.zero8 = Hn, On.join32 = function(e, t, s, i) {
  var n2 = s - t;
  zn(n2 % 4 == 0);
  for (var r2 = new Array(n2 / 4), a2 = 0, o2 = t; a2 < r2.length; a2++, o2 += 4) {
    var h2;
    h2 = i === "big" ? e[o2] << 24 | e[o2 + 1] << 16 | e[o2 + 2] << 8 | e[o2 + 3] : e[o2 + 3] << 24 | e[o2 + 2] << 16 | e[o2 + 1] << 8 | e[o2], r2[a2] = h2 >>> 0;
  }
  return r2;
}, On.split32 = function(e, t) {
  for (var s = new Array(4 * e.length), i = 0, n2 = 0; i < e.length; i++, n2 += 4) {
    var r2 = e[i];
    t === "big" ? (s[n2] = r2 >>> 24, s[n2 + 1] = r2 >>> 16 & 255, s[n2 + 2] = r2 >>> 8 & 255, s[n2 + 3] = 255 & r2) : (s[n2 + 3] = r2 >>> 24, s[n2 + 2] = r2 >>> 16 & 255, s[n2 + 1] = r2 >>> 8 & 255, s[n2] = 255 & r2);
  }
  return s;
}, On.rotr32 = function(e, t) {
  return e >>> t | e << 32 - t;
}, On.rotl32 = function(e, t) {
  return e << t | e >>> 32 - t;
}, On.sum32 = function(e, t) {
  return e + t >>> 0;
}, On.sum32_3 = function(e, t, s) {
  return e + t + s >>> 0;
}, On.sum32_4 = function(e, t, s, i) {
  return e + t + s + i >>> 0;
}, On.sum32_5 = function(e, t, s, i, n2) {
  return e + t + s + i + n2 >>> 0;
}, On.sum64 = function(e, t, s, i) {
  var n2 = e[t], r2 = i + e[t + 1] >>> 0, a2 = (r2 < i ? 1 : 0) + s + n2;
  e[t] = a2 >>> 0, e[t + 1] = r2;
}, On.sum64_hi = function(e, t, s, i) {
  return (t + i >>> 0 < t ? 1 : 0) + e + s >>> 0;
}, On.sum64_lo = function(e, t, s, i) {
  return t + i >>> 0;
}, On.sum64_4_hi = function(e, t, s, i, n2, r2, a2, o2) {
  var h2 = 0, l2 = t;
  return h2 += (l2 = l2 + i >>> 0) < t ? 1 : 0, h2 += (l2 = l2 + r2 >>> 0) < r2 ? 1 : 0, e + s + n2 + a2 + (h2 += (l2 = l2 + o2 >>> 0) < o2 ? 1 : 0) >>> 0;
}, On.sum64_4_lo = function(e, t, s, i, n2, r2, a2, o2) {
  return t + i + r2 + o2 >>> 0;
}, On.sum64_5_hi = function(e, t, s, i, n2, r2, a2, o2, h2, l2) {
  var c2 = 0, u2 = t;
  return c2 += (u2 = u2 + i >>> 0) < t ? 1 : 0, c2 += (u2 = u2 + r2 >>> 0) < r2 ? 1 : 0, c2 += (u2 = u2 + o2 >>> 0) < o2 ? 1 : 0, e + s + n2 + a2 + h2 + (c2 += (u2 = u2 + l2 >>> 0) < l2 ? 1 : 0) >>> 0;
}, On.sum64_5_lo = function(e, t, s, i, n2, r2, a2, o2, h2, l2) {
  return t + i + r2 + o2 + l2 >>> 0;
}, On.rotr64_hi = function(e, t, s) {
  return (t << 32 - s | e >>> s) >>> 0;
}, On.rotr64_lo = function(e, t, s) {
  return (e << 32 - s | t >>> s) >>> 0;
}, On.shr64_hi = function(e, t, s) {
  return e >>> s;
}, On.shr64_lo = function(e, t, s) {
  return (e << 32 - s | t >>> s) >>> 0;
};
var qn = {}, Kn = On, Xn = Vn;
function Yn() {
  this.pending = null, this.pendingTotal = 0, this.blockSize = this.constructor.blockSize, this.outSize = this.constructor.outSize, this.hmacStrength = this.constructor.hmacStrength, this.padLength = this.constructor.padLength / 8, this.endian = "big", this._delta8 = this.blockSize / 8, this._delta32 = this.blockSize / 32;
}
qn.BlockHash = Yn, Yn.prototype.update = function(e, t) {
  if (e = Kn.toArray(e, t), this.pending ? this.pending = this.pending.concat(e) : this.pending = e, this.pendingTotal += e.length, this.pending.length >= this._delta8) {
    var s = (e = this.pending).length % this._delta8;
    this.pending = e.slice(e.length - s, e.length), this.pending.length === 0 && (this.pending = null), e = Kn.join32(e, 0, e.length - s, this.endian);
    for (var i = 0; i < e.length; i += this._delta32)
      this._update(e, i, i + this._delta32);
  }
  return this;
}, Yn.prototype.digest = function(e) {
  return this.update(this._pad()), Xn(this.pending === null), this._digest(e);
}, Yn.prototype._pad = function() {
  var e = this.pendingTotal, t = this._delta8, s = t - (e + this.padLength) % t, i = new Array(s + this.padLength);
  i[0] = 128;
  for (var n2 = 1; n2 < s; n2++)
    i[n2] = 0;
  if (e <<= 3, this.endian === "big") {
    for (var r2 = 8; r2 < this.padLength; r2++)
      i[n2++] = 0;
    i[n2++] = 0, i[n2++] = 0, i[n2++] = 0, i[n2++] = 0, i[n2++] = e >>> 24 & 255, i[n2++] = e >>> 16 & 255, i[n2++] = e >>> 8 & 255, i[n2++] = 255 & e;
  } else
    for (i[n2++] = 255 & e, i[n2++] = e >>> 8 & 255, i[n2++] = e >>> 16 & 255, i[n2++] = e >>> 24 & 255, i[n2++] = 0, i[n2++] = 0, i[n2++] = 0, i[n2++] = 0, r2 = 8; r2 < this.padLength; r2++)
      i[n2++] = 0;
  return i;
};
var Qn = {}, Zn = On.rotr32;
function Jn(e, t, s) {
  return e & t ^ ~e & s;
}
function er(e, t, s) {
  return e & t ^ e & s ^ t & s;
}
function tr(e, t, s) {
  return e ^ t ^ s;
}
Qn.ft_1 = function(e, t, s, i) {
  return e === 0 ? Jn(t, s, i) : e === 1 || e === 3 ? tr(t, s, i) : e === 2 ? er(t, s, i) : void 0;
}, Qn.ch32 = Jn, Qn.maj32 = er, Qn.p32 = tr, Qn.s0_256 = function(e) {
  return Zn(e, 2) ^ Zn(e, 13) ^ Zn(e, 22);
}, Qn.s1_256 = function(e) {
  return Zn(e, 6) ^ Zn(e, 11) ^ Zn(e, 25);
}, Qn.g0_256 = function(e) {
  return Zn(e, 7) ^ Zn(e, 18) ^ e >>> 3;
}, Qn.g1_256 = function(e) {
  return Zn(e, 17) ^ Zn(e, 19) ^ e >>> 10;
};
var sr = On, ir = qn, nr = Qn, rr = Vn, ar = sr.sum32, or = sr.sum32_4, hr = sr.sum32_5, lr = nr.ch32, cr = nr.maj32, ur = nr.s0_256, dr = nr.s1_256, pr = nr.g0_256, fr = nr.g1_256, mr = ir.BlockHash, gr = [1116352408, 1899447441, 3049323471, 3921009573, 961987163, 1508970993, 2453635748, 2870763221, 3624381080, 310598401, 607225278, 1426881987, 1925078388, 2162078206, 2614888103, 3248222580, 3835390401, 4022224774, 264347078, 604807628, 770255983, 1249150122, 1555081692, 1996064986, 2554220882, 2821834349, 2952996808, 3210313671, 3336571891, 3584528711, 113926993, 338241895, 666307205, 773529912, 1294757372, 1396182291, 1695183700, 1986661051, 2177026350, 2456956037, 2730485921, 2820302411, 3259730800, 3345764771, 3516065817, 3600352804, 4094571909, 275423344, 430227734, 506948616, 659060556, 883997877, 958139571, 1322822218, 1537002063, 1747873779, 1955562222, 2024104815, 2227730452, 2361852424, 2428436474, 2756734187, 3204031479, 3329325298];
function yr() {
  if (!(this instanceof yr))
    return new yr();
  mr.call(this), this.h = [1779033703, 3144134277, 1013904242, 2773480762, 1359893119, 2600822924, 528734635, 1541459225], this.k = gr, this.W = new Array(64);
}
sr.inherits(yr, mr);
var Er = yr;
yr.blockSize = 512, yr.outSize = 256, yr.hmacStrength = 192, yr.padLength = 64, yr.prototype._update = function(e, t) {
  for (var s = this.W, i = 0; i < 16; i++)
    s[i] = e[t + i];
  for (; i < s.length; i++)
    s[i] = or(fr(s[i - 2]), s[i - 7], pr(s[i - 15]), s[i - 16]);
  var n2 = this.h[0], r2 = this.h[1], a2 = this.h[2], o2 = this.h[3], h2 = this.h[4], l2 = this.h[5], c2 = this.h[6], u2 = this.h[7];
  for (rr(this.k.length === s.length), i = 0; i < s.length; i++) {
    var d2 = hr(u2, dr(h2), lr(h2, l2, c2), this.k[i], s[i]), p2 = ar(ur(n2), cr(n2, r2, a2));
    u2 = c2, c2 = l2, l2 = h2, h2 = ar(o2, d2), o2 = a2, a2 = r2, r2 = n2, n2 = ar(d2, p2);
  }
  this.h[0] = ar(this.h[0], n2), this.h[1] = ar(this.h[1], r2), this.h[2] = ar(this.h[2], a2), this.h[3] = ar(this.h[3], o2), this.h[4] = ar(this.h[4], h2), this.h[5] = ar(this.h[5], l2), this.h[6] = ar(this.h[6], c2), this.h[7] = ar(this.h[7], u2);
}, yr.prototype._digest = function(e) {
  return e === "hex" ? sr.toHex32(this.h, "big") : sr.split32(this.h, "big");
};
var xr = Er;
const vr = () => xr(), br = { amd: Pr, cjs: Pr, es: Sr, iife: Pr, system: Sr, umd: Pr };
function Ar(e, t, s, i, n2, r2, a2, o2, h2, l2, c2, u2, d2) {
  const p2 = e.slice().reverse();
  for (const e2 of p2)
    e2.scope.addUsedOutsideNames(i, n2, c2, u2);
  !function(e2, t2, s2) {
    for (const i2 of t2) {
      for (const t3 of i2.scope.variables.values())
        t3.included && !(t3.renderBaseName || t3 instanceof Mi && t3.getOriginalVariable() !== t3) && t3.setRenderNames(null, Dt(t3.name, e2));
      if (s2.has(i2)) {
        const t3 = i2.namespace;
        t3.setRenderNames(null, Dt(t3.name, e2));
      }
    }
  }(i, p2, d2), br[n2](i, s, t, r2, a2, o2, h2, l2);
  for (const e2 of p2)
    e2.scope.deconflict(n2, c2, u2);
}
function Sr(e, t, s, i, n2, r2, a2, o2) {
  for (const t2 of s.dependencies)
    (n2 || t2 instanceof Ce) && (t2.variableName = Dt(t2.suggestedVariableName, e));
  for (const s2 of t) {
    const t2 = s2.module, i2 = s2.name;
    s2.isNamespace && (n2 || t2 instanceof Ce) ? s2.setRenderNames(null, (t2 instanceof Ce ? t2 : a2.get(t2)).variableName) : t2 instanceof Ce && i2 === "default" ? s2.setRenderNames(null, Dt([...t2.exportedVariables].some(([e2, t3]) => t3 === "*" && e2.included) ? t2.suggestedVariableName + "__default" : t2.suggestedVariableName, e)) : s2.setRenderNames(null, Dt(i2, e));
  }
  for (const t2 of o2)
    t2.setRenderNames(null, Dt(t2.name, e));
}
function Pr(e, t, { deconflictedDefault: s, deconflictedNamespace: i, dependencies: n2 }, r2, a2, o2, h2) {
  for (const t2 of n2)
    t2.variableName = Dt(t2.suggestedVariableName, e);
  for (const t2 of i)
    t2.namespaceVariableName = Dt(`${t2.suggestedVariableName}__namespace`, e);
  for (const t2 of s)
    i.has(t2) && ti(String(r2(t2.id)), o2) ? t2.defaultVariableName = t2.namespaceVariableName : t2.defaultVariableName = Dt(`${t2.suggestedVariableName}__default`, e);
  for (const e2 of t) {
    const t2 = e2.module;
    if (t2 instanceof Ce) {
      const s2 = e2.name;
      if (s2 === "default") {
        const s3 = String(r2(t2.id)), i2 = Zs[s3] ? t2.defaultVariableName : t2.variableName;
        Js(s3, o2) ? e2.setRenderNames(i2, "default") : e2.setRenderNames(null, i2);
      } else
        s2 === "*" ? e2.setRenderNames(null, ei[String(r2(t2.id))] ? t2.namespaceVariableName : t2.variableName) : e2.setRenderNames(t2.variableName, null);
    } else {
      const s2 = h2.get(t2);
      a2 && e2.isNamespace ? e2.setRenderNames(null, s2.exportMode === "default" ? s2.namespaceVariableName : s2.variableName) : s2.exportMode === "default" ? e2.setRenderNames(null, s2.variableName) : e2.setRenderNames(s2.variableName, s2.getVariableExportName(e2));
    }
  }
}
const kr = /[\\'\r\n\u2028\u2029]/, wr = /(['\r\n\u2028\u2029])/g, Cr = /\\/g;
function Ir(e) {
  return e.match(kr) ? e.replace(Cr, "\\\\").replace(wr, "\\$1") : e;
}
function _r(e, { exports: t, name: s, format: i }, n2, r2, a2) {
  const o2 = e.getExportNames();
  if (t === "default") {
    if (o2.length !== 1 || o2[0] !== "default")
      return le(pe("default", o2, r2));
  } else if (t === "none" && o2.length)
    return le(pe("none", o2, r2));
  return t === "auto" && (o2.length === 0 ? t = "none" : o2.length === 1 && o2[0] === "default" ? (i === "cjs" && n2.has("exports") && a2(function(e2) {
    const t2 = re(e2);
    return { code: ue.PREFER_NAMED_EXPORTS, id: e2, message: `Entry module "${t2}" is implicitly using "default" export mode, which means for CommonJS output that its default export is assigned to "module.exports". For many tools, such CommonJS output will not be interchangeable with the original ES module. If this is intended, explicitly set "output.exports" to either "auto" or "default", otherwise you might want to consider changing the signature of "${t2}" to use named exports only.`, url: "https://rollupjs.org/guide/en/#outputexports" };
  }(r2)), t = "default") : (i !== "es" && i !== "system" && o2.includes("default") && a2(function(e2, t2) {
    return { code: ue.MIXED_EXPORTS, id: e2, message: `Entry module "${re(e2)}" is using named and default exports together. Consumers of your bundle will have to use \`${t2 || "chunk"}["default"]\` to access the default export, which may not be what you want. Use \`output.exports: "named"\` to disable this warning`, url: "https://rollupjs.org/guide/en/#outputexports" };
  }(r2, s)), t = "named")), t;
}
function Nr(e) {
  const t = e.split("\n"), s = t.filter((e2) => /^\t+/.test(e2)), i = t.filter((e2) => /^ {2,}/.test(e2));
  if (s.length === 0 && i.length === 0)
    return null;
  if (s.length >= i.length)
    return "	";
  const n2 = i.reduce((e2, t2) => {
    const s2 = /^ +/.exec(t2)[0].length;
    return Math.min(s2, e2);
  }, 1 / 0);
  return new Array(n2 + 1).join(" ");
}
function $r(e, t, s, i, n2) {
  const r2 = e.getDependenciesToBeIncluded();
  for (const e2 of r2) {
    if (e2 instanceof Ce) {
      t.push(e2);
      continue;
    }
    const r3 = n2.get(e2);
    r3 === i ? s.has(e2) || (s.add(e2), $r(e2, t, s, i, n2)) : t.push(r3);
  }
}
function Tr(e) {
  if (!e)
    return null;
  if (typeof e == "string" && (e = JSON.parse(e)), e.mappings === "")
    return { mappings: [], names: [], sources: [], version: 3 };
  const s = typeof e.mappings == "string" ? function(e2) {
    for (var s2 = [], i = [], r2 = [0, 0, 0, 0, 0], a2 = 0, o2 = 0, h2 = 0, l2 = 0; o2 < e2.length; o2++) {
      var c2 = e2.charCodeAt(o2);
      if (c2 === 44)
        n(i, r2, a2), a2 = 0;
      else if (c2 === 59)
        n(i, r2, a2), a2 = 0, s2.push(i), i = [], r2[0] = 0;
      else {
        var u2 = t[c2];
        if (u2 === void 0)
          throw new Error("Invalid character (" + String.fromCharCode(c2) + ")");
        var d2 = 32 & u2;
        if (l2 += (u2 &= 31) << h2, d2)
          h2 += 5;
        else {
          var p2 = 1 & l2;
          l2 >>>= 1, p2 && (l2 = l2 === 0 ? -2147483648 : -l2), r2[a2] += l2, a2++, l2 = h2 = 0;
        }
      }
    }
    return n(i, r2, a2), s2.push(i), s2;
  }(e.mappings) : e.mappings;
  return __spreadProps(__spreadValues({}, e), { mappings: s });
}
function Rr(e, t, s) {
  return ae(e) ? le(xe(`Invalid pattern "${e}" for "${t}", patterns can be neither absolute nor relative paths.`)) : e.replace(/\[(\w+)\]/g, (e2, i) => {
    if (!s.hasOwnProperty(i))
      return le(xe(`"[${i}]" is not a valid placeholder in "${t}" pattern.`));
    const n2 = s[i]();
    return ae(n2) ? le(xe(`Invalid substitution "${n2}" for placeholder "[${i}]" in "${t}" pattern, can be neither absolute nor relative path.`)) : n2;
  });
}
function Mr(e, t) {
  const s = new Set(Object.keys(t).map((e2) => e2.toLowerCase()));
  if (!s.has(e.toLocaleLowerCase()))
    return e;
  const i = $(e);
  e = e.substring(0, e.length - i.length);
  let n2, r2 = 1;
  for (; s.has((n2 = e + ++r2 + i).toLowerCase()); )
    ;
  return n2;
}
const Dr = [".js", ".jsx", ".ts", ".tsx"];
function Lr(e, t, s, i) {
  const n2 = typeof t == "function" ? t(e.id) : t[e.id];
  return n2 || (s ? (i({ code: "MISSING_GLOBAL_NAME", guess: e.variableName, message: `No name was provided for external module '${e.id}' in output.globals \u2013 guessing '${e.variableName}'`, source: e.id }), e.variableName) : void 0);
}
class Or {
  constructor(e, t, s, i, n2, r2, a2, o2, h2, l2) {
    this.orderedModules = e, this.inputOptions = t, this.outputOptions = s, this.unsetOptions = i, this.pluginDriver = n2, this.modulesById = r2, this.chunkByModule = a2, this.facadeChunkByModule = o2, this.includedNamespaces = h2, this.manualChunkAlias = l2, this.entryModules = [], this.exportMode = "named", this.facadeModule = null, this.id = null, this.namespaceVariableName = "", this.needsExportsShim = false, this.variableName = "", this.accessedGlobalsByScope = /* @__PURE__ */ new Map(), this.dependencies = /* @__PURE__ */ new Set(), this.dynamicDependencies = /* @__PURE__ */ new Set(), this.dynamicEntryModules = [], this.dynamicName = null, this.exportNamesByVariable = /* @__PURE__ */ new Map(), this.exports = /* @__PURE__ */ new Set(), this.exportsByName = /* @__PURE__ */ new Map(), this.fileName = null, this.implicitEntryModules = [], this.implicitlyLoadedBefore = /* @__PURE__ */ new Set(), this.imports = /* @__PURE__ */ new Set(), this.includedReexportsByModule = /* @__PURE__ */ new Map(), this.indentString = void 0, this.isEmpty = true, this.name = null, this.renderedDependencies = null, this.renderedExports = null, this.renderedHash = void 0, this.renderedModuleSources = /* @__PURE__ */ new Map(), this.renderedModules = /* @__PURE__ */ Object.create(null), this.renderedSource = null, this.sortedExportNames = null, this.strictFacade = false, this.usedModules = void 0, this.execIndex = e.length > 0 ? e[0].execIndex : 1 / 0;
    const c2 = new Set(e);
    for (const t2 of e) {
      t2.namespace.included && h2.add(t2), this.isEmpty && t2.isIncluded() && (this.isEmpty = false), (t2.info.isEntry || s.preserveModules) && this.entryModules.push(t2);
      for (const e2 of t2.includedDynamicImporters)
        c2.has(e2) || (this.dynamicEntryModules.push(t2), t2.info.syntheticNamedExports && !s.preserveModules && (h2.add(t2), this.exports.add(t2.namespace)));
      t2.implicitlyLoadedAfter.size > 0 && this.implicitEntryModules.push(t2);
    }
    this.suggestedVariableName = we(this.generateVariableName());
  }
  static generateFacade(e, t, s, i, n2, r2, a2, o2, h2, l2) {
    const c2 = new Or([], e, t, s, i, n2, r2, a2, o2, null);
    c2.assignFacadeName(l2, h2), a2.has(h2) || a2.set(h2, c2);
    for (const e2 of h2.getDependenciesToBeIncluded())
      c2.dependencies.add(e2 instanceof on ? r2.get(e2) : e2);
    return !c2.dependencies.has(r2.get(h2)) && h2.info.moduleSideEffects && h2.hasEffects() && c2.dependencies.add(r2.get(h2)), c2.ensureReexportsAreAvailableForModule(h2), c2.facadeModule = h2, c2.strictFacade = true, c2;
  }
  canModuleBeFacade(e, t) {
    const s = e.getExportNamesByVariable();
    for (const t2 of this.exports)
      if (!s.has(t2))
        return s.size === 0 && e.isUserDefinedEntryPoint && e.preserveSignature === "strict" && this.unsetOptions.has("preserveEntrySignatures") && this.inputOptions.onwarn({ code: "EMPTY_FACADE", id: e.id, message: `To preserve the export signature of the entry module "${re(e.id)}", an empty facade chunk was created. This often happens when creating a bundle for a web app where chunks are placed in script tags and exports are ignored. In this case it is recommended to set "preserveEntrySignatures: false" to avoid this and reduce the number of chunks. Otherwise if this is intentional, set "preserveEntrySignatures: 'strict'" explicitly to silence this warning.`, url: "https://rollupjs.org/guide/en/#preserveentrysignatures" }), false;
    for (const i of t)
      if (!s.has(i) && i.module !== e)
        return false;
    return true;
  }
  generateExports() {
    this.sortedExportNames = null;
    const e = new Set(this.exports);
    if (this.facadeModule !== null && (this.facadeModule.preserveSignature !== false || this.strictFacade)) {
      const t = this.facadeModule.getExportNamesByVariable();
      for (const [s, i] of t) {
        this.exportNamesByVariable.set(s, [...i]);
        for (const e2 of i)
          this.exportsByName.set(e2, s);
        e.delete(s);
      }
    }
    this.outputOptions.minifyInternalExports ? function(e2, t, s) {
      let i = 0;
      for (const n2 of e2) {
        let [e3] = n2.name;
        if (t.has(e3))
          do {
            e3 = Mt(++i), e3.charCodeAt(0) === 49 && (i += 9 * 64 ** (e3.length - 1), e3 = Mt(i));
          } while (Se.has(e3) || t.has(e3));
        t.set(e3, n2), s.set(n2, [e3]);
      }
    }(e, this.exportsByName, this.exportNamesByVariable) : function(e2, t, s) {
      for (const i of e2) {
        let e3 = 0, n2 = i.name;
        for (; t.has(n2); )
          n2 = i.name + "$" + ++e3;
        t.set(n2, i), s.set(i, [n2]);
      }
    }(e, this.exportsByName, this.exportNamesByVariable), (this.outputOptions.preserveModules || this.facadeModule && this.facadeModule.info.isEntry) && (this.exportMode = _r(this, this.outputOptions, this.unsetOptions, this.facadeModule.id, this.inputOptions.onwarn));
  }
  generateFacades() {
    var e;
    const t = [], s = /* @__PURE__ */ new Set([...this.entryModules, ...this.implicitEntryModules]), i = new Set(this.dynamicEntryModules.map(({ namespace: e2 }) => e2));
    for (const e2 of s)
      if (e2.preserveSignature)
        for (const t2 of e2.getExportNamesByVariable().keys())
          i.add(t2);
    for (const e2 of s) {
      const s2 = Array.from(new Set(e2.chunkNames.filter(({ isUserDefined: e3 }) => e3).map(({ name: e3 }) => e3)), (e3) => ({ name: e3 }));
      if (s2.length === 0 && e2.isUserDefinedEntryPoint && s2.push({}), s2.push(...Array.from(e2.chunkFileNames, (e3) => ({ fileName: e3 }))), s2.length === 0 && s2.push({}), !this.facadeModule) {
        const t2 = e2.preserveSignature === "strict" || e2.preserveSignature === "exports-only" && e2.getExportNamesByVariable().size !== 0;
        (!t2 || this.outputOptions.preserveModules || this.canModuleBeFacade(e2, i)) && (this.facadeModule = e2, this.facadeChunkByModule.set(e2, this), e2.preserveSignature && (this.strictFacade = t2), this.assignFacadeName(s2.shift(), e2));
      }
      for (const i2 of s2)
        t.push(Or.generateFacade(this.inputOptions, this.outputOptions, this.unsetOptions, this.pluginDriver, this.modulesById, this.chunkByModule, this.facadeChunkByModule, this.includedNamespaces, e2, i2));
    }
    for (const t2 of this.dynamicEntryModules)
      t2.info.syntheticNamedExports || (!this.facadeModule && this.canModuleBeFacade(t2, i) ? (this.facadeModule = t2, this.facadeChunkByModule.set(t2, this), this.strictFacade = true, this.dynamicName = Vr(t2)) : this.facadeModule === t2 && !this.strictFacade && this.canModuleBeFacade(t2, i) ? this.strictFacade = true : ((e = this.facadeChunkByModule.get(t2)) === null || e === void 0 ? void 0 : e.strictFacade) || (this.includedNamespaces.add(t2), this.exports.add(t2.namespace)));
    return this.outputOptions.preserveModules || this.addNecessaryImportsForFacades(), t;
  }
  generateId(e, t, s, i) {
    if (this.fileName !== null)
      return this.fileName;
    const [n2, r2] = this.facadeModule && this.facadeModule.isUserDefinedEntryPoint ? [t.entryFileNames, "output.entryFileNames"] : [t.chunkFileNames, "output.chunkFileNames"];
    return Mr(Rr(typeof n2 == "function" ? n2(this.getChunkInfo()) : n2, r2, { format: () => t.format, hash: () => i ? this.computeContentHashWithDependencies(e, t, s) : "[hash]", name: () => this.getChunkName() }), s);
  }
  generateIdPreserveModules(e, t, s, i) {
    const [{ id: n2 }] = this.orderedModules, r2 = this.outputOptions.sanitizeFileName(n2.split(Br, 1)[0]);
    let a2;
    const o2 = i.has("entryFileNames") ? "[name][assetExtname].js" : t.entryFileNames, h2 = typeof o2 == "function" ? o2(this.getChunkInfo()) : o2;
    if (w$2(r2)) {
      const s2 = N(r2), i2 = $(r2), n3 = `${s2}/${Rr(h2, "output.entryFileNames", { assetExtname: () => Dr.includes(i2) ? "" : i2, ext: () => i2.substring(1), extname: () => i2, format: () => t.format, name: () => this.getChunkName() })}`, { preserveModulesRoot: o3 } = t;
      a2 = o3 && n3.startsWith(o3) ? n3.slice(o3.length).replace(/^[\\/]/, "") : T(e, n3);
    } else {
      const e2 = $(r2);
      a2 = `_virtual/${Rr(h2, "output.entryFileNames", { assetExtname: () => Dr.includes(e2) ? "" : e2, ext: () => e2.substring(1), extname: () => e2, format: () => t.format, name: () => ne(r2) })}`;
    }
    return Mr(I$2(a2), s);
  }
  getChunkInfo() {
    const e = this.facadeModule, t = this.getChunkName.bind(this);
    return { exports: this.getExportNames(), facadeModuleId: e && e.id, isDynamicEntry: this.dynamicEntryModules.length > 0, isEntry: e !== null && e.info.isEntry, isImplicitEntry: this.implicitEntryModules.length > 0, modules: this.renderedModules, get name() {
      return t();
    }, type: "chunk" };
  }
  getChunkInfoWithFileNames() {
    return Object.assign(this.getChunkInfo(), { code: void 0, dynamicImports: Array.from(this.dynamicDependencies, Ui), fileName: this.id, implicitlyLoadedBefore: Array.from(this.implicitlyLoadedBefore, Ui), importedBindings: this.getImportedBindingsPerDependency(), imports: Array.from(this.dependencies, Ui), map: void 0, referencedFiles: this.getReferencedFiles() });
  }
  getChunkName() {
    var e;
    return (e = this.name) !== null && e !== void 0 ? e : this.name = this.outputOptions.sanitizeFileName(this.getFallbackChunkName());
  }
  getExportNames() {
    var e;
    return (e = this.sortedExportNames) !== null && e !== void 0 ? e : this.sortedExportNames = Array.from(this.exportsByName.keys()).sort();
  }
  getRenderedHash() {
    if (this.renderedHash)
      return this.renderedHash;
    const e = vr(), t = this.pluginDriver.hookReduceValueSync("augmentChunkHash", "", [this.getChunkInfo()], (e2, t2) => (t2 && (e2 += t2), e2));
    return e.update(t), e.update(this.renderedSource.toString()), e.update(this.getExportNames().map((e2) => {
      const t2 = this.exportsByName.get(e2);
      return `${re(t2.module.id).replace(/\\/g, "/")}:${t2.name}:${e2}`;
    }).join(",")), this.renderedHash = e.digest("hex");
  }
  getVariableExportName(e) {
    return this.outputOptions.preserveModules && e instanceof zi ? "*" : this.exportNamesByVariable.get(e)[0];
  }
  link() {
    this.dependencies = function(e, t, s) {
      const i = [], n2 = /* @__PURE__ */ new Set();
      for (let r3 = t.length - 1; r3 >= 0; r3--) {
        const a2 = t[r3];
        if (!n2.has(a2)) {
          const t2 = [];
          $r(a2, t2, n2, e, s), i.unshift(t2);
        }
      }
      const r2 = /* @__PURE__ */ new Set();
      for (const e2 of i)
        for (const t2 of e2)
          r2.add(t2);
      return r2;
    }(this, this.orderedModules, this.chunkByModule);
    for (const e of this.orderedModules)
      this.addDependenciesToChunk(e.dynamicDependencies, this.dynamicDependencies), this.addDependenciesToChunk(e.implicitlyLoadedBefore, this.implicitlyLoadedBefore), this.setUpChunkImportsAndExportsForModule(e);
  }
  preRender(e, t, s) {
    const { _: i, getPropertyAccess: n2, n: r2 } = s, a2 = new v({ separator: `${r2}${r2}` });
    this.usedModules = [], this.indentString = function(e2, t2) {
      if (t2.indent !== true)
        return t2.indent;
      for (const t3 of e2) {
        const e3 = Nr(t3.originalCode);
        if (e3 !== null)
          return e3;
      }
      return "	";
    }(this.orderedModules, e);
    const o2 = { dynamicImportFunction: e.dynamicImportFunction, exportNamesByVariable: this.exportNamesByVariable, format: e.format, freeze: e.freeze, indent: this.indentString, namespaceToStringTag: e.namespaceToStringTag, outputPluginDriver: this.pluginDriver, snippets: s };
    if (e.hoistTransitiveImports && !this.outputOptions.preserveModules && this.facadeModule !== null)
      for (const e2 of this.dependencies)
        e2 instanceof Or && this.inlineChunkDependencies(e2);
    this.prepareModulesForRendering(s), this.setIdentifierRenderResolutions(e);
    let h2 = "";
    const l2 = this.renderedModules;
    for (const t2 of this.orderedModules) {
      let s2 = 0;
      if (t2.isIncluded() || this.includedNamespaces.has(t2)) {
        const i3 = t2.render(o2).trim();
        s2 = i3.length(), s2 && (e.compact && i3.lastLine().includes("//") && i3.append("\n"), this.renderedModuleSources.set(t2, i3), a2.addSource(i3), this.usedModules.push(t2));
        const n4 = t2.namespace;
        if (this.includedNamespaces.has(t2) && !this.outputOptions.preserveModules) {
          const e2 = n4.renderBlock(o2);
          n4.renderFirst() ? h2 += r2 + e2 : a2.addSource(new E$2(e2));
        }
      }
      const { renderedExports: i2, removedExports: n3 } = t2.getRenderedExports(), { renderedModuleSources: c2 } = this;
      l2[t2.id] = { get code() {
        var e2, s3;
        return (s3 = (e2 = c2.get(t2)) === null || e2 === void 0 ? void 0 : e2.toString()) !== null && s3 !== void 0 ? s3 : null;
      }, originalLength: t2.originalCode.length, removedExports: n3, renderedExports: i2, renderedLength: s2 };
    }
    if (h2 && a2.prepend(h2 + r2 + r2), this.needsExportsShim && a2.prepend(`${r2}${s.cnst} _missingExportShim${i}=${i}void 0;${r2}${r2}`), e.compact ? this.renderedSource = a2 : this.renderedSource = a2.trim(), this.renderedHash = void 0, this.isEmpty && this.getExportNames().length === 0 && this.dependencies.size === 0) {
      const e2 = this.getChunkName();
      this.inputOptions.onwarn({ chunkName: e2, code: "EMPTY_BUNDLE", message: `Generated an empty chunk: "${e2}"` });
    }
    this.setExternalRenderPaths(e, t), this.renderedDependencies = this.getChunkDependencyDeclarations(e, n2), this.renderedExports = this.exportMode === "none" ? [] : this.getChunkExportDeclarations(e.format, n2);
  }
  async render(e, t, s, i) {
    Ji("render format", 2);
    const n2 = e.format, r2 = Tn[n2];
    e.dynamicImportFunction && n2 !== "es" && this.inputOptions.onwarn(fe("output.dynamicImportFunction", "outputdynamicImportFunction", 'this option is ignored for formats other than "es"'));
    for (const e2 of this.dependencies) {
      const t2 = this.renderedDependencies.get(e2);
      if (e2 instanceof Ce) {
        const s2 = e2.renderPath;
        t2.id = Ir(e2.renormalizeRenderPath ? he(this.id, s2, false, false) : s2);
      } else
        t2.namedExportsMode = e2.exportMode !== "default", t2.id = Ir(he(this.id, e2.id, false, true));
    }
    this.finaliseDynamicImports(e, i), this.finaliseImportMetas(n2, i);
    const a2 = this.renderedExports.length !== 0 || [...this.renderedDependencies.values()].some((e2) => e2.reexports && e2.reexports.length !== 0);
    let o2 = null;
    const h2 = /* @__PURE__ */ new Set();
    for (const e2 of this.orderedModules) {
      e2.usesTopLevelAwait && (o2 = e2.id);
      const t2 = this.accessedGlobalsByScope.get(e2.scope);
      if (t2)
        for (const e3 of t2)
          h2.add(e3);
    }
    if (o2 !== null && n2 !== "es" && n2 !== "system")
      return le({ code: "INVALID_TLA_FORMAT", id: o2, message: `Module format ${n2} does not support top-level await. Use the "es" or "system" output formats rather.` });
    if (!this.id)
      throw new Error("Internal Error: expecting chunk id");
    const c2 = r2(this.renderedSource, { accessedGlobals: h2, dependencies: [...this.renderedDependencies.values()], exports: this.renderedExports, hasExports: a2, id: this.id, indent: this.indentString, intro: t.intro, isEntryFacade: this.outputOptions.preserveModules || this.facadeModule !== null && this.facadeModule.info.isEntry, isModuleFacade: this.facadeModule !== null, namedExportsMode: this.exportMode !== "default", outro: t.outro, snippets: i, usesTopLevelAwait: o2 !== null, warn: this.inputOptions.onwarn }, e);
    t.banner && c2.prepend(t.banner), t.footer && c2.append(t.footer);
    const u2 = c2.toString();
    en("render format", 2);
    let d2 = null;
    const p2 = [];
    let f2 = await function({ code: e2, options: t2, outputPluginDriver: s2, renderChunk: i2, sourcemapChain: n3 }) {
      return s2.hookReduceArg0("renderChunk", [e2, i2, t2], (e3, t3, s3) => {
        if (t3 == null)
          return e3;
        if (typeof t3 == "string" && (t3 = { code: t3, map: void 0 }), t3.map !== null) {
          const e4 = Tr(t3.map);
          n3.push(e4 || { missing: true, plugin: s3.name });
        }
        return t3.code;
      });
    }({ code: u2, options: e, outputPluginDriver: this.pluginDriver, renderChunk: s, sourcemapChain: p2 });
    if (e.sourcemap) {
      let t2;
      Ji("sourcemap", 2), t2 = e.file ? R(e.sourcemapFile || e.file) : e.dir ? R(e.dir, this.id) : R(this.id);
      const s2 = c2.generateDecodedMap({});
      d2 = function(e2, t3, s3, i2, n3, r3) {
        const a3 = Dn(r3), o3 = s3.filter((e3) => !e3.excludeFromSourcemap).map((e3) => Ln(e3.id, e3.originalCode, e3.originalSourcemap, e3.sourcemapChain, a3)), h3 = new Mn(t3, o3), c3 = i2.reduce(a3, h3);
        let { sources: u3, sourcesContent: d3, names: p3, mappings: f3 } = c3.traceMappings();
        if (e2) {
          const t4 = N(e2);
          u3 = u3.map((e3) => T(t4, e3)), e2 = _(e2);
        }
        return d3 = n3 ? null : d3, new l({ file: e2, mappings: f3, names: p3, sources: u3, sourcesContent: d3 });
      }(t2, s2, this.usedModules, p2, e.sourcemapExcludeSources, this.inputOptions.onwarn), d2.sources = d2.sources.map((s3) => {
        const { sourcemapPathTransform: i2 } = e;
        if (i2) {
          const e2 = i2(s3, `${t2}.map`);
          return typeof e2 != "string" && le(xe("sourcemapPathTransform function must return a string.")), e2;
        }
        return s3;
      }).map(I$2), en("sourcemap", 2);
    }
    return e.compact || f2[f2.length - 1] === "\n" || (f2 += "\n"), { code: f2, map: d2 };
  }
  addDependenciesToChunk(e, t) {
    for (const s of e)
      if (s instanceof on) {
        const e2 = this.chunkByModule.get(s);
        e2 && e2 !== this && t.add(e2);
      } else
        t.add(s);
  }
  addNecessaryImportsForFacades() {
    for (const [e, t] of this.includedReexportsByModule)
      if (this.includedNamespaces.has(e))
        for (const e2 of t)
          this.imports.add(e2);
  }
  assignFacadeName({ fileName: e, name: t }, s) {
    e ? this.fileName = e : this.name = this.outputOptions.sanitizeFileName(t || Vr(s));
  }
  checkCircularDependencyImport(e, t) {
    const s = e.module;
    if (s instanceof on) {
      const o2 = this.chunkByModule.get(s);
      let h2;
      do {
        if (h2 = t.alternativeReexportModules.get(e), h2) {
          const l2 = this.chunkByModule.get(h2);
          l2 && l2 !== o2 && this.inputOptions.onwarn((i = s.getExportNamesByVariable().get(e)[0], n2 = s.id, r2 = h2.id, a2 = t.id, { code: ue.CYCLIC_CROSS_CHUNK_REEXPORT, exporter: n2, importer: a2, message: `Export "${i}" of module ${re(n2)} was reexported through module ${re(r2)} while both modules are dependencies of each other and will end up in different chunks by current Rollup settings. This scenario is not well supported at the moment as it will produce a circular dependency between chunks and will likely lead to broken execution order.
Either change the import in ${re(a2)} to point directly to the exporting module or do not use "preserveModules" to ensure these modules end up in the same chunk.`, reexporter: r2 })), t = h2;
        }
      } while (h2);
    }
    var i, n2, r2, a2;
  }
  computeContentHashWithDependencies(e, t, s) {
    const i = vr();
    i.update([e.intro, e.outro, e.banner, e.footer].join(":")), i.update(t.format);
    const n2 = /* @__PURE__ */ new Set([this]);
    for (const r2 of n2)
      if (r2 instanceof Ce ? i.update(`:${r2.renderPath}`) : (i.update(r2.getRenderedHash()), i.update(r2.generateId(e, t, s, false))), !(r2 instanceof Ce))
        for (const e2 of [...r2.dependencies, ...r2.dynamicDependencies])
          n2.add(e2);
    return i.digest("hex").substr(0, 8);
  }
  ensureReexportsAreAvailableForModule(e) {
    const t = [], s = e.getExportNamesByVariable();
    for (const i of s.keys()) {
      const s2 = i instanceof Wi, n2 = s2 ? i.getBaseVariable() : i;
      if (!(n2 instanceof zi && this.outputOptions.preserveModules)) {
        this.checkCircularDependencyImport(n2, e);
        const i2 = n2.module;
        if (i2 instanceof on) {
          const e2 = this.chunkByModule.get(i2);
          e2 && e2 !== this && (e2.exports.add(n2), t.push(n2), s2 && this.imports.add(n2));
        }
      }
    }
    t.length && this.includedReexportsByModule.set(e, t);
  }
  finaliseDynamicImports(e, t) {
    const s = e.format === "amd";
    for (const [e2, i] of this.renderedModuleSources)
      for (const { node: n2, resolution: r2 } of e2.dynamicImports) {
        const e3 = this.chunkByModule.get(r2), a2 = this.facadeChunkByModule.get(r2);
        if (!r2 || !n2.included || e3 === this)
          continue;
        const o2 = r2 instanceof on ? `'${Ir(he(this.id, (a2 || e3).id, s, true))}'` : r2 instanceof Ce ? `'${Ir(r2.renormalizeRenderPath ? he(this.id, r2.renderPath, s, false) : r2.renderPath)}'` : r2;
        n2.renderFinalResolution(i, o2, r2 instanceof on && !(a2 == null ? void 0 : a2.strictFacade) && e3.exportNamesByVariable.get(r2.namespace)[0], t);
      }
  }
  finaliseImportMetas(e, t) {
    for (const [s, i] of this.renderedModuleSources)
      for (const n2 of s.importMetas)
        n2.renderFinalMechanism(i, this.id, e, t, this.pluginDriver);
  }
  generateVariableName() {
    if (this.manualChunkAlias)
      return this.manualChunkAlias;
    const e = this.entryModules[0] || this.implicitEntryModules[0] || this.dynamicEntryModules[0] || this.orderedModules[this.orderedModules.length - 1];
    return e ? Vr(e) : "chunk";
  }
  getChunkDependencyDeclarations(e, t) {
    const s = this.getImportSpecifiers(t), i = this.getReexportSpecifiers(), n2 = /* @__PURE__ */ new Map();
    for (const t2 of this.dependencies) {
      const r2 = s.get(t2) || null, a2 = i.get(t2) || null, o2 = t2 instanceof Ce || t2.exportMode !== "default";
      n2.set(t2, { defaultVariableName: t2.defaultVariableName, globalName: t2 instanceof Ce && (e.format === "umd" || e.format === "iife") && Lr(t2, e.globals, (r2 || a2) !== null, this.inputOptions.onwarn), id: void 0, imports: r2, isChunk: t2 instanceof Or, name: t2.variableName, namedExportsMode: o2, namespaceVariableName: t2.namespaceVariableName, reexports: a2 });
    }
    return n2;
  }
  getChunkExportDeclarations(e, t) {
    const s = [];
    for (const i of this.getExportNames()) {
      if (i[0] === "*")
        continue;
      const n2 = this.exportsByName.get(i);
      if (!(n2 instanceof Wi)) {
        const e2 = n2.module;
        if (e2 && this.chunkByModule.get(e2) !== this)
          continue;
      }
      let r2 = null, a2 = false, o2 = n2.getName(t);
      if (n2 instanceof Rt) {
        for (const e2 of n2.declarations)
          if (e2.parent instanceof Gs || e2 instanceof Hs && e2.declaration instanceof Gs) {
            a2 = true;
            break;
          }
      } else
        n2 instanceof Wi && (r2 = o2, e === "es" && (o2 = n2.renderName));
      s.push({ exported: i, expression: r2, hoisted: a2, local: o2 });
    }
    return s;
  }
  getDependenciesToBeDeconflicted(e, t, s) {
    const i = /* @__PURE__ */ new Set(), n2 = /* @__PURE__ */ new Set(), r2 = /* @__PURE__ */ new Set();
    for (const t2 of [...this.exportNamesByVariable.keys(), ...this.imports])
      if (e || t2.isNamespace) {
        const a2 = t2.module;
        if (a2 instanceof Ce)
          i.add(a2), e && (t2.name === "default" ? Zs[String(s(a2.id))] && n2.add(a2) : t2.name === "*" && ei[String(s(a2.id))] && r2.add(a2));
        else {
          const s2 = this.chunkByModule.get(a2);
          s2 !== this && (i.add(s2), e && s2.exportMode === "default" && t2.isNamespace && r2.add(s2));
        }
      }
    if (t)
      for (const e2 of this.dependencies)
        i.add(e2);
    return { deconflictedDefault: n2, deconflictedNamespace: r2, dependencies: i };
  }
  getFallbackChunkName() {
    return this.manualChunkAlias ? this.manualChunkAlias : this.dynamicName ? this.dynamicName : this.fileName ? ne(this.fileName) : ne(this.orderedModules[this.orderedModules.length - 1].id);
  }
  getImportSpecifiers(e) {
    const { interop: t } = this.outputOptions, s = /* @__PURE__ */ new Map();
    for (const i of this.imports) {
      const n2 = i.module;
      let r2, a2;
      if (n2 instanceof Ce) {
        if (r2 = n2, a2 = i.name, a2 !== "default" && a2 !== "*" && t(n2.id) === "defaultOnly")
          return le(ye(n2.id, a2, false));
      } else
        r2 = this.chunkByModule.get(n2), a2 = r2.getVariableExportName(i);
      M(s, r2, () => []).push({ imported: a2, local: i.getName(e) });
    }
    return s;
  }
  getImportedBindingsPerDependency() {
    const e = {};
    for (const [t, s] of this.renderedDependencies) {
      const i = /* @__PURE__ */ new Set();
      if (s.imports)
        for (const { imported: e2 } of s.imports)
          i.add(e2);
      if (s.reexports)
        for (const { imported: e2 } of s.reexports)
          i.add(e2);
      e[t.id] = [...i];
    }
    return e;
  }
  getReexportSpecifiers() {
    const { externalLiveBindings: e, interop: t } = this.outputOptions, s = /* @__PURE__ */ new Map();
    for (let i of this.getExportNames()) {
      let n2, r2, a2 = false;
      if (i[0] === "*") {
        const s2 = i.substring(1);
        t(s2) === "defaultOnly" && this.inputOptions.onwarn(Ee(s2)), a2 = e, n2 = this.modulesById.get(s2), r2 = i = "*";
      } else {
        const s2 = this.exportsByName.get(i);
        if (s2 instanceof Wi)
          continue;
        const o2 = s2.module;
        if (o2 instanceof on) {
          if (n2 = this.chunkByModule.get(o2), n2 === this)
            continue;
          r2 = n2.getVariableExportName(s2), a2 = s2.isReassigned;
        } else {
          if (n2 = o2, r2 = s2.name, r2 !== "default" && r2 !== "*" && t(o2.id) === "defaultOnly")
            return le(ye(o2.id, r2, true));
          a2 = e && (r2 !== "default" || Js(String(t(o2.id)), true));
        }
      }
      M(s, n2, () => []).push({ imported: r2, needsLiveBinding: a2, reexported: i });
    }
    return s;
  }
  getReferencedFiles() {
    const e = [];
    for (const t of this.orderedModules)
      for (const s of t.importMetas) {
        const t2 = s.getReferencedFileName(this.pluginDriver);
        t2 && e.push(t2);
      }
    return e;
  }
  inlineChunkDependencies(e) {
    for (const t of e.dependencies)
      this.dependencies.has(t) || (this.dependencies.add(t), t instanceof Or && this.inlineChunkDependencies(t));
  }
  prepareModulesForRendering(e) {
    var t;
    const s = this.accessedGlobalsByScope;
    for (const i of this.orderedModules) {
      for (const { node: n2, resolution: r2 } of i.dynamicImports)
        if (n2.included)
          if (r2 instanceof on) {
            const i2 = this.chunkByModule.get(r2);
            i2 === this ? n2.setInternalResolution(r2.namespace) : n2.setExternalResolution(((t = this.facadeChunkByModule.get(r2)) === null || t === void 0 ? void 0 : t.exportMode) || i2.exportMode, r2, this.outputOptions, e, this.pluginDriver, s);
          } else
            n2.setExternalResolution("external", r2, this.outputOptions, e, this.pluginDriver, s);
      for (const e2 of i.importMetas)
        e2.addAccessedGlobals(this.outputOptions.format, s);
      this.includedNamespaces.has(i) && !this.outputOptions.preserveModules && i.namespace.prepare(s);
    }
  }
  setExternalRenderPaths(e, t) {
    for (const s of [...this.dependencies, ...this.dynamicDependencies])
      s instanceof Ce && s.setRenderPath(e, t);
  }
  setIdentifierRenderResolutions({ format: e, interop: t, namespaceToStringTag: s }) {
    const i = /* @__PURE__ */ new Set();
    for (const t2 of this.getExportNames()) {
      const s2 = this.exportsByName.get(t2);
      e !== "es" && e !== "system" && s2.isReassigned && !s2.isId ? s2.setRenderNames("exports", t2) : s2 instanceof Wi ? i.add(s2) : s2.setRenderNames(null, null);
    }
    for (const e2 of this.orderedModules)
      if (e2.needsExportShim) {
        this.needsExportsShim = true;
        break;
      }
    const n2 = /* @__PURE__ */ new Set(["Object", "Promise"]);
    switch (this.needsExportsShim && n2.add("_missingExportShim"), s && n2.add("Symbol"), e) {
      case "system":
        n2.add("module").add("exports");
        break;
      case "es":
        break;
      case "cjs":
        n2.add("module").add("require").add("__filename").add("__dirname");
      default:
        n2.add("exports");
        for (const e2 of mi)
          n2.add(e2);
    }
    Ar(this.orderedModules, this.getDependenciesToBeDeconflicted(e !== "es" && e !== "system", e === "amd" || e === "umd" || e === "iife", t), this.imports, n2, e, t, this.outputOptions.preserveModules, this.outputOptions.externalLiveBindings, this.chunkByModule, i, this.exportNamesByVariable, this.accessedGlobalsByScope, this.includedNamespaces);
  }
  setUpChunkImportsAndExportsForModule(e) {
    const t = new Set(e.includedImports);
    if (!this.outputOptions.preserveModules && this.includedNamespaces.has(e)) {
      const s = e.namespace.getMemberVariables();
      for (const e2 of Object.values(s))
        t.add(e2);
    }
    for (let s of t) {
      s instanceof Mi && (s = s.getOriginalVariable()), s instanceof Wi && (s = s.getBaseVariable());
      const t2 = this.chunkByModule.get(s.module);
      t2 !== this && (this.imports.add(s), !(s instanceof zi && this.outputOptions.preserveModules) && s.module instanceof on && (t2.exports.add(s), this.checkCircularDependencyImport(s, e)));
    }
    (this.includedNamespaces.has(e) || e.info.isEntry && e.preserveSignature !== false || e.includedDynamicImporters.some((e2) => this.chunkByModule.get(e2) !== this)) && this.ensureReexportsAreAvailableForModule(e);
    for (const { node: t2, resolution: s } of e.dynamicImports)
      t2.included && s instanceof on && this.chunkByModule.get(s) === this && !this.includedNamespaces.has(s) && (this.includedNamespaces.add(s), this.ensureReexportsAreAvailableForModule(s));
  }
}
function Vr(e) {
  var t, s, i, n2;
  return (n2 = (s = (t = e.chunkNames.find(({ isUserDefined: e2 }) => e2)) === null || t === void 0 ? void 0 : t.name) !== null && s !== void 0 ? s : (i = e.chunkNames[0]) === null || i === void 0 ? void 0 : i.name) !== null && n2 !== void 0 ? n2 : ne(e.id);
}
const Br = /[?#]/;
function Fr(e, t, s) {
  e in t && s(function(e2) {
    return { code: ue.FILE_NAME_CONFLICT, message: `The emitted file "${e2}" overwrites a previously emitted file of the same name.` };
  }(e)), t[e] = zr;
}
const zr = { type: "placeholder" };
function Wr(e, t, s) {
  if (!(typeof e == "string" || e instanceof Uint8Array)) {
    const e2 = t.fileName || t.name || s;
    return le(xe(`Could not set source for ${typeof e2 == "string" ? `asset "${e2}"` : "unnamed asset"}, asset source needs to be a string, Uint8Array or Buffer.`));
  }
  return e;
}
function jr(e, t) {
  return typeof e.fileName != "string" ? le((s = e.name || t, { code: ue.ASSET_NOT_FINALISED, message: `Plugin error - Unable to get file name for asset "${s}". Ensure that the source is set and that generate is called first.` })) : e.fileName;
  var s;
}
function Ur(e, t) {
  var s;
  const i = e.fileName || e.module && ((s = t == null ? void 0 : t.get(e.module)) === null || s === void 0 ? void 0 : s.id);
  return i || le((n2 = e.fileName || e.name, { code: ue.CHUNK_NOT_GENERATED, message: `Plugin error - Unable to get file name for chunk "${n2}". Ensure that generate is called first.` }));
  var n2;
}
class Gr {
  constructor(e, t, s) {
    this.graph = e, this.options = t, this.bundle = null, this.facadeChunkByModule = null, this.outputOptions = null, this.assertAssetsFinalized = () => {
      for (const [t2, s2] of this.filesByReferenceId)
        if (s2.type === "asset" && typeof s2.fileName != "string")
          return le((e2 = s2.name || t2, { code: ue.ASSET_SOURCE_MISSING, message: `Plugin error creating asset "${e2}" - no asset source set.` }));
      var e2;
    }, this.emitFile = (e2) => function(e3) {
      return Boolean(e3 && (e3.type === "asset" || e3.type === "chunk"));
    }(e2) ? function(e3) {
      const t2 = e3.fileName || e3.name;
      return !t2 || typeof t2 == "string" && !ae(t2);
    }(e2) ? e2.type === "chunk" ? this.emitChunk(e2) : this.emitAsset(e2) : le(xe(`The "fileName" or "name" properties of emitted files must be strings that are neither absolute nor relative paths, received "${e2.fileName || e2.name}".`)) : le(xe(`Emitted files must be of type "asset" or "chunk", received "${e2 && e2.type}".`)), this.getFileName = (e2) => {
      const t2 = this.filesByReferenceId.get(e2);
      return t2 ? t2.type === "chunk" ? Ur(t2, this.facadeChunkByModule) : jr(t2, e2) : le((s2 = e2, { code: ue.FILE_NOT_FOUND, message: `Plugin error - Unable to get file name for unknown file "${s2}".` }));
      var s2;
    }, this.setAssetSource = (e2, t2) => {
      const s2 = this.filesByReferenceId.get(e2);
      if (!s2)
        return le((i = e2, { code: ue.ASSET_NOT_FOUND, message: `Plugin error - Unable to set the source for unknown asset "${i}".` }));
      var i, n2;
      if (s2.type !== "asset")
        return le(xe(`Asset sources can only be set for emitted assets but "${e2}" is an emitted chunk.`));
      if (s2.source !== void 0)
        return le((n2 = s2.name || e2, { code: ue.ASSET_SOURCE_ALREADY_SET, message: `Unable to set the source for asset "${n2}", source already set.` }));
      const r2 = Wr(t2, s2, e2);
      this.bundle ? this.finalizeAsset(s2, r2, e2, this.bundle) : s2.source = r2;
    }, this.setOutputBundle = (e2, t2, s2) => {
      this.outputOptions = t2, this.bundle = e2, this.facadeChunkByModule = s2;
      for (const e3 of this.filesByReferenceId.values())
        e3.fileName && Fr(e3.fileName, this.bundle, this.options.onwarn);
      for (const [e3, t3] of this.filesByReferenceId)
        t3.type === "asset" && t3.source !== void 0 && this.finalizeAsset(t3, t3.source, e3, this.bundle);
    }, this.filesByReferenceId = s ? new Map(s.filesByReferenceId) : /* @__PURE__ */ new Map();
  }
  assignReferenceId(e, t) {
    let s;
    do {
      s = vr().update(s || t).digest("hex").substring(0, 8);
    } while (this.filesByReferenceId.has(s));
    return this.filesByReferenceId.set(s, e), s;
  }
  emitAsset(e) {
    const t = e.source !== void 0 ? Wr(e.source, e, null) : void 0, s = { fileName: e.fileName, name: e.name, source: t, type: "asset" }, i = this.assignReferenceId(s, e.fileName || e.name || e.type);
    return this.bundle && (e.fileName && Fr(e.fileName, this.bundle, this.options.onwarn), t !== void 0 && this.finalizeAsset(s, t, i, this.bundle)), i;
  }
  emitChunk(e) {
    if (this.graph.phase > ji.LOAD_AND_PARSE)
      return le({ code: ue.INVALID_ROLLUP_PHASE, message: "Cannot emit chunks after module loading has finished." });
    if (typeof e.id != "string")
      return le(xe(`Emitted chunks need to have a valid string id, received "${e.id}"`));
    const t = { fileName: e.fileName, module: null, name: e.name || e.id, type: "chunk" };
    return this.graph.moduleLoader.emitChunk(e).then((e2) => t.module = e2).catch(() => {
    }), this.assignReferenceId(t, e.id);
  }
  finalizeAsset(e, t, s, i) {
    const n2 = e.fileName || function(e2, t2) {
      for (const [s2, i2] of Object.entries(e2))
        if (i2.type === "asset" && Hr(t2, i2.source))
          return s2;
      return null;
    }(i, t) || function(e2, t2, s2, i2) {
      const n3 = s2.sanitizeFileName(e2 || "asset");
      return Mr(Rr(typeof s2.assetFileNames == "function" ? s2.assetFileNames({ name: e2, source: t2, type: "asset" }) : s2.assetFileNames, "output.assetFileNames", { ext: () => $(n3).substring(1), extname: () => $(n3), hash: () => vr().update(n3).update(":").update(t2).digest("hex").substring(0, 8), name: () => n3.substring(0, n3.length - $(n3).length) }), i2);
    }(e.name, t, this.outputOptions, i), r2 = __spreadProps(__spreadValues({}, e), { fileName: n2, source: t });
    this.filesByReferenceId.set(s, r2);
    const { options: a2 } = this;
    i[n2] = { fileName: n2, get isAsset() {
      return be(`Accessing "isAsset" on files in the bundle is deprecated, please use "type === 'asset'" instead`, true, a2), true;
    }, name: e.name, source: t, type: "asset" };
  }
}
function Hr(e, t) {
  if (typeof e == "string")
    return e === t;
  if (typeof t == "string")
    return false;
  if ("equals" in e)
    return e.equals(t);
  if (e.length !== t.length)
    return false;
  for (let s = 0; s < e.length; s++)
    if (e[s] !== t[s])
      return false;
  return true;
}
const qr = (e, t) => t ? `${e}
${t}` : e, Kr = (e, t) => t ? `${e}

${t}` : e;
function Xr(e, t) {
  const s = [], i = new Set(t.keys()), n2 = /* @__PURE__ */ Object.create(null);
  for (const [e2, s2] of t) {
    Yr(e2, n2[s2] = n2[s2] || [], i);
  }
  for (const [e2, t2] of Object.entries(n2))
    s.push({ alias: e2, modules: t2 });
  const r2 = /* @__PURE__ */ new Map(), { dependentEntryPointsByModule: a2, dynamicEntryModules: o2 } = function(e2) {
    const t2 = /* @__PURE__ */ new Set(), s2 = /* @__PURE__ */ new Map(), i2 = new Set(e2);
    for (const e3 of i2) {
      const n3 = /* @__PURE__ */ new Set([e3]);
      for (const r3 of n3) {
        M(s2, r3, () => /* @__PURE__ */ new Set()).add(e3);
        for (const e4 of r3.getDependenciesToBeIncluded())
          e4 instanceof Ce || n3.add(e4);
        for (const { resolution: e4 } of r3.dynamicImports)
          e4 instanceof on && e4.includedDynamicImporters.length > 0 && (t2.add(e4), i2.add(e4));
        for (const e4 of r3.implicitlyLoadedBefore)
          t2.add(e4), i2.add(e4);
      }
    }
    return { dependentEntryPointsByModule: s2, dynamicEntryModules: t2 };
  }(e), h2 = function(e2, t2) {
    const s2 = /* @__PURE__ */ new Map();
    for (const i2 of t2) {
      const t3 = M(s2, i2, () => /* @__PURE__ */ new Set());
      for (const s3 of [...i2.includedDynamicImporters, ...i2.implicitlyLoadedAfter])
        for (const i3 of e2.get(s3))
          t3.add(i3);
    }
    return s2;
  }(a2, o2), l2 = new Set(e);
  function c2(e2, t2) {
    const s2 = /* @__PURE__ */ new Set([e2]);
    for (const n3 of s2) {
      const o3 = M(r2, n3, () => /* @__PURE__ */ new Set());
      if (!t2 || !u2(t2, a2.get(n3))) {
        o3.add(e2);
        for (const e3 of n3.getDependenciesToBeIncluded())
          e3 instanceof Ce || i.has(e3) || s2.add(e3);
      }
    }
  }
  function u2(e2, t2) {
    const s2 = new Set(e2);
    for (const e3 of s2)
      if (!t2.has(e3)) {
        if (l2.has(e3))
          return false;
        const t3 = h2.get(e3);
        for (const e4 of t3)
          s2.add(e4);
      }
    return true;
  }
  for (const t2 of e)
    i.has(t2) || c2(t2, null);
  for (const e2 of o2)
    i.has(e2) || c2(e2, h2.get(e2));
  return s.push(...function(e2, t2) {
    const s2 = /* @__PURE__ */ Object.create(null);
    for (const [i2, n3] of t2) {
      let t3 = "";
      for (const s3 of e2)
        t3 += n3.has(s3) ? "X" : "_";
      const r3 = s2[t3];
      r3 ? r3.push(i2) : s2[t3] = [i2];
    }
    return Object.values(s2).map((e3) => ({ alias: null, modules: e3 }));
  }([...e, ...o2], r2)), s;
}
function Yr(e, t, s) {
  const i = /* @__PURE__ */ new Set([e]);
  for (const e2 of i) {
    s.add(e2), t.push(e2);
    for (const t2 of e2.dependencies)
      t2 instanceof Ce || s.has(t2) || i.add(t2);
  }
}
const Qr = (e, t) => e.execIndex > t.execIndex ? 1 : -1;
function Zr(e, t, s) {
  const i = Symbol(e.id), n2 = [re(e.id)];
  let r2 = t;
  for (e.cycles.add(i); r2 !== e; )
    r2.cycles.add(i), n2.push(re(r2.id)), r2 = s.get(r2);
  return n2.push(n2[0]), n2.reverse(), n2;
}
const Jr = (e, t) => t ? `(${e})` : e, ea = /^(?!\d)[\w$]+$/;
class ta {
  constructor(e, t, s, i, n2) {
    this.outputOptions = e, this.unsetOptions = t, this.inputOptions = s, this.pluginDriver = i, this.graph = n2, this.facadeChunkByModule = /* @__PURE__ */ new Map(), this.includedNamespaces = /* @__PURE__ */ new Set();
  }
  async generate(e) {
    Ji("GENERATE", 1);
    const t = /* @__PURE__ */ Object.create(null);
    this.pluginDriver.setOutputBundle(t, this.outputOptions, this.facadeChunkByModule);
    try {
      await this.pluginDriver.hookParallel("renderStart", [this.outputOptions, this.inputOptions]), Ji("generate chunks", 2);
      const e2 = await this.generateChunks();
      e2.length > 1 && function(e3, t2) {
        if (e3.format === "umd" || e3.format === "iife")
          return le(fe("output.format", "outputformat", "UMD and IIFE output formats are not supported for code-splitting builds", e3.format));
        if (typeof e3.file == "string")
          return le(fe("output.file", "outputdir", 'when building multiple chunks, the "output.dir" option must be used, not "output.file". To inline dynamic imports, set the "inlineDynamicImports" option'));
        if (e3.sourcemapFile)
          return le(fe("output.sourcemapFile", "outputsourcemapfile", '"output.sourcemapFile" is only supported for single-file builds'));
        !e3.amd.autoId && e3.amd.id && t2(fe("output.amd.id", "outputamd", 'this option is only properly supported for single-file builds. Use "output.amd.autoId" and "output.amd.basePath" instead'));
      }(this.outputOptions, this.inputOptions.onwarn);
      const s = function(e3) {
        if (e3.length === 0)
          return "/";
        if (e3.length === 1)
          return N(e3[0]);
        const t2 = e3.slice(1).reduce((e4, t3) => {
          const s2 = t3.split(/\/+|\\+/);
          let i2;
          for (i2 = 0; e4[i2] === s2[i2] && i2 < Math.min(e4.length, s2.length); i2++)
            ;
          return e4.slice(0, i2);
        }, e3[0].split(/\/+|\\+/));
        return t2.length > 1 ? t2.join("/") : "/";
      }(function(e3) {
        const t2 = [];
        for (const s2 of e3)
          for (const e4 of s2.entryModules)
            w$2(e4.id) && t2.push(e4.id);
        return t2;
      }(e2));
      en("generate chunks", 2), Ji("render modules", 2);
      const i = await async function(e3, t2) {
        try {
          let [s2, i2, n3, r2] = await Promise.all([t2.hookReduceValue("banner", e3.banner(), [], qr), t2.hookReduceValue("footer", e3.footer(), [], qr), t2.hookReduceValue("intro", e3.intro(), [], Kr), t2.hookReduceValue("outro", e3.outro(), [], Kr)]);
          return n3 && (n3 += "\n\n"), r2 && (r2 = `

${r2}`), s2.length && (s2 += "\n"), i2.length && (i2 = "\n" + i2), { banner: s2, footer: i2, intro: n3, outro: r2 };
        } catch (e4) {
          return le({ code: "ADDON_ERROR", message: `Could not retrieve ${e4.hook}. Check configuration of plugin ${e4.plugin}.
	Error Message: ${e4.message}` });
        }
      }(this.outputOptions, this.pluginDriver), n2 = function({ compact: e3, generatedCode: { arrowFunctions: t2, constBindings: s2, objectShorthand: i2, reservedNamesAsProps: n3 } }) {
        const { _: r2, n: a2, s: o2 } = e3 ? { _: "", n: "", s: "" } : { _: " ", n: "\n", s: ";" }, h2 = s2 ? "const" : "var", l2 = (e4, { isAsync: t3, name: s3 }) => `${t3 ? "async " : ""}function${s3 ? ` ${s3}` : ""}${r2}(${e4.join(`,${r2}`)})${r2}`, c2 = t2 ? (e4, { isAsync: t3, name: s3 }) => {
          const i3 = e4.length === 1;
          return `${s3 ? `${h2} ${s3}${r2}=${r2}` : ""}${t3 ? `async${i3 ? " " : r2}` : ""}${i3 ? e4[0] : `(${e4.join(`,${r2}`)})`}${r2}=>${r2}`;
        } : l2, u2 = (e4, { functionReturn: s3, lineBreakIndent: i3, name: n4 }) => [`${c2(e4, { isAsync: false, name: n4 })}${t2 ? i3 ? `${a2}${i3.base}${i3.t}` : "" : `{${i3 ? `${a2}${i3.base}${i3.t}` : r2}${s3 ? "return " : ""}`}`, t2 ? `${n4 ? ";" : ""}${i3 ? `${a2}${i3.base}` : ""}` : `${o2}${i3 ? `${a2}${i3.base}` : r2}}`], d2 = n3 ? (e4) => ea.test(e4) : (e4) => !Se.has(e4) && ea.test(e4);
        return { _: r2, cnst: h2, getDirectReturnFunction: u2, getDirectReturnIifeLeft: (e4, s3, { needsArrowReturnParens: i3, needsWrappedFunction: n4 }) => {
          const [r3, a3] = u2(e4, { functionReturn: true, lineBreakIndent: null, name: null });
          return `${Jr(`${r3}${Jr(s3, t2 && i3)}${a3}`, t2 || n4)}(`;
        }, getFunctionIntro: c2, getNonArrowFunctionIntro: l2, getObject(e4, { lineBreakIndent: t3 }) {
          const s3 = t3 ? `${a2}${t3.base}${t3.t}` : r2;
          return `{${e4.map(([e5, t4]) => {
            if (e5 === null)
              return `${s3}${t4}`;
            const n4 = !d2(e5);
            return e5 === t4 && i2 && !n4 ? s3 + e5 : `${s3}${n4 ? `'${e5}'` : e5}:${r2}${t4}`;
          }).join(",")}${e4.length === 0 ? "" : t3 ? `${a2}${t3.base}` : r2}}`;
        }, getPropertyAccess: (e4) => d2(e4) ? `.${e4}` : `[${JSON.stringify(e4)}]`, n: a2, s: o2 };
      }(this.outputOptions);
      this.prerenderChunks(e2, s, n2), en("render modules", 2), await this.addFinalizedChunksToBundle(e2, s, i, t, n2);
    } catch (e2) {
      throw await this.pluginDriver.hookParallel("renderError", [e2]), e2;
    }
    return await this.pluginDriver.hookSeq("generateBundle", [this.outputOptions, t, e]), this.finaliseAssets(t), en("GENERATE", 1), t;
  }
  async addFinalizedChunksToBundle(e, t, s, i, n2) {
    this.assignChunkIds(e, t, s, i);
    for (const t2 of e)
      i[t2.id] = t2.getChunkInfoWithFileNames();
    await Promise.all(e.map(async (e2) => {
      const t2 = i[e2.id];
      Object.assign(t2, await e2.render(this.outputOptions, s, t2, n2));
    }));
  }
  async addManualChunks(e) {
    const t = /* @__PURE__ */ new Map(), s = await Promise.all(Object.entries(e).map(async ([e2, t2]) => ({ alias: e2, entries: await this.graph.moduleLoader.addAdditionalModules(t2) })));
    for (const { alias: e2, entries: i } of s)
      for (const s2 of i)
        ia(e2, s2, t);
    return t;
  }
  assignChunkIds(e, t, s, i) {
    const n2 = [], r2 = [];
    for (const t2 of e)
      (t2.facadeModule && t2.facadeModule.isUserDefinedEntryPoint ? n2 : r2).push(t2);
    const a2 = n2.concat(r2);
    for (const e2 of a2)
      this.outputOptions.file ? e2.id = _(this.outputOptions.file) : this.outputOptions.preserveModules ? e2.id = e2.generateIdPreserveModules(t, this.outputOptions, i, this.unsetOptions) : e2.id = e2.generateId(s, this.outputOptions, i, true), i[e2.id] = zr;
  }
  assignManualChunks(e) {
    const t = [], s = { getModuleIds: () => this.graph.modulesById.keys(), getModuleInfo: this.graph.getModuleInfo };
    for (const i2 of this.graph.modulesById.values())
      if (i2 instanceof on) {
        const n2 = e(i2.id, s);
        typeof n2 == "string" && t.push([n2, i2]);
      }
    t.sort(([e2], [t2]) => e2 > t2 ? 1 : e2 < t2 ? -1 : 0);
    const i = /* @__PURE__ */ new Map();
    for (const [e2, s2] of t)
      ia(e2, s2, i);
    return i;
  }
  finaliseAssets(e) {
    for (const t of Object.values(e))
      if (t.type || (be('A plugin is directly adding properties to the bundle object in the "generateBundle" hook. This is deprecated and will be removed in a future Rollup version, please use "this.emitFile" instead.', true, this.inputOptions), t.type = "asset"), this.outputOptions.validate && "code" in t)
        try {
          this.graph.contextParse(t.code, { allowHashBang: true, ecmaVersion: "latest" });
        } catch (e2) {
          this.inputOptions.onwarn(de(t, e2));
        }
    this.pluginDriver.finaliseAssets();
  }
  async generateChunks() {
    const { manualChunks: e } = this.outputOptions, t = typeof e == "object" ? await this.addManualChunks(e) : this.assignManualChunks(e), s = [], i = /* @__PURE__ */ new Map();
    for (const { alias: e2, modules: n3 } of this.outputOptions.inlineDynamicImports ? [{ alias: null, modules: sa(this.graph.modulesById) }] : this.outputOptions.preserveModules ? sa(this.graph.modulesById).map((e3) => ({ alias: null, modules: [e3] })) : Xr(this.graph.entryModules, t)) {
      n3.sort(Qr);
      const t2 = new Or(n3, this.inputOptions, this.outputOptions, this.unsetOptions, this.pluginDriver, this.graph.modulesById, i, this.facadeChunkByModule, this.includedNamespaces, e2);
      s.push(t2);
      for (const e3 of n3)
        i.set(e3, t2);
    }
    for (const e2 of s)
      e2.link();
    const n2 = [];
    for (const e2 of s)
      n2.push(...e2.generateFacades());
    return [...s, ...n2];
  }
  prerenderChunks(e, t, s) {
    for (const t2 of e)
      t2.generateExports();
    for (const i of e)
      i.preRender(this.outputOptions, t, s);
  }
}
function sa(e) {
  return [...e.values()].filter((e2) => e2 instanceof on && (e2.isIncluded() || e2.info.isEntry || e2.includedDynamicImporters.length > 0));
}
function ia(e, t, s) {
  const i = s.get(t);
  if (typeof i == "string" && i !== e)
    return le((n2 = t.id, r2 = e, a2 = i, { code: ue.INVALID_CHUNK, message: `Cannot assign ${re(n2)} to the "${r2}" chunk as it is already in the "${a2}" chunk.` }));
  var n2, r2, a2;
  s.set(t, e);
}
var na = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 574, 3, 9, 9, 370, 1, 154, 10, 50, 3, 123, 2, 54, 14, 32, 10, 3, 1, 11, 3, 46, 10, 8, 0, 46, 9, 7, 2, 37, 13, 2, 9, 6, 1, 45, 0, 13, 2, 49, 13, 9, 3, 2, 11, 83, 11, 7, 0, 161, 11, 6, 9, 7, 3, 56, 1, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 193, 17, 10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 84, 14, 5, 9, 243, 14, 166, 9, 71, 5, 2, 1, 3, 3, 2, 0, 2, 1, 13, 9, 120, 6, 3, 6, 4, 0, 29, 9, 41, 6, 2, 3, 9, 0, 10, 10, 47, 15, 406, 7, 2, 7, 17, 9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2, 6, 2, 0, 9, 9, 49, 4, 2, 1, 2, 4, 9, 9, 330, 3, 19306, 9, 87, 9, 39, 4, 60, 6, 26, 9, 1014, 0, 2, 54, 8, 3, 82, 0, 12, 1, 19628, 1, 4706, 45, 3, 22, 543, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 262, 6, 10, 9, 357, 0, 62, 13, 1495, 6, 110, 6, 6, 9, 4759, 9, 787719, 239], ra = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 14, 29, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 13, 10, 2, 14, 2, 6, 2, 1, 2, 10, 2, 14, 2, 6, 2, 1, 68, 310, 10, 21, 11, 7, 25, 5, 2, 41, 2, 8, 70, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 28, 43, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 14, 35, 349, 41, 7, 1, 79, 28, 11, 0, 9, 21, 43, 17, 47, 20, 28, 22, 13, 52, 58, 1, 3, 0, 14, 44, 33, 24, 27, 35, 30, 0, 3, 0, 9, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 85, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 159, 52, 19, 3, 21, 2, 31, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 14, 0, 72, 26, 38, 6, 186, 43, 117, 63, 32, 7, 3, 0, 3, 7, 2, 1, 2, 23, 16, 0, 2, 0, 95, 7, 3, 38, 17, 0, 2, 0, 29, 0, 11, 39, 8, 0, 22, 0, 12, 45, 20, 0, 19, 72, 264, 8, 2, 36, 18, 0, 50, 29, 113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2, 31, 15, 0, 328, 18, 190, 0, 80, 921, 103, 110, 18, 195, 2637, 96, 16, 1070, 4050, 582, 8634, 568, 8, 30, 18, 78, 18, 29, 19, 47, 17, 3, 32, 20, 6, 18, 689, 63, 129, 74, 6, 0, 67, 12, 65, 1, 2, 0, 29, 6135, 9, 1237, 43, 8, 8936, 3, 2, 6, 2, 1, 2, 290, 46, 2, 18, 3, 9, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 1845, 30, 482, 44, 11, 6, 17, 0, 322, 29, 19, 43, 1269, 6, 2, 3, 2, 1, 2, 14, 2, 196, 60, 67, 8, 0, 1205, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42719, 33, 4152, 8, 221, 3, 5761, 15, 7472, 3104, 541, 1507, 4938], aa = "\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05D0-\u05EA\u05EF-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u0870-\u0887\u0889-\u088E\u08A0-\u08C9\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C5D\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D04-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u1711\u171F-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1878\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4C\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BF\u31F0-\u31FF\u3400-\u4DBF\u4E00-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7CA\uA7D0\uA7D1\uA7D3\uA7D5-\uA7D9\uA7F2-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB69\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC", oa = { 3: "abstract boolean byte char class double enum export extends final float goto implements import int interface long native package private protected public short static super synchronized throws transient volatile", 5: "class enum extends super const export import", 6: "enum", strict: "implements interface let package private protected public static yield", strictBind: "eval arguments" }, ha = "break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this", la = { 5: ha, "5module": ha + " export import", 6: ha + " const class extends export import super" }, ca = /^in(stanceof)?$/, ua = new RegExp("[" + aa + "]"), da = new RegExp("[" + aa + "\u200C\u200D\xB7\u0300-\u036F\u0387\u0483-\u0487\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u0669\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u06F0-\u06F9\u0711\u0730-\u074A\u07A6-\u07B0\u07C0-\u07C9\u07EB-\u07F3\u07FD\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u0898-\u089F\u08CA-\u08E1\u08E3-\u0903\u093A-\u093C\u093E-\u094F\u0951-\u0957\u0962\u0963\u0966-\u096F\u0981-\u0983\u09BC\u09BE-\u09C4\u09C7\u09C8\u09CB-\u09CD\u09D7\u09E2\u09E3\u09E6-\u09EF\u09FE\u0A01-\u0A03\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A66-\u0A71\u0A75\u0A81-\u0A83\u0ABC\u0ABE-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AE2\u0AE3\u0AE6-\u0AEF\u0AFA-\u0AFF\u0B01-\u0B03\u0B3C\u0B3E-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B55-\u0B57\u0B62\u0B63\u0B66-\u0B6F\u0B82\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD7\u0BE6-\u0BEF\u0C00-\u0C04\u0C3C\u0C3E-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0CBC\u0CBE-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CE2\u0CE3\u0CE6-\u0CEF\u0D00-\u0D03\u0D3B\u0D3C\u0D3E-\u0D44\u0D46-\u0D48\u0D4A-\u0D4D\u0D57\u0D62\u0D63\u0D66-\u0D6F\u0D81-\u0D83\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0E50-\u0E59\u0EB1\u0EB4-\u0EBC\u0EC8-\u0ECD\u0ED0-\u0ED9\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E\u0F3F\u0F71-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102B-\u103E\u1040-\u1049\u1056-\u1059\u105E-\u1060\u1062-\u1064\u1067-\u106D\u1071-\u1074\u1082-\u108D\u108F-\u109D\u135D-\u135F\u1369-\u1371\u1712-\u1715\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4-\u17D3\u17DD\u17E0-\u17E9\u180B-\u180D\u180F-\u1819\u18A9\u1920-\u192B\u1930-\u193B\u1946-\u194F\u19D0-\u19DA\u1A17-\u1A1B\u1A55-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AB0-\u1ABD\u1ABF-\u1ACE\u1B00-\u1B04\u1B34-\u1B44\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1B82\u1BA1-\u1BAD\u1BB0-\u1BB9\u1BE6-\u1BF3\u1C24-\u1C37\u1C40-\u1C49\u1C50-\u1C59\u1CD0-\u1CD2\u1CD4-\u1CE8\u1CED\u1CF4\u1CF7-\u1CF9\u1DC0-\u1DFF\u203F\u2040\u2054\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302F\u3099\u309A\uA620-\uA629\uA66F\uA674-\uA67D\uA69E\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA823-\uA827\uA82C\uA880\uA881\uA8B4-\uA8C5\uA8D0-\uA8D9\uA8E0-\uA8F1\uA8FF-\uA909\uA926-\uA92D\uA947-\uA953\uA980-\uA983\uA9B3-\uA9C0\uA9D0-\uA9D9\uA9E5\uA9F0-\uA9F9\uAA29-\uAA36\uAA43\uAA4C\uAA4D\uAA50-\uAA59\uAA7B-\uAA7D\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEB-\uAAEF\uAAF5\uAAF6\uABE3-\uABEA\uABEC\uABED\uABF0-\uABF9\uFB1E\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFF10-\uFF19\uFF3F]");
function pa(e, t) {
  for (var s = 65536, i = 0; i < t.length; i += 2) {
    if ((s += t[i]) > e)
      return false;
    if ((s += t[i + 1]) >= e)
      return true;
  }
}
function fa(e, t) {
  return e < 65 ? e === 36 : e < 91 || (e < 97 ? e === 95 : e < 123 || (e <= 65535 ? e >= 170 && ua.test(String.fromCharCode(e)) : t !== false && pa(e, ra)));
}
function ma(e, t) {
  return e < 48 ? e === 36 : e < 58 || !(e < 65) && (e < 91 || (e < 97 ? e === 95 : e < 123 || (e <= 65535 ? e >= 170 && da.test(String.fromCharCode(e)) : t !== false && (pa(e, ra) || pa(e, na)))));
}
var ga = function(e, t) {
  t === void 0 && (t = {}), this.label = e, this.keyword = t.keyword, this.beforeExpr = !!t.beforeExpr, this.startsExpr = !!t.startsExpr, this.isLoop = !!t.isLoop, this.isAssign = !!t.isAssign, this.prefix = !!t.prefix, this.postfix = !!t.postfix, this.binop = t.binop || null, this.updateContext = null;
};
function ya(e, t) {
  return new ga(e, { beforeExpr: true, binop: t });
}
var Ea = { beforeExpr: true }, xa = { startsExpr: true }, va = {};
function ba(e, t) {
  return t === void 0 && (t = {}), t.keyword = e, va[e] = new ga(e, t);
}
var Aa = { num: new ga("num", xa), regexp: new ga("regexp", xa), string: new ga("string", xa), name: new ga("name", xa), privateId: new ga("privateId", xa), eof: new ga("eof"), bracketL: new ga("[", { beforeExpr: true, startsExpr: true }), bracketR: new ga("]"), braceL: new ga("{", { beforeExpr: true, startsExpr: true }), braceR: new ga("}"), parenL: new ga("(", { beforeExpr: true, startsExpr: true }), parenR: new ga(")"), comma: new ga(",", Ea), semi: new ga(";", Ea), colon: new ga(":", Ea), dot: new ga("."), question: new ga("?", Ea), questionDot: new ga("?."), arrow: new ga("=>", Ea), template: new ga("template"), invalidTemplate: new ga("invalidTemplate"), ellipsis: new ga("...", Ea), backQuote: new ga("`", xa), dollarBraceL: new ga("${", { beforeExpr: true, startsExpr: true }), eq: new ga("=", { beforeExpr: true, isAssign: true }), assign: new ga("_=", { beforeExpr: true, isAssign: true }), incDec: new ga("++/--", { prefix: true, postfix: true, startsExpr: true }), prefix: new ga("!/~", { beforeExpr: true, prefix: true, startsExpr: true }), logicalOR: ya("||", 1), logicalAND: ya("&&", 2), bitwiseOR: ya("|", 3), bitwiseXOR: ya("^", 4), bitwiseAND: ya("&", 5), equality: ya("==/!=/===/!==", 6), relational: ya("</>/<=/>=", 7), bitShift: ya("<</>>/>>>", 8), plusMin: new ga("+/-", { beforeExpr: true, binop: 9, prefix: true, startsExpr: true }), modulo: ya("%", 10), star: ya("*", 10), slash: ya("/", 10), starstar: new ga("**", { beforeExpr: true }), coalesce: ya("??", 1), _break: ba("break"), _case: ba("case", Ea), _catch: ba("catch"), _continue: ba("continue"), _debugger: ba("debugger"), _default: ba("default", Ea), _do: ba("do", { isLoop: true, beforeExpr: true }), _else: ba("else", Ea), _finally: ba("finally"), _for: ba("for", { isLoop: true }), _function: ba("function", xa), _if: ba("if"), _return: ba("return", Ea), _switch: ba("switch"), _throw: ba("throw", Ea), _try: ba("try"), _var: ba("var"), _const: ba("const"), _while: ba("while", { isLoop: true }), _with: ba("with"), _new: ba("new", { beforeExpr: true, startsExpr: true }), _this: ba("this", xa), _super: ba("super", xa), _class: ba("class", xa), _extends: ba("extends", Ea), _export: ba("export"), _import: ba("import", xa), _null: ba("null", xa), _true: ba("true", xa), _false: ba("false", xa), _in: ba("in", { beforeExpr: true, binop: 7 }), _instanceof: ba("instanceof", { beforeExpr: true, binop: 7 }), _typeof: ba("typeof", { beforeExpr: true, prefix: true, startsExpr: true }), _void: ba("void", { beforeExpr: true, prefix: true, startsExpr: true }), _delete: ba("delete", { beforeExpr: true, prefix: true, startsExpr: true }) }, Sa = /\r\n?|\n|\u2028|\u2029/, Pa = new RegExp(Sa.source, "g");
function ka(e) {
  return e === 10 || e === 13 || e === 8232 || e === 8233;
}
function wa(e, t, s) {
  s === void 0 && (s = e.length);
  for (var i = t; i < s; i++) {
    var n2 = e.charCodeAt(i);
    if (ka(n2))
      return i < s - 1 && n2 === 13 && e.charCodeAt(i + 1) === 10 ? i + 2 : i + 1;
  }
  return -1;
}
var Ca = /[\u1680\u2000-\u200a\u202f\u205f\u3000\ufeff]/, Ia = /(?:\s|\/\/.*|\/\*[^]*?\*\/)*/g, _a = Object.prototype, Na = _a.hasOwnProperty, $a = _a.toString, Ta = Object.hasOwn || function(e, t) {
  return Na.call(e, t);
}, Ra = Array.isArray || function(e) {
  return $a.call(e) === "[object Array]";
};
function Ma(e) {
  return new RegExp("^(?:" + e.replace(/ /g, "|") + ")$");
}
function Da(e) {
  return e <= 65535 ? String.fromCharCode(e) : (e -= 65536, String.fromCharCode(55296 + (e >> 10), 56320 + (1023 & e)));
}
var La = /(?:[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])/, Oa = function(e, t) {
  this.line = e, this.column = t;
};
Oa.prototype.offset = function(e) {
  return new Oa(this.line, this.column + e);
};
var Va = function(e, t, s) {
  this.start = t, this.end = s, e.sourceFile !== null && (this.source = e.sourceFile);
};
function Ba(e, t) {
  for (var s = 1, i = 0; ; ) {
    var n2 = wa(e, i, t);
    if (n2 < 0)
      return new Oa(s, t - i);
    ++s, i = n2;
  }
}
var Fa = { ecmaVersion: null, sourceType: "script", onInsertedSemicolon: null, onTrailingComma: null, allowReserved: null, allowReturnOutsideFunction: false, allowImportExportEverywhere: false, allowAwaitOutsideFunction: null, allowSuperOutsideMethod: null, allowHashBang: false, locations: false, onToken: null, onComment: null, ranges: false, program: null, sourceFile: null, directSourceFile: null, preserveParens: false }, za = false;
function Wa(e) {
  var t = {};
  for (var s in Fa)
    t[s] = e && Ta(e, s) ? e[s] : Fa[s];
  if (t.ecmaVersion === "latest" ? t.ecmaVersion = 1e8 : t.ecmaVersion == null ? (!za && typeof console == "object" && console.warn && (za = true, console.warn("Since Acorn 8.0.0, options.ecmaVersion is required.\nDefaulting to 2020, but this will stop working in the future.")), t.ecmaVersion = 11) : t.ecmaVersion >= 2015 && (t.ecmaVersion -= 2009), t.allowReserved == null && (t.allowReserved = t.ecmaVersion < 5), Ra(t.onToken)) {
    var i = t.onToken;
    t.onToken = function(e2) {
      return i.push(e2);
    };
  }
  return Ra(t.onComment) && (t.onComment = function(e2, t2) {
    return function(s2, i2, n2, r2, a2, o2) {
      var h2 = { type: s2 ? "Block" : "Line", value: i2, start: n2, end: r2 };
      e2.locations && (h2.loc = new Va(this, a2, o2)), e2.ranges && (h2.range = [n2, r2]), t2.push(h2);
    };
  }(t, t.onComment)), t;
}
function ja(e, t) {
  return 2 | (e ? 4 : 0) | (t ? 8 : 0);
}
var Ua = function(e, t, s) {
  this.options = e = Wa(e), this.sourceFile = e.sourceFile, this.keywords = Ma(la[e.ecmaVersion >= 6 ? 6 : e.sourceType === "module" ? "5module" : 5]);
  var i = "";
  e.allowReserved !== true && (i = oa[e.ecmaVersion >= 6 ? 6 : e.ecmaVersion === 5 ? 5 : 3], e.sourceType === "module" && (i += " await")), this.reservedWords = Ma(i);
  var n2 = (i ? i + " " : "") + oa.strict;
  this.reservedWordsStrict = Ma(n2), this.reservedWordsStrictBind = Ma(n2 + " " + oa.strictBind), this.input = String(t), this.containsEsc = false, s ? (this.pos = s, this.lineStart = this.input.lastIndexOf("\n", s - 1) + 1, this.curLine = this.input.slice(0, this.lineStart).split(Sa).length) : (this.pos = this.lineStart = 0, this.curLine = 1), this.type = Aa.eof, this.value = null, this.start = this.end = this.pos, this.startLoc = this.endLoc = this.curPosition(), this.lastTokEndLoc = this.lastTokStartLoc = null, this.lastTokStart = this.lastTokEnd = this.pos, this.context = this.initialContext(), this.exprAllowed = true, this.inModule = e.sourceType === "module", this.strict = this.inModule || this.strictDirective(this.pos), this.potentialArrowAt = -1, this.potentialArrowInForAwait = false, this.yieldPos = this.awaitPos = this.awaitIdentPos = 0, this.labels = [], this.undefinedExports = /* @__PURE__ */ Object.create(null), this.pos === 0 && e.allowHashBang && this.input.slice(0, 2) === "#!" && this.skipLineComment(2), this.scopeStack = [], this.enterScope(1), this.regexpState = null, this.privateNameStack = [];
}, Ga = { inFunction: { configurable: true }, inGenerator: { configurable: true }, inAsync: { configurable: true }, canAwait: { configurable: true }, allowSuper: { configurable: true }, allowDirectSuper: { configurable: true }, treatFunctionsAsVar: { configurable: true }, allowNewDotTarget: { configurable: true }, inClassStaticBlock: { configurable: true } };
Ua.prototype.parse = function() {
  var e = this.options.program || this.startNode();
  return this.nextToken(), this.parseTopLevel(e);
}, Ga.inFunction.get = function() {
  return (2 & this.currentVarScope().flags) > 0;
}, Ga.inGenerator.get = function() {
  return (8 & this.currentVarScope().flags) > 0 && !this.currentVarScope().inClassFieldInit;
}, Ga.inAsync.get = function() {
  return (4 & this.currentVarScope().flags) > 0 && !this.currentVarScope().inClassFieldInit;
}, Ga.canAwait.get = function() {
  for (var e = this.scopeStack.length - 1; e >= 0; e--) {
    var t = this.scopeStack[e];
    if (t.inClassFieldInit || 256 & t.flags)
      return false;
    if (2 & t.flags)
      return (4 & t.flags) > 0;
  }
  return this.inModule && this.options.ecmaVersion >= 13 || this.options.allowAwaitOutsideFunction;
}, Ga.allowSuper.get = function() {
  var e = this.currentThisScope(), t = e.flags, s = e.inClassFieldInit;
  return (64 & t) > 0 || s || this.options.allowSuperOutsideMethod;
}, Ga.allowDirectSuper.get = function() {
  return (128 & this.currentThisScope().flags) > 0;
}, Ga.treatFunctionsAsVar.get = function() {
  return this.treatFunctionsAsVarInScope(this.currentScope());
}, Ga.allowNewDotTarget.get = function() {
  var e = this.currentThisScope(), t = e.flags, s = e.inClassFieldInit;
  return (258 & t) > 0 || s;
}, Ga.inClassStaticBlock.get = function() {
  return (256 & this.currentVarScope().flags) > 0;
}, Ua.extend = function() {
  for (var e = [], t = arguments.length; t--; )
    e[t] = arguments[t];
  for (var s = this, i = 0; i < e.length; i++)
    s = e[i](s);
  return s;
}, Ua.parse = function(e, t) {
  return new this(t, e).parse();
}, Ua.parseExpressionAt = function(e, t, s) {
  var i = new this(s, e, t);
  return i.nextToken(), i.parseExpression();
}, Ua.tokenizer = function(e, t) {
  return new this(t, e);
}, Object.defineProperties(Ua.prototype, Ga);
var Ha = Ua.prototype, qa = /^(?:'((?:\\.|[^'\\])*?)'|"((?:\\.|[^"\\])*?)")/;
Ha.strictDirective = function(e) {
  if (this.options.ecmaVersion < 5)
    return false;
  for (; ; ) {
    Ia.lastIndex = e, e += Ia.exec(this.input)[0].length;
    var t = qa.exec(this.input.slice(e));
    if (!t)
      return false;
    if ((t[1] || t[2]) === "use strict") {
      Ia.lastIndex = e + t[0].length;
      var s = Ia.exec(this.input), i = s.index + s[0].length, n2 = this.input.charAt(i);
      return n2 === ";" || n2 === "}" || Sa.test(s[0]) && !(/[(`.[+\-/*%<>=,?^&]/.test(n2) || n2 === "!" && this.input.charAt(i + 1) === "=");
    }
    e += t[0].length, Ia.lastIndex = e, e += Ia.exec(this.input)[0].length, this.input[e] === ";" && e++;
  }
}, Ha.eat = function(e) {
  return this.type === e && (this.next(), true);
}, Ha.isContextual = function(e) {
  return this.type === Aa.name && this.value === e && !this.containsEsc;
}, Ha.eatContextual = function(e) {
  return !!this.isContextual(e) && (this.next(), true);
}, Ha.expectContextual = function(e) {
  this.eatContextual(e) || this.unexpected();
}, Ha.canInsertSemicolon = function() {
  return this.type === Aa.eof || this.type === Aa.braceR || Sa.test(this.input.slice(this.lastTokEnd, this.start));
}, Ha.insertSemicolon = function() {
  if (this.canInsertSemicolon())
    return this.options.onInsertedSemicolon && this.options.onInsertedSemicolon(this.lastTokEnd, this.lastTokEndLoc), true;
}, Ha.semicolon = function() {
  this.eat(Aa.semi) || this.insertSemicolon() || this.unexpected();
}, Ha.afterTrailingComma = function(e, t) {
  if (this.type === e)
    return this.options.onTrailingComma && this.options.onTrailingComma(this.lastTokStart, this.lastTokStartLoc), t || this.next(), true;
}, Ha.expect = function(e) {
  this.eat(e) || this.unexpected();
}, Ha.unexpected = function(e) {
  this.raise(e != null ? e : this.start, "Unexpected token");
};
var Ka = function() {
  this.shorthandAssign = this.trailingComma = this.parenthesizedAssign = this.parenthesizedBind = this.doubleProto = -1;
};
Ha.checkPatternErrors = function(e, t) {
  if (e) {
    e.trailingComma > -1 && this.raiseRecoverable(e.trailingComma, "Comma is not permitted after the rest element");
    var s = t ? e.parenthesizedAssign : e.parenthesizedBind;
    s > -1 && this.raiseRecoverable(s, "Parenthesized pattern");
  }
}, Ha.checkExpressionErrors = function(e, t) {
  if (!e)
    return false;
  var s = e.shorthandAssign, i = e.doubleProto;
  if (!t)
    return s >= 0 || i >= 0;
  s >= 0 && this.raise(s, "Shorthand property assignments are valid only in destructuring patterns"), i >= 0 && this.raiseRecoverable(i, "Redefinition of __proto__ property");
}, Ha.checkYieldAwaitInDefaultParams = function() {
  this.yieldPos && (!this.awaitPos || this.yieldPos < this.awaitPos) && this.raise(this.yieldPos, "Yield expression cannot be a default value"), this.awaitPos && this.raise(this.awaitPos, "Await expression cannot be a default value");
}, Ha.isSimpleAssignTarget = function(e) {
  return e.type === "ParenthesizedExpression" ? this.isSimpleAssignTarget(e.expression) : e.type === "Identifier" || e.type === "MemberExpression";
};
var Xa = Ua.prototype;
Xa.parseTopLevel = function(e) {
  var t = /* @__PURE__ */ Object.create(null);
  for (e.body || (e.body = []); this.type !== Aa.eof; ) {
    var s = this.parseStatement(null, true, t);
    e.body.push(s);
  }
  if (this.inModule)
    for (var i = 0, n2 = Object.keys(this.undefinedExports); i < n2.length; i += 1) {
      var r2 = n2[i];
      this.raiseRecoverable(this.undefinedExports[r2].start, "Export '" + r2 + "' is not defined");
    }
  return this.adaptDirectivePrologue(e.body), this.next(), e.sourceType = this.options.sourceType, this.finishNode(e, "Program");
};
var Ya = { kind: "loop" }, Qa = { kind: "switch" };
Xa.isLet = function(e) {
  if (this.options.ecmaVersion < 6 || !this.isContextual("let"))
    return false;
  Ia.lastIndex = this.pos;
  var t = Ia.exec(this.input), s = this.pos + t[0].length, i = this.input.charCodeAt(s);
  if (i === 91 || i === 92 || i > 55295 && i < 56320)
    return true;
  if (e)
    return false;
  if (i === 123)
    return true;
  if (fa(i, true)) {
    for (var n2 = s + 1; ma(i = this.input.charCodeAt(n2), true); )
      ++n2;
    if (i === 92 || i > 55295 && i < 56320)
      return true;
    var r2 = this.input.slice(s, n2);
    if (!ca.test(r2))
      return true;
  }
  return false;
}, Xa.isAsyncFunction = function() {
  if (this.options.ecmaVersion < 8 || !this.isContextual("async"))
    return false;
  Ia.lastIndex = this.pos;
  var e, t = Ia.exec(this.input), s = this.pos + t[0].length;
  return !(Sa.test(this.input.slice(this.pos, s)) || this.input.slice(s, s + 8) !== "function" || s + 8 !== this.input.length && (ma(e = this.input.charCodeAt(s + 8)) || e > 55295 && e < 56320));
}, Xa.parseStatement = function(e, t, s) {
  var i, n2 = this.type, r2 = this.startNode();
  switch (this.isLet(e) && (n2 = Aa._var, i = "let"), n2) {
    case Aa._break:
    case Aa._continue:
      return this.parseBreakContinueStatement(r2, n2.keyword);
    case Aa._debugger:
      return this.parseDebuggerStatement(r2);
    case Aa._do:
      return this.parseDoStatement(r2);
    case Aa._for:
      return this.parseForStatement(r2);
    case Aa._function:
      return e && (this.strict || e !== "if" && e !== "label") && this.options.ecmaVersion >= 6 && this.unexpected(), this.parseFunctionStatement(r2, false, !e);
    case Aa._class:
      return e && this.unexpected(), this.parseClass(r2, true);
    case Aa._if:
      return this.parseIfStatement(r2);
    case Aa._return:
      return this.parseReturnStatement(r2);
    case Aa._switch:
      return this.parseSwitchStatement(r2);
    case Aa._throw:
      return this.parseThrowStatement(r2);
    case Aa._try:
      return this.parseTryStatement(r2);
    case Aa._const:
    case Aa._var:
      return i = i || this.value, e && i !== "var" && this.unexpected(), this.parseVarStatement(r2, i);
    case Aa._while:
      return this.parseWhileStatement(r2);
    case Aa._with:
      return this.parseWithStatement(r2);
    case Aa.braceL:
      return this.parseBlock(true, r2);
    case Aa.semi:
      return this.parseEmptyStatement(r2);
    case Aa._export:
    case Aa._import:
      if (this.options.ecmaVersion > 10 && n2 === Aa._import) {
        Ia.lastIndex = this.pos;
        var a2 = Ia.exec(this.input), o2 = this.pos + a2[0].length, h2 = this.input.charCodeAt(o2);
        if (h2 === 40 || h2 === 46)
          return this.parseExpressionStatement(r2, this.parseExpression());
      }
      return this.options.allowImportExportEverywhere || (t || this.raise(this.start, "'import' and 'export' may only appear at the top level"), this.inModule || this.raise(this.start, "'import' and 'export' may appear only with 'sourceType: module'")), n2 === Aa._import ? this.parseImport(r2) : this.parseExport(r2, s);
    default:
      if (this.isAsyncFunction())
        return e && this.unexpected(), this.next(), this.parseFunctionStatement(r2, true, !e);
      var l2 = this.value, c2 = this.parseExpression();
      return n2 === Aa.name && c2.type === "Identifier" && this.eat(Aa.colon) ? this.parseLabeledStatement(r2, l2, c2, e) : this.parseExpressionStatement(r2, c2);
  }
}, Xa.parseBreakContinueStatement = function(e, t) {
  var s = t === "break";
  this.next(), this.eat(Aa.semi) || this.insertSemicolon() ? e.label = null : this.type !== Aa.name ? this.unexpected() : (e.label = this.parseIdent(), this.semicolon());
  for (var i = 0; i < this.labels.length; ++i) {
    var n2 = this.labels[i];
    if (e.label == null || n2.name === e.label.name) {
      if (n2.kind != null && (s || n2.kind === "loop"))
        break;
      if (e.label && s)
        break;
    }
  }
  return i === this.labels.length && this.raise(e.start, "Unsyntactic " + t), this.finishNode(e, s ? "BreakStatement" : "ContinueStatement");
}, Xa.parseDebuggerStatement = function(e) {
  return this.next(), this.semicolon(), this.finishNode(e, "DebuggerStatement");
}, Xa.parseDoStatement = function(e) {
  return this.next(), this.labels.push(Ya), e.body = this.parseStatement("do"), this.labels.pop(), this.expect(Aa._while), e.test = this.parseParenExpression(), this.options.ecmaVersion >= 6 ? this.eat(Aa.semi) : this.semicolon(), this.finishNode(e, "DoWhileStatement");
}, Xa.parseForStatement = function(e) {
  this.next();
  var t = this.options.ecmaVersion >= 9 && this.canAwait && this.eatContextual("await") ? this.lastTokStart : -1;
  if (this.labels.push(Ya), this.enterScope(0), this.expect(Aa.parenL), this.type === Aa.semi)
    return t > -1 && this.unexpected(t), this.parseFor(e, null);
  var s = this.isLet();
  if (this.type === Aa._var || this.type === Aa._const || s) {
    var i = this.startNode(), n2 = s ? "let" : this.value;
    return this.next(), this.parseVar(i, true, n2), this.finishNode(i, "VariableDeclaration"), (this.type === Aa._in || this.options.ecmaVersion >= 6 && this.isContextual("of")) && i.declarations.length === 1 ? (this.options.ecmaVersion >= 9 && (this.type === Aa._in ? t > -1 && this.unexpected(t) : e.await = t > -1), this.parseForIn(e, i)) : (t > -1 && this.unexpected(t), this.parseFor(e, i));
  }
  var r2 = this.isContextual("let"), a2 = false, o2 = new Ka(), h2 = this.parseExpression(!(t > -1) || "await", o2);
  return this.type === Aa._in || (a2 = this.options.ecmaVersion >= 6 && this.isContextual("of")) ? (this.options.ecmaVersion >= 9 && (this.type === Aa._in ? t > -1 && this.unexpected(t) : e.await = t > -1), r2 && a2 && this.raise(h2.start, "The left-hand side of a for-of loop may not start with 'let'."), this.toAssignable(h2, false, o2), this.checkLValPattern(h2), this.parseForIn(e, h2)) : (this.checkExpressionErrors(o2, true), t > -1 && this.unexpected(t), this.parseFor(e, h2));
}, Xa.parseFunctionStatement = function(e, t, s) {
  return this.next(), this.parseFunction(e, Ja | (s ? 0 : eo), false, t);
}, Xa.parseIfStatement = function(e) {
  return this.next(), e.test = this.parseParenExpression(), e.consequent = this.parseStatement("if"), e.alternate = this.eat(Aa._else) ? this.parseStatement("if") : null, this.finishNode(e, "IfStatement");
}, Xa.parseReturnStatement = function(e) {
  return this.inFunction || this.options.allowReturnOutsideFunction || this.raise(this.start, "'return' outside of function"), this.next(), this.eat(Aa.semi) || this.insertSemicolon() ? e.argument = null : (e.argument = this.parseExpression(), this.semicolon()), this.finishNode(e, "ReturnStatement");
}, Xa.parseSwitchStatement = function(e) {
  var t;
  this.next(), e.discriminant = this.parseParenExpression(), e.cases = [], this.expect(Aa.braceL), this.labels.push(Qa), this.enterScope(0);
  for (var s = false; this.type !== Aa.braceR; )
    if (this.type === Aa._case || this.type === Aa._default) {
      var i = this.type === Aa._case;
      t && this.finishNode(t, "SwitchCase"), e.cases.push(t = this.startNode()), t.consequent = [], this.next(), i ? t.test = this.parseExpression() : (s && this.raiseRecoverable(this.lastTokStart, "Multiple default clauses"), s = true, t.test = null), this.expect(Aa.colon);
    } else
      t || this.unexpected(), t.consequent.push(this.parseStatement(null));
  return this.exitScope(), t && this.finishNode(t, "SwitchCase"), this.next(), this.labels.pop(), this.finishNode(e, "SwitchStatement");
}, Xa.parseThrowStatement = function(e) {
  return this.next(), Sa.test(this.input.slice(this.lastTokEnd, this.start)) && this.raise(this.lastTokEnd, "Illegal newline after throw"), e.argument = this.parseExpression(), this.semicolon(), this.finishNode(e, "ThrowStatement");
};
var Za = [];
Xa.parseTryStatement = function(e) {
  if (this.next(), e.block = this.parseBlock(), e.handler = null, this.type === Aa._catch) {
    var t = this.startNode();
    if (this.next(), this.eat(Aa.parenL)) {
      t.param = this.parseBindingAtom();
      var s = t.param.type === "Identifier";
      this.enterScope(s ? 32 : 0), this.checkLValPattern(t.param, s ? 4 : 2), this.expect(Aa.parenR);
    } else
      this.options.ecmaVersion < 10 && this.unexpected(), t.param = null, this.enterScope(0);
    t.body = this.parseBlock(false), this.exitScope(), e.handler = this.finishNode(t, "CatchClause");
  }
  return e.finalizer = this.eat(Aa._finally) ? this.parseBlock() : null, e.handler || e.finalizer || this.raise(e.start, "Missing catch or finally clause"), this.finishNode(e, "TryStatement");
}, Xa.parseVarStatement = function(e, t) {
  return this.next(), this.parseVar(e, false, t), this.semicolon(), this.finishNode(e, "VariableDeclaration");
}, Xa.parseWhileStatement = function(e) {
  return this.next(), e.test = this.parseParenExpression(), this.labels.push(Ya), e.body = this.parseStatement("while"), this.labels.pop(), this.finishNode(e, "WhileStatement");
}, Xa.parseWithStatement = function(e) {
  return this.strict && this.raise(this.start, "'with' in strict mode"), this.next(), e.object = this.parseParenExpression(), e.body = this.parseStatement("with"), this.finishNode(e, "WithStatement");
}, Xa.parseEmptyStatement = function(e) {
  return this.next(), this.finishNode(e, "EmptyStatement");
}, Xa.parseLabeledStatement = function(e, t, s, i) {
  for (var n2 = 0, r2 = this.labels; n2 < r2.length; n2 += 1) {
    r2[n2].name === t && this.raise(s.start, "Label '" + t + "' is already declared");
  }
  for (var a2 = this.type.isLoop ? "loop" : this.type === Aa._switch ? "switch" : null, o2 = this.labels.length - 1; o2 >= 0; o2--) {
    var h2 = this.labels[o2];
    if (h2.statementStart !== e.start)
      break;
    h2.statementStart = this.start, h2.kind = a2;
  }
  return this.labels.push({ name: t, kind: a2, statementStart: this.start }), e.body = this.parseStatement(i ? i.indexOf("label") === -1 ? i + "label" : i : "label"), this.labels.pop(), e.label = s, this.finishNode(e, "LabeledStatement");
}, Xa.parseExpressionStatement = function(e, t) {
  return e.expression = t, this.semicolon(), this.finishNode(e, "ExpressionStatement");
}, Xa.parseBlock = function(e, t, s) {
  for (e === void 0 && (e = true), t === void 0 && (t = this.startNode()), t.body = [], this.expect(Aa.braceL), e && this.enterScope(0); this.type !== Aa.braceR; ) {
    var i = this.parseStatement(null);
    t.body.push(i);
  }
  return s && (this.strict = false), this.next(), e && this.exitScope(), this.finishNode(t, "BlockStatement");
}, Xa.parseFor = function(e, t) {
  return e.init = t, this.expect(Aa.semi), e.test = this.type === Aa.semi ? null : this.parseExpression(), this.expect(Aa.semi), e.update = this.type === Aa.parenR ? null : this.parseExpression(), this.expect(Aa.parenR), e.body = this.parseStatement("for"), this.exitScope(), this.labels.pop(), this.finishNode(e, "ForStatement");
}, Xa.parseForIn = function(e, t) {
  var s = this.type === Aa._in;
  return this.next(), t.type === "VariableDeclaration" && t.declarations[0].init != null && (!s || this.options.ecmaVersion < 8 || this.strict || t.kind !== "var" || t.declarations[0].id.type !== "Identifier") && this.raise(t.start, (s ? "for-in" : "for-of") + " loop variable declaration may not have an initializer"), e.left = t, e.right = s ? this.parseExpression() : this.parseMaybeAssign(), this.expect(Aa.parenR), e.body = this.parseStatement("for"), this.exitScope(), this.labels.pop(), this.finishNode(e, s ? "ForInStatement" : "ForOfStatement");
}, Xa.parseVar = function(e, t, s) {
  for (e.declarations = [], e.kind = s; ; ) {
    var i = this.startNode();
    if (this.parseVarId(i, s), this.eat(Aa.eq) ? i.init = this.parseMaybeAssign(t) : s !== "const" || this.type === Aa._in || this.options.ecmaVersion >= 6 && this.isContextual("of") ? i.id.type === "Identifier" || t && (this.type === Aa._in || this.isContextual("of")) ? i.init = null : this.raise(this.lastTokEnd, "Complex binding patterns require an initialization value") : this.unexpected(), e.declarations.push(this.finishNode(i, "VariableDeclarator")), !this.eat(Aa.comma))
      break;
  }
  return e;
}, Xa.parseVarId = function(e, t) {
  e.id = this.parseBindingAtom(), this.checkLValPattern(e.id, t === "var" ? 1 : 2, false);
};
var Ja = 1, eo = 2;
function to(e, t) {
  var s = t.key.name, i = e[s], n2 = "true";
  return t.type !== "MethodDefinition" || t.kind !== "get" && t.kind !== "set" || (n2 = (t.static ? "s" : "i") + t.kind), i === "iget" && n2 === "iset" || i === "iset" && n2 === "iget" || i === "sget" && n2 === "sset" || i === "sset" && n2 === "sget" ? (e[s] = "true", false) : !!i || (e[s] = n2, false);
}
function so(e, t) {
  var s = e.computed, i = e.key;
  return !s && (i.type === "Identifier" && i.name === t || i.type === "Literal" && i.value === t);
}
Xa.parseFunction = function(e, t, s, i, n2) {
  this.initFunction(e), (this.options.ecmaVersion >= 9 || this.options.ecmaVersion >= 6 && !i) && (this.type === Aa.star && t & eo && this.unexpected(), e.generator = this.eat(Aa.star)), this.options.ecmaVersion >= 8 && (e.async = !!i), t & Ja && (e.id = 4 & t && this.type !== Aa.name ? null : this.parseIdent(), !e.id || t & eo || this.checkLValSimple(e.id, this.strict || e.generator || e.async ? this.treatFunctionsAsVar ? 1 : 2 : 3));
  var r2 = this.yieldPos, a2 = this.awaitPos, o2 = this.awaitIdentPos;
  return this.yieldPos = 0, this.awaitPos = 0, this.awaitIdentPos = 0, this.enterScope(ja(e.async, e.generator)), t & Ja || (e.id = this.type === Aa.name ? this.parseIdent() : null), this.parseFunctionParams(e), this.parseFunctionBody(e, s, false, n2), this.yieldPos = r2, this.awaitPos = a2, this.awaitIdentPos = o2, this.finishNode(e, t & Ja ? "FunctionDeclaration" : "FunctionExpression");
}, Xa.parseFunctionParams = function(e) {
  this.expect(Aa.parenL), e.params = this.parseBindingList(Aa.parenR, false, this.options.ecmaVersion >= 8), this.checkYieldAwaitInDefaultParams();
}, Xa.parseClass = function(e, t) {
  this.next();
  var s = this.strict;
  this.strict = true, this.parseClassId(e, t), this.parseClassSuper(e);
  var i = this.enterClassBody(), n2 = this.startNode(), r2 = false;
  for (n2.body = [], this.expect(Aa.braceL); this.type !== Aa.braceR; ) {
    var a2 = this.parseClassElement(e.superClass !== null);
    a2 && (n2.body.push(a2), a2.type === "MethodDefinition" && a2.kind === "constructor" ? (r2 && this.raise(a2.start, "Duplicate constructor in the same class"), r2 = true) : a2.key && a2.key.type === "PrivateIdentifier" && to(i, a2) && this.raiseRecoverable(a2.key.start, "Identifier '#" + a2.key.name + "' has already been declared"));
  }
  return this.strict = s, this.next(), e.body = this.finishNode(n2, "ClassBody"), this.exitClassBody(), this.finishNode(e, t ? "ClassDeclaration" : "ClassExpression");
}, Xa.parseClassElement = function(e) {
  if (this.eat(Aa.semi))
    return null;
  var t = this.options.ecmaVersion, s = this.startNode(), i = "", n2 = false, r2 = false, a2 = "method", o2 = false;
  if (this.eatContextual("static")) {
    if (t >= 13 && this.eat(Aa.braceL))
      return this.parseClassStaticBlock(s), s;
    this.isClassElementNameStart() || this.type === Aa.star ? o2 = true : i = "static";
  }
  if (s.static = o2, !i && t >= 8 && this.eatContextual("async") && (!this.isClassElementNameStart() && this.type !== Aa.star || this.canInsertSemicolon() ? i = "async" : r2 = true), !i && (t >= 9 || !r2) && this.eat(Aa.star) && (n2 = true), !i && !r2 && !n2) {
    var h2 = this.value;
    (this.eatContextual("get") || this.eatContextual("set")) && (this.isClassElementNameStart() ? a2 = h2 : i = h2);
  }
  if (i ? (s.computed = false, s.key = this.startNodeAt(this.lastTokStart, this.lastTokStartLoc), s.key.name = i, this.finishNode(s.key, "Identifier")) : this.parseClassElementName(s), t < 13 || this.type === Aa.parenL || a2 !== "method" || n2 || r2) {
    var l2 = !s.static && so(s, "constructor"), c2 = l2 && e;
    l2 && a2 !== "method" && this.raise(s.key.start, "Constructor can't have get/set modifier"), s.kind = l2 ? "constructor" : a2, this.parseClassMethod(s, n2, r2, c2);
  } else
    this.parseClassField(s);
  return s;
}, Xa.isClassElementNameStart = function() {
  return this.type === Aa.name || this.type === Aa.privateId || this.type === Aa.num || this.type === Aa.string || this.type === Aa.bracketL || this.type.keyword;
}, Xa.parseClassElementName = function(e) {
  this.type === Aa.privateId ? (this.value === "constructor" && this.raise(this.start, "Classes can't have an element named '#constructor'"), e.computed = false, e.key = this.parsePrivateIdent()) : this.parsePropertyName(e);
}, Xa.parseClassMethod = function(e, t, s, i) {
  var n2 = e.key;
  e.kind === "constructor" ? (t && this.raise(n2.start, "Constructor can't be a generator"), s && this.raise(n2.start, "Constructor can't be an async method")) : e.static && so(e, "prototype") && this.raise(n2.start, "Classes may not have a static property named prototype");
  var r2 = e.value = this.parseMethod(t, s, i);
  return e.kind === "get" && r2.params.length !== 0 && this.raiseRecoverable(r2.start, "getter should have no params"), e.kind === "set" && r2.params.length !== 1 && this.raiseRecoverable(r2.start, "setter should have exactly one param"), e.kind === "set" && r2.params[0].type === "RestElement" && this.raiseRecoverable(r2.params[0].start, "Setter cannot use rest params"), this.finishNode(e, "MethodDefinition");
}, Xa.parseClassField = function(e) {
  if (so(e, "constructor") ? this.raise(e.key.start, "Classes can't have a field named 'constructor'") : e.static && so(e, "prototype") && this.raise(e.key.start, "Classes can't have a static field named 'prototype'"), this.eat(Aa.eq)) {
    var t = this.currentThisScope(), s = t.inClassFieldInit;
    t.inClassFieldInit = true, e.value = this.parseMaybeAssign(), t.inClassFieldInit = s;
  } else
    e.value = null;
  return this.semicolon(), this.finishNode(e, "PropertyDefinition");
}, Xa.parseClassStaticBlock = function(e) {
  e.body = [];
  var t = this.labels;
  for (this.labels = [], this.enterScope(320); this.type !== Aa.braceR; ) {
    var s = this.parseStatement(null);
    e.body.push(s);
  }
  return this.next(), this.exitScope(), this.labels = t, this.finishNode(e, "StaticBlock");
}, Xa.parseClassId = function(e, t) {
  this.type === Aa.name ? (e.id = this.parseIdent(), t && this.checkLValSimple(e.id, 2, false)) : (t === true && this.unexpected(), e.id = null);
}, Xa.parseClassSuper = function(e) {
  e.superClass = this.eat(Aa._extends) ? this.parseExprSubscripts(false) : null;
}, Xa.enterClassBody = function() {
  var e = { declared: /* @__PURE__ */ Object.create(null), used: [] };
  return this.privateNameStack.push(e), e.declared;
}, Xa.exitClassBody = function() {
  for (var e = this.privateNameStack.pop(), t = e.declared, s = e.used, i = this.privateNameStack.length, n2 = i === 0 ? null : this.privateNameStack[i - 1], r2 = 0; r2 < s.length; ++r2) {
    var a2 = s[r2];
    Ta(t, a2.name) || (n2 ? n2.used.push(a2) : this.raiseRecoverable(a2.start, "Private field '#" + a2.name + "' must be declared in an enclosing class"));
  }
}, Xa.parseExport = function(e, t) {
  if (this.next(), this.eat(Aa.star))
    return this.options.ecmaVersion >= 11 && (this.eatContextual("as") ? (e.exported = this.parseModuleExportName(), this.checkExport(t, e.exported, this.lastTokStart)) : e.exported = null), this.expectContextual("from"), this.type !== Aa.string && this.unexpected(), e.source = this.parseExprAtom(), this.semicolon(), this.finishNode(e, "ExportAllDeclaration");
  if (this.eat(Aa._default)) {
    var s;
    if (this.checkExport(t, "default", this.lastTokStart), this.type === Aa._function || (s = this.isAsyncFunction())) {
      var i = this.startNode();
      this.next(), s && this.next(), e.declaration = this.parseFunction(i, 4 | Ja, false, s);
    } else if (this.type === Aa._class) {
      var n2 = this.startNode();
      e.declaration = this.parseClass(n2, "nullableID");
    } else
      e.declaration = this.parseMaybeAssign(), this.semicolon();
    return this.finishNode(e, "ExportDefaultDeclaration");
  }
  if (this.shouldParseExportStatement())
    e.declaration = this.parseStatement(null), e.declaration.type === "VariableDeclaration" ? this.checkVariableExport(t, e.declaration.declarations) : this.checkExport(t, e.declaration.id, e.declaration.id.start), e.specifiers = [], e.source = null;
  else {
    if (e.declaration = null, e.specifiers = this.parseExportSpecifiers(t), this.eatContextual("from"))
      this.type !== Aa.string && this.unexpected(), e.source = this.parseExprAtom();
    else {
      for (var r2 = 0, a2 = e.specifiers; r2 < a2.length; r2 += 1) {
        var o2 = a2[r2];
        this.checkUnreserved(o2.local), this.checkLocalExport(o2.local), o2.local.type === "Literal" && this.raise(o2.local.start, "A string literal cannot be used as an exported binding without `from`.");
      }
      e.source = null;
    }
    this.semicolon();
  }
  return this.finishNode(e, "ExportNamedDeclaration");
}, Xa.checkExport = function(e, t, s) {
  e && (typeof t != "string" && (t = t.type === "Identifier" ? t.name : t.value), Ta(e, t) && this.raiseRecoverable(s, "Duplicate export '" + t + "'"), e[t] = true);
}, Xa.checkPatternExport = function(e, t) {
  var s = t.type;
  if (s === "Identifier")
    this.checkExport(e, t, t.start);
  else if (s === "ObjectPattern")
    for (var i = 0, n2 = t.properties; i < n2.length; i += 1) {
      var r2 = n2[i];
      this.checkPatternExport(e, r2);
    }
  else if (s === "ArrayPattern")
    for (var a2 = 0, o2 = t.elements; a2 < o2.length; a2 += 1) {
      var h2 = o2[a2];
      h2 && this.checkPatternExport(e, h2);
    }
  else
    s === "Property" ? this.checkPatternExport(e, t.value) : s === "AssignmentPattern" ? this.checkPatternExport(e, t.left) : s === "RestElement" ? this.checkPatternExport(e, t.argument) : s === "ParenthesizedExpression" && this.checkPatternExport(e, t.expression);
}, Xa.checkVariableExport = function(e, t) {
  if (e)
    for (var s = 0, i = t; s < i.length; s += 1) {
      var n2 = i[s];
      this.checkPatternExport(e, n2.id);
    }
}, Xa.shouldParseExportStatement = function() {
  return this.type.keyword === "var" || this.type.keyword === "const" || this.type.keyword === "class" || this.type.keyword === "function" || this.isLet() || this.isAsyncFunction();
}, Xa.parseExportSpecifiers = function(e) {
  var t = [], s = true;
  for (this.expect(Aa.braceL); !this.eat(Aa.braceR); ) {
    if (s)
      s = false;
    else if (this.expect(Aa.comma), this.afterTrailingComma(Aa.braceR))
      break;
    var i = this.startNode();
    i.local = this.parseModuleExportName(), i.exported = this.eatContextual("as") ? this.parseModuleExportName() : i.local, this.checkExport(e, i.exported, i.exported.start), t.push(this.finishNode(i, "ExportSpecifier"));
  }
  return t;
}, Xa.parseImport = function(e) {
  return this.next(), this.type === Aa.string ? (e.specifiers = Za, e.source = this.parseExprAtom()) : (e.specifiers = this.parseImportSpecifiers(), this.expectContextual("from"), e.source = this.type === Aa.string ? this.parseExprAtom() : this.unexpected()), this.semicolon(), this.finishNode(e, "ImportDeclaration");
}, Xa.parseImportSpecifiers = function() {
  var e = [], t = true;
  if (this.type === Aa.name) {
    var s = this.startNode();
    if (s.local = this.parseIdent(), this.checkLValSimple(s.local, 2), e.push(this.finishNode(s, "ImportDefaultSpecifier")), !this.eat(Aa.comma))
      return e;
  }
  if (this.type === Aa.star) {
    var i = this.startNode();
    return this.next(), this.expectContextual("as"), i.local = this.parseIdent(), this.checkLValSimple(i.local, 2), e.push(this.finishNode(i, "ImportNamespaceSpecifier")), e;
  }
  for (this.expect(Aa.braceL); !this.eat(Aa.braceR); ) {
    if (t)
      t = false;
    else if (this.expect(Aa.comma), this.afterTrailingComma(Aa.braceR))
      break;
    var n2 = this.startNode();
    n2.imported = this.parseModuleExportName(), this.eatContextual("as") ? n2.local = this.parseIdent() : (this.checkUnreserved(n2.imported), n2.local = n2.imported), this.checkLValSimple(n2.local, 2), e.push(this.finishNode(n2, "ImportSpecifier"));
  }
  return e;
}, Xa.parseModuleExportName = function() {
  if (this.options.ecmaVersion >= 13 && this.type === Aa.string) {
    var e = this.parseLiteral(this.value);
    return La.test(e.value) && this.raise(e.start, "An export name cannot include a lone surrogate."), e;
  }
  return this.parseIdent(true);
}, Xa.adaptDirectivePrologue = function(e) {
  for (var t = 0; t < e.length && this.isDirectiveCandidate(e[t]); ++t)
    e[t].directive = e[t].expression.raw.slice(1, -1);
}, Xa.isDirectiveCandidate = function(e) {
  return e.type === "ExpressionStatement" && e.expression.type === "Literal" && typeof e.expression.value == "string" && (this.input[e.start] === '"' || this.input[e.start] === "'");
};
var io = Ua.prototype;
io.toAssignable = function(e, t, s) {
  if (this.options.ecmaVersion >= 6 && e)
    switch (e.type) {
      case "Identifier":
        this.inAsync && e.name === "await" && this.raise(e.start, "Cannot use 'await' as identifier inside an async function");
        break;
      case "ObjectPattern":
      case "ArrayPattern":
      case "AssignmentPattern":
      case "RestElement":
        break;
      case "ObjectExpression":
        e.type = "ObjectPattern", s && this.checkPatternErrors(s, true);
        for (var i = 0, n2 = e.properties; i < n2.length; i += 1) {
          var r2 = n2[i];
          this.toAssignable(r2, t), r2.type !== "RestElement" || r2.argument.type !== "ArrayPattern" && r2.argument.type !== "ObjectPattern" || this.raise(r2.argument.start, "Unexpected token");
        }
        break;
      case "Property":
        e.kind !== "init" && this.raise(e.key.start, "Object pattern can't contain getter or setter"), this.toAssignable(e.value, t);
        break;
      case "ArrayExpression":
        e.type = "ArrayPattern", s && this.checkPatternErrors(s, true), this.toAssignableList(e.elements, t);
        break;
      case "SpreadElement":
        e.type = "RestElement", this.toAssignable(e.argument, t), e.argument.type === "AssignmentPattern" && this.raise(e.argument.start, "Rest elements cannot have a default value");
        break;
      case "AssignmentExpression":
        e.operator !== "=" && this.raise(e.left.end, "Only '=' operator can be used for specifying default value."), e.type = "AssignmentPattern", delete e.operator, this.toAssignable(e.left, t);
        break;
      case "ParenthesizedExpression":
        this.toAssignable(e.expression, t, s);
        break;
      case "ChainExpression":
        this.raiseRecoverable(e.start, "Optional chaining cannot appear in left-hand side");
        break;
      case "MemberExpression":
        if (!t)
          break;
      default:
        this.raise(e.start, "Assigning to rvalue");
    }
  else
    s && this.checkPatternErrors(s, true);
  return e;
}, io.toAssignableList = function(e, t) {
  for (var s = e.length, i = 0; i < s; i++) {
    var n2 = e[i];
    n2 && this.toAssignable(n2, t);
  }
  if (s) {
    var r2 = e[s - 1];
    this.options.ecmaVersion === 6 && t && r2 && r2.type === "RestElement" && r2.argument.type !== "Identifier" && this.unexpected(r2.argument.start);
  }
  return e;
}, io.parseSpread = function(e) {
  var t = this.startNode();
  return this.next(), t.argument = this.parseMaybeAssign(false, e), this.finishNode(t, "SpreadElement");
}, io.parseRestBinding = function() {
  var e = this.startNode();
  return this.next(), this.options.ecmaVersion === 6 && this.type !== Aa.name && this.unexpected(), e.argument = this.parseBindingAtom(), this.finishNode(e, "RestElement");
}, io.parseBindingAtom = function() {
  if (this.options.ecmaVersion >= 6)
    switch (this.type) {
      case Aa.bracketL:
        var e = this.startNode();
        return this.next(), e.elements = this.parseBindingList(Aa.bracketR, true, true), this.finishNode(e, "ArrayPattern");
      case Aa.braceL:
        return this.parseObj(true);
    }
  return this.parseIdent();
}, io.parseBindingList = function(e, t, s) {
  for (var i = [], n2 = true; !this.eat(e); )
    if (n2 ? n2 = false : this.expect(Aa.comma), t && this.type === Aa.comma)
      i.push(null);
    else {
      if (s && this.afterTrailingComma(e))
        break;
      if (this.type === Aa.ellipsis) {
        var r2 = this.parseRestBinding();
        this.parseBindingListItem(r2), i.push(r2), this.type === Aa.comma && this.raise(this.start, "Comma is not permitted after the rest element"), this.expect(e);
        break;
      }
      var a2 = this.parseMaybeDefault(this.start, this.startLoc);
      this.parseBindingListItem(a2), i.push(a2);
    }
  return i;
}, io.parseBindingListItem = function(e) {
  return e;
}, io.parseMaybeDefault = function(e, t, s) {
  if (s = s || this.parseBindingAtom(), this.options.ecmaVersion < 6 || !this.eat(Aa.eq))
    return s;
  var i = this.startNodeAt(e, t);
  return i.left = s, i.right = this.parseMaybeAssign(), this.finishNode(i, "AssignmentPattern");
}, io.checkLValSimple = function(e, t, s) {
  t === void 0 && (t = 0);
  var i = t !== 0;
  switch (e.type) {
    case "Identifier":
      this.strict && this.reservedWordsStrictBind.test(e.name) && this.raiseRecoverable(e.start, (i ? "Binding " : "Assigning to ") + e.name + " in strict mode"), i && (t === 2 && e.name === "let" && this.raiseRecoverable(e.start, "let is disallowed as a lexically bound name"), s && (Ta(s, e.name) && this.raiseRecoverable(e.start, "Argument name clash"), s[e.name] = true), t !== 5 && this.declareName(e.name, t, e.start));
      break;
    case "ChainExpression":
      this.raiseRecoverable(e.start, "Optional chaining cannot appear in left-hand side");
      break;
    case "MemberExpression":
      i && this.raiseRecoverable(e.start, "Binding member expression");
      break;
    case "ParenthesizedExpression":
      return i && this.raiseRecoverable(e.start, "Binding parenthesized expression"), this.checkLValSimple(e.expression, t, s);
    default:
      this.raise(e.start, (i ? "Binding" : "Assigning to") + " rvalue");
  }
}, io.checkLValPattern = function(e, t, s) {
  switch (t === void 0 && (t = 0), e.type) {
    case "ObjectPattern":
      for (var i = 0, n2 = e.properties; i < n2.length; i += 1) {
        var r2 = n2[i];
        this.checkLValInnerPattern(r2, t, s);
      }
      break;
    case "ArrayPattern":
      for (var a2 = 0, o2 = e.elements; a2 < o2.length; a2 += 1) {
        var h2 = o2[a2];
        h2 && this.checkLValInnerPattern(h2, t, s);
      }
      break;
    default:
      this.checkLValSimple(e, t, s);
  }
}, io.checkLValInnerPattern = function(e, t, s) {
  switch (t === void 0 && (t = 0), e.type) {
    case "Property":
      this.checkLValInnerPattern(e.value, t, s);
      break;
    case "AssignmentPattern":
      this.checkLValPattern(e.left, t, s);
      break;
    case "RestElement":
      this.checkLValPattern(e.argument, t, s);
      break;
    default:
      this.checkLValPattern(e, t, s);
  }
};
var no = function(e, t, s, i, n2) {
  this.token = e, this.isExpr = !!t, this.preserveSpace = !!s, this.override = i, this.generator = !!n2;
}, ro = { b_stat: new no("{", false), b_expr: new no("{", true), b_tmpl: new no("${", false), p_stat: new no("(", false), p_expr: new no("(", true), q_tmpl: new no("`", true, true, function(e) {
  return e.tryReadTemplateToken();
}), f_stat: new no("function", false), f_expr: new no("function", true), f_expr_gen: new no("function", true, false, null, true), f_gen: new no("function", false, false, null, true) }, ao = Ua.prototype;
ao.initialContext = function() {
  return [ro.b_stat];
}, ao.curContext = function() {
  return this.context[this.context.length - 1];
}, ao.braceIsBlock = function(e) {
  var t = this.curContext();
  return t === ro.f_expr || t === ro.f_stat || (e !== Aa.colon || t !== ro.b_stat && t !== ro.b_expr ? e === Aa._return || e === Aa.name && this.exprAllowed ? Sa.test(this.input.slice(this.lastTokEnd, this.start)) : e === Aa._else || e === Aa.semi || e === Aa.eof || e === Aa.parenR || e === Aa.arrow || (e === Aa.braceL ? t === ro.b_stat : e !== Aa._var && e !== Aa._const && e !== Aa.name && !this.exprAllowed) : !t.isExpr);
}, ao.inGeneratorContext = function() {
  for (var e = this.context.length - 1; e >= 1; e--) {
    var t = this.context[e];
    if (t.token === "function")
      return t.generator;
  }
  return false;
}, ao.updateContext = function(e) {
  var t, s = this.type;
  s.keyword && e === Aa.dot ? this.exprAllowed = false : (t = s.updateContext) ? t.call(this, e) : this.exprAllowed = s.beforeExpr;
}, ao.overrideContext = function(e) {
  this.curContext() !== e && (this.context[this.context.length - 1] = e);
}, Aa.parenR.updateContext = Aa.braceR.updateContext = function() {
  if (this.context.length !== 1) {
    var e = this.context.pop();
    e === ro.b_stat && this.curContext().token === "function" && (e = this.context.pop()), this.exprAllowed = !e.isExpr;
  } else
    this.exprAllowed = true;
}, Aa.braceL.updateContext = function(e) {
  this.context.push(this.braceIsBlock(e) ? ro.b_stat : ro.b_expr), this.exprAllowed = true;
}, Aa.dollarBraceL.updateContext = function() {
  this.context.push(ro.b_tmpl), this.exprAllowed = true;
}, Aa.parenL.updateContext = function(e) {
  var t = e === Aa._if || e === Aa._for || e === Aa._with || e === Aa._while;
  this.context.push(t ? ro.p_stat : ro.p_expr), this.exprAllowed = true;
}, Aa.incDec.updateContext = function() {
}, Aa._function.updateContext = Aa._class.updateContext = function(e) {
  !e.beforeExpr || e === Aa._else || e === Aa.semi && this.curContext() !== ro.p_stat || e === Aa._return && Sa.test(this.input.slice(this.lastTokEnd, this.start)) || (e === Aa.colon || e === Aa.braceL) && this.curContext() === ro.b_stat ? this.context.push(ro.f_stat) : this.context.push(ro.f_expr), this.exprAllowed = false;
}, Aa.backQuote.updateContext = function() {
  this.curContext() === ro.q_tmpl ? this.context.pop() : this.context.push(ro.q_tmpl), this.exprAllowed = false;
}, Aa.star.updateContext = function(e) {
  if (e === Aa._function) {
    var t = this.context.length - 1;
    this.context[t] === ro.f_expr ? this.context[t] = ro.f_expr_gen : this.context[t] = ro.f_gen;
  }
  this.exprAllowed = true;
}, Aa.name.updateContext = function(e) {
  var t = false;
  this.options.ecmaVersion >= 6 && e !== Aa.dot && (this.value === "of" && !this.exprAllowed || this.value === "yield" && this.inGeneratorContext()) && (t = true), this.exprAllowed = t;
};
var oo = Ua.prototype;
function ho(e) {
  return e.type === "MemberExpression" && e.property.type === "PrivateIdentifier" || e.type === "ChainExpression" && ho(e.expression);
}
oo.checkPropClash = function(e, t, s) {
  if (!(this.options.ecmaVersion >= 9 && e.type === "SpreadElement" || this.options.ecmaVersion >= 6 && (e.computed || e.method || e.shorthand))) {
    var i, n2 = e.key;
    switch (n2.type) {
      case "Identifier":
        i = n2.name;
        break;
      case "Literal":
        i = String(n2.value);
        break;
      default:
        return;
    }
    var r2 = e.kind;
    if (this.options.ecmaVersion >= 6)
      i === "__proto__" && r2 === "init" && (t.proto && (s ? s.doubleProto < 0 && (s.doubleProto = n2.start) : this.raiseRecoverable(n2.start, "Redefinition of __proto__ property")), t.proto = true);
    else {
      var a2 = t[i = "$" + i];
      if (a2)
        (r2 === "init" ? this.strict && a2.init || a2.get || a2.set : a2.init || a2[r2]) && this.raiseRecoverable(n2.start, "Redefinition of property");
      else
        a2 = t[i] = { init: false, get: false, set: false };
      a2[r2] = true;
    }
  }
}, oo.parseExpression = function(e, t) {
  var s = this.start, i = this.startLoc, n2 = this.parseMaybeAssign(e, t);
  if (this.type === Aa.comma) {
    var r2 = this.startNodeAt(s, i);
    for (r2.expressions = [n2]; this.eat(Aa.comma); )
      r2.expressions.push(this.parseMaybeAssign(e, t));
    return this.finishNode(r2, "SequenceExpression");
  }
  return n2;
}, oo.parseMaybeAssign = function(e, t, s) {
  if (this.isContextual("yield")) {
    if (this.inGenerator)
      return this.parseYield(e);
    this.exprAllowed = false;
  }
  var i = false, n2 = -1, r2 = -1, a2 = -1;
  t ? (n2 = t.parenthesizedAssign, r2 = t.trailingComma, a2 = t.doubleProto, t.parenthesizedAssign = t.trailingComma = -1) : (t = new Ka(), i = true);
  var o2 = this.start, h2 = this.startLoc;
  this.type !== Aa.parenL && this.type !== Aa.name || (this.potentialArrowAt = this.start, this.potentialArrowInForAwait = e === "await");
  var l2 = this.parseMaybeConditional(e, t);
  if (s && (l2 = s.call(this, l2, o2, h2)), this.type.isAssign) {
    var c2 = this.startNodeAt(o2, h2);
    return c2.operator = this.value, this.type === Aa.eq && (l2 = this.toAssignable(l2, false, t)), i || (t.parenthesizedAssign = t.trailingComma = t.doubleProto = -1), t.shorthandAssign >= l2.start && (t.shorthandAssign = -1), this.type === Aa.eq ? this.checkLValPattern(l2) : this.checkLValSimple(l2), c2.left = l2, this.next(), c2.right = this.parseMaybeAssign(e), a2 > -1 && (t.doubleProto = a2), this.finishNode(c2, "AssignmentExpression");
  }
  return i && this.checkExpressionErrors(t, true), n2 > -1 && (t.parenthesizedAssign = n2), r2 > -1 && (t.trailingComma = r2), l2;
}, oo.parseMaybeConditional = function(e, t) {
  var s = this.start, i = this.startLoc, n2 = this.parseExprOps(e, t);
  if (this.checkExpressionErrors(t))
    return n2;
  if (this.eat(Aa.question)) {
    var r2 = this.startNodeAt(s, i);
    return r2.test = n2, r2.consequent = this.parseMaybeAssign(), this.expect(Aa.colon), r2.alternate = this.parseMaybeAssign(e), this.finishNode(r2, "ConditionalExpression");
  }
  return n2;
}, oo.parseExprOps = function(e, t) {
  var s = this.start, i = this.startLoc, n2 = this.parseMaybeUnary(t, false, false, e);
  return this.checkExpressionErrors(t) || n2.start === s && n2.type === "ArrowFunctionExpression" ? n2 : this.parseExprOp(n2, s, i, -1, e);
}, oo.parseExprOp = function(e, t, s, i, n2) {
  var r2 = this.type.binop;
  if (r2 != null && (!n2 || this.type !== Aa._in) && r2 > i) {
    var a2 = this.type === Aa.logicalOR || this.type === Aa.logicalAND, o2 = this.type === Aa.coalesce;
    o2 && (r2 = Aa.logicalAND.binop);
    var h2 = this.value;
    this.next();
    var l2 = this.start, c2 = this.startLoc, u2 = this.parseExprOp(this.parseMaybeUnary(null, false, false, n2), l2, c2, r2, n2), d2 = this.buildBinary(t, s, e, u2, h2, a2 || o2);
    return (a2 && this.type === Aa.coalesce || o2 && (this.type === Aa.logicalOR || this.type === Aa.logicalAND)) && this.raiseRecoverable(this.start, "Logical expressions and coalesce expressions cannot be mixed. Wrap either by parentheses"), this.parseExprOp(d2, t, s, i, n2);
  }
  return e;
}, oo.buildBinary = function(e, t, s, i, n2, r2) {
  i.type === "PrivateIdentifier" && this.raise(i.start, "Private identifier can only be left side of binary expression");
  var a2 = this.startNodeAt(e, t);
  return a2.left = s, a2.operator = n2, a2.right = i, this.finishNode(a2, r2 ? "LogicalExpression" : "BinaryExpression");
}, oo.parseMaybeUnary = function(e, t, s, i) {
  var n2, r2 = this.start, a2 = this.startLoc;
  if (this.isContextual("await") && this.canAwait)
    n2 = this.parseAwait(i), t = true;
  else if (this.type.prefix) {
    var o2 = this.startNode(), h2 = this.type === Aa.incDec;
    o2.operator = this.value, o2.prefix = true, this.next(), o2.argument = this.parseMaybeUnary(null, true, h2, i), this.checkExpressionErrors(e, true), h2 ? this.checkLValSimple(o2.argument) : this.strict && o2.operator === "delete" && o2.argument.type === "Identifier" ? this.raiseRecoverable(o2.start, "Deleting local variable in strict mode") : o2.operator === "delete" && ho(o2.argument) ? this.raiseRecoverable(o2.start, "Private fields can not be deleted") : t = true, n2 = this.finishNode(o2, h2 ? "UpdateExpression" : "UnaryExpression");
  } else if (t || this.type !== Aa.privateId) {
    if (n2 = this.parseExprSubscripts(e, i), this.checkExpressionErrors(e))
      return n2;
    for (; this.type.postfix && !this.canInsertSemicolon(); ) {
      var l2 = this.startNodeAt(r2, a2);
      l2.operator = this.value, l2.prefix = false, l2.argument = n2, this.checkLValSimple(n2), this.next(), n2 = this.finishNode(l2, "UpdateExpression");
    }
  } else
    (i || this.privateNameStack.length === 0) && this.unexpected(), n2 = this.parsePrivateIdent(), this.type !== Aa._in && this.unexpected();
  return s || !this.eat(Aa.starstar) ? n2 : t ? void this.unexpected(this.lastTokStart) : this.buildBinary(r2, a2, n2, this.parseMaybeUnary(null, false, false, i), "**", false);
}, oo.parseExprSubscripts = function(e, t) {
  var s = this.start, i = this.startLoc, n2 = this.parseExprAtom(e, t);
  if (n2.type === "ArrowFunctionExpression" && this.input.slice(this.lastTokStart, this.lastTokEnd) !== ")")
    return n2;
  var r2 = this.parseSubscripts(n2, s, i, false, t);
  return e && r2.type === "MemberExpression" && (e.parenthesizedAssign >= r2.start && (e.parenthesizedAssign = -1), e.parenthesizedBind >= r2.start && (e.parenthesizedBind = -1), e.trailingComma >= r2.start && (e.trailingComma = -1)), r2;
}, oo.parseSubscripts = function(e, t, s, i, n2) {
  for (var r2 = this.options.ecmaVersion >= 8 && e.type === "Identifier" && e.name === "async" && this.lastTokEnd === e.end && !this.canInsertSemicolon() && e.end - e.start == 5 && this.potentialArrowAt === e.start, a2 = false; ; ) {
    var o2 = this.parseSubscript(e, t, s, i, r2, a2, n2);
    if (o2.optional && (a2 = true), o2 === e || o2.type === "ArrowFunctionExpression") {
      if (a2) {
        var h2 = this.startNodeAt(t, s);
        h2.expression = o2, o2 = this.finishNode(h2, "ChainExpression");
      }
      return o2;
    }
    e = o2;
  }
}, oo.parseSubscript = function(e, t, s, i, n2, r2, a2) {
  var o2 = this.options.ecmaVersion >= 11, h2 = o2 && this.eat(Aa.questionDot);
  i && h2 && this.raise(this.lastTokStart, "Optional chaining cannot appear in the callee of new expressions");
  var l2 = this.eat(Aa.bracketL);
  if (l2 || h2 && this.type !== Aa.parenL && this.type !== Aa.backQuote || this.eat(Aa.dot)) {
    var c2 = this.startNodeAt(t, s);
    c2.object = e, l2 ? (c2.property = this.parseExpression(), this.expect(Aa.bracketR)) : this.type === Aa.privateId && e.type !== "Super" ? c2.property = this.parsePrivateIdent() : c2.property = this.parseIdent(this.options.allowReserved !== "never"), c2.computed = !!l2, o2 && (c2.optional = h2), e = this.finishNode(c2, "MemberExpression");
  } else if (!i && this.eat(Aa.parenL)) {
    var u2 = new Ka(), d2 = this.yieldPos, p2 = this.awaitPos, f2 = this.awaitIdentPos;
    this.yieldPos = 0, this.awaitPos = 0, this.awaitIdentPos = 0;
    var m2 = this.parseExprList(Aa.parenR, this.options.ecmaVersion >= 8, false, u2);
    if (n2 && !h2 && !this.canInsertSemicolon() && this.eat(Aa.arrow))
      return this.checkPatternErrors(u2, false), this.checkYieldAwaitInDefaultParams(), this.awaitIdentPos > 0 && this.raise(this.awaitIdentPos, "Cannot use 'await' as identifier inside an async function"), this.yieldPos = d2, this.awaitPos = p2, this.awaitIdentPos = f2, this.parseArrowExpression(this.startNodeAt(t, s), m2, true, a2);
    this.checkExpressionErrors(u2, true), this.yieldPos = d2 || this.yieldPos, this.awaitPos = p2 || this.awaitPos, this.awaitIdentPos = f2 || this.awaitIdentPos;
    var g2 = this.startNodeAt(t, s);
    g2.callee = e, g2.arguments = m2, o2 && (g2.optional = h2), e = this.finishNode(g2, "CallExpression");
  } else if (this.type === Aa.backQuote) {
    (h2 || r2) && this.raise(this.start, "Optional chaining cannot appear in the tag of tagged template expressions");
    var y2 = this.startNodeAt(t, s);
    y2.tag = e, y2.quasi = this.parseTemplate({ isTagged: true }), e = this.finishNode(y2, "TaggedTemplateExpression");
  }
  return e;
}, oo.parseExprAtom = function(e, t) {
  this.type === Aa.slash && this.readRegexp();
  var s, i = this.potentialArrowAt === this.start;
  switch (this.type) {
    case Aa._super:
      return this.allowSuper || this.raise(this.start, "'super' keyword outside a method"), s = this.startNode(), this.next(), this.type !== Aa.parenL || this.allowDirectSuper || this.raise(s.start, "super() call outside constructor of a subclass"), this.type !== Aa.dot && this.type !== Aa.bracketL && this.type !== Aa.parenL && this.unexpected(), this.finishNode(s, "Super");
    case Aa._this:
      return s = this.startNode(), this.next(), this.finishNode(s, "ThisExpression");
    case Aa.name:
      var n2 = this.start, r2 = this.startLoc, a2 = this.containsEsc, o2 = this.parseIdent(false);
      if (this.options.ecmaVersion >= 8 && !a2 && o2.name === "async" && !this.canInsertSemicolon() && this.eat(Aa._function))
        return this.overrideContext(ro.f_expr), this.parseFunction(this.startNodeAt(n2, r2), 0, false, true, t);
      if (i && !this.canInsertSemicolon()) {
        if (this.eat(Aa.arrow))
          return this.parseArrowExpression(this.startNodeAt(n2, r2), [o2], false, t);
        if (this.options.ecmaVersion >= 8 && o2.name === "async" && this.type === Aa.name && !a2 && (!this.potentialArrowInForAwait || this.value !== "of" || this.containsEsc))
          return o2 = this.parseIdent(false), !this.canInsertSemicolon() && this.eat(Aa.arrow) || this.unexpected(), this.parseArrowExpression(this.startNodeAt(n2, r2), [o2], true, t);
      }
      return o2;
    case Aa.regexp:
      var h2 = this.value;
      return (s = this.parseLiteral(h2.value)).regex = { pattern: h2.pattern, flags: h2.flags }, s;
    case Aa.num:
    case Aa.string:
      return this.parseLiteral(this.value);
    case Aa._null:
    case Aa._true:
    case Aa._false:
      return (s = this.startNode()).value = this.type === Aa._null ? null : this.type === Aa._true, s.raw = this.type.keyword, this.next(), this.finishNode(s, "Literal");
    case Aa.parenL:
      var l2 = this.start, c2 = this.parseParenAndDistinguishExpression(i, t);
      return e && (e.parenthesizedAssign < 0 && !this.isSimpleAssignTarget(c2) && (e.parenthesizedAssign = l2), e.parenthesizedBind < 0 && (e.parenthesizedBind = l2)), c2;
    case Aa.bracketL:
      return s = this.startNode(), this.next(), s.elements = this.parseExprList(Aa.bracketR, true, true, e), this.finishNode(s, "ArrayExpression");
    case Aa.braceL:
      return this.overrideContext(ro.b_expr), this.parseObj(false, e);
    case Aa._function:
      return s = this.startNode(), this.next(), this.parseFunction(s, 0);
    case Aa._class:
      return this.parseClass(this.startNode(), false);
    case Aa._new:
      return this.parseNew();
    case Aa.backQuote:
      return this.parseTemplate();
    case Aa._import:
      return this.options.ecmaVersion >= 11 ? this.parseExprImport() : this.unexpected();
    default:
      this.unexpected();
  }
}, oo.parseExprImport = function() {
  var e = this.startNode();
  this.containsEsc && this.raiseRecoverable(this.start, "Escape sequence in keyword import");
  var t = this.parseIdent(true);
  switch (this.type) {
    case Aa.parenL:
      return this.parseDynamicImport(e);
    case Aa.dot:
      return e.meta = t, this.parseImportMeta(e);
    default:
      this.unexpected();
  }
}, oo.parseDynamicImport = function(e) {
  if (this.next(), e.source = this.parseMaybeAssign(), !this.eat(Aa.parenR)) {
    var t = this.start;
    this.eat(Aa.comma) && this.eat(Aa.parenR) ? this.raiseRecoverable(t, "Trailing comma is not allowed in import()") : this.unexpected(t);
  }
  return this.finishNode(e, "ImportExpression");
}, oo.parseImportMeta = function(e) {
  this.next();
  var t = this.containsEsc;
  return e.property = this.parseIdent(true), e.property.name !== "meta" && this.raiseRecoverable(e.property.start, "The only valid meta property for import is 'import.meta'"), t && this.raiseRecoverable(e.start, "'import.meta' must not contain escaped characters"), this.options.sourceType === "module" || this.options.allowImportExportEverywhere || this.raiseRecoverable(e.start, "Cannot use 'import.meta' outside a module"), this.finishNode(e, "MetaProperty");
}, oo.parseLiteral = function(e) {
  var t = this.startNode();
  return t.value = e, t.raw = this.input.slice(this.start, this.end), t.raw.charCodeAt(t.raw.length - 1) === 110 && (t.bigint = t.raw.slice(0, -1).replace(/_/g, "")), this.next(), this.finishNode(t, "Literal");
}, oo.parseParenExpression = function() {
  this.expect(Aa.parenL);
  var e = this.parseExpression();
  return this.expect(Aa.parenR), e;
}, oo.parseParenAndDistinguishExpression = function(e, t) {
  var s, i = this.start, n2 = this.startLoc, r2 = this.options.ecmaVersion >= 8;
  if (this.options.ecmaVersion >= 6) {
    this.next();
    var a2, o2 = this.start, h2 = this.startLoc, l2 = [], c2 = true, u2 = false, d2 = new Ka(), p2 = this.yieldPos, f2 = this.awaitPos;
    for (this.yieldPos = 0, this.awaitPos = 0; this.type !== Aa.parenR; ) {
      if (c2 ? c2 = false : this.expect(Aa.comma), r2 && this.afterTrailingComma(Aa.parenR, true)) {
        u2 = true;
        break;
      }
      if (this.type === Aa.ellipsis) {
        a2 = this.start, l2.push(this.parseParenItem(this.parseRestBinding())), this.type === Aa.comma && this.raise(this.start, "Comma is not permitted after the rest element");
        break;
      }
      l2.push(this.parseMaybeAssign(false, d2, this.parseParenItem));
    }
    var m2 = this.lastTokEnd, g2 = this.lastTokEndLoc;
    if (this.expect(Aa.parenR), e && !this.canInsertSemicolon() && this.eat(Aa.arrow))
      return this.checkPatternErrors(d2, false), this.checkYieldAwaitInDefaultParams(), this.yieldPos = p2, this.awaitPos = f2, this.parseParenArrowList(i, n2, l2, t);
    l2.length && !u2 || this.unexpected(this.lastTokStart), a2 && this.unexpected(a2), this.checkExpressionErrors(d2, true), this.yieldPos = p2 || this.yieldPos, this.awaitPos = f2 || this.awaitPos, l2.length > 1 ? ((s = this.startNodeAt(o2, h2)).expressions = l2, this.finishNodeAt(s, "SequenceExpression", m2, g2)) : s = l2[0];
  } else
    s = this.parseParenExpression();
  if (this.options.preserveParens) {
    var y2 = this.startNodeAt(i, n2);
    return y2.expression = s, this.finishNode(y2, "ParenthesizedExpression");
  }
  return s;
}, oo.parseParenItem = function(e) {
  return e;
}, oo.parseParenArrowList = function(e, t, s, i) {
  return this.parseArrowExpression(this.startNodeAt(e, t), s, false, i);
};
var lo = [];
oo.parseNew = function() {
  this.containsEsc && this.raiseRecoverable(this.start, "Escape sequence in keyword new");
  var e = this.startNode(), t = this.parseIdent(true);
  if (this.options.ecmaVersion >= 6 && this.eat(Aa.dot)) {
    e.meta = t;
    var s = this.containsEsc;
    return e.property = this.parseIdent(true), e.property.name !== "target" && this.raiseRecoverable(e.property.start, "The only valid meta property for new is 'new.target'"), s && this.raiseRecoverable(e.start, "'new.target' must not contain escaped characters"), this.allowNewDotTarget || this.raiseRecoverable(e.start, "'new.target' can only be used in functions and class static block"), this.finishNode(e, "MetaProperty");
  }
  var i = this.start, n2 = this.startLoc, r2 = this.type === Aa._import;
  return e.callee = this.parseSubscripts(this.parseExprAtom(), i, n2, true, false), r2 && e.callee.type === "ImportExpression" && this.raise(i, "Cannot use new with import()"), this.eat(Aa.parenL) ? e.arguments = this.parseExprList(Aa.parenR, this.options.ecmaVersion >= 8, false) : e.arguments = lo, this.finishNode(e, "NewExpression");
}, oo.parseTemplateElement = function(e) {
  var t = e.isTagged, s = this.startNode();
  return this.type === Aa.invalidTemplate ? (t || this.raiseRecoverable(this.start, "Bad escape sequence in untagged template literal"), s.value = { raw: this.value, cooked: null }) : s.value = { raw: this.input.slice(this.start, this.end).replace(/\r\n?/g, "\n"), cooked: this.value }, this.next(), s.tail = this.type === Aa.backQuote, this.finishNode(s, "TemplateElement");
}, oo.parseTemplate = function(e) {
  e === void 0 && (e = {});
  var t = e.isTagged;
  t === void 0 && (t = false);
  var s = this.startNode();
  this.next(), s.expressions = [];
  var i = this.parseTemplateElement({ isTagged: t });
  for (s.quasis = [i]; !i.tail; )
    this.type === Aa.eof && this.raise(this.pos, "Unterminated template literal"), this.expect(Aa.dollarBraceL), s.expressions.push(this.parseExpression()), this.expect(Aa.braceR), s.quasis.push(i = this.parseTemplateElement({ isTagged: t }));
  return this.next(), this.finishNode(s, "TemplateLiteral");
}, oo.isAsyncProp = function(e) {
  return !e.computed && e.key.type === "Identifier" && e.key.name === "async" && (this.type === Aa.name || this.type === Aa.num || this.type === Aa.string || this.type === Aa.bracketL || this.type.keyword || this.options.ecmaVersion >= 9 && this.type === Aa.star) && !Sa.test(this.input.slice(this.lastTokEnd, this.start));
}, oo.parseObj = function(e, t) {
  var s = this.startNode(), i = true, n2 = {};
  for (s.properties = [], this.next(); !this.eat(Aa.braceR); ) {
    if (i)
      i = false;
    else if (this.expect(Aa.comma), this.options.ecmaVersion >= 5 && this.afterTrailingComma(Aa.braceR))
      break;
    var r2 = this.parseProperty(e, t);
    e || this.checkPropClash(r2, n2, t), s.properties.push(r2);
  }
  return this.finishNode(s, e ? "ObjectPattern" : "ObjectExpression");
}, oo.parseProperty = function(e, t) {
  var s, i, n2, r2, a2 = this.startNode();
  if (this.options.ecmaVersion >= 9 && this.eat(Aa.ellipsis))
    return e ? (a2.argument = this.parseIdent(false), this.type === Aa.comma && this.raise(this.start, "Comma is not permitted after the rest element"), this.finishNode(a2, "RestElement")) : (this.type === Aa.parenL && t && (t.parenthesizedAssign < 0 && (t.parenthesizedAssign = this.start), t.parenthesizedBind < 0 && (t.parenthesizedBind = this.start)), a2.argument = this.parseMaybeAssign(false, t), this.type === Aa.comma && t && t.trailingComma < 0 && (t.trailingComma = this.start), this.finishNode(a2, "SpreadElement"));
  this.options.ecmaVersion >= 6 && (a2.method = false, a2.shorthand = false, (e || t) && (n2 = this.start, r2 = this.startLoc), e || (s = this.eat(Aa.star)));
  var o2 = this.containsEsc;
  return this.parsePropertyName(a2), !e && !o2 && this.options.ecmaVersion >= 8 && !s && this.isAsyncProp(a2) ? (i = true, s = this.options.ecmaVersion >= 9 && this.eat(Aa.star), this.parsePropertyName(a2, t)) : i = false, this.parsePropertyValue(a2, e, s, i, n2, r2, t, o2), this.finishNode(a2, "Property");
}, oo.parsePropertyValue = function(e, t, s, i, n2, r2, a2, o2) {
  if ((s || i) && this.type === Aa.colon && this.unexpected(), this.eat(Aa.colon))
    e.value = t ? this.parseMaybeDefault(this.start, this.startLoc) : this.parseMaybeAssign(false, a2), e.kind = "init";
  else if (this.options.ecmaVersion >= 6 && this.type === Aa.parenL)
    t && this.unexpected(), e.kind = "init", e.method = true, e.value = this.parseMethod(s, i);
  else if (t || o2 || !(this.options.ecmaVersion >= 5) || e.computed || e.key.type !== "Identifier" || e.key.name !== "get" && e.key.name !== "set" || this.type === Aa.comma || this.type === Aa.braceR || this.type === Aa.eq)
    this.options.ecmaVersion >= 6 && !e.computed && e.key.type === "Identifier" ? ((s || i) && this.unexpected(), this.checkUnreserved(e.key), e.key.name !== "await" || this.awaitIdentPos || (this.awaitIdentPos = n2), e.kind = "init", t ? e.value = this.parseMaybeDefault(n2, r2, this.copyNode(e.key)) : this.type === Aa.eq && a2 ? (a2.shorthandAssign < 0 && (a2.shorthandAssign = this.start), e.value = this.parseMaybeDefault(n2, r2, this.copyNode(e.key))) : e.value = this.copyNode(e.key), e.shorthand = true) : this.unexpected();
  else {
    (s || i) && this.unexpected(), e.kind = e.key.name, this.parsePropertyName(e), e.value = this.parseMethod(false);
    var h2 = e.kind === "get" ? 0 : 1;
    if (e.value.params.length !== h2) {
      var l2 = e.value.start;
      e.kind === "get" ? this.raiseRecoverable(l2, "getter should have no params") : this.raiseRecoverable(l2, "setter should have exactly one param");
    } else
      e.kind === "set" && e.value.params[0].type === "RestElement" && this.raiseRecoverable(e.value.params[0].start, "Setter cannot use rest params");
  }
}, oo.parsePropertyName = function(e) {
  if (this.options.ecmaVersion >= 6) {
    if (this.eat(Aa.bracketL))
      return e.computed = true, e.key = this.parseMaybeAssign(), this.expect(Aa.bracketR), e.key;
    e.computed = false;
  }
  return e.key = this.type === Aa.num || this.type === Aa.string ? this.parseExprAtom() : this.parseIdent(this.options.allowReserved !== "never");
}, oo.initFunction = function(e) {
  e.id = null, this.options.ecmaVersion >= 6 && (e.generator = e.expression = false), this.options.ecmaVersion >= 8 && (e.async = false);
}, oo.parseMethod = function(e, t, s) {
  var i = this.startNode(), n2 = this.yieldPos, r2 = this.awaitPos, a2 = this.awaitIdentPos;
  return this.initFunction(i), this.options.ecmaVersion >= 6 && (i.generator = e), this.options.ecmaVersion >= 8 && (i.async = !!t), this.yieldPos = 0, this.awaitPos = 0, this.awaitIdentPos = 0, this.enterScope(64 | ja(t, i.generator) | (s ? 128 : 0)), this.expect(Aa.parenL), i.params = this.parseBindingList(Aa.parenR, false, this.options.ecmaVersion >= 8), this.checkYieldAwaitInDefaultParams(), this.parseFunctionBody(i, false, true, false), this.yieldPos = n2, this.awaitPos = r2, this.awaitIdentPos = a2, this.finishNode(i, "FunctionExpression");
}, oo.parseArrowExpression = function(e, t, s, i) {
  var n2 = this.yieldPos, r2 = this.awaitPos, a2 = this.awaitIdentPos;
  return this.enterScope(16 | ja(s, false)), this.initFunction(e), this.options.ecmaVersion >= 8 && (e.async = !!s), this.yieldPos = 0, this.awaitPos = 0, this.awaitIdentPos = 0, e.params = this.toAssignableList(t, true), this.parseFunctionBody(e, true, false, i), this.yieldPos = n2, this.awaitPos = r2, this.awaitIdentPos = a2, this.finishNode(e, "ArrowFunctionExpression");
}, oo.parseFunctionBody = function(e, t, s, i) {
  var n2 = t && this.type !== Aa.braceL, r2 = this.strict, a2 = false;
  if (n2)
    e.body = this.parseMaybeAssign(i), e.expression = true, this.checkParams(e, false);
  else {
    var o2 = this.options.ecmaVersion >= 7 && !this.isSimpleParamList(e.params);
    r2 && !o2 || (a2 = this.strictDirective(this.end)) && o2 && this.raiseRecoverable(e.start, "Illegal 'use strict' directive in function with non-simple parameter list");
    var h2 = this.labels;
    this.labels = [], a2 && (this.strict = true), this.checkParams(e, !r2 && !a2 && !t && !s && this.isSimpleParamList(e.params)), this.strict && e.id && this.checkLValSimple(e.id, 5), e.body = this.parseBlock(false, void 0, a2 && !r2), e.expression = false, this.adaptDirectivePrologue(e.body.body), this.labels = h2;
  }
  this.exitScope();
}, oo.isSimpleParamList = function(e) {
  for (var t = 0, s = e; t < s.length; t += 1) {
    if (s[t].type !== "Identifier")
      return false;
  }
  return true;
}, oo.checkParams = function(e, t) {
  for (var s = /* @__PURE__ */ Object.create(null), i = 0, n2 = e.params; i < n2.length; i += 1) {
    var r2 = n2[i];
    this.checkLValInnerPattern(r2, 1, t ? null : s);
  }
}, oo.parseExprList = function(e, t, s, i) {
  for (var n2 = [], r2 = true; !this.eat(e); ) {
    if (r2)
      r2 = false;
    else if (this.expect(Aa.comma), t && this.afterTrailingComma(e))
      break;
    var a2 = void 0;
    s && this.type === Aa.comma ? a2 = null : this.type === Aa.ellipsis ? (a2 = this.parseSpread(i), i && this.type === Aa.comma && i.trailingComma < 0 && (i.trailingComma = this.start)) : a2 = this.parseMaybeAssign(false, i), n2.push(a2);
  }
  return n2;
}, oo.checkUnreserved = function(e) {
  var t = e.start, s = e.end, i = e.name;
  (this.inGenerator && i === "yield" && this.raiseRecoverable(t, "Cannot use 'yield' as identifier inside a generator"), this.inAsync && i === "await" && this.raiseRecoverable(t, "Cannot use 'await' as identifier inside an async function"), this.currentThisScope().inClassFieldInit && i === "arguments" && this.raiseRecoverable(t, "Cannot use 'arguments' in class field initializer"), !this.inClassStaticBlock || i !== "arguments" && i !== "await" || this.raise(t, "Cannot use " + i + " in class static initialization block"), this.keywords.test(i) && this.raise(t, "Unexpected keyword '" + i + "'"), this.options.ecmaVersion < 6 && this.input.slice(t, s).indexOf("\\") !== -1) || (this.strict ? this.reservedWordsStrict : this.reservedWords).test(i) && (this.inAsync || i !== "await" || this.raiseRecoverable(t, "Cannot use keyword 'await' outside an async function"), this.raiseRecoverable(t, "The keyword '" + i + "' is reserved"));
}, oo.parseIdent = function(e, t) {
  var s = this.startNode();
  return this.type === Aa.name ? s.name = this.value : this.type.keyword ? (s.name = this.type.keyword, s.name !== "class" && s.name !== "function" || this.lastTokEnd === this.lastTokStart + 1 && this.input.charCodeAt(this.lastTokStart) === 46 || this.context.pop()) : this.unexpected(), this.next(!!e), this.finishNode(s, "Identifier"), e || (this.checkUnreserved(s), s.name !== "await" || this.awaitIdentPos || (this.awaitIdentPos = s.start)), s;
}, oo.parsePrivateIdent = function() {
  var e = this.startNode();
  return this.type === Aa.privateId ? e.name = this.value : this.unexpected(), this.next(), this.finishNode(e, "PrivateIdentifier"), this.privateNameStack.length === 0 ? this.raise(e.start, "Private field '#" + e.name + "' must be declared in an enclosing class") : this.privateNameStack[this.privateNameStack.length - 1].used.push(e), e;
}, oo.parseYield = function(e) {
  this.yieldPos || (this.yieldPos = this.start);
  var t = this.startNode();
  return this.next(), this.type === Aa.semi || this.canInsertSemicolon() || this.type !== Aa.star && !this.type.startsExpr ? (t.delegate = false, t.argument = null) : (t.delegate = this.eat(Aa.star), t.argument = this.parseMaybeAssign(e)), this.finishNode(t, "YieldExpression");
}, oo.parseAwait = function(e) {
  this.awaitPos || (this.awaitPos = this.start);
  var t = this.startNode();
  return this.next(), t.argument = this.parseMaybeUnary(null, true, false, e), this.finishNode(t, "AwaitExpression");
};
var co = Ua.prototype;
co.raise = function(e, t) {
  var s = Ba(this.input, e);
  t += " (" + s.line + ":" + s.column + ")";
  var i = new SyntaxError(t);
  throw i.pos = e, i.loc = s, i.raisedAt = this.pos, i;
}, co.raiseRecoverable = co.raise, co.curPosition = function() {
  if (this.options.locations)
    return new Oa(this.curLine, this.pos - this.lineStart);
};
var uo = Ua.prototype, po = function(e) {
  this.flags = e, this.var = [], this.lexical = [], this.functions = [], this.inClassFieldInit = false;
};
uo.enterScope = function(e) {
  this.scopeStack.push(new po(e));
}, uo.exitScope = function() {
  this.scopeStack.pop();
}, uo.treatFunctionsAsVarInScope = function(e) {
  return 2 & e.flags || !this.inModule && 1 & e.flags;
}, uo.declareName = function(e, t, s) {
  var i = false;
  if (t === 2) {
    var n2 = this.currentScope();
    i = n2.lexical.indexOf(e) > -1 || n2.functions.indexOf(e) > -1 || n2.var.indexOf(e) > -1, n2.lexical.push(e), this.inModule && 1 & n2.flags && delete this.undefinedExports[e];
  } else if (t === 4) {
    this.currentScope().lexical.push(e);
  } else if (t === 3) {
    var r2 = this.currentScope();
    i = this.treatFunctionsAsVar ? r2.lexical.indexOf(e) > -1 : r2.lexical.indexOf(e) > -1 || r2.var.indexOf(e) > -1, r2.functions.push(e);
  } else
    for (var a2 = this.scopeStack.length - 1; a2 >= 0; --a2) {
      var o2 = this.scopeStack[a2];
      if (o2.lexical.indexOf(e) > -1 && !(32 & o2.flags && o2.lexical[0] === e) || !this.treatFunctionsAsVarInScope(o2) && o2.functions.indexOf(e) > -1) {
        i = true;
        break;
      }
      if (o2.var.push(e), this.inModule && 1 & o2.flags && delete this.undefinedExports[e], 259 & o2.flags)
        break;
    }
  i && this.raiseRecoverable(s, "Identifier '" + e + "' has already been declared");
}, uo.checkLocalExport = function(e) {
  this.scopeStack[0].lexical.indexOf(e.name) === -1 && this.scopeStack[0].var.indexOf(e.name) === -1 && (this.undefinedExports[e.name] = e);
}, uo.currentScope = function() {
  return this.scopeStack[this.scopeStack.length - 1];
}, uo.currentVarScope = function() {
  for (var e = this.scopeStack.length - 1; ; e--) {
    var t = this.scopeStack[e];
    if (259 & t.flags)
      return t;
  }
}, uo.currentThisScope = function() {
  for (var e = this.scopeStack.length - 1; ; e--) {
    var t = this.scopeStack[e];
    if (259 & t.flags && !(16 & t.flags))
      return t;
  }
};
var fo = function(e, t, s) {
  this.type = "", this.start = t, this.end = 0, e.options.locations && (this.loc = new Va(e, s)), e.options.directSourceFile && (this.sourceFile = e.options.directSourceFile), e.options.ranges && (this.range = [t, 0]);
}, mo = Ua.prototype;
function go(e, t, s, i) {
  return e.type = t, e.end = s, this.options.locations && (e.loc.end = i), this.options.ranges && (e.range[1] = s), e;
}
mo.startNode = function() {
  return new fo(this, this.start, this.startLoc);
}, mo.startNodeAt = function(e, t) {
  return new fo(this, e, t);
}, mo.finishNode = function(e, t) {
  return go.call(this, e, t, this.lastTokEnd, this.lastTokEndLoc);
}, mo.finishNodeAt = function(e, t, s, i) {
  return go.call(this, e, t, s, i);
}, mo.copyNode = function(e) {
  var t = new fo(this, e.start, this.startLoc);
  for (var s in e)
    t[s] = e[s];
  return t;
};
var yo = "ASCII ASCII_Hex_Digit AHex Alphabetic Alpha Any Assigned Bidi_Control Bidi_C Bidi_Mirrored Bidi_M Case_Ignorable CI Cased Changes_When_Casefolded CWCF Changes_When_Casemapped CWCM Changes_When_Lowercased CWL Changes_When_NFKC_Casefolded CWKCF Changes_When_Titlecased CWT Changes_When_Uppercased CWU Dash Default_Ignorable_Code_Point DI Deprecated Dep Diacritic Dia Emoji Emoji_Component Emoji_Modifier Emoji_Modifier_Base Emoji_Presentation Extender Ext Grapheme_Base Gr_Base Grapheme_Extend Gr_Ext Hex_Digit Hex IDS_Binary_Operator IDSB IDS_Trinary_Operator IDST ID_Continue IDC ID_Start IDS Ideographic Ideo Join_Control Join_C Logical_Order_Exception LOE Lowercase Lower Math Noncharacter_Code_Point NChar Pattern_Syntax Pat_Syn Pattern_White_Space Pat_WS Quotation_Mark QMark Radical Regional_Indicator RI Sentence_Terminal STerm Soft_Dotted SD Terminal_Punctuation Term Unified_Ideograph UIdeo Uppercase Upper Variation_Selector VS White_Space space XID_Continue XIDC XID_Start XIDS", Eo = yo + " Extended_Pictographic", xo = Eo + " EBase EComp EMod EPres ExtPict", vo = { 9: yo, 10: Eo, 11: Eo, 12: xo, 13: "ASCII ASCII_Hex_Digit AHex Alphabetic Alpha Any Assigned Bidi_Control Bidi_C Bidi_Mirrored Bidi_M Case_Ignorable CI Cased Changes_When_Casefolded CWCF Changes_When_Casemapped CWCM Changes_When_Lowercased CWL Changes_When_NFKC_Casefolded CWKCF Changes_When_Titlecased CWT Changes_When_Uppercased CWU Dash Default_Ignorable_Code_Point DI Deprecated Dep Diacritic Dia Emoji Emoji_Component Emoji_Modifier Emoji_Modifier_Base Emoji_Presentation Extender Ext Grapheme_Base Gr_Base Grapheme_Extend Gr_Ext Hex_Digit Hex IDS_Binary_Operator IDSB IDS_Trinary_Operator IDST ID_Continue IDC ID_Start IDS Ideographic Ideo Join_Control Join_C Logical_Order_Exception LOE Lowercase Lower Math Noncharacter_Code_Point NChar Pattern_Syntax Pat_Syn Pattern_White_Space Pat_WS Quotation_Mark QMark Radical Regional_Indicator RI Sentence_Terminal STerm Soft_Dotted SD Terminal_Punctuation Term Unified_Ideograph UIdeo Uppercase Upper Variation_Selector VS White_Space space XID_Continue XIDC XID_Start XIDS Extended_Pictographic EBase EComp EMod EPres ExtPict" }, bo = "Cased_Letter LC Close_Punctuation Pe Connector_Punctuation Pc Control Cc cntrl Currency_Symbol Sc Dash_Punctuation Pd Decimal_Number Nd digit Enclosing_Mark Me Final_Punctuation Pf Format Cf Initial_Punctuation Pi Letter L Letter_Number Nl Line_Separator Zl Lowercase_Letter Ll Mark M Combining_Mark Math_Symbol Sm Modifier_Letter Lm Modifier_Symbol Sk Nonspacing_Mark Mn Number N Open_Punctuation Ps Other C Other_Letter Lo Other_Number No Other_Punctuation Po Other_Symbol So Paragraph_Separator Zp Private_Use Co Punctuation P punct Separator Z Space_Separator Zs Spacing_Mark Mc Surrogate Cs Symbol S Titlecase_Letter Lt Unassigned Cn Uppercase_Letter Lu", Ao = "Adlam Adlm Ahom Anatolian_Hieroglyphs Hluw Arabic Arab Armenian Armn Avestan Avst Balinese Bali Bamum Bamu Bassa_Vah Bass Batak Batk Bengali Beng Bhaiksuki Bhks Bopomofo Bopo Brahmi Brah Braille Brai Buginese Bugi Buhid Buhd Canadian_Aboriginal Cans Carian Cari Caucasian_Albanian Aghb Chakma Cakm Cham Cham Cherokee Cher Common Zyyy Coptic Copt Qaac Cuneiform Xsux Cypriot Cprt Cyrillic Cyrl Deseret Dsrt Devanagari Deva Duployan Dupl Egyptian_Hieroglyphs Egyp Elbasan Elba Ethiopic Ethi Georgian Geor Glagolitic Glag Gothic Goth Grantha Gran Greek Grek Gujarati Gujr Gurmukhi Guru Han Hani Hangul Hang Hanunoo Hano Hatran Hatr Hebrew Hebr Hiragana Hira Imperial_Aramaic Armi Inherited Zinh Qaai Inscriptional_Pahlavi Phli Inscriptional_Parthian Prti Javanese Java Kaithi Kthi Kannada Knda Katakana Kana Kayah_Li Kali Kharoshthi Khar Khmer Khmr Khojki Khoj Khudawadi Sind Lao Laoo Latin Latn Lepcha Lepc Limbu Limb Linear_A Lina Linear_B Linb Lisu Lisu Lycian Lyci Lydian Lydi Mahajani Mahj Malayalam Mlym Mandaic Mand Manichaean Mani Marchen Marc Masaram_Gondi Gonm Meetei_Mayek Mtei Mende_Kikakui Mend Meroitic_Cursive Merc Meroitic_Hieroglyphs Mero Miao Plrd Modi Mongolian Mong Mro Mroo Multani Mult Myanmar Mymr Nabataean Nbat New_Tai_Lue Talu Newa Newa Nko Nkoo Nushu Nshu Ogham Ogam Ol_Chiki Olck Old_Hungarian Hung Old_Italic Ital Old_North_Arabian Narb Old_Permic Perm Old_Persian Xpeo Old_South_Arabian Sarb Old_Turkic Orkh Oriya Orya Osage Osge Osmanya Osma Pahawh_Hmong Hmng Palmyrene Palm Pau_Cin_Hau Pauc Phags_Pa Phag Phoenician Phnx Psalter_Pahlavi Phlp Rejang Rjng Runic Runr Samaritan Samr Saurashtra Saur Sharada Shrd Shavian Shaw Siddham Sidd SignWriting Sgnw Sinhala Sinh Sora_Sompeng Sora Soyombo Soyo Sundanese Sund Syloti_Nagri Sylo Syriac Syrc Tagalog Tglg Tagbanwa Tagb Tai_Le Tale Tai_Tham Lana Tai_Viet Tavt Takri Takr Tamil Taml Tangut Tang Telugu Telu Thaana Thaa Thai Thai Tibetan Tibt Tifinagh Tfng Tirhuta Tirh Ugaritic Ugar Vai Vaii Warang_Citi Wara Yi Yiii Zanabazar_Square Zanb", So = Ao + " Dogra Dogr Gunjala_Gondi Gong Hanifi_Rohingya Rohg Makasar Maka Medefaidrin Medf Old_Sogdian Sogo Sogdian Sogd", Po = So + " Elymaic Elym Nandinagari Nand Nyiakeng_Puachue_Hmong Hmnp Wancho Wcho", ko = Po + " Chorasmian Chrs Diak Dives_Akuru Khitan_Small_Script Kits Yezi Yezidi", wo = { 9: Ao, 10: So, 11: Po, 12: ko, 13: "Adlam Adlm Ahom Anatolian_Hieroglyphs Hluw Arabic Arab Armenian Armn Avestan Avst Balinese Bali Bamum Bamu Bassa_Vah Bass Batak Batk Bengali Beng Bhaiksuki Bhks Bopomofo Bopo Brahmi Brah Braille Brai Buginese Bugi Buhid Buhd Canadian_Aboriginal Cans Carian Cari Caucasian_Albanian Aghb Chakma Cakm Cham Cham Cherokee Cher Common Zyyy Coptic Copt Qaac Cuneiform Xsux Cypriot Cprt Cyrillic Cyrl Deseret Dsrt Devanagari Deva Duployan Dupl Egyptian_Hieroglyphs Egyp Elbasan Elba Ethiopic Ethi Georgian Geor Glagolitic Glag Gothic Goth Grantha Gran Greek Grek Gujarati Gujr Gurmukhi Guru Han Hani Hangul Hang Hanunoo Hano Hatran Hatr Hebrew Hebr Hiragana Hira Imperial_Aramaic Armi Inherited Zinh Qaai Inscriptional_Pahlavi Phli Inscriptional_Parthian Prti Javanese Java Kaithi Kthi Kannada Knda Katakana Kana Kayah_Li Kali Kharoshthi Khar Khmer Khmr Khojki Khoj Khudawadi Sind Lao Laoo Latin Latn Lepcha Lepc Limbu Limb Linear_A Lina Linear_B Linb Lisu Lisu Lycian Lyci Lydian Lydi Mahajani Mahj Malayalam Mlym Mandaic Mand Manichaean Mani Marchen Marc Masaram_Gondi Gonm Meetei_Mayek Mtei Mende_Kikakui Mend Meroitic_Cursive Merc Meroitic_Hieroglyphs Mero Miao Plrd Modi Mongolian Mong Mro Mroo Multani Mult Myanmar Mymr Nabataean Nbat New_Tai_Lue Talu Newa Newa Nko Nkoo Nushu Nshu Ogham Ogam Ol_Chiki Olck Old_Hungarian Hung Old_Italic Ital Old_North_Arabian Narb Old_Permic Perm Old_Persian Xpeo Old_South_Arabian Sarb Old_Turkic Orkh Oriya Orya Osage Osge Osmanya Osma Pahawh_Hmong Hmng Palmyrene Palm Pau_Cin_Hau Pauc Phags_Pa Phag Phoenician Phnx Psalter_Pahlavi Phlp Rejang Rjng Runic Runr Samaritan Samr Saurashtra Saur Sharada Shrd Shavian Shaw Siddham Sidd SignWriting Sgnw Sinhala Sinh Sora_Sompeng Sora Soyombo Soyo Sundanese Sund Syloti_Nagri Sylo Syriac Syrc Tagalog Tglg Tagbanwa Tagb Tai_Le Tale Tai_Tham Lana Tai_Viet Tavt Takri Takr Tamil Taml Tangut Tang Telugu Telu Thaana Thaa Thai Thai Tibetan Tibt Tifinagh Tfng Tirhuta Tirh Ugaritic Ugar Vai Vaii Warang_Citi Wara Yi Yiii Zanabazar_Square Zanb Dogra Dogr Gunjala_Gondi Gong Hanifi_Rohingya Rohg Makasar Maka Medefaidrin Medf Old_Sogdian Sogo Sogdian Sogd Elymaic Elym Nandinagari Nand Nyiakeng_Puachue_Hmong Hmnp Wancho Wcho Chorasmian Chrs Diak Dives_Akuru Khitan_Small_Script Kits Yezi Yezidi Cypro_Minoan Cpmn Old_Uyghur Ougr Tangsa Tnsa Toto Vithkuqi Vith" }, Co = {};
function Io(e) {
  var t = Co[e] = { binary: Ma(vo[e] + " " + bo), nonBinary: { General_Category: Ma(bo), Script: Ma(wo[e]) } };
  t.nonBinary.Script_Extensions = t.nonBinary.Script, t.nonBinary.gc = t.nonBinary.General_Category, t.nonBinary.sc = t.nonBinary.Script, t.nonBinary.scx = t.nonBinary.Script_Extensions;
}
for (var _o = 0, No = [9, 10, 11, 12, 13]; _o < No.length; _o += 1) {
  Io(No[_o]);
}
var $o = Ua.prototype, To = function(e) {
  this.parser = e, this.validFlags = "gim" + (e.options.ecmaVersion >= 6 ? "uy" : "") + (e.options.ecmaVersion >= 9 ? "s" : "") + (e.options.ecmaVersion >= 13 ? "d" : ""), this.unicodeProperties = Co[e.options.ecmaVersion >= 13 ? 13 : e.options.ecmaVersion], this.source = "", this.flags = "", this.start = 0, this.switchU = false, this.switchN = false, this.pos = 0, this.lastIntValue = 0, this.lastStringValue = "", this.lastAssertionIsQuantifiable = false, this.numCapturingParens = 0, this.maxBackReference = 0, this.groupNames = [], this.backReferenceNames = [];
};
function Ro(e) {
  return e === 36 || e >= 40 && e <= 43 || e === 46 || e === 63 || e >= 91 && e <= 94 || e >= 123 && e <= 125;
}
function Mo(e) {
  return e >= 65 && e <= 90 || e >= 97 && e <= 122;
}
function Do(e) {
  return Mo(e) || e === 95;
}
function Lo(e) {
  return Do(e) || Oo(e);
}
function Oo(e) {
  return e >= 48 && e <= 57;
}
function Vo(e) {
  return e >= 48 && e <= 57 || e >= 65 && e <= 70 || e >= 97 && e <= 102;
}
function Bo(e) {
  return e >= 65 && e <= 70 ? e - 65 + 10 : e >= 97 && e <= 102 ? e - 97 + 10 : e - 48;
}
function Fo(e) {
  return e >= 48 && e <= 55;
}
To.prototype.reset = function(e, t, s) {
  var i = s.indexOf("u") !== -1;
  this.start = 0 | e, this.source = t + "", this.flags = s, this.switchU = i && this.parser.options.ecmaVersion >= 6, this.switchN = i && this.parser.options.ecmaVersion >= 9;
}, To.prototype.raise = function(e) {
  this.parser.raiseRecoverable(this.start, "Invalid regular expression: /" + this.source + "/: " + e);
}, To.prototype.at = function(e, t) {
  t === void 0 && (t = false);
  var s = this.source, i = s.length;
  if (e >= i)
    return -1;
  var n2 = s.charCodeAt(e);
  if (!t && !this.switchU || n2 <= 55295 || n2 >= 57344 || e + 1 >= i)
    return n2;
  var r2 = s.charCodeAt(e + 1);
  return r2 >= 56320 && r2 <= 57343 ? (n2 << 10) + r2 - 56613888 : n2;
}, To.prototype.nextIndex = function(e, t) {
  t === void 0 && (t = false);
  var s = this.source, i = s.length;
  if (e >= i)
    return i;
  var n2, r2 = s.charCodeAt(e);
  return !t && !this.switchU || r2 <= 55295 || r2 >= 57344 || e + 1 >= i || (n2 = s.charCodeAt(e + 1)) < 56320 || n2 > 57343 ? e + 1 : e + 2;
}, To.prototype.current = function(e) {
  return e === void 0 && (e = false), this.at(this.pos, e);
}, To.prototype.lookahead = function(e) {
  return e === void 0 && (e = false), this.at(this.nextIndex(this.pos, e), e);
}, To.prototype.advance = function(e) {
  e === void 0 && (e = false), this.pos = this.nextIndex(this.pos, e);
}, To.prototype.eat = function(e, t) {
  return t === void 0 && (t = false), this.current(t) === e && (this.advance(t), true);
}, $o.validateRegExpFlags = function(e) {
  for (var t = e.validFlags, s = e.flags, i = 0; i < s.length; i++) {
    var n2 = s.charAt(i);
    t.indexOf(n2) === -1 && this.raise(e.start, "Invalid regular expression flag"), s.indexOf(n2, i + 1) > -1 && this.raise(e.start, "Duplicate regular expression flag");
  }
}, $o.validateRegExpPattern = function(e) {
  this.regexp_pattern(e), !e.switchN && this.options.ecmaVersion >= 9 && e.groupNames.length > 0 && (e.switchN = true, this.regexp_pattern(e));
}, $o.regexp_pattern = function(e) {
  e.pos = 0, e.lastIntValue = 0, e.lastStringValue = "", e.lastAssertionIsQuantifiable = false, e.numCapturingParens = 0, e.maxBackReference = 0, e.groupNames.length = 0, e.backReferenceNames.length = 0, this.regexp_disjunction(e), e.pos !== e.source.length && (e.eat(41) && e.raise("Unmatched ')'"), (e.eat(93) || e.eat(125)) && e.raise("Lone quantifier brackets")), e.maxBackReference > e.numCapturingParens && e.raise("Invalid escape");
  for (var t = 0, s = e.backReferenceNames; t < s.length; t += 1) {
    var i = s[t];
    e.groupNames.indexOf(i) === -1 && e.raise("Invalid named capture referenced");
  }
}, $o.regexp_disjunction = function(e) {
  for (this.regexp_alternative(e); e.eat(124); )
    this.regexp_alternative(e);
  this.regexp_eatQuantifier(e, true) && e.raise("Nothing to repeat"), e.eat(123) && e.raise("Lone quantifier brackets");
}, $o.regexp_alternative = function(e) {
  for (; e.pos < e.source.length && this.regexp_eatTerm(e); )
    ;
}, $o.regexp_eatTerm = function(e) {
  return this.regexp_eatAssertion(e) ? (e.lastAssertionIsQuantifiable && this.regexp_eatQuantifier(e) && e.switchU && e.raise("Invalid quantifier"), true) : !!(e.switchU ? this.regexp_eatAtom(e) : this.regexp_eatExtendedAtom(e)) && (this.regexp_eatQuantifier(e), true);
}, $o.regexp_eatAssertion = function(e) {
  var t = e.pos;
  if (e.lastAssertionIsQuantifiable = false, e.eat(94) || e.eat(36))
    return true;
  if (e.eat(92)) {
    if (e.eat(66) || e.eat(98))
      return true;
    e.pos = t;
  }
  if (e.eat(40) && e.eat(63)) {
    var s = false;
    if (this.options.ecmaVersion >= 9 && (s = e.eat(60)), e.eat(61) || e.eat(33))
      return this.regexp_disjunction(e), e.eat(41) || e.raise("Unterminated group"), e.lastAssertionIsQuantifiable = !s, true;
  }
  return e.pos = t, false;
}, $o.regexp_eatQuantifier = function(e, t) {
  return t === void 0 && (t = false), !!this.regexp_eatQuantifierPrefix(e, t) && (e.eat(63), true);
}, $o.regexp_eatQuantifierPrefix = function(e, t) {
  return e.eat(42) || e.eat(43) || e.eat(63) || this.regexp_eatBracedQuantifier(e, t);
}, $o.regexp_eatBracedQuantifier = function(e, t) {
  var s = e.pos;
  if (e.eat(123)) {
    var i = 0, n2 = -1;
    if (this.regexp_eatDecimalDigits(e) && (i = e.lastIntValue, e.eat(44) && this.regexp_eatDecimalDigits(e) && (n2 = e.lastIntValue), e.eat(125)))
      return n2 !== -1 && n2 < i && !t && e.raise("numbers out of order in {} quantifier"), true;
    e.switchU && !t && e.raise("Incomplete quantifier"), e.pos = s;
  }
  return false;
}, $o.regexp_eatAtom = function(e) {
  return this.regexp_eatPatternCharacters(e) || e.eat(46) || this.regexp_eatReverseSolidusAtomEscape(e) || this.regexp_eatCharacterClass(e) || this.regexp_eatUncapturingGroup(e) || this.regexp_eatCapturingGroup(e);
}, $o.regexp_eatReverseSolidusAtomEscape = function(e) {
  var t = e.pos;
  if (e.eat(92)) {
    if (this.regexp_eatAtomEscape(e))
      return true;
    e.pos = t;
  }
  return false;
}, $o.regexp_eatUncapturingGroup = function(e) {
  var t = e.pos;
  if (e.eat(40)) {
    if (e.eat(63) && e.eat(58)) {
      if (this.regexp_disjunction(e), e.eat(41))
        return true;
      e.raise("Unterminated group");
    }
    e.pos = t;
  }
  return false;
}, $o.regexp_eatCapturingGroup = function(e) {
  if (e.eat(40)) {
    if (this.options.ecmaVersion >= 9 ? this.regexp_groupSpecifier(e) : e.current() === 63 && e.raise("Invalid group"), this.regexp_disjunction(e), e.eat(41))
      return e.numCapturingParens += 1, true;
    e.raise("Unterminated group");
  }
  return false;
}, $o.regexp_eatExtendedAtom = function(e) {
  return e.eat(46) || this.regexp_eatReverseSolidusAtomEscape(e) || this.regexp_eatCharacterClass(e) || this.regexp_eatUncapturingGroup(e) || this.regexp_eatCapturingGroup(e) || this.regexp_eatInvalidBracedQuantifier(e) || this.regexp_eatExtendedPatternCharacter(e);
}, $o.regexp_eatInvalidBracedQuantifier = function(e) {
  return this.regexp_eatBracedQuantifier(e, true) && e.raise("Nothing to repeat"), false;
}, $o.regexp_eatSyntaxCharacter = function(e) {
  var t = e.current();
  return !!Ro(t) && (e.lastIntValue = t, e.advance(), true);
}, $o.regexp_eatPatternCharacters = function(e) {
  for (var t = e.pos, s = 0; (s = e.current()) !== -1 && !Ro(s); )
    e.advance();
  return e.pos !== t;
}, $o.regexp_eatExtendedPatternCharacter = function(e) {
  var t = e.current();
  return !(t === -1 || t === 36 || t >= 40 && t <= 43 || t === 46 || t === 63 || t === 91 || t === 94 || t === 124) && (e.advance(), true);
}, $o.regexp_groupSpecifier = function(e) {
  if (e.eat(63)) {
    if (this.regexp_eatGroupName(e))
      return e.groupNames.indexOf(e.lastStringValue) !== -1 && e.raise("Duplicate capture group name"), void e.groupNames.push(e.lastStringValue);
    e.raise("Invalid group");
  }
}, $o.regexp_eatGroupName = function(e) {
  if (e.lastStringValue = "", e.eat(60)) {
    if (this.regexp_eatRegExpIdentifierName(e) && e.eat(62))
      return true;
    e.raise("Invalid capture group name");
  }
  return false;
}, $o.regexp_eatRegExpIdentifierName = function(e) {
  if (e.lastStringValue = "", this.regexp_eatRegExpIdentifierStart(e)) {
    for (e.lastStringValue += Da(e.lastIntValue); this.regexp_eatRegExpIdentifierPart(e); )
      e.lastStringValue += Da(e.lastIntValue);
    return true;
  }
  return false;
}, $o.regexp_eatRegExpIdentifierStart = function(e) {
  var t = e.pos, s = this.options.ecmaVersion >= 11, i = e.current(s);
  return e.advance(s), i === 92 && this.regexp_eatRegExpUnicodeEscapeSequence(e, s) && (i = e.lastIntValue), function(e2) {
    return fa(e2, true) || e2 === 36 || e2 === 95;
  }(i) ? (e.lastIntValue = i, true) : (e.pos = t, false);
}, $o.regexp_eatRegExpIdentifierPart = function(e) {
  var t = e.pos, s = this.options.ecmaVersion >= 11, i = e.current(s);
  return e.advance(s), i === 92 && this.regexp_eatRegExpUnicodeEscapeSequence(e, s) && (i = e.lastIntValue), function(e2) {
    return ma(e2, true) || e2 === 36 || e2 === 95 || e2 === 8204 || e2 === 8205;
  }(i) ? (e.lastIntValue = i, true) : (e.pos = t, false);
}, $o.regexp_eatAtomEscape = function(e) {
  return !!(this.regexp_eatBackReference(e) || this.regexp_eatCharacterClassEscape(e) || this.regexp_eatCharacterEscape(e) || e.switchN && this.regexp_eatKGroupName(e)) || (e.switchU && (e.current() === 99 && e.raise("Invalid unicode escape"), e.raise("Invalid escape")), false);
}, $o.regexp_eatBackReference = function(e) {
  var t = e.pos;
  if (this.regexp_eatDecimalEscape(e)) {
    var s = e.lastIntValue;
    if (e.switchU)
      return s > e.maxBackReference && (e.maxBackReference = s), true;
    if (s <= e.numCapturingParens)
      return true;
    e.pos = t;
  }
  return false;
}, $o.regexp_eatKGroupName = function(e) {
  if (e.eat(107)) {
    if (this.regexp_eatGroupName(e))
      return e.backReferenceNames.push(e.lastStringValue), true;
    e.raise("Invalid named reference");
  }
  return false;
}, $o.regexp_eatCharacterEscape = function(e) {
  return this.regexp_eatControlEscape(e) || this.regexp_eatCControlLetter(e) || this.regexp_eatZero(e) || this.regexp_eatHexEscapeSequence(e) || this.regexp_eatRegExpUnicodeEscapeSequence(e, false) || !e.switchU && this.regexp_eatLegacyOctalEscapeSequence(e) || this.regexp_eatIdentityEscape(e);
}, $o.regexp_eatCControlLetter = function(e) {
  var t = e.pos;
  if (e.eat(99)) {
    if (this.regexp_eatControlLetter(e))
      return true;
    e.pos = t;
  }
  return false;
}, $o.regexp_eatZero = function(e) {
  return e.current() === 48 && !Oo(e.lookahead()) && (e.lastIntValue = 0, e.advance(), true);
}, $o.regexp_eatControlEscape = function(e) {
  var t = e.current();
  return t === 116 ? (e.lastIntValue = 9, e.advance(), true) : t === 110 ? (e.lastIntValue = 10, e.advance(), true) : t === 118 ? (e.lastIntValue = 11, e.advance(), true) : t === 102 ? (e.lastIntValue = 12, e.advance(), true) : t === 114 && (e.lastIntValue = 13, e.advance(), true);
}, $o.regexp_eatControlLetter = function(e) {
  var t = e.current();
  return !!Mo(t) && (e.lastIntValue = t % 32, e.advance(), true);
}, $o.regexp_eatRegExpUnicodeEscapeSequence = function(e, t) {
  t === void 0 && (t = false);
  var s, i = e.pos, n2 = t || e.switchU;
  if (e.eat(117)) {
    if (this.regexp_eatFixedHexDigits(e, 4)) {
      var r2 = e.lastIntValue;
      if (n2 && r2 >= 55296 && r2 <= 56319) {
        var a2 = e.pos;
        if (e.eat(92) && e.eat(117) && this.regexp_eatFixedHexDigits(e, 4)) {
          var o2 = e.lastIntValue;
          if (o2 >= 56320 && o2 <= 57343)
            return e.lastIntValue = 1024 * (r2 - 55296) + (o2 - 56320) + 65536, true;
        }
        e.pos = a2, e.lastIntValue = r2;
      }
      return true;
    }
    if (n2 && e.eat(123) && this.regexp_eatHexDigits(e) && e.eat(125) && ((s = e.lastIntValue) >= 0 && s <= 1114111))
      return true;
    n2 && e.raise("Invalid unicode escape"), e.pos = i;
  }
  return false;
}, $o.regexp_eatIdentityEscape = function(e) {
  if (e.switchU)
    return !!this.regexp_eatSyntaxCharacter(e) || !!e.eat(47) && (e.lastIntValue = 47, true);
  var t = e.current();
  return !(t === 99 || e.switchN && t === 107) && (e.lastIntValue = t, e.advance(), true);
}, $o.regexp_eatDecimalEscape = function(e) {
  e.lastIntValue = 0;
  var t = e.current();
  if (t >= 49 && t <= 57) {
    do {
      e.lastIntValue = 10 * e.lastIntValue + (t - 48), e.advance();
    } while ((t = e.current()) >= 48 && t <= 57);
    return true;
  }
  return false;
}, $o.regexp_eatCharacterClassEscape = function(e) {
  var t = e.current();
  if (function(e2) {
    return e2 === 100 || e2 === 68 || e2 === 115 || e2 === 83 || e2 === 119 || e2 === 87;
  }(t))
    return e.lastIntValue = -1, e.advance(), true;
  if (e.switchU && this.options.ecmaVersion >= 9 && (t === 80 || t === 112)) {
    if (e.lastIntValue = -1, e.advance(), e.eat(123) && this.regexp_eatUnicodePropertyValueExpression(e) && e.eat(125))
      return true;
    e.raise("Invalid property name");
  }
  return false;
}, $o.regexp_eatUnicodePropertyValueExpression = function(e) {
  var t = e.pos;
  if (this.regexp_eatUnicodePropertyName(e) && e.eat(61)) {
    var s = e.lastStringValue;
    if (this.regexp_eatUnicodePropertyValue(e)) {
      var i = e.lastStringValue;
      return this.regexp_validateUnicodePropertyNameAndValue(e, s, i), true;
    }
  }
  if (e.pos = t, this.regexp_eatLoneUnicodePropertyNameOrValue(e)) {
    var n2 = e.lastStringValue;
    return this.regexp_validateUnicodePropertyNameOrValue(e, n2), true;
  }
  return false;
}, $o.regexp_validateUnicodePropertyNameAndValue = function(e, t, s) {
  Ta(e.unicodeProperties.nonBinary, t) || e.raise("Invalid property name"), e.unicodeProperties.nonBinary[t].test(s) || e.raise("Invalid property value");
}, $o.regexp_validateUnicodePropertyNameOrValue = function(e, t) {
  e.unicodeProperties.binary.test(t) || e.raise("Invalid property name");
}, $o.regexp_eatUnicodePropertyName = function(e) {
  var t = 0;
  for (e.lastStringValue = ""; Do(t = e.current()); )
    e.lastStringValue += Da(t), e.advance();
  return e.lastStringValue !== "";
}, $o.regexp_eatUnicodePropertyValue = function(e) {
  var t = 0;
  for (e.lastStringValue = ""; Lo(t = e.current()); )
    e.lastStringValue += Da(t), e.advance();
  return e.lastStringValue !== "";
}, $o.regexp_eatLoneUnicodePropertyNameOrValue = function(e) {
  return this.regexp_eatUnicodePropertyValue(e);
}, $o.regexp_eatCharacterClass = function(e) {
  if (e.eat(91)) {
    if (e.eat(94), this.regexp_classRanges(e), e.eat(93))
      return true;
    e.raise("Unterminated character class");
  }
  return false;
}, $o.regexp_classRanges = function(e) {
  for (; this.regexp_eatClassAtom(e); ) {
    var t = e.lastIntValue;
    if (e.eat(45) && this.regexp_eatClassAtom(e)) {
      var s = e.lastIntValue;
      !e.switchU || t !== -1 && s !== -1 || e.raise("Invalid character class"), t !== -1 && s !== -1 && t > s && e.raise("Range out of order in character class");
    }
  }
}, $o.regexp_eatClassAtom = function(e) {
  var t = e.pos;
  if (e.eat(92)) {
    if (this.regexp_eatClassEscape(e))
      return true;
    if (e.switchU) {
      var s = e.current();
      (s === 99 || Fo(s)) && e.raise("Invalid class escape"), e.raise("Invalid escape");
    }
    e.pos = t;
  }
  var i = e.current();
  return i !== 93 && (e.lastIntValue = i, e.advance(), true);
}, $o.regexp_eatClassEscape = function(e) {
  var t = e.pos;
  if (e.eat(98))
    return e.lastIntValue = 8, true;
  if (e.switchU && e.eat(45))
    return e.lastIntValue = 45, true;
  if (!e.switchU && e.eat(99)) {
    if (this.regexp_eatClassControlLetter(e))
      return true;
    e.pos = t;
  }
  return this.regexp_eatCharacterClassEscape(e) || this.regexp_eatCharacterEscape(e);
}, $o.regexp_eatClassControlLetter = function(e) {
  var t = e.current();
  return !(!Oo(t) && t !== 95) && (e.lastIntValue = t % 32, e.advance(), true);
}, $o.regexp_eatHexEscapeSequence = function(e) {
  var t = e.pos;
  if (e.eat(120)) {
    if (this.regexp_eatFixedHexDigits(e, 2))
      return true;
    e.switchU && e.raise("Invalid escape"), e.pos = t;
  }
  return false;
}, $o.regexp_eatDecimalDigits = function(e) {
  var t = e.pos, s = 0;
  for (e.lastIntValue = 0; Oo(s = e.current()); )
    e.lastIntValue = 10 * e.lastIntValue + (s - 48), e.advance();
  return e.pos !== t;
}, $o.regexp_eatHexDigits = function(e) {
  var t = e.pos, s = 0;
  for (e.lastIntValue = 0; Vo(s = e.current()); )
    e.lastIntValue = 16 * e.lastIntValue + Bo(s), e.advance();
  return e.pos !== t;
}, $o.regexp_eatLegacyOctalEscapeSequence = function(e) {
  if (this.regexp_eatOctalDigit(e)) {
    var t = e.lastIntValue;
    if (this.regexp_eatOctalDigit(e)) {
      var s = e.lastIntValue;
      t <= 3 && this.regexp_eatOctalDigit(e) ? e.lastIntValue = 64 * t + 8 * s + e.lastIntValue : e.lastIntValue = 8 * t + s;
    } else
      e.lastIntValue = t;
    return true;
  }
  return false;
}, $o.regexp_eatOctalDigit = function(e) {
  var t = e.current();
  return Fo(t) ? (e.lastIntValue = t - 48, e.advance(), true) : (e.lastIntValue = 0, false);
}, $o.regexp_eatFixedHexDigits = function(e, t) {
  var s = e.pos;
  e.lastIntValue = 0;
  for (var i = 0; i < t; ++i) {
    var n2 = e.current();
    if (!Vo(n2))
      return e.pos = s, false;
    e.lastIntValue = 16 * e.lastIntValue + Bo(n2), e.advance();
  }
  return true;
};
var zo = function(e) {
  this.type = e.type, this.value = e.value, this.start = e.start, this.end = e.end, e.options.locations && (this.loc = new Va(e, e.startLoc, e.endLoc)), e.options.ranges && (this.range = [e.start, e.end]);
}, Wo = Ua.prototype;
function jo(e) {
  return typeof BigInt != "function" ? null : BigInt(e.replace(/_/g, ""));
}
Wo.next = function(e) {
  !e && this.type.keyword && this.containsEsc && this.raiseRecoverable(this.start, "Escape sequence in keyword " + this.type.keyword), this.options.onToken && this.options.onToken(new zo(this)), this.lastTokEnd = this.end, this.lastTokStart = this.start, this.lastTokEndLoc = this.endLoc, this.lastTokStartLoc = this.startLoc, this.nextToken();
}, Wo.getToken = function() {
  return this.next(), new zo(this);
}, typeof Symbol != "undefined" && (Wo[Symbol.iterator] = function() {
  var e = this;
  return { next: function() {
    var t = e.getToken();
    return { done: t.type === Aa.eof, value: t };
  } };
}), Wo.nextToken = function() {
  var e = this.curContext();
  return e && e.preserveSpace || this.skipSpace(), this.start = this.pos, this.options.locations && (this.startLoc = this.curPosition()), this.pos >= this.input.length ? this.finishToken(Aa.eof) : e.override ? e.override(this) : void this.readToken(this.fullCharCodeAtPos());
}, Wo.readToken = function(e) {
  return fa(e, this.options.ecmaVersion >= 6) || e === 92 ? this.readWord() : this.getTokenFromCode(e);
}, Wo.fullCharCodeAtPos = function() {
  var e = this.input.charCodeAt(this.pos);
  if (e <= 55295 || e >= 56320)
    return e;
  var t = this.input.charCodeAt(this.pos + 1);
  return t <= 56319 || t >= 57344 ? e : (e << 10) + t - 56613888;
}, Wo.skipBlockComment = function() {
  var e = this.options.onComment && this.curPosition(), t = this.pos, s = this.input.indexOf("*/", this.pos += 2);
  if (s === -1 && this.raise(this.pos - 2, "Unterminated comment"), this.pos = s + 2, this.options.locations)
    for (var i = void 0, n2 = t; (i = wa(this.input, n2, this.pos)) > -1; )
      ++this.curLine, n2 = this.lineStart = i;
  this.options.onComment && this.options.onComment(true, this.input.slice(t + 2, s), t, this.pos, e, this.curPosition());
}, Wo.skipLineComment = function(e) {
  for (var t = this.pos, s = this.options.onComment && this.curPosition(), i = this.input.charCodeAt(this.pos += e); this.pos < this.input.length && !ka(i); )
    i = this.input.charCodeAt(++this.pos);
  this.options.onComment && this.options.onComment(false, this.input.slice(t + e, this.pos), t, this.pos, s, this.curPosition());
}, Wo.skipSpace = function() {
  e:
    for (; this.pos < this.input.length; ) {
      var e = this.input.charCodeAt(this.pos);
      switch (e) {
        case 32:
        case 160:
          ++this.pos;
          break;
        case 13:
          this.input.charCodeAt(this.pos + 1) === 10 && ++this.pos;
        case 10:
        case 8232:
        case 8233:
          ++this.pos, this.options.locations && (++this.curLine, this.lineStart = this.pos);
          break;
        case 47:
          switch (this.input.charCodeAt(this.pos + 1)) {
            case 42:
              this.skipBlockComment();
              break;
            case 47:
              this.skipLineComment(2);
              break;
            default:
              break e;
          }
          break;
        default:
          if (!(e > 8 && e < 14 || e >= 5760 && Ca.test(String.fromCharCode(e))))
            break e;
          ++this.pos;
      }
    }
}, Wo.finishToken = function(e, t) {
  this.end = this.pos, this.options.locations && (this.endLoc = this.curPosition());
  var s = this.type;
  this.type = e, this.value = t, this.updateContext(s);
}, Wo.readToken_dot = function() {
  var e = this.input.charCodeAt(this.pos + 1);
  if (e >= 48 && e <= 57)
    return this.readNumber(true);
  var t = this.input.charCodeAt(this.pos + 2);
  return this.options.ecmaVersion >= 6 && e === 46 && t === 46 ? (this.pos += 3, this.finishToken(Aa.ellipsis)) : (++this.pos, this.finishToken(Aa.dot));
}, Wo.readToken_slash = function() {
  var e = this.input.charCodeAt(this.pos + 1);
  return this.exprAllowed ? (++this.pos, this.readRegexp()) : e === 61 ? this.finishOp(Aa.assign, 2) : this.finishOp(Aa.slash, 1);
}, Wo.readToken_mult_modulo_exp = function(e) {
  var t = this.input.charCodeAt(this.pos + 1), s = 1, i = e === 42 ? Aa.star : Aa.modulo;
  return this.options.ecmaVersion >= 7 && e === 42 && t === 42 && (++s, i = Aa.starstar, t = this.input.charCodeAt(this.pos + 2)), t === 61 ? this.finishOp(Aa.assign, s + 1) : this.finishOp(i, s);
}, Wo.readToken_pipe_amp = function(e) {
  var t = this.input.charCodeAt(this.pos + 1);
  if (t === e) {
    if (this.options.ecmaVersion >= 12) {
      if (this.input.charCodeAt(this.pos + 2) === 61)
        return this.finishOp(Aa.assign, 3);
    }
    return this.finishOp(e === 124 ? Aa.logicalOR : Aa.logicalAND, 2);
  }
  return t === 61 ? this.finishOp(Aa.assign, 2) : this.finishOp(e === 124 ? Aa.bitwiseOR : Aa.bitwiseAND, 1);
}, Wo.readToken_caret = function() {
  return this.input.charCodeAt(this.pos + 1) === 61 ? this.finishOp(Aa.assign, 2) : this.finishOp(Aa.bitwiseXOR, 1);
}, Wo.readToken_plus_min = function(e) {
  var t = this.input.charCodeAt(this.pos + 1);
  return t === e ? t !== 45 || this.inModule || this.input.charCodeAt(this.pos + 2) !== 62 || this.lastTokEnd !== 0 && !Sa.test(this.input.slice(this.lastTokEnd, this.pos)) ? this.finishOp(Aa.incDec, 2) : (this.skipLineComment(3), this.skipSpace(), this.nextToken()) : t === 61 ? this.finishOp(Aa.assign, 2) : this.finishOp(Aa.plusMin, 1);
}, Wo.readToken_lt_gt = function(e) {
  var t = this.input.charCodeAt(this.pos + 1), s = 1;
  return t === e ? (s = e === 62 && this.input.charCodeAt(this.pos + 2) === 62 ? 3 : 2, this.input.charCodeAt(this.pos + s) === 61 ? this.finishOp(Aa.assign, s + 1) : this.finishOp(Aa.bitShift, s)) : t !== 33 || e !== 60 || this.inModule || this.input.charCodeAt(this.pos + 2) !== 45 || this.input.charCodeAt(this.pos + 3) !== 45 ? (t === 61 && (s = 2), this.finishOp(Aa.relational, s)) : (this.skipLineComment(4), this.skipSpace(), this.nextToken());
}, Wo.readToken_eq_excl = function(e) {
  var t = this.input.charCodeAt(this.pos + 1);
  return t === 61 ? this.finishOp(Aa.equality, this.input.charCodeAt(this.pos + 2) === 61 ? 3 : 2) : e === 61 && t === 62 && this.options.ecmaVersion >= 6 ? (this.pos += 2, this.finishToken(Aa.arrow)) : this.finishOp(e === 61 ? Aa.eq : Aa.prefix, 1);
}, Wo.readToken_question = function() {
  var e = this.options.ecmaVersion;
  if (e >= 11) {
    var t = this.input.charCodeAt(this.pos + 1);
    if (t === 46) {
      var s = this.input.charCodeAt(this.pos + 2);
      if (s < 48 || s > 57)
        return this.finishOp(Aa.questionDot, 2);
    }
    if (t === 63) {
      if (e >= 12) {
        if (this.input.charCodeAt(this.pos + 2) === 61)
          return this.finishOp(Aa.assign, 3);
      }
      return this.finishOp(Aa.coalesce, 2);
    }
  }
  return this.finishOp(Aa.question, 1);
}, Wo.readToken_numberSign = function() {
  var e = 35;
  if (this.options.ecmaVersion >= 13 && (++this.pos, fa(e = this.fullCharCodeAtPos(), true) || e === 92))
    return this.finishToken(Aa.privateId, this.readWord1());
  this.raise(this.pos, "Unexpected character '" + Da(e) + "'");
}, Wo.getTokenFromCode = function(e) {
  switch (e) {
    case 46:
      return this.readToken_dot();
    case 40:
      return ++this.pos, this.finishToken(Aa.parenL);
    case 41:
      return ++this.pos, this.finishToken(Aa.parenR);
    case 59:
      return ++this.pos, this.finishToken(Aa.semi);
    case 44:
      return ++this.pos, this.finishToken(Aa.comma);
    case 91:
      return ++this.pos, this.finishToken(Aa.bracketL);
    case 93:
      return ++this.pos, this.finishToken(Aa.bracketR);
    case 123:
      return ++this.pos, this.finishToken(Aa.braceL);
    case 125:
      return ++this.pos, this.finishToken(Aa.braceR);
    case 58:
      return ++this.pos, this.finishToken(Aa.colon);
    case 96:
      if (this.options.ecmaVersion < 6)
        break;
      return ++this.pos, this.finishToken(Aa.backQuote);
    case 48:
      var t = this.input.charCodeAt(this.pos + 1);
      if (t === 120 || t === 88)
        return this.readRadixNumber(16);
      if (this.options.ecmaVersion >= 6) {
        if (t === 111 || t === 79)
          return this.readRadixNumber(8);
        if (t === 98 || t === 66)
          return this.readRadixNumber(2);
      }
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
      return this.readNumber(false);
    case 34:
    case 39:
      return this.readString(e);
    case 47:
      return this.readToken_slash();
    case 37:
    case 42:
      return this.readToken_mult_modulo_exp(e);
    case 124:
    case 38:
      return this.readToken_pipe_amp(e);
    case 94:
      return this.readToken_caret();
    case 43:
    case 45:
      return this.readToken_plus_min(e);
    case 60:
    case 62:
      return this.readToken_lt_gt(e);
    case 61:
    case 33:
      return this.readToken_eq_excl(e);
    case 63:
      return this.readToken_question();
    case 126:
      return this.finishOp(Aa.prefix, 1);
    case 35:
      return this.readToken_numberSign();
  }
  this.raise(this.pos, "Unexpected character '" + Da(e) + "'");
}, Wo.finishOp = function(e, t) {
  var s = this.input.slice(this.pos, this.pos + t);
  return this.pos += t, this.finishToken(e, s);
}, Wo.readRegexp = function() {
  for (var e, t, s = this.pos; ; ) {
    this.pos >= this.input.length && this.raise(s, "Unterminated regular expression");
    var i = this.input.charAt(this.pos);
    if (Sa.test(i) && this.raise(s, "Unterminated regular expression"), e)
      e = false;
    else {
      if (i === "[")
        t = true;
      else if (i === "]" && t)
        t = false;
      else if (i === "/" && !t)
        break;
      e = i === "\\";
    }
    ++this.pos;
  }
  var n2 = this.input.slice(s, this.pos);
  ++this.pos;
  var r2 = this.pos, a2 = this.readWord1();
  this.containsEsc && this.unexpected(r2);
  var o2 = this.regexpState || (this.regexpState = new To(this));
  o2.reset(s, n2, a2), this.validateRegExpFlags(o2), this.validateRegExpPattern(o2);
  var h2 = null;
  try {
    h2 = new RegExp(n2, a2);
  } catch (e2) {
  }
  return this.finishToken(Aa.regexp, { pattern: n2, flags: a2, value: h2 });
}, Wo.readInt = function(e, t, s) {
  for (var i = this.options.ecmaVersion >= 12 && t === void 0, n2 = s && this.input.charCodeAt(this.pos) === 48, r2 = this.pos, a2 = 0, o2 = 0, h2 = 0, l2 = t == null ? 1 / 0 : t; h2 < l2; ++h2, ++this.pos) {
    var c2 = this.input.charCodeAt(this.pos), u2 = void 0;
    if (i && c2 === 95)
      n2 && this.raiseRecoverable(this.pos, "Numeric separator is not allowed in legacy octal numeric literals"), o2 === 95 && this.raiseRecoverable(this.pos, "Numeric separator must be exactly one underscore"), h2 === 0 && this.raiseRecoverable(this.pos, "Numeric separator is not allowed at the first of digits"), o2 = c2;
    else {
      if ((u2 = c2 >= 97 ? c2 - 97 + 10 : c2 >= 65 ? c2 - 65 + 10 : c2 >= 48 && c2 <= 57 ? c2 - 48 : 1 / 0) >= e)
        break;
      o2 = c2, a2 = a2 * e + u2;
    }
  }
  return i && o2 === 95 && this.raiseRecoverable(this.pos - 1, "Numeric separator is not allowed at the last of digits"), this.pos === r2 || t != null && this.pos - r2 !== t ? null : a2;
}, Wo.readRadixNumber = function(e) {
  var t = this.pos;
  this.pos += 2;
  var s = this.readInt(e);
  return s == null && this.raise(this.start + 2, "Expected number in radix " + e), this.options.ecmaVersion >= 11 && this.input.charCodeAt(this.pos) === 110 ? (s = jo(this.input.slice(t, this.pos)), ++this.pos) : fa(this.fullCharCodeAtPos()) && this.raise(this.pos, "Identifier directly after number"), this.finishToken(Aa.num, s);
}, Wo.readNumber = function(e) {
  var t = this.pos;
  e || this.readInt(10, void 0, true) !== null || this.raise(t, "Invalid number");
  var s = this.pos - t >= 2 && this.input.charCodeAt(t) === 48;
  s && this.strict && this.raise(t, "Invalid number");
  var i = this.input.charCodeAt(this.pos);
  if (!s && !e && this.options.ecmaVersion >= 11 && i === 110) {
    var n2 = jo(this.input.slice(t, this.pos));
    return ++this.pos, fa(this.fullCharCodeAtPos()) && this.raise(this.pos, "Identifier directly after number"), this.finishToken(Aa.num, n2);
  }
  s && /[89]/.test(this.input.slice(t, this.pos)) && (s = false), i !== 46 || s || (++this.pos, this.readInt(10), i = this.input.charCodeAt(this.pos)), i !== 69 && i !== 101 || s || ((i = this.input.charCodeAt(++this.pos)) !== 43 && i !== 45 || ++this.pos, this.readInt(10) === null && this.raise(t, "Invalid number")), fa(this.fullCharCodeAtPos()) && this.raise(this.pos, "Identifier directly after number");
  var r2, a2 = (r2 = this.input.slice(t, this.pos), s ? parseInt(r2, 8) : parseFloat(r2.replace(/_/g, "")));
  return this.finishToken(Aa.num, a2);
}, Wo.readCodePoint = function() {
  var e;
  if (this.input.charCodeAt(this.pos) === 123) {
    this.options.ecmaVersion < 6 && this.unexpected();
    var t = ++this.pos;
    e = this.readHexChar(this.input.indexOf("}", this.pos) - this.pos), ++this.pos, e > 1114111 && this.invalidStringToken(t, "Code point out of bounds");
  } else
    e = this.readHexChar(4);
  return e;
}, Wo.readString = function(e) {
  for (var t = "", s = ++this.pos; ; ) {
    this.pos >= this.input.length && this.raise(this.start, "Unterminated string constant");
    var i = this.input.charCodeAt(this.pos);
    if (i === e)
      break;
    i === 92 ? (t += this.input.slice(s, this.pos), t += this.readEscapedChar(false), s = this.pos) : i === 8232 || i === 8233 ? (this.options.ecmaVersion < 10 && this.raise(this.start, "Unterminated string constant"), ++this.pos, this.options.locations && (this.curLine++, this.lineStart = this.pos)) : (ka(i) && this.raise(this.start, "Unterminated string constant"), ++this.pos);
  }
  return t += this.input.slice(s, this.pos++), this.finishToken(Aa.string, t);
};
var Uo = {};
Wo.tryReadTemplateToken = function() {
  this.inTemplateElement = true;
  try {
    this.readTmplToken();
  } catch (e) {
    if (e !== Uo)
      throw e;
    this.readInvalidTemplateToken();
  }
  this.inTemplateElement = false;
}, Wo.invalidStringToken = function(e, t) {
  if (this.inTemplateElement && this.options.ecmaVersion >= 9)
    throw Uo;
  this.raise(e, t);
}, Wo.readTmplToken = function() {
  for (var e = "", t = this.pos; ; ) {
    this.pos >= this.input.length && this.raise(this.start, "Unterminated template");
    var s = this.input.charCodeAt(this.pos);
    if (s === 96 || s === 36 && this.input.charCodeAt(this.pos + 1) === 123)
      return this.pos !== this.start || this.type !== Aa.template && this.type !== Aa.invalidTemplate ? (e += this.input.slice(t, this.pos), this.finishToken(Aa.template, e)) : s === 36 ? (this.pos += 2, this.finishToken(Aa.dollarBraceL)) : (++this.pos, this.finishToken(Aa.backQuote));
    if (s === 92)
      e += this.input.slice(t, this.pos), e += this.readEscapedChar(true), t = this.pos;
    else if (ka(s)) {
      switch (e += this.input.slice(t, this.pos), ++this.pos, s) {
        case 13:
          this.input.charCodeAt(this.pos) === 10 && ++this.pos;
        case 10:
          e += "\n";
          break;
        default:
          e += String.fromCharCode(s);
      }
      this.options.locations && (++this.curLine, this.lineStart = this.pos), t = this.pos;
    } else
      ++this.pos;
  }
}, Wo.readInvalidTemplateToken = function() {
  for (; this.pos < this.input.length; this.pos++)
    switch (this.input[this.pos]) {
      case "\\":
        ++this.pos;
        break;
      case "$":
        if (this.input[this.pos + 1] !== "{")
          break;
      case "`":
        return this.finishToken(Aa.invalidTemplate, this.input.slice(this.start, this.pos));
    }
  this.raise(this.start, "Unterminated template");
}, Wo.readEscapedChar = function(e) {
  var t = this.input.charCodeAt(++this.pos);
  switch (++this.pos, t) {
    case 110:
      return "\n";
    case 114:
      return "\r";
    case 120:
      return String.fromCharCode(this.readHexChar(2));
    case 117:
      return Da(this.readCodePoint());
    case 116:
      return "	";
    case 98:
      return "\b";
    case 118:
      return "\v";
    case 102:
      return "\f";
    case 13:
      this.input.charCodeAt(this.pos) === 10 && ++this.pos;
    case 10:
      return this.options.locations && (this.lineStart = this.pos, ++this.curLine), "";
    case 56:
    case 57:
      if (this.strict && this.invalidStringToken(this.pos - 1, "Invalid escape sequence"), e) {
        var s = this.pos - 1;
        return this.invalidStringToken(s, "Invalid escape sequence in template string"), null;
      }
    default:
      if (t >= 48 && t <= 55) {
        var i = this.input.substr(this.pos - 1, 3).match(/^[0-7]+/)[0], n2 = parseInt(i, 8);
        return n2 > 255 && (i = i.slice(0, -1), n2 = parseInt(i, 8)), this.pos += i.length - 1, t = this.input.charCodeAt(this.pos), i === "0" && t !== 56 && t !== 57 || !this.strict && !e || this.invalidStringToken(this.pos - 1 - i.length, e ? "Octal literal in template string" : "Octal literal in strict mode"), String.fromCharCode(n2);
      }
      return ka(t) ? "" : String.fromCharCode(t);
  }
}, Wo.readHexChar = function(e) {
  var t = this.pos, s = this.readInt(16, e);
  return s === null && this.invalidStringToken(t, "Bad character escape sequence"), s;
}, Wo.readWord1 = function() {
  this.containsEsc = false;
  for (var e = "", t = true, s = this.pos, i = this.options.ecmaVersion >= 6; this.pos < this.input.length; ) {
    var n2 = this.fullCharCodeAtPos();
    if (ma(n2, i))
      this.pos += n2 <= 65535 ? 1 : 2;
    else {
      if (n2 !== 92)
        break;
      this.containsEsc = true, e += this.input.slice(s, this.pos);
      var r2 = this.pos;
      this.input.charCodeAt(++this.pos) !== 117 && this.invalidStringToken(this.pos, "Expecting Unicode escape sequence \\uXXXX"), ++this.pos;
      var a2 = this.readCodePoint();
      (t ? fa : ma)(a2, i) || this.invalidStringToken(r2, "Invalid Unicode escape"), e += Da(a2), s = this.pos;
    }
    t = false;
  }
  return e + this.input.slice(s, this.pos);
}, Wo.readWord = function() {
  var e = this.readWord1(), t = Aa.name;
  return this.keywords.test(e) && (t = va[e]), this.finishToken(t, e);
};
Ua.acorn = { Parser: Ua, version: "8.7.1", defaultOptions: Fa, Position: Oa, SourceLocation: Va, getLineInfo: Ba, Node: fo, TokenType: ga, tokTypes: Aa, keywordTypes: va, TokContext: no, tokContexts: ro, isIdentifierChar: ma, isIdentifierStart: fa, Token: zo, isNewLine: ka, lineBreak: Sa, lineBreakG: Pa, nonASCIIwhitespace: Ca };
class Go {
  constructor(e) {
    this.maxParallel = e, this.queue = [], this.workerCount = 0;
  }
  run(e) {
    return new Promise((t, s) => {
      this.queue.push({ reject: s, resolve: t, task: e }), this.work();
    });
  }
  async work() {
    if (this.workerCount >= this.maxParallel)
      return;
    let e;
    for (this.workerCount++; e = this.queue.shift(); ) {
      const { reject: t, resolve: s, task: i } = e;
      try {
        s(await i());
      } catch (e2) {
        t(e2);
      }
    }
    this.workerCount--;
  }
}
const Ho = (e) => () => {
  le({ code: "NO_FS_IN_BROWSER", message: `Cannot access the file system (via "${e}") when using the browser build of Rollup. Make sure you supply a plugin with custom resolveId and load hooks to Rollup.`, url: "https://rollupjs.org/guide/en/#a-simple-example" });
}, qo = { mkdir: Ho("fs.mkdir"), readFile: Ho("fs.readFile"), writeFile: Ho("fs.writeFile") };
async function Ko(e, t, s, i, n2, r2, a2, o2) {
  const h2 = await function(e2, t2, s2, i2, n3, r3, a3) {
    let o3 = null, h3 = null;
    if (n3) {
      o3 = /* @__PURE__ */ new Set();
      for (const s3 of n3)
        e2 === s3.source && t2 === s3.importer && o3.add(s3.plugin);
      h3 = (e3, t3) => __spreadProps(__spreadValues({}, e3), { resolve: (e4, s3, { custom: r4, isEntry: a4, skipSelf: o4 } = Z) => i2(e4, s3, r4, a4, o4 ? [...n3, { importer: s3, plugin: t3, source: e4 }] : n3) });
    }
    return s2.hookFirst("resolveId", [e2, t2, { custom: r3, isEntry: a3 }], h3, o3);
  }(e, t, i, n2, r2, a2, o2);
  return h2;
}
function Xo(e, t, { hook: s, id: i } = {}) {
  return typeof e == "string" && (e = { message: e }), e.code && e.code !== ue.PLUGIN_ERROR && (e.pluginCode = e.code), e.code = ue.PLUGIN_ERROR, e.plugin = t, s && (e.hook = s), i && (e.id = i), le(e);
}
const Yo = [{ active: true, deprecated: "resolveAssetUrl", replacement: "resolveFileUrl" }];
const Qo = { delete: () => false, get() {
}, has: () => false, set() {
} };
function Zo(e) {
  return e.startsWith("at position ") || e.startsWith("at output position ") ? le({ code: "ANONYMOUS_PLUGIN_CACHE", message: "A plugin is trying to use the Rollup cache but is not declaring a plugin name or cacheKey." }) : le({ code: "DUPLICATE_PLUGIN_NAME", message: `The plugin name ${e} is being used twice in the same build. Plugin names must be distinct or provide a cacheKey (please post an issue to the plugin if you are a plugin user).` });
}
async function Jo(e, t, s, i) {
  const n2 = t.id, r2 = [];
  let a2 = e.map === null ? null : Tr(e.map);
  const o2 = e.code;
  let h2 = e.ast;
  const c2 = [], u2 = [];
  let d2 = false;
  const p2 = () => d2 = true;
  let f2 = "";
  const m2 = e.code;
  let g2;
  try {
    g2 = await s.hookReduceArg0("transform", [m2, n2], function(e2, s2, n3) {
      let a3, o3;
      if (typeof s2 == "string")
        a3 = s2;
      else {
        if (!s2 || typeof s2 != "object")
          return e2;
        if (t.updateOptions(s2), s2.code == null)
          return (s2.map || s2.ast) && i(function(e3) {
            return { code: ue.NO_TRANSFORM_MAP_OR_AST_WITHOUT_CODE, message: `The plugin "${e3}" returned a "map" or "ast" without returning a "code". This will be ignored.` };
          }(n3.name)), e2;
        ({ code: a3, map: o3, ast: h2 } = s2);
      }
      return o3 !== null && r2.push(Tr(typeof o3 == "string" ? JSON.parse(o3) : o3) || { missing: true, plugin: n3.name }), a3;
    }, (e2, t2) => {
      return f2 = t2.name, __spreadProps(__spreadValues({}, e2), { addWatchFile(t3) {
        c2.push(t3), e2.addWatchFile(t3);
      }, cache: d2 ? e2.cache : (h3 = e2.cache, g3 = p2, { delete: (e3) => (g3(), h3.delete(e3)), get: (e3) => (g3(), h3.get(e3)), has: (e3) => (g3(), h3.has(e3)), set: (e3, t3) => (g3(), h3.set(e3, t3)) }), emitAsset: (t3, s2) => (u2.push({ name: t3, source: s2, type: "asset" }), e2.emitAsset(t3, s2)), emitChunk: (t3, s2) => (u2.push({ id: t3, name: s2 && s2.name, type: "chunk" }), e2.emitChunk(t3, s2)), emitFile: (e3) => (u2.push(e3), s.emitFile(e3)), error: (t3, s2) => (typeof t3 == "string" && (t3 = { message: t3 }), s2 && ce(t3, s2, m2, n2), t3.id = n2, t3.hook = "transform", e2.error(t3)), getCombinedSourcemap() {
        const e3 = function(e4, t3, s2, i2, n3) {
          return i2.length ? __spreadValues({ version: 3 }, Ln(e4, t3, s2, i2, Dn(n3)).traceMappings()) : s2;
        }(n2, o2, a2, r2, i);
        if (!e3) {
          return new E$2(o2).generateMap({ hires: true, includeContent: true, source: n2 });
        }
        return a2 !== e3 && (a2 = e3, r2.length = 0), new l(__spreadProps(__spreadValues({}, e3), { file: null, sourcesContent: e3.sourcesContent }));
      }, setAssetSource() {
        return this.error({ code: "INVALID_SETASSETSOURCE", message: "setAssetSource cannot be called in transform for caching reasons. Use emitFile with a source, or call setAssetSource in another hook." });
      }, warn(t3, s2) {
        typeof t3 == "string" && (t3 = { message: t3 }), s2 && ce(t3, s2, m2, n2), t3.id = n2, t3.hook = "transform", e2.warn(t3);
      } });
      var h3, g3;
    });
  } catch (e2) {
    Xo(e2, f2, { hook: "transform", id: n2 });
  }
  return d2 || u2.length && (t.transformFiles = u2), { ast: h2, code: g2, customTransformCache: d2, originalCode: o2, originalSourcemap: a2, sourcemapChain: r2, transformDependencies: c2 };
}
class eh {
  constructor(e, t, s, i) {
    this.graph = e, this.modulesById = t, this.options = s, this.pluginDriver = i, this.implicitEntryModules = /* @__PURE__ */ new Set(), this.indexedEntryModules = [], this.latestLoadModulesPromise = Promise.resolve(), this.moduleLoadPromises = /* @__PURE__ */ new Map(), this.modulesWithLoadedDependencies = /* @__PURE__ */ new Set(), this.nextChunkNamePriority = 0, this.nextEntryModuleIndex = 0, this.resolveId = async (e2, t2, s2, i2, n2 = null) => this.getResolvedIdWithDefaults(this.getNormalizedResolvedIdWithoutDefaults(!this.options.external(e2, t2, false) && await Ko(e2, t2, this.options.preserveSymlinks, this.pluginDriver, this.resolveId, n2, s2, typeof i2 == "boolean" ? i2 : !t2), t2, e2)), this.hasModuleSideEffects = s.treeshake ? s.treeshake.moduleSideEffects : () => true, this.readQueue = new Go(s.maxParallelFileReads);
  }
  async addAdditionalModules(e) {
    const t = this.extendLoadModulesPromise(Promise.all(e.map((e2) => this.loadEntryModule(e2, false, void 0, null))));
    return await this.awaitLoadModulesPromise(), t;
  }
  async addEntryModules(e, t) {
    const s = this.nextEntryModuleIndex;
    this.nextEntryModuleIndex += e.length;
    const i = this.nextChunkNamePriority;
    this.nextChunkNamePriority += e.length;
    const n2 = await this.extendLoadModulesPromise(Promise.all(e.map(({ id: e2, importer: t2 }) => this.loadEntryModule(e2, true, t2, null))).then((n3) => {
      for (let r2 = 0; r2 < n3.length; r2++) {
        const a2 = n3[r2];
        a2.isUserDefinedEntryPoint = a2.isUserDefinedEntryPoint || t, sh(a2, e[r2], t, i + r2);
        const o2 = this.indexedEntryModules.find((e2) => e2.module === a2);
        o2 ? o2.index = Math.min(o2.index, s + r2) : this.indexedEntryModules.push({ index: s + r2, module: a2 });
      }
      return this.indexedEntryModules.sort(({ index: e2 }, { index: t2 }) => e2 > t2 ? 1 : -1), n3;
    }));
    return await this.awaitLoadModulesPromise(), { entryModules: this.indexedEntryModules.map(({ module: e2 }) => e2), implicitEntryModules: [...this.implicitEntryModules], newEntryModules: n2 };
  }
  async emitChunk({ fileName: e, id: t, importer: s, name: i, implicitlyLoadedAfterOneOf: n2, preserveSignature: r2 }) {
    const a2 = { fileName: e || null, id: t, importer: s, name: i || null }, o2 = n2 ? await this.addEntryWithImplicitDependants(a2, n2) : (await this.addEntryModules([a2], false)).newEntryModules[0];
    return r2 != null && (o2.preserveSignature = r2), o2;
  }
  async preloadModule(e) {
    return (await this.fetchModule(this.getResolvedIdWithDefaults(e), void 0, false, !e.resolveDependencies || "resolveDependencies")).info;
  }
  addEntryWithImplicitDependants(e, t) {
    const s = this.nextChunkNamePriority++;
    return this.extendLoadModulesPromise(this.loadEntryModule(e.id, false, e.importer, null).then(async (i) => {
      if (sh(i, e, false, s), !i.info.isEntry) {
        this.implicitEntryModules.add(i);
        const s2 = await Promise.all(t.map((t2) => this.loadEntryModule(t2, false, e.importer, i.id)));
        for (const e2 of s2)
          i.implicitlyLoadedAfter.add(e2);
        for (const e2 of i.implicitlyLoadedAfter)
          e2.implicitlyLoadedBefore.add(i);
      }
      return i;
    }));
  }
  async addModuleSource(e, t, s) {
    let i;
    Ji("load modules", 3);
    try {
      i = await this.readQueue.run(async () => {
        var t2;
        return (t2 = await this.pluginDriver.hookFirst("load", [e])) !== null && t2 !== void 0 ? t2 : await qo.readFile(e, "utf8");
      });
    } catch (s2) {
      en("load modules", 3);
      let i2 = `Could not load ${e}`;
      throw t && (i2 += ` (imported by ${re(t)})`), i2 += `: ${s2.message}`, s2.message = i2, s2;
    }
    en("load modules", 3);
    const n2 = typeof i == "string" ? { code: i } : i != null && typeof i == "object" && typeof i.code == "string" ? i : le(function(e2) {
      return { code: ue.BAD_LOADER, message: `Error loading ${re(e2)}: plugin load hook should return a string, a { code, map } object, or nothing/null` };
    }(e)), r2 = this.graph.cachedModules.get(e);
    if (!r2 || r2.customTransformCache || r2.originalCode !== n2.code || await this.pluginDriver.hookFirst("shouldTransformCachedModule", [{ ast: r2.ast, code: r2.code, id: r2.id, meta: r2.meta, moduleSideEffects: r2.moduleSideEffects, resolvedSources: r2.resolvedIds, syntheticNamedExports: r2.syntheticNamedExports }]))
      s.updateOptions(n2), s.setSource(await Jo(n2, s, this.pluginDriver, this.options.onwarn));
    else {
      if (r2.transformFiles)
        for (const e2 of r2.transformFiles)
          this.pluginDriver.emitFile(e2);
      s.setSource(r2);
    }
  }
  async awaitLoadModulesPromise() {
    let e;
    do {
      e = this.latestLoadModulesPromise, await e;
    } while (e !== this.latestLoadModulesPromise);
  }
  extendLoadModulesPromise(e) {
    return this.latestLoadModulesPromise = Promise.all([e, this.latestLoadModulesPromise]), this.latestLoadModulesPromise.catch(() => {
    }), e;
  }
  async fetchDynamicDependencies(e, t) {
    const s = await Promise.all(t.map((t2) => t2.then(async ([t3, s2]) => s2 === null ? null : typeof s2 == "string" ? (t3.resolution = s2, null) : t3.resolution = await this.fetchResolvedDependency(re(s2.id), e.id, s2))));
    for (const t2 of s)
      t2 && (e.dynamicDependencies.add(t2), t2.dynamicImporters.push(e.id));
  }
  async fetchModule({ id: e, meta: t, moduleSideEffects: s, syntheticNamedExports: i }, n2, r2, a2) {
    const o2 = this.modulesById.get(e);
    if (o2 instanceof on)
      return await this.handleExistingModule(o2, r2, a2), o2;
    const h2 = new on(this.graph, e, this.options, r2, s, i, t);
    this.modulesById.set(e, h2), this.graph.watchFiles[e] = true;
    const l2 = this.addModuleSource(e, n2, h2).then(() => [this.getResolveStaticDependencyPromises(h2), this.getResolveDynamicImportPromises(h2), c2]), c2 = nh(l2).then(() => this.pluginDriver.hookParallel("moduleParsed", [h2.info]));
    c2.catch(() => {
    }), this.moduleLoadPromises.set(h2, l2);
    const u2 = await l2;
    return a2 ? a2 === "resolveDependencies" && await c2 : await this.fetchModuleDependencies(h2, ...u2), h2;
  }
  async fetchModuleDependencies(e, t, s, i) {
    this.modulesWithLoadedDependencies.has(e) || (this.modulesWithLoadedDependencies.add(e), await Promise.all([this.fetchStaticDependencies(e, t), this.fetchDynamicDependencies(e, s)]), e.linkImports(), await i);
  }
  fetchResolvedDependency(e, t, s) {
    if (s.external) {
      const { external: i, id: n2, moduleSideEffects: r2, meta: a2 } = s;
      this.modulesById.has(n2) || this.modulesById.set(n2, new Ce(this.options, n2, r2, a2, i !== "absolute" && w$2(n2)));
      const o2 = this.modulesById.get(n2);
      return o2 instanceof Ce ? Promise.resolve(o2) : le(function(e2, t2) {
        return { code: ue.INVALID_EXTERNAL_ID, message: `'${e2}' is imported as an external by ${re(t2)}, but is already an existing non-external module id.` };
      }(e, t));
    }
    return this.fetchModule(s, t, false, false);
  }
  async fetchStaticDependencies(e, t) {
    for (const s of await Promise.all(t.map((t2) => t2.then(([t3, s2]) => this.fetchResolvedDependency(t3, e.id, s2)))))
      e.dependencies.add(s), s.importers.push(e.id);
    if (!this.options.treeshake || e.info.moduleSideEffects === "no-treeshake")
      for (const t2 of e.dependencies)
        t2 instanceof on && (t2.importedFromNotTreeshaken = true);
  }
  getNormalizedResolvedIdWithoutDefaults(e, t, s) {
    const { makeAbsoluteExternalsRelative: i } = this.options;
    if (e) {
      if (typeof e == "object") {
        const n4 = e.external || this.options.external(e.id, t, true);
        return __spreadProps(__spreadValues({}, e), { external: n4 && (n4 === "relative" || !w$2(e.id) || n4 === true && ih(e.id, s, i) || "absolute") });
      }
      const n3 = this.options.external(e, t, true);
      return { external: n3 && (ih(e, s, i) || "absolute"), id: n3 && i ? th(e, t) : e };
    }
    const n2 = i ? th(s, t) : s;
    return e === false || this.options.external(n2, t, true) ? { external: ih(n2, s, i) || "absolute", id: n2 } : null;
  }
  getResolveDynamicImportPromises(e) {
    return e.dynamicImports.map(async (t) => {
      const s = await this.resolveDynamicImport(e, typeof t.argument == "string" ? t.argument : t.argument.esTreeNode, e.id);
      return s && typeof s == "object" && (t.id = s.id), [t, s];
    });
  }
  getResolveStaticDependencyPromises(e) {
    return Array.from(e.sources, async (t) => [t, e.resolvedIds[t] = e.resolvedIds[t] || this.handleResolveId(await this.resolveId(t, e.id, J, false), t, e.id)]);
  }
  getResolvedIdWithDefaults(e) {
    var t, s;
    if (!e)
      return null;
    const i = e.external || false;
    return { external: i, id: e.id, meta: e.meta || {}, moduleSideEffects: (t = e.moduleSideEffects) !== null && t !== void 0 ? t : this.hasModuleSideEffects(e.id, !!i), syntheticNamedExports: (s = e.syntheticNamedExports) !== null && s !== void 0 && s };
  }
  async handleExistingModule(e, t, s) {
    const i = this.moduleLoadPromises.get(e);
    if (s)
      return s === "resolveDependencies" ? nh(i) : i;
    if (t) {
      e.info.isEntry = true, this.implicitEntryModules.delete(e);
      for (const t2 of e.implicitlyLoadedAfter)
        t2.implicitlyLoadedBefore.delete(e);
      e.implicitlyLoadedAfter.clear();
    }
    return this.fetchModuleDependencies(e, ...await i);
  }
  handleResolveId(e, t, s) {
    return e === null ? C$2(t) ? le(function(e2, t2) {
      return { code: ue.UNRESOLVED_IMPORT, message: `Could not resolve '${e2}' from ${re(t2)}` };
    }(t, s)) : (this.options.onwarn(function(e2, t2) {
      return { code: ue.UNRESOLVED_IMPORT, importer: re(t2), message: `'${e2}' is imported by ${re(t2)}, but could not be resolved \u2013 treating it as an external dependency`, source: e2, url: "https://rollupjs.org/guide/en/#warning-treating-module-as-external-dependency" };
    }(t, s)), { external: true, id: t, meta: {}, moduleSideEffects: this.hasModuleSideEffects(t, true), syntheticNamedExports: false }) : (e.external && e.syntheticNamedExports && this.options.onwarn(function(e2, t2) {
      return { code: ue.EXTERNAL_SYNTHETIC_EXPORTS, importer: re(t2), message: `External '${e2}' can not have 'syntheticNamedExports' enabled.`, source: e2 };
    }(t, s)), e);
  }
  async loadEntryModule(e, t, s, i) {
    const n2 = await Ko(e, s, this.options.preserveSymlinks, this.pluginDriver, this.resolveId, null, J, true);
    return n2 == null ? le(i === null ? function(e2) {
      return { code: ue.UNRESOLVED_ENTRY, message: `Could not resolve entry module (${re(e2)}).` };
    }(e) : function(e2, t2) {
      return { code: ue.MISSING_IMPLICIT_DEPENDANT, message: `Module "${re(e2)}" that should be implicitly loaded before "${re(t2)}" could not be resolved.` };
    }(e, i)) : n2 === false || typeof n2 == "object" && n2.external ? le(i === null ? function(e2) {
      return { code: ue.UNRESOLVED_ENTRY, message: `Entry module cannot be external (${re(e2)}).` };
    }(e) : function(e2, t2) {
      return { code: ue.MISSING_IMPLICIT_DEPENDANT, message: `Module "${re(e2)}" that should be implicitly loaded before "${re(t2)}" cannot be external.` };
    }(e, i)) : this.fetchModule(this.getResolvedIdWithDefaults(typeof n2 == "object" ? n2 : { id: n2 }), void 0, t, false);
  }
  async resolveDynamicImport(e, t, s) {
    var i, n2;
    const r2 = await this.pluginDriver.hookFirst("resolveDynamicImport", [t, s]);
    return typeof t != "string" ? typeof r2 == "string" ? r2 : r2 ? __spreadValues({ external: false, moduleSideEffects: true }, r2) : null : r2 == null ? (i = (n2 = e.resolvedIds)[t]) !== null && i !== void 0 ? i : n2[t] = this.handleResolveId(await this.resolveId(t, e.id, J, false), t, e.id) : this.handleResolveId(this.getResolvedIdWithDefaults(this.getNormalizedResolvedIdWithoutDefaults(r2, s, t)), t, s);
  }
}
function th(e, t) {
  return C$2(e) ? t ? R(t, "..", e) : R(e) : e;
}
function sh(e, { fileName: t, name: s }, i, n2) {
  var r2;
  if (t !== null)
    e.chunkFileNames.add(t);
  else if (s !== null) {
    let t2 = 0;
    for (; ((r2 = e.chunkNames[t2]) === null || r2 === void 0 ? void 0 : r2.priority) < n2; )
      t2++;
    e.chunkNames.splice(t2, 0, { isUserDefined: i, name: s, priority: n2 });
  }
}
function ih(e, t, s) {
  return s === true || s === "ifRelativeSource" && C$2(t) || !w$2(e);
}
async function nh(e) {
  const [t, s] = await e;
  return Promise.all([...t, ...s]);
}
class rh extends Lt {
  constructor() {
    super(), this.parent = null, this.variables.set("undefined", new Ri());
  }
  findVariable(e) {
    let t = this.variables.get(e);
    return t || (t = new xs(e), this.variables.set(e, t)), t;
  }
}
function ah(e, t, s, i, n2, r2) {
  let a2 = false;
  return (...o2) => (a2 || (a2 = true, be({ message: `The "this.${t}" plugin context function used by plugin ${i} is deprecated. The "this.${s}" plugin context function should be used instead.`, plugin: i }, n2, r2)), e(...o2));
}
function oh(e, t, s, i, n2, r2) {
  let a2, o2 = true;
  if (typeof e.cacheKey != "string" && (e.name.startsWith("at position ") || e.name.startsWith("at output position ") || r2.has(e.name) ? o2 = false : r2.add(e.name)), t)
    if (o2) {
      const s2 = e.cacheKey || e.name;
      l2 = t[s2] || (t[s2] = /* @__PURE__ */ Object.create(null)), a2 = { delete: (e2) => delete l2[e2], get(e2) {
        const t2 = l2[e2];
        if (t2)
          return t2[0] = 0, t2[1];
      }, has(e2) {
        const t2 = l2[e2];
        return !!t2 && (t2[0] = 0, true);
      }, set(e2, t2) {
        l2[e2] = [0, t2];
      } };
    } else
      h2 = e.name, a2 = { delete: () => Zo(h2), get: () => Zo(h2), has: () => Zo(h2), set: () => Zo(h2) };
  else
    a2 = Qo;
  var h2, l2;
  const c2 = { addWatchFile(e2) {
    if (s.phase >= ji.GENERATE)
      return this.error({ code: ue.INVALID_ROLLUP_PHASE, message: "Cannot call addWatchFile after the build has finished." });
    s.watchFiles[e2] = true;
  }, cache: a2, emitAsset: ah((e2, t2) => n2.emitFile({ name: e2, source: t2, type: "asset" }), "emitAsset", "emitFile", e.name, true, i), emitChunk: ah((e2, t2) => n2.emitFile({ id: e2, name: t2 && t2.name, type: "chunk" }), "emitChunk", "emitFile", e.name, true, i), emitFile: n2.emitFile.bind(n2), error: (t2) => Xo(t2, e.name), getAssetFileName: ah(n2.getFileName, "getAssetFileName", "getFileName", e.name, true, i), getChunkFileName: ah(n2.getFileName, "getChunkFileName", "getFileName", e.name, true, i), getFileName: n2.getFileName, getModuleIds: () => s.modulesById.keys(), getModuleInfo: s.getModuleInfo, getWatchFiles: () => Object.keys(s.watchFiles), isExternal: ah((e2, t2, s2 = false) => i.external(e2, t2, s2), "isExternal", "resolve", e.name, true, i), load: (e2) => s.moduleLoader.preloadModule(e2), meta: { rollupVersion: "2.75.4", watchMode: s.watchMode }, get moduleIds() {
    const t2 = s.modulesById.keys();
    return function* () {
      be({ message: `Accessing "this.moduleIds" on the plugin context by plugin ${e.name} is deprecated. The "this.getModuleIds" plugin context function should be used instead.`, plugin: e.name }, false, i), yield* t2;
    }();
  }, parse: s.contextParse.bind(s), resolve: (t2, i2, { custom: n3, isEntry: r3, skipSelf: a3 } = Z) => s.moduleLoader.resolveId(t2, i2, n3, r3, a3 ? [{ importer: i2, plugin: e, source: t2 }] : null), resolveId: ah((e2, t2) => s.moduleLoader.resolveId(e2, t2, Z, void 0).then((e3) => e3 && e3.id), "resolveId", "resolve", e.name, true, i), setAssetSource: n2.setAssetSource, warn(t2) {
    typeof t2 == "string" && (t2 = { message: t2 }), t2.code && (t2.pluginCode = t2.code), t2.code = "PLUGIN_WARNING", t2.plugin = e.name, i.onwarn(t2);
  } };
  return c2;
}
const hh = Object.keys({ buildEnd: 1, buildStart: 1, closeBundle: 1, closeWatcher: 1, load: 1, moduleParsed: 1, options: 1, resolveDynamicImport: 1, resolveId: 1, shouldTransformCachedModule: 1, transform: 1, watchChange: 1 });
function lh(e, t) {
  return le({ code: "INVALID_PLUGIN_HOOK", message: `Error running plugin hook ${e} for ${t}, expected a function hook.` });
}
class ch {
  constructor(e, t, s, i, n2) {
    this.graph = e, this.options = t, this.unfulfilledActions = /* @__PURE__ */ new Set(), function(e2, t2) {
      for (const { active: s2, deprecated: i2, replacement: n3 } of Yo)
        for (const r3 of e2)
          i2 in r3 && be({ message: `The "${i2}" hook used by plugin ${r3.name} is deprecated. The "${n3}" hook should be used instead.`, plugin: r3.name }, s2, t2);
    }(s, t), this.pluginCache = i, this.fileEmitter = new Gr(e, t, n2 && n2.fileEmitter), this.emitFile = this.fileEmitter.emitFile.bind(this.fileEmitter), this.getFileName = this.fileEmitter.getFileName.bind(this.fileEmitter), this.finaliseAssets = this.fileEmitter.assertAssetsFinalized.bind(this.fileEmitter), this.setOutputBundle = this.fileEmitter.setOutputBundle.bind(this.fileEmitter), this.plugins = s.concat(n2 ? n2.plugins : []);
    const r2 = /* @__PURE__ */ new Set();
    if (this.pluginContexts = new Map(this.plugins.map((s2) => [s2, oh(s2, i, e, t, this.fileEmitter, r2)])), n2)
      for (const e2 of s)
        for (const s2 of hh)
          s2 in e2 && t.onwarn((a2 = e2.name, o2 = s2, { code: ue.INPUT_HOOK_IN_OUTPUT_PLUGIN, message: `The "${o2}" hook used by the output plugin ${a2} is a build time hook and will not be run for that plugin. Either this plugin cannot be used as an output plugin, or it should have an option to configure it as an output plugin.` }));
    var a2, o2;
  }
  createOutputPluginDriver(e) {
    return new ch(this.graph, this.options, e, this.pluginCache, this);
  }
  getUnfulfilledHookActions() {
    return this.unfulfilledActions;
  }
  hookFirst(e, t, s, i) {
    let n2 = Promise.resolve(void 0);
    for (const r2 of this.plugins)
      i && i.has(r2) || (n2 = n2.then((i2) => i2 != null ? i2 : this.runHook(e, t, r2, false, s)));
    return n2;
  }
  hookFirstSync(e, t, s) {
    for (const i of this.plugins) {
      const n2 = this.runHookSync(e, t, i, s);
      if (n2 != null)
        return n2;
    }
    return null;
  }
  hookParallel(e, t, s) {
    const i = [];
    for (const n2 of this.plugins) {
      const r2 = this.runHook(e, t, n2, false, s);
      r2 && i.push(r2);
    }
    return Promise.all(i).then(() => {
    });
  }
  hookReduceArg0(e, [t, ...s], i, n2) {
    let r2 = Promise.resolve(t);
    for (const t2 of this.plugins)
      r2 = r2.then((r3) => {
        const a2 = [r3, ...s], o2 = this.runHook(e, a2, t2, false, n2);
        return o2 ? o2.then((e2) => i.call(this.pluginContexts.get(t2), r3, e2, t2)) : r3;
      });
    return r2;
  }
  hookReduceArg0Sync(e, [t, ...s], i, n2) {
    for (const r2 of this.plugins) {
      const a2 = [t, ...s], o2 = this.runHookSync(e, a2, r2, n2);
      t = i.call(this.pluginContexts.get(r2), t, o2, r2);
    }
    return t;
  }
  hookReduceValue(e, t, s, i, n2) {
    let r2 = Promise.resolve(t);
    for (const t2 of this.plugins)
      r2 = r2.then((r3) => {
        const a2 = this.runHook(e, s, t2, true, n2);
        return a2 ? a2.then((e2) => i.call(this.pluginContexts.get(t2), r3, e2, t2)) : r3;
      });
    return r2;
  }
  hookReduceValueSync(e, t, s, i, n2) {
    let r2 = t;
    for (const t2 of this.plugins) {
      const a2 = this.runHookSync(e, s, t2, n2);
      r2 = i.call(this.pluginContexts.get(t2), r2, a2, t2);
    }
    return r2;
  }
  hookSeq(e, t, s) {
    let i = Promise.resolve();
    for (const n2 of this.plugins)
      i = i.then(() => this.runHook(e, t, n2, false, s));
    return i;
  }
  runHook(e, t, s, i, n2) {
    const r2 = s[e];
    if (!r2)
      return;
    let a2 = this.pluginContexts.get(s);
    n2 && (a2 = n2(a2, s));
    let o2 = null;
    return Promise.resolve().then(() => {
      if (typeof r2 != "function")
        return i ? r2 : lh(e, s.name);
      const n3 = r2.apply(a2, t);
      return n3 && n3.then ? (o2 = [s.name, e, t], this.unfulfilledActions.add(o2), Promise.resolve(n3).then((e2) => (this.unfulfilledActions.delete(o2), e2))) : n3;
    }).catch((t2) => (o2 !== null && this.unfulfilledActions.delete(o2), Xo(t2, s.name, { hook: e })));
  }
  runHookSync(e, t, s, i) {
    const n2 = s[e];
    if (!n2)
      return;
    let r2 = this.pluginContexts.get(s);
    i && (r2 = i(r2, s));
    try {
      return typeof n2 != "function" ? lh(e, s.name) : n2.apply(r2, t);
    } catch (t2) {
      return Xo(t2, s.name, { hook: e });
    }
  }
}
class uh {
  constructor(e, t) {
    var s, i;
    if (this.options = e, this.cachedModules = /* @__PURE__ */ new Map(), this.deoptimizationTracker = new j(), this.entryModules = [], this.modulesById = /* @__PURE__ */ new Map(), this.needsTreeshakingPass = false, this.phase = ji.LOAD_AND_PARSE, this.scope = new rh(), this.watchFiles = /* @__PURE__ */ Object.create(null), this.watchMode = false, this.externalModules = [], this.implicitEntryModules = [], this.modules = [], this.getModuleInfo = (e2) => {
      const t2 = this.modulesById.get(e2);
      return t2 ? t2.info : null;
    }, e.cache !== false) {
      if ((s = e.cache) === null || s === void 0 ? void 0 : s.modules)
        for (const t2 of e.cache.modules)
          this.cachedModules.set(t2.id, t2);
      this.pluginCache = ((i = e.cache) === null || i === void 0 ? void 0 : i.plugins) || /* @__PURE__ */ Object.create(null);
      for (const e2 in this.pluginCache) {
        const t2 = this.pluginCache[e2];
        for (const e3 of Object.values(t2))
          e3[0]++;
      }
    }
    if (t) {
      this.watchMode = true;
      const e2 = (...e3) => this.pluginDriver.hookParallel("watchChange", e3), s2 = () => this.pluginDriver.hookParallel("closeWatcher", []);
      t.onCurrentAwaited("change", e2), t.onCurrentAwaited("close", s2);
    }
    this.pluginDriver = new ch(this, e, e.plugins, this.pluginCache), this.acornParser = Ua.extend(...e.acornInjectPlugins), this.moduleLoader = new eh(this, this.modulesById, this.options, this.pluginDriver);
  }
  async build() {
    Ji("generate module graph", 2), await this.generateModuleGraph(), en("generate module graph", 2), Ji("sort modules", 2), this.phase = ji.ANALYSE, this.sortModules(), en("sort modules", 2), Ji("mark included statements", 2), this.includeStatements(), en("mark included statements", 2), this.phase = ji.GENERATE;
  }
  contextParse(e, t = {}) {
    const s = t.onComment, i = [];
    t.onComment = s && typeof s == "function" ? (e2, n3, r2, a2, ...o2) => (i.push({ end: a2, start: r2, type: e2 ? "Block" : "Line", value: n3 }), s.call(t, e2, n3, r2, a2, ...o2)) : i;
    const n2 = this.acornParser.parse(e, __spreadValues(__spreadValues({}, this.options.acorn), t));
    return typeof s == "object" && s.push(...i), t.onComment = s, function(e2, t2, s2) {
      const i2 = [], n3 = [];
      for (const t3 of e2)
        rt.test(t3.value) ? i2.push(t3) : Je.test(t3.value) && n3.push(t3);
      for (const e3 of n3)
        at(t2, e3, false);
      et(t2, { annotationIndex: 0, annotations: i2, code: s2 });
    }(i, n2, e), n2;
  }
  getCache() {
    for (const e in this.pluginCache) {
      const t = this.pluginCache[e];
      let s = true;
      for (const [e2, i] of Object.entries(t))
        i[0] >= this.options.experimentalCacheExpiry ? delete t[e2] : s = false;
      s && delete this.pluginCache[e];
    }
    return { modules: this.modules.map((e) => e.toJSON()), plugins: this.pluginCache };
  }
  async generateModuleGraph() {
    var e;
    if ({ entryModules: this.entryModules, implicitEntryModules: this.implicitEntryModules } = await this.moduleLoader.addEntryModules((e = this.options.input, Array.isArray(e) ? e.map((e2) => ({ fileName: null, id: e2, implicitlyLoadedAfter: [], importer: void 0, name: null })) : Object.entries(e).map(([e2, t]) => ({ fileName: null, id: t, implicitlyLoadedAfter: [], importer: void 0, name: e2 }))), true), this.entryModules.length === 0)
      throw new Error("You must supply options.input to rollup");
    for (const e2 of this.modulesById.values())
      e2 instanceof on ? this.modules.push(e2) : this.externalModules.push(e2);
  }
  includeStatements() {
    for (const e of [...this.entryModules, ...this.implicitEntryModules])
      nn(e);
    if (this.options.treeshake) {
      let e = 1;
      do {
        Ji(`treeshaking pass ${e}`, 3), this.needsTreeshakingPass = false;
        for (const e2 of this.modules)
          e2.isExecuted && (e2.info.moduleSideEffects === "no-treeshake" ? e2.includeAllInBundle() : e2.include());
        if (e === 1)
          for (const e2 of [...this.entryModules, ...this.implicitEntryModules])
            e2.preserveSignature !== false && (e2.includeAllExports(false), this.needsTreeshakingPass = true);
        en("treeshaking pass " + e++, 3);
      } while (this.needsTreeshakingPass);
    } else
      for (const e of this.modules)
        e.includeAllInBundle();
    for (const e of this.externalModules)
      e.warnUnusedImports();
    for (const e of this.implicitEntryModules)
      for (const t of e.implicitlyLoadedAfter)
        t.info.isEntry || t.isIncluded() || le(ge(t));
  }
  sortModules() {
    const { orderedModules: e, cyclePaths: t } = function(e2) {
      let t2 = 0;
      const s = [], i = /* @__PURE__ */ new Set(), n2 = /* @__PURE__ */ new Set(), r2 = /* @__PURE__ */ new Map(), a2 = [], o2 = (e3) => {
        if (e3 instanceof on) {
          for (const t3 of e3.dependencies)
            r2.has(t3) ? i.has(t3) || s.push(Zr(t3, e3, r2)) : (r2.set(t3, e3), o2(t3));
          for (const t3 of e3.implicitlyLoadedBefore)
            n2.add(t3);
          for (const { resolution: t3 } of e3.dynamicImports)
            t3 instanceof on && n2.add(t3);
          a2.push(e3);
        }
        e3.execIndex = t2++, i.add(e3);
      };
      for (const t3 of e2)
        r2.has(t3) || (r2.set(t3, null), o2(t3));
      for (const e3 of n2)
        r2.has(e3) || (r2.set(e3, null), o2(e3));
      return { cyclePaths: s, orderedModules: a2 };
    }(this.entryModules);
    for (const e2 of t)
      this.options.onwarn({ code: "CIRCULAR_DEPENDENCY", cycle: e2, importer: e2[0], message: `Circular dependency: ${e2.join(" -> ")}` });
    this.modules = e;
    for (const e2 of this.modules)
      e2.bindReferences();
    this.warnForMissingExports();
  }
  warnForMissingExports() {
    for (const e of this.modules)
      for (const t of e.importDescriptions.values())
        t.name === "*" || t.module.getVariableForExportName(t.name)[0] || e.warn({ code: "NON_EXISTENT_EXPORT", message: `Non-existent export '${t.name}' is imported from ${re(t.module.id)}`, name: t.name, source: t.module.id }, t.start);
  }
}
function dh(e) {
  return Array.isArray(e) ? e.filter(Boolean) : e ? [e] : [];
}
function ph(e, t) {
  return t();
}
const fh = (e) => console.warn(e.message || e);
function mh(e, t, s, i, n2 = /$./) {
  const r2 = new Set(t), a2 = Object.keys(e).filter((e2) => !(r2.has(e2) || n2.test(e2)));
  a2.length > 0 && i({ code: "UNKNOWN_OPTION", message: `Unknown ${s}: ${a2.join(", ")}. Allowed options: ${[...r2].sort().join(", ")}` });
}
const gh = { recommended: { annotations: true, correctVarValueBeforeDeclaration: false, moduleSideEffects: () => true, propertyReadSideEffects: true, tryCatchDeoptimization: true, unknownGlobalSideEffects: false }, safest: { annotations: true, correctVarValueBeforeDeclaration: true, moduleSideEffects: () => true, propertyReadSideEffects: true, tryCatchDeoptimization: true, unknownGlobalSideEffects: true }, smallest: { annotations: true, correctVarValueBeforeDeclaration: false, moduleSideEffects: () => false, propertyReadSideEffects: false, tryCatchDeoptimization: false, unknownGlobalSideEffects: false } }, yh = { es2015: { arrowFunctions: true, constBindings: true, objectShorthand: true, reservedNamesAsProps: true, symbols: true }, es5: { arrowFunctions: false, constBindings: false, objectShorthand: false, reservedNamesAsProps: true, symbols: false } }, Eh = (e, t, s, i) => {
  const n2 = e == null ? void 0 : e.preset;
  if (n2) {
    const i2 = t[n2];
    if (i2)
      return __spreadValues(__spreadValues({}, i2), e);
    le(fe(`${s}.preset`, xh(s), `valid values are ${ie(Object.keys(t))}`, n2));
  }
  return ((e2, t2, s2) => (i2) => {
    if (typeof i2 == "string") {
      const n3 = e2[i2];
      if (n3)
        return n3;
      le(fe(t2, xh(t2), `valid values are ${s2}${ie(Object.keys(e2))}. You can also supply an object for more fine-grained control`, i2));
    }
    return ((e3) => e3 && typeof e3 == "object" ? e3 : {})(i2);
  })(t, s, i)(e);
}, xh = (e) => e.split(".").join("").toLowerCase();
const vh = (e) => {
  const { onwarn: t } = e;
  return t ? (e2) => {
    e2.toString = () => {
      let t2 = "";
      return e2.plugin && (t2 += `(${e2.plugin} plugin) `), e2.loc && (t2 += `${re(e2.loc.file)} (${e2.loc.line}:${e2.loc.column}) `), t2 += e2.message, t2;
    }, t(e2, fh);
  } : fh;
}, bh = (e) => __spreadValues({ allowAwaitOutsideFunction: true, ecmaVersion: "latest", preserveParens: false, sourceType: "module" }, e.acorn), Ah = (e) => dh(e.acornInjectPlugins), Sh = (e) => {
  var t;
  return ((t = e.cache) === null || t === void 0 ? void 0 : t.cache) || e.cache;
}, Ph = (e) => {
  if (e === true)
    return () => true;
  if (typeof e == "function")
    return (t, ...s) => !t.startsWith("\0") && e(t, ...s) || false;
  if (e) {
    const t = /* @__PURE__ */ new Set(), s = [];
    for (const i of dh(e))
      i instanceof RegExp ? s.push(i) : t.add(i);
    return (e2, ...i) => t.has(e2) || s.some((t2) => t2.test(e2));
  }
  return () => false;
}, kh = (e, t, s) => {
  const i = e.inlineDynamicImports;
  return i && Ae('The "inlineDynamicImports" option is deprecated. Use the "output.inlineDynamicImports" option instead.', false, t, s), i;
}, wh = (e) => {
  const t = e.input;
  return t == null ? [] : typeof t == "string" ? [t] : t;
}, Ch = (e, t, s) => {
  const i = e.manualChunks;
  return i && Ae('The "manualChunks" option is deprecated. Use the "output.manualChunks" option instead.', false, t, s), i;
}, Ih = (e) => {
  const t = e.maxParallelFileReads;
  return typeof t == "number" ? t <= 0 ? 1 / 0 : t : 20;
}, _h = (e, t) => {
  const s = e.moduleContext;
  if (typeof s == "function")
    return (e2) => {
      var i;
      return (i = s(e2)) !== null && i !== void 0 ? i : t;
    };
  if (s) {
    const e2 = /* @__PURE__ */ Object.create(null);
    for (const [t2, i] of Object.entries(s))
      e2[R(t2)] = i;
    return (s2) => e2[s2] || t;
  }
  return () => t;
}, Nh = (e, t) => {
  const s = e.preserveEntrySignatures;
  return s == null && t.add("preserveEntrySignatures"), s != null ? s : "strict";
}, $h = (e, t, s) => {
  const i = e.preserveModules;
  return i && Ae('The "preserveModules" option is deprecated. Use the "output.preserveModules" option instead.', false, t, s), i;
}, Th = (e, t, s) => {
  const i = e.treeshake;
  if (i === false)
    return false;
  const n2 = Eh(e.treeshake, gh, "treeshake", "false, true, ");
  return n2.pureExternalModules !== void 0 && Ae(`The "treeshake.pureExternalModules" option is deprecated. The "treeshake.moduleSideEffects" option should be used instead. "treeshake.pureExternalModules: true" is equivalent to "treeshake.moduleSideEffects: 'no-external'"`, true, t, s), { annotations: n2.annotations !== false, correctVarValueBeforeDeclaration: n2.correctVarValueBeforeDeclaration === true, moduleSideEffects: typeof i == "object" && i.pureExternalModules ? Rh(i.moduleSideEffects, i.pureExternalModules) : Rh(n2.moduleSideEffects, void 0), propertyReadSideEffects: n2.propertyReadSideEffects === "always" ? "always" : n2.propertyReadSideEffects !== false, tryCatchDeoptimization: n2.tryCatchDeoptimization !== false, unknownGlobalSideEffects: n2.unknownGlobalSideEffects !== false };
}, Rh = (e, t) => {
  if (typeof e == "boolean")
    return () => e;
  if (e === "no-external")
    return (e2, t2) => !t2;
  if (typeof e == "function")
    return (t2, s2) => !!t2.startsWith("\0") || e(t2, s2) !== false;
  if (Array.isArray(e)) {
    const t2 = new Set(e);
    return (e2) => t2.has(e2);
  }
  e && le(fe("treeshake.moduleSideEffects", "treeshake", 'please use one of false, "no-external", a function or an array'));
  const s = Ph(t);
  return (e2, t2) => !(t2 && s(e2));
}, Mh = /[\x00-\x1F\x7F<>*#"{}|^[\]`;?:&=+$,]/g, Dh = /^[a-z]:/i;
function Lh(e) {
  const t = Dh.exec(e), s = t ? t[0] : "";
  return s + e.substr(s.length).replace(Mh, "_");
}
const Oh = (e, t, s) => {
  const { file: i } = e;
  if (typeof i == "string") {
    if (t)
      return le(fe("output.file", "outputdir", 'you must set "output.dir" instead of "output.file" when using the "output.preserveModules" option'));
    if (!Array.isArray(s.input))
      return le(fe("output.file", "outputdir", 'you must set "output.dir" instead of "output.file" when providing named inputs'));
  }
  return i;
}, Vh = (e) => {
  const t = e.format;
  switch (t) {
    case void 0:
    case "es":
    case "esm":
    case "module":
      return "es";
    case "cjs":
    case "commonjs":
      return "cjs";
    case "system":
    case "systemjs":
      return "system";
    case "amd":
    case "iife":
    case "umd":
      return t;
    default:
      return le({ message: 'You must specify "output.format", which can be one of "amd", "cjs", "system", "es", "iife" or "umd".', url: "https://rollupjs.org/guide/en/#outputformat" });
  }
}, Bh = (e, t) => {
  var s;
  const i = ((s = e.inlineDynamicImports) !== null && s !== void 0 ? s : t.inlineDynamicImports) || false, { input: n2 } = t;
  return i && (Array.isArray(n2) ? n2 : Object.keys(n2)).length > 1 ? le(fe("output.inlineDynamicImports", "outputinlinedynamicimports", 'multiple inputs are not supported when "output.inlineDynamicImports" is true')) : i;
}, Fh = (e, t, s) => {
  var i;
  const n2 = ((i = e.preserveModules) !== null && i !== void 0 ? i : s.preserveModules) || false;
  if (n2) {
    if (t)
      return le(fe("output.inlineDynamicImports", "outputinlinedynamicimports", 'this option is not supported for "output.preserveModules"'));
    if (s.preserveEntrySignatures === false)
      return le(fe("preserveEntrySignatures", "preserveentrysignatures", 'setting this option to false is not supported for "output.preserveModules"'));
  }
  return n2;
}, zh = (e, t) => {
  const s = e.preferConst;
  return s != null && be('The "output.preferConst" option is deprecated. Use the "output.generatedCode.constBindings" option instead.', false, t), !!s;
}, Wh = (e) => {
  const { preserveModulesRoot: t } = e;
  if (t != null)
    return R(t);
}, jh = (e) => {
  const t = __spreadValues({ autoId: false, basePath: "", define: "define" }, e.amd);
  if ((t.autoId || t.basePath) && t.id)
    return le(fe("output.amd.id", "outputamd", 'this option cannot be used together with "output.amd.autoId"/"output.amd.basePath"'));
  if (t.basePath && !t.autoId)
    return le(fe("output.amd.basePath", "outputamd", 'this option only works with "output.amd.autoId"'));
  let s;
  return s = t.autoId ? { autoId: true, basePath: t.basePath, define: t.define } : { autoId: false, define: t.define, id: t.id }, s;
}, Uh = (e, t) => {
  const s = e[t];
  return typeof s == "function" ? s : () => s || "";
}, Gh = (e, t) => {
  const { dir: s } = e;
  return typeof s == "string" && typeof t == "string" ? le(fe("output.dir", "outputdir", 'you must set either "output.file" for a single-file build or "output.dir" when generating multiple chunks')) : s;
}, Hh = (e, t) => {
  const s = e.dynamicImportFunction;
  return s && be('The "output.dynamicImportFunction" option is deprecated. Use the "renderDynamicImport" plugin hook instead.', false, t), s;
}, qh = (e, t) => {
  const s = e.entryFileNames;
  return s == null && t.add("entryFileNames"), s != null ? s : "[name].js";
};
function Kh(e, t) {
  const s = e.exports;
  if (s == null)
    t.add("exports");
  else if (!["default", "named", "none", "auto"].includes(s))
    return le((i = s, { code: ue.INVALID_EXPORT_OPTION, message: `"output.exports" must be "default", "named", "none", "auto", or left unspecified (defaults to "auto"), received "${i}"`, url: "https://rollupjs.org/guide/en/#outputexports" }));
  var i;
  return s || "auto";
}
const Xh = (e, t) => {
  const s = Eh(e.generatedCode, yh, "output.generatedCode", "");
  return { arrowFunctions: s.arrowFunctions === true, constBindings: s.constBindings === true || t, objectShorthand: s.objectShorthand === true, reservedNamesAsProps: s.reservedNamesAsProps === true, symbols: s.symbols === true };
}, Yh = (e, t) => {
  if (t)
    return "";
  const s = e.indent;
  return s === false ? "" : s == null || s;
}, Qh = /* @__PURE__ */ new Set(["auto", "esModule", "default", "defaultOnly", true, false]), Zh = (e, t) => {
  const s = e.interop, i = /* @__PURE__ */ new Set(), n2 = (e2) => {
    if (!i.has(e2)) {
      if (i.add(e2), !Qh.has(e2))
        return le(fe("output.interop", "outputinterop", `use one of ${Array.from(Qh, (e3) => JSON.stringify(e3)).join(", ")}`, e2));
      typeof e2 == "boolean" && be({ message: `The boolean value "${e2}" for the "output.interop" option is deprecated. Use ${e2 ? '"auto"' : '"esModule", "default" or "defaultOnly"'} instead.`, url: "https://rollupjs.org/guide/en/#outputinterop" }, false, t);
    }
    return e2;
  };
  if (typeof s == "function") {
    const e2 = /* @__PURE__ */ Object.create(null);
    let t2 = null;
    return (i2) => i2 === null ? t2 || n2(t2 = s(i2)) : i2 in e2 ? e2[i2] : n2(e2[i2] = s(i2));
  }
  return s === void 0 ? () => true : () => n2(s);
}, Jh = (e, t, s, i) => {
  const n2 = e.manualChunks || i.manualChunks;
  if (n2) {
    if (t)
      return le(fe("output.manualChunks", "outputmanualchunks", 'this option is not supported for "output.inlineDynamicImports"'));
    if (s)
      return le(fe("output.manualChunks", "outputmanualchunks", 'this option is not supported for "output.preserveModules"'));
  }
  return n2 || {};
}, el = (e, t, s) => {
  var i;
  return (i = e.minifyInternalExports) !== null && i !== void 0 ? i : s || t === "es" || t === "system";
}, tl = (e, t, s) => {
  const i = e.namespaceToStringTag;
  return i != null ? (be('The "output.namespaceToStringTag" option is deprecated. Use the "output.generatedCode.symbols" option instead.', false, s), i) : t.symbols || false;
};
function sl(e) {
  return async function(e2, t) {
    const { options: s, unsetOptions: i } = await async function(e3, t2) {
      if (!e3)
        throw new Error("You must supply an options object to rollup");
      const s2 = dh(e3.plugins), { options: i2, unsetOptions: n3 } = function(e4) {
        var t3, s3, i3;
        const n4 = /* @__PURE__ */ new Set(), r3 = (t3 = e4.context) !== null && t3 !== void 0 ? t3 : "undefined", a3 = vh(e4), o2 = e4.strictDeprecations || false, h2 = { acorn: bh(e4), acornInjectPlugins: Ah(e4), cache: Sh(e4), context: r3, experimentalCacheExpiry: (s3 = e4.experimentalCacheExpiry) !== null && s3 !== void 0 ? s3 : 10, external: Ph(e4.external), inlineDynamicImports: kh(e4, a3, o2), input: wh(e4), makeAbsoluteExternalsRelative: (i3 = e4.makeAbsoluteExternalsRelative) === null || i3 === void 0 || i3, manualChunks: Ch(e4, a3, o2), maxParallelFileReads: Ih(e4), moduleContext: _h(e4, r3), onwarn: a3, perf: e4.perf || false, plugins: dh(e4.plugins), preserveEntrySignatures: Nh(e4, n4), preserveModules: $h(e4, a3, o2), preserveSymlinks: e4.preserveSymlinks || false, shimMissingExports: e4.shimMissingExports || false, strictDeprecations: o2, treeshake: Th(e4, a3, o2) };
        return mh(e4, [...Object.keys(h2), "watch"], "input options", h2.onwarn, /^(output)$/), { options: h2, unsetOptions: n4 };
      }(await s2.reduce(function(e4) {
        return async (t3, s3) => s3.options && await s3.options.call({ meta: { rollupVersion: "2.75.4", watchMode: e4 } }, await t3) || t3;
      }(t2), Promise.resolve(e3)));
      return il(i2.plugins, "at position "), { options: i2, unsetOptions: n3 };
    }(e2, t !== null);
    !function(e3) {
      e3.perf ? (Ki = /* @__PURE__ */ new Map(), Ji = Yi, en = Qi, e3.plugins = e3.plugins.map(sn)) : (Ji = qi, en = qi);
    }(s);
    const n2 = new uh(s, t), r2 = e2.cache !== false;
    delete s.cache, delete e2.cache, Ji("BUILD", 1), await ph(n2.pluginDriver, async () => {
      try {
        await n2.pluginDriver.hookParallel("buildStart", [s]), await n2.build();
      } catch (e3) {
        const t2 = Object.keys(n2.watchFiles);
        throw t2.length > 0 && (e3.watchFiles = t2), await n2.pluginDriver.hookParallel("buildEnd", [e3]), await n2.pluginDriver.hookParallel("closeBundle", []), e3;
      }
      await n2.pluginDriver.hookParallel("buildEnd", []);
    }), en("BUILD", 1);
    const a2 = { cache: r2 ? n2.getCache() : void 0, async close() {
      a2.closed || (a2.closed = true, await n2.pluginDriver.hookParallel("closeBundle", []));
    }, closed: false, generate: async (e3) => a2.closed ? le(ve()) : nl(false, s, i, e3, n2), watchFiles: Object.keys(n2.watchFiles), write: async (e3) => a2.closed ? le(ve()) : nl(true, s, i, e3, n2) };
    s.perf && (a2.getTimings = Zi);
    return a2;
  }(e, null);
}
function il(e, t) {
  e.forEach((e2, s) => {
    e2.name || (e2.name = `${t}${s + 1}`);
  });
}
function nl(e, t, s, i, n2) {
  const { options: r2, outputPluginDriver: a2, unsetOptions: o2 } = function(e2, t2, s2, i2) {
    if (!e2)
      throw new Error("You must supply an options object");
    const n3 = dh(e2.plugins);
    il(n3, "at output position ");
    const r3 = t2.createOutputPluginDriver(n3);
    return __spreadProps(__spreadValues({}, rl(s2, i2, e2, r3)), { outputPluginDriver: r3 });
  }(i, n2.pluginDriver, t, s);
  return ph(0, async () => {
    const s2 = new ta(r2, o2, t, a2, n2), i2 = await s2.generate(e);
    if (e) {
      if (!r2.dir && !r2.file)
        return le({ code: "MISSING_OPTION", message: 'You must specify "output.file" or "output.dir" for the build.' });
      await Promise.all(Object.values(i2).map((e2) => async function(e3, t2) {
        const s3 = R(t2.dir || N(t2.file), e3.fileName);
        let i3, n3;
        if (await qo.mkdir(N(s3), { recursive: true }), e3.type === "asset")
          n3 = e3.source;
        else if (n3 = e3.code, t2.sourcemap && e3.map) {
          let r3;
          t2.sourcemap === "inline" ? r3 = e3.map.toUrl() : (r3 = `${_(e3.fileName)}.map`, i3 = qo.writeFile(`${s3}.map`, e3.map.toString())), t2.sourcemap !== "hidden" && (n3 += `//# sourceMappingURL=${r3}
`);
        }
        return Promise.all([qo.writeFile(s3, n3), i3]);
      }(e2, r2))), await a2.hookParallel("writeBundle", [r2, i2]);
    }
    return h2 = i2, { output: Object.values(h2).filter((e2) => Object.keys(e2).length > 0).sort((e2, t2) => {
      const s3 = ol(e2), i3 = ol(t2);
      return s3 === i3 ? 0 : s3 < i3 ? -1 : 1;
    }) };
    var h2;
  });
}
function rl(e, t, s, i) {
  return function(e2, t2, s2) {
    var i2, n2, r2, a2, o2, h2, l2;
    const c2 = new Set(s2), u2 = e2.compact || false, d2 = Vh(e2), p2 = Bh(e2, t2), f2 = Fh(e2, p2, t2), m2 = Oh(e2, f2, t2), g2 = zh(e2, t2), y2 = Xh(e2, g2), E2 = { amd: jh(e2), assetFileNames: (i2 = e2.assetFileNames) !== null && i2 !== void 0 ? i2 : "assets/[name]-[hash][extname]", banner: Uh(e2, "banner"), chunkFileNames: (n2 = e2.chunkFileNames) !== null && n2 !== void 0 ? n2 : "[name]-[hash].js", compact: u2, dir: Gh(e2, m2), dynamicImportFunction: Hh(e2, t2), entryFileNames: qh(e2, c2), esModule: (r2 = e2.esModule) === null || r2 === void 0 || r2, exports: Kh(e2, c2), extend: e2.extend || false, externalLiveBindings: (a2 = e2.externalLiveBindings) === null || a2 === void 0 || a2, file: m2, footer: Uh(e2, "footer"), format: d2, freeze: (o2 = e2.freeze) === null || o2 === void 0 || o2, generatedCode: y2, globals: e2.globals || {}, hoistTransitiveImports: (h2 = e2.hoistTransitiveImports) === null || h2 === void 0 || h2, indent: Yh(e2, u2), inlineDynamicImports: p2, interop: Zh(e2, t2), intro: Uh(e2, "intro"), manualChunks: Jh(e2, p2, f2, t2), minifyInternalExports: el(e2, d2, u2), name: e2.name, namespaceToStringTag: tl(e2, y2, t2), noConflict: e2.noConflict || false, outro: Uh(e2, "outro"), paths: e2.paths || {}, plugins: dh(e2.plugins), preferConst: g2, preserveModules: f2, preserveModulesRoot: Wh(e2), sanitizeFileName: typeof e2.sanitizeFileName == "function" ? e2.sanitizeFileName : e2.sanitizeFileName === false ? (e3) => e3 : Lh, sourcemap: e2.sourcemap || false, sourcemapExcludeSources: e2.sourcemapExcludeSources || false, sourcemapFile: e2.sourcemapFile, sourcemapPathTransform: e2.sourcemapPathTransform, strict: (l2 = e2.strict) === null || l2 === void 0 || l2, systemNullSetters: e2.systemNullSetters || false, validate: e2.validate || false };
    return mh(e2, Object.keys(E2), "output options", t2.onwarn), { options: E2, unsetOptions: c2 };
  }(i.hookReduceArg0Sync("outputOptions", [s.output || s], (e2, t2) => t2 || e2, (e2) => {
    const t2 = () => e2.error({ code: ue.CANNOT_EMIT_FROM_OPTIONS_HOOK, message: 'Cannot emit files or set asset sources in the "outputOptions" hook, use the "renderStart" hook instead.' });
    return __spreadProps(__spreadValues({}, e2), { emitFile: t2, setAssetSource: t2 });
  }), e, t);
}
var al;
function ol(e) {
  return e.type === "asset" ? al.ASSET : e.isEntry ? al.ENTRY_CHUNK : al.SECONDARY_CHUNK;
}
!function(e) {
  e[e.ENTRY_CHUNK = 0] = "ENTRY_CHUNK", e[e.SECONDARY_CHUNK = 1] = "SECONDARY_CHUNK", e[e.ASSET = 2] = "ASSET";
}(al || (al = {}));
const isFileSchema = (id) => id.startsWith("file://") || id.startsWith("/");
const isRelativePath = (id) => stripSchema(id).startsWith(".");
const stripSchema = (id) => id.replace(/^file\:(\/\/)?/, "");
const SEARCH_EXTENSIONS = [
  "/index.tsx",
  "/index.ts",
  "/index.js",
  ".tsx",
  ".ts",
  ".json",
  ".js"
];
function searchFile(vfs, filepath, extensions) {
  for (const ext of ["", ...extensions]) {
    if (vfs.has(filepath + ext)) {
      return filepath + ext;
    }
  }
}
const virtualfs = (vfs) => {
  return {
    name: "virtual-fs",
    resolveId(id, importer) {
      const normalized = stripSchema(id);
      if (isFileSchema(id) && importer == null) {
        return searchFile(vfs, normalized, SEARCH_EXTENSIONS);
      }
      if (importer && isFileSchema(importer) && isRelativePath(id)) {
        const rawImporter = importer.replace(/^file\:/, "");
        const fullpath = rawImporter ? resolve$1(dirname(rawImporter), normalized) : id;
        const reslovedWithExt = searchFile(vfs, fullpath, SEARCH_EXTENSIONS);
        if (reslovedWithExt)
          return reslovedWithExt;
        this.warn(`[rollup-plugin-virtual-fs] can not resolve id: ${fullpath}`);
      }
    },
    load(id) {
      const real = stripSchema(id);
      const ret = vfs.get(real);
      if (ret)
        return ret;
      throw new Error(`[virtualFs] ${id} is not found on files`);
    }
  };
};
const treeshake = async (code, options = {}, rollupOpts = {}) => {
  var _a2, _b;
  const inputFile = "/input.js";
  const vfs = new Map(Object.entries({
    [inputFile]: code
  }));
  const build = await sl({
    input: inputFile,
    treeshake: true,
    plugins: [virtualfs(vfs)]
  });
  const { output } = await build.generate(__spreadValues({
    format: (_a2 = options == null ? void 0 : options.format) != null ? _a2 : "esm",
    compact: options == null ? void 0 : options.minify,
    name: options == null ? void 0 : options.globalName
  }, Object.assign({}, rollupOpts)));
  let content = output[0].code;
  return (_b = content == null ? void 0 : content.trim) == null ? void 0 : _b.call(content);
};
const EXTERNALS_NAMESPACE = "external-globals";
const EMPTY_EXPORT = encode(`export default {}`);
const PolyfillMap = {
  "console": "console-browserify",
  "constants": "constants-browserify",
  "crypto": "crypto-browserify",
  "http": "http-browserify",
  "buffer": "buffer",
  "Dirent": "dirent",
  "vm": "vm-browserify",
  "zlib": "zlib-browserify",
  "assert": "assert",
  "child_process": "child_process",
  "cluster": "child_process",
  "dgram": "dgram",
  "dns": "dns",
  "domain": "domain-browser",
  "events": "events",
  "https": "https",
  "module": "module",
  "net": "net",
  "path": "path-browserify",
  "punycode": "punycode",
  "querystring": "querystring",
  "readline": "readline",
  "repl": "repl",
  "stream": "stream",
  "string_decoder": "string_decoder",
  "sys": "sys",
  "timers": "timers",
  "tls": "tls",
  "tty": "tty-browserify",
  "url": "url",
  "util": "util",
  "_shims": "_shims",
  "_stream_duplex": "_stream_duplex",
  "_stream_readable": "_stream_readable",
  "_stream_writable": "_stream_writable",
  "_stream_transform": "_stream_transform",
  "_stream_passthrough": "_stream_passthrough",
  process: "process/browser",
  fs: "memfs",
  os: "os-browserify/browser",
  "v8": "v8",
  "node-inspect": "node-inspect",
  "_linklist": "_linklist",
  "_stream_wrap": "_stream_wrap"
};
const PolyfillKeys = Object.keys(PolyfillMap);
const DeprecatedAPIs = ["v8/tools/codemap", "v8/tools/consarray", "v8/tools/csvparser", "v8/tools/logreader", "v8/tools/profile_view", "v8/tools/profile", "v8/tools/SourceMap", "v8/tools/splaytree", "v8/tools/tickprocessor-driver", "v8/tools/tickprocessor", "node-inspect/lib/_inspect", "node-inspect/lib/internal/inspect_client ", "node-inspect/lib/internal/inspect_repl", "_linklist", "_stream_wrap"];
const ExternalPackages = ["chokidar", "yargs", "fsevents", `worker_threads`, "async_hooks", "diagnostics_channel", "http2", "inspector", "perf_hooks", "trace_events", "wasi", ...DeprecatedAPIs, ...PolyfillKeys];
const isExternal = (id, external = []) => {
  return [...ExternalPackages, ...external].find((it2) => {
    if (it2 === id)
      return true;
    if (id.startsWith(`${it2}/`))
      return true;
    return false;
  });
};
const EXTERNAL = (external = []) => {
  return {
    name: EXTERNALS_NAMESPACE,
    setup(build) {
      build.onResolve({ filter: /.*/ }, (args) => {
        let path2 = args.path.replace(/^node\:/, "");
        let { path: argPath } = getCDNUrl(path2);
        if (isExternal(argPath, external)) {
          return {
            path: argPath,
            namespace: EXTERNALS_NAMESPACE,
            external: true
          };
        }
      });
      build.onLoad({ filter: /.*/, namespace: EXTERNALS_NAMESPACE }, (args) => {
        return {
          pluginName: EXTERNALS_NAMESPACE,
          contents: EMPTY_EXPORT,
          warnings: [{
            text: `${args.path} is marked as an external module and will be ignored.`,
            details: `"${args.path}" is a built-in node module thus can't be bundled by https://bundlejs.com, sorry about that.`
          }]
        };
      });
    }
  };
};
function loop(exports, keys) {
  if (typeof exports === "string") {
    return exports;
  }
  if (exports) {
    let idx, tmp;
    if (Array.isArray(exports)) {
      for (idx = 0; idx < exports.length; idx++) {
        if (tmp = loop(exports[idx], keys))
          return tmp;
      }
    } else {
      for (idx in exports) {
        if (keys.has(idx)) {
          return loop(exports[idx], keys);
        }
      }
    }
  }
}
function bail(name, entry, condition) {
  throw new Error(condition ? `No known conditions for "${entry}" entry in "${name}" package` : `Missing "${entry}" export in "${name}" package`);
}
function toName(name, entry) {
  return entry === name ? "." : entry[0] === "." ? entry : entry.replace(new RegExp("^" + name + "/"), "./");
}
function resolve(pkg, entry, options) {
  let { name, exports } = pkg;
  if (exports) {
    let { browser, require: require2, unsafe, conditions = [] } = options;
    let target = toName(name, entry);
    if (target[0] !== ".")
      target = "./" + target;
    if (typeof exports === "string") {
      return target === "." ? exports : bail(name, target);
    }
    let allows = /* @__PURE__ */ new Set(["default", ...conditions]);
    unsafe || allows.add(require2 ? "require" : "import");
    unsafe || allows.add(browser ? "browser" : "node");
    let key, tmp, isSingle = false;
    for (key in exports) {
      isSingle = key[0] !== ".";
      break;
    }
    if (isSingle) {
      return target === "." ? loop(exports, allows) || bail(name, target, 1) : bail(name, target);
    }
    if (tmp = exports[target]) {
      return loop(tmp, allows) || bail(name, target, 1);
    }
    for (key in exports) {
      tmp = key[key.length - 1];
      if (tmp === "/" && target.startsWith(key)) {
        return (tmp = loop(exports[key], allows)) ? tmp + target.substring(key.length) : bail(name, target, 1);
      }
      if (tmp === "*" && target.startsWith(key.slice(0, -1))) {
        if (target.substring(key.length - 1).length > 0) {
          return (tmp = loop(exports[key], allows)) ? tmp.replace("*", target.substring(key.length - 1)) : bail(name, target, 1);
        }
      }
    }
    return bail(name, target);
  }
}
function legacy(pkg, options) {
  let i = 0, value, browser = options.browser, fields = options.fields || ["module", "main"];
  if (browser && !fields.includes("browser")) {
    fields.unshift("browser");
  }
  for (; i < fields.length; i++) {
    if (value = pkg[fields[i]]) {
      if (typeof value == "string")
        ;
      else if (typeof value == "object" && fields[i] == "browser") {
        if (typeof browser == "string") {
          value = value[browser = toName(pkg.name, browser)];
          if (value == null)
            return browser;
        }
      } else {
        continue;
      }
      return typeof value == "string" ? "./" + value.replace(/^\.?\//, "") : value;
    }
  }
}
const CDN_NAMESPACE = "cdn-url";
const CDN_RESOLVE = (cdn = DEFAULT_CDN_HOST, logger = console.log) => {
  return async (args) => {
    var _a2, _b;
    if (isBareImport(args.path)) {
      let { path: argPath, origin } = getCDNUrl(args.path, cdn);
      let NPM_CDN = getCDNStyle(origin) == "npm";
      let parsed = parse(argPath);
      let subpath = parsed.path;
      let pkg = (_b = (_a2 = args.pluginData) == null ? void 0 : _a2.pkg) != null ? _b : {};
      if (argPath[0] == "#") {
        let path2 = resolveImports(__spreadProps(__spreadValues({}, pkg), { exports: pkg.imports }), argPath, {
          require: args.kind === "require-call" || args.kind === "require-resolve"
        });
        if (typeof path2 === "string") {
          subpath = path2.replace(/^\.?\/?/, "/");
          if (subpath && subpath[0] !== "/")
            subpath = `/${subpath}`;
          let version2 = NPM_CDN ? "@" + pkg.version : "";
          let { url: { href } } = getCDNUrl(`${pkg.name}${version2}${subpath}`);
          return {
            namespace: HTTP_NAMESPACE,
            path: href,
            pluginData: { pkg }
          };
        }
      }
      let depsExists = "dependencies" in pkg || "devDependencies" in pkg || "peerDependencies" in pkg;
      if (depsExists && !/\S+@\S+/.test(argPath)) {
        let {
          devDependencies = {},
          dependencies = {},
          peerDependencies = {}
        } = pkg;
        let deps = Object.assign({}, devDependencies, peerDependencies, dependencies);
        let keys = Object.keys(deps);
        if (keys.includes(argPath))
          parsed.version = deps[argPath];
      }
      if (NPM_CDN) {
        try {
          let { url: PACKAGE_JSON_URL } = getCDNUrl(`${parsed.name}@${parsed.version}/package.json`, origin);
          pkg = await getRequest(PACKAGE_JSON_URL, true).then((res) => res.json());
          let path2 = resolve(pkg, subpath ? "." + subpath.replace(/^\.?\/?/, "/") : ".", {
            require: args.kind === "require-call" || args.kind === "require-resolve"
          }) || legacy(pkg);
          if (typeof path2 === "string")
            subpath = path2.replace(/^\.?\/?/, "/").replace(/\.js\.js$/, ".js");
          if (subpath && subpath[0] !== "/")
            subpath = `/${subpath}`;
        } catch (e) {
          logger([`You may want to change CDNs. The current CDN ${!/unpkg\.com/.test(origin) ? `"${origin}" doesn't` : `path "${origin}${argPath}" may not`} support package.json files.
There is a chance the CDN you're using doesn't support looking through the package.json of packages. bundlejs will switch to inaccurate guesses for package versions. For package.json support you may wish to use https://unpkg.com or other CDN's that support package.json.`], "warning");
          console.warn(e);
        }
      }
      let version = NPM_CDN ? "@" + parsed.version : "";
      let { url } = getCDNUrl(`${parsed.name}${version}${subpath}`, origin);
      return {
        namespace: HTTP_NAMESPACE,
        path: url.toString(),
        pluginData: { pkg }
      };
    }
  };
};
const CDN = (cdn, logger = console.log) => {
  return {
    name: CDN_NAMESPACE,
    setup(build) {
      build.onResolve({ filter: /.*/ }, CDN_RESOLVE(cdn, logger));
      build.onResolve({ filter: /.*/, namespace: CDN_NAMESPACE }, CDN_RESOLVE(cdn, logger));
    }
  };
};
const HTTP_NAMESPACE = "http-url";
const fetchPkg = async (url, logger = console.log) => {
  try {
    let response = await getRequest(url);
    if (!response.ok)
      throw new Error(`Couldn't load ${response.url} (${response.status} code)`);
    logger(`Fetch ${url}`, "info");
    return {
      url: response.url,
      content: new Uint8Array(await response.arrayBuffer())
    };
  } catch (err) {
    throw new Error(`[getRequest] Failed at request (${url})
${err.toString()}`);
  }
};
const fetchAssets = async (path2, content, namespace, logger = console.log) => {
  const rgx = /new URL\(['"`](.*)['"`],(?:\s+)?import\.meta\.url(?:\s+)?\)/g;
  const parentURL = new URL("./", path2).toString();
  const code = decode(content);
  const matches = Array.from(code.matchAll(rgx));
  const promises = matches.map(async ([, assetURL]) => {
    let { content: asset, url } = await fetchPkg(urlJoin(parentURL, assetURL), logger);
    setFile(namespace + ":" + url, content);
    return {
      path: assetURL,
      contents: asset,
      get text() {
        return decode(asset);
      }
    };
  });
  return await Promise.allSettled(promises);
};
const HTTP_RESOLVE = (host = DEFAULT_CDN_HOST, logger = console.log) => {
  return async (args) => {
    var _a2, _b, _c, _d, _e2, _f;
    let argPath = args.path.replace(/\/$/, "/index");
    if (!argPath.startsWith(".")) {
      if (/^https?:\/\//.test(argPath)) {
        return {
          path: argPath,
          namespace: HTTP_NAMESPACE,
          pluginData: { pkg: (_a2 = args.pluginData) == null ? void 0 : _a2.pkg }
        };
      }
      let pathOrigin = new URL(urlJoin(((_b = args.pluginData) == null ? void 0 : _b.url) ? (_c = args.pluginData) == null ? void 0 : _c.url : host, "../", argPath)).origin;
      let NPM_CDN = getCDNStyle(pathOrigin) == "npm";
      let origin = NPM_CDN ? pathOrigin : host;
      if (isBareImport(argPath)) {
        return CDN_RESOLVE(origin, logger)(args);
      } else {
        return {
          path: getCDNUrl(argPath, origin).url.toString(),
          namespace: HTTP_NAMESPACE,
          pluginData: { pkg: (_d = args.pluginData) == null ? void 0 : _d.pkg }
        };
      }
    }
    let path2 = urlJoin((_e2 = args.pluginData) == null ? void 0 : _e2.url, "../", argPath);
    return {
      path: path2,
      namespace: HTTP_NAMESPACE,
      pluginData: { pkg: (_f = args.pluginData) == null ? void 0 : _f.pkg }
    };
  };
};
const HTTP = (assets = [], host = DEFAULT_CDN_HOST, logger = console.log) => {
  return {
    name: HTTP_NAMESPACE,
    setup(build) {
      build.onResolve({ filter: /^https?:\/\// }, (args) => {
        return {
          path: args.path,
          namespace: HTTP_NAMESPACE
        };
      });
      build.onResolve({ filter: /.*/, namespace: HTTP_NAMESPACE }, HTTP_RESOLVE(host, logger));
      build.onLoad({ filter: /.*/, namespace: HTTP_NAMESPACE }, async (args) => {
        var _a2;
        let ext = extname(args.path);
        let argPath = (suffix = "") => ext.length > 0 ? args.path : args.path + suffix;
        let content, url;
        try {
          ({ content, url } = await fetchPkg(argPath(), logger));
        } catch (err) {
          try {
            ({ content, url } = await fetchPkg(argPath(".ts"), logger));
          } catch (e) {
            try {
              ({ content, url } = await fetchPkg(argPath(".tsx"), logger));
            } catch (e2) {
              throw err;
            }
          }
        }
        setFile(args.namespace + ":" + args.path, content);
        let _assetResults = (await fetchAssets(url, content, args.namespace, logger)).filter((result) => {
          var _a3;
          if (result.status == "rejected") {
            logger("Asset fetch failed.\n" + ((_a3 = result == null ? void 0 : result.reason) == null ? void 0 : _a3.toString()), "warning");
            return false;
          } else
            return true;
        }).map((result) => {
          if (result.status == "fulfilled")
            return result.value;
        });
        assets = assets.concat(_assetResults);
        return {
          contents: content,
          loader: inferLoader(url),
          pluginData: { url, pkg: (_a2 = args.pluginData) == null ? void 0 : _a2.pkg }
        };
      });
    }
  };
};
const ALIAS_NAMESPACE = "alias-globals";
const isAlias = (id, aliases = {}) => {
  if (!isBareImport(id))
    return false;
  let aliasKeys = Object.keys(aliases);
  let path2 = id.replace(/^node\:/, "");
  let pkgDetails = parse(path2);
  return aliasKeys.find((it2) => {
    return pkgDetails.name === it2;
  });
};
const ALIAS_RESOLVE = (aliases = {}, host = DEFAULT_CDN_HOST, logger = console.log) => {
  return async (args) => {
    let path2 = args.path.replace(/^node\:/, "");
    let { path: argPath } = getCDNUrl(path2);
    if (isAlias(argPath, aliases)) {
      let pkgDetails = parse(argPath);
      let aliasPath = aliases[pkgDetails.name];
      return HTTP_RESOLVE(host, logger)(__spreadProps(__spreadValues({}, args), {
        path: aliasPath
      }));
    }
  };
};
const ALIAS = (aliases = {}, host = DEFAULT_CDN_HOST, logger = console.log) => {
  return {
    name: ALIAS_NAMESPACE,
    setup(build) {
      build.onResolve({ filter: /^node\:.*/ }, (args) => {
        if (isAlias(args.path, aliases))
          return ALIAS_RESOLVE(aliases, host, logger)(args);
        return {
          path: args.path,
          namespace: EXTERNALS_NAMESPACE,
          external: true
        };
      });
      build.onResolve({ filter: /.*/ }, ALIAS_RESOLVE(aliases, host, logger));
      build.onResolve({ filter: /.*/, namespace: ALIAS_NAMESPACE }, ALIAS_RESOLVE(aliases, host, logger));
    }
  };
};
const source$1 = Uint8Array.from(atob(""), (A2) => A2.charCodeAt(0));
let A, I$1 = null;
function g$1() {
  return I$1 !== null && I$1.buffer === A.memory.buffer || (I$1 = new Uint8Array(A.memory.buffer)), I$1;
}
let B$1 = 0;
function Q$1(A2, I2) {
  const Q2 = I2(1 * A2.length);
  return g$1().set(A2, Q2 / 1), B$1 = A2.length, Q2;
}
let C$1 = null;
function E$1() {
  return C$1 !== null && C$1.buffer === A.memory.buffer || (C$1 = new Int32Array(A.memory.buffer)), C$1;
}
function D$1(A2, I2) {
  return g$1().subarray(A2 / 1, A2 / 1 + I2);
}
function lz4_compress(I2) {
  var g2 = Q$1(I2, A.__wbindgen_malloc), C2 = B$1;
  A.lz4_compress(8, g2, C2);
  var w2 = E$1()[2], o2 = E$1()[3], i = D$1(w2, o2).slice();
  return A.__wbindgen_free(w2, 1 * o2), i;
}
function lz4_decompress(I2) {
  var g2 = Q$1(I2, A.__wbindgen_malloc), C2 = B$1;
  A.lz4_decompress(8, g2, C2);
  var w2 = E$1()[2], o2 = E$1()[3], i = D$1(w2, o2).slice();
  return A.__wbindgen_free(w2, 1 * o2), i;
}
async function w$1(A2, I2) {
  if (typeof Response == "function" && A2 instanceof Response) {
    if (typeof WebAssembly.instantiateStreaming == "function")
      try {
        return await WebAssembly.instantiateStreaming(A2, I2);
      } catch (I3) {
        if (A2.headers.get("Content-Type") == "application/wasm")
          throw I3;
        console.warn("`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\n", I3);
      }
    const g2 = await A2.arrayBuffer();
    return await WebAssembly.instantiate(g2, I2);
  }
  {
    const g2 = await WebAssembly.instantiate(A2, I2);
    return g2 instanceof WebAssembly.Instance ? { instance: g2, module: A2 } : g2;
  }
}
async function o(I2) {
  I2 === void 0 && (I2 = import_meta.url.replace(/\.js$/, "_bg.wasm"));
  (typeof I2 == "string" || typeof Request == "function" && I2 instanceof Request || typeof URL == "function" && I2 instanceof URL) && (I2 = fetch(I2));
  const { instance: g2, module: B2 } = await w$1(await I2, {});
  return A = g2.exports, o.__wbindgen_wasm_module = B2, A;
}
let initialized$1 = false;
const getWASM$2 = async () => {
  if (!initialized$1)
    await o(source$1);
  return initialized$1 = true;
};
async function compress$2(input) {
  await getWASM$2();
  return lz4_compress(input);
}
async function decompress$2(input) {
  await getWASM$2();
  return lz4_decompress(input);
}
var mod$2 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  compress: compress$2,
  decompress: decompress$2
}, Symbol.toStringTag, { value: "Module" }));
const source = decompress$2(Uint8Array.from(atob(""), (A2) => A2.charCodeAt(0)));
let B, Q = null;
function E() {
  return Q !== null && Q.buffer === B.memory.buffer || (Q = new Uint8Array(B.memory.buffer)), Q;
}
let C = 0;
function g(A2, B2) {
  const Q2 = B2(1 * A2.length);
  return E().set(A2, Q2 / 1), C = A2.length, Q2;
}
let w = null;
function I() {
  return w !== null && w.buffer === B.memory.buffer || (w = new Int32Array(B.memory.buffer)), w;
}
function G(A2, B2) {
  return E().subarray(A2 / 1, A2 / 1 + B2);
}
function compress$1(A2, Q2, E2, w2) {
  var F2 = g(A2, B.__wbindgen_malloc), D2 = C;
  B.compress(8, F2, D2, Q2, E2, w2);
  var H2 = I()[2], U2 = I()[3], Y2 = G(H2, U2).slice();
  return B.__wbindgen_free(H2, 1 * U2), Y2;
}
function decompress$1(A2, Q2) {
  var E2 = g(A2, B.__wbindgen_malloc), w2 = C;
  B.decompress(8, E2, w2, Q2);
  var F2 = I()[2], D2 = I()[3], H2 = G(F2, D2).slice();
  return B.__wbindgen_free(F2, 1 * D2), H2;
}
async function F(A2, B2) {
  if (typeof Response == "function" && A2 instanceof Response) {
    if (typeof WebAssembly.instantiateStreaming == "function")
      try {
        return await WebAssembly.instantiateStreaming(A2, B2);
      } catch (B3) {
        if (A2.headers.get("Content-Type") == "application/wasm")
          throw B3;
        console.warn("`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\n", B3);
      }
    const Q2 = await A2.arrayBuffer();
    return await WebAssembly.instantiate(Q2, B2);
  }
  {
    const Q2 = await WebAssembly.instantiate(A2, B2);
    return Q2 instanceof WebAssembly.Instance ? { instance: Q2, module: A2 } : Q2;
  }
}
async function D(A2) {
  A2 === void 0 && (A2 = import_meta.url.replace(/\.js$/, "_bg.wasm"));
  (typeof A2 == "string" || typeof Request == "function" && A2 instanceof Request || typeof URL == "function" && A2 instanceof URL) && (A2 = fetch(A2));
  const { instance: Q2, module: E2 } = await F(await A2, {});
  return B = Q2.exports, D.__wbindgen_wasm_module = E2, B;
}
let initialized = false;
const getWASM$1 = async () => {
  if (!initialized)
    await D(source);
  return initialized = true;
};
async function compress(input, bufferSize = 4096, quality = 6, lgwin = 22) {
  await getWASM$1();
  return compress$1(input, bufferSize, quality, lgwin);
}
async function decompress(input, bufferSize = 4096) {
  await getWASM$1();
  return decompress$1(input, bufferSize);
}
var mod$1 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  getWASM: getWASM$1,
  compress,
  decompress
}, Symbol.toStringTag, { value: "Module" }));
let wasm$3;
let cachedTextDecoder = new TextDecoder("utf-8", { ignoreBOM: true, fatal: true });
cachedTextDecoder.decode();
let cachegetUint8Memory0 = null;
function getUint8Memory0() {
  if (cachegetUint8Memory0 === null || cachegetUint8Memory0.buffer !== wasm$3.memory.buffer) {
    cachegetUint8Memory0 = new Uint8Array(wasm$3.memory.buffer);
  }
  return cachegetUint8Memory0;
}
function getStringFromWasm0(ptr, len) {
  return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));
}
const heap = new Array(32).fill(void 0);
heap.push(void 0, null, true, false);
let heap_next = heap.length;
function addHeapObject(obj) {
  if (heap_next === heap.length)
    heap.push(heap.length + 1);
  const idx = heap_next;
  heap_next = heap[idx];
  heap[idx] = obj;
  return idx;
}
function getObject(idx) {
  return heap[idx];
}
function dropObject(idx) {
  if (idx < 36)
    return;
  heap[idx] = heap_next;
  heap_next = idx;
}
function takeObject(idx) {
  const ret = getObject(idx);
  dropObject(idx);
  return ret;
}
let WASM_VECTOR_LEN = 0;
function passArray8ToWasm0(arg, malloc) {
  const ptr = malloc(arg.length * 1);
  getUint8Memory0().set(arg, ptr / 1);
  WASM_VECTOR_LEN = arg.length;
  return ptr;
}
function isLikeNone(x2) {
  return x2 === void 0 || x2 === null;
}
let cachegetInt32Memory0 = null;
function getInt32Memory0() {
  if (cachegetInt32Memory0 === null || cachegetInt32Memory0.buffer !== wasm$3.memory.buffer) {
    cachegetInt32Memory0 = new Int32Array(wasm$3.memory.buffer);
  }
  return cachegetInt32Memory0;
}
function getArrayU8FromWasm0(ptr, len) {
  return getUint8Memory0().subarray(ptr / 1, ptr / 1 + len);
}
function deflate(input, compression) {
  try {
    const retptr = wasm$3.__wbindgen_add_to_stack_pointer(-16);
    var ptr0 = passArray8ToWasm0(input, wasm$3.__wbindgen_malloc);
    var len0 = WASM_VECTOR_LEN;
    wasm$3.deflate(retptr, ptr0, len0, !isLikeNone(compression), isLikeNone(compression) ? 0 : compression);
    var r0 = getInt32Memory0()[retptr / 4 + 0];
    var r1 = getInt32Memory0()[retptr / 4 + 1];
    var v1 = getArrayU8FromWasm0(r0, r1).slice();
    wasm$3.__wbindgen_free(r0, r1 * 1);
    return v1;
  } finally {
    wasm$3.__wbindgen_add_to_stack_pointer(16);
  }
}
function inflate(input) {
  try {
    const retptr = wasm$3.__wbindgen_add_to_stack_pointer(-16);
    var ptr0 = passArray8ToWasm0(input, wasm$3.__wbindgen_malloc);
    var len0 = WASM_VECTOR_LEN;
    wasm$3.inflate(retptr, ptr0, len0);
    var r0 = getInt32Memory0()[retptr / 4 + 0];
    var r1 = getInt32Memory0()[retptr / 4 + 1];
    var v1 = getArrayU8FromWasm0(r0, r1).slice();
    wasm$3.__wbindgen_free(r0, r1 * 1);
    return v1;
  } finally {
    wasm$3.__wbindgen_add_to_stack_pointer(16);
  }
}
function gzip(input, compression) {
  try {
    const retptr = wasm$3.__wbindgen_add_to_stack_pointer(-16);
    var ptr0 = passArray8ToWasm0(input, wasm$3.__wbindgen_malloc);
    var len0 = WASM_VECTOR_LEN;
    wasm$3.gzip(retptr, ptr0, len0, !isLikeNone(compression), isLikeNone(compression) ? 0 : compression);
    var r0 = getInt32Memory0()[retptr / 4 + 0];
    var r1 = getInt32Memory0()[retptr / 4 + 1];
    var v1 = getArrayU8FromWasm0(r0, r1).slice();
    wasm$3.__wbindgen_free(r0, r1 * 1);
    return v1;
  } finally {
    wasm$3.__wbindgen_add_to_stack_pointer(16);
  }
}
function gunzip(input) {
  try {
    const retptr = wasm$3.__wbindgen_add_to_stack_pointer(-16);
    var ptr0 = passArray8ToWasm0(input, wasm$3.__wbindgen_malloc);
    var len0 = WASM_VECTOR_LEN;
    wasm$3.gunzip(retptr, ptr0, len0);
    var r0 = getInt32Memory0()[retptr / 4 + 0];
    var r1 = getInt32Memory0()[retptr / 4 + 1];
    var v1 = getArrayU8FromWasm0(r0, r1).slice();
    wasm$3.__wbindgen_free(r0, r1 * 1);
    return v1;
  } finally {
    wasm$3.__wbindgen_add_to_stack_pointer(16);
  }
}
function zlib(input, compression) {
  try {
    const retptr = wasm$3.__wbindgen_add_to_stack_pointer(-16);
    var ptr0 = passArray8ToWasm0(input, wasm$3.__wbindgen_malloc);
    var len0 = WASM_VECTOR_LEN;
    wasm$3.zlib(retptr, ptr0, len0, !isLikeNone(compression), isLikeNone(compression) ? 0 : compression);
    var r0 = getInt32Memory0()[retptr / 4 + 0];
    var r1 = getInt32Memory0()[retptr / 4 + 1];
    var v1 = getArrayU8FromWasm0(r0, r1).slice();
    wasm$3.__wbindgen_free(r0, r1 * 1);
    return v1;
  } finally {
    wasm$3.__wbindgen_add_to_stack_pointer(16);
  }
}
function unzlib(input) {
  try {
    const retptr = wasm$3.__wbindgen_add_to_stack_pointer(-16);
    var ptr0 = passArray8ToWasm0(input, wasm$3.__wbindgen_malloc);
    var len0 = WASM_VECTOR_LEN;
    wasm$3.unzlib(retptr, ptr0, len0);
    var r0 = getInt32Memory0()[retptr / 4 + 0];
    var r1 = getInt32Memory0()[retptr / 4 + 1];
    var v1 = getArrayU8FromWasm0(r0, r1).slice();
    wasm$3.__wbindgen_free(r0, r1 * 1);
    return v1;
  } finally {
    wasm$3.__wbindgen_add_to_stack_pointer(16);
  }
}
async function load(module, imports) {
  if (typeof Response === "function" && module instanceof Response) {
    if (typeof WebAssembly.instantiateStreaming === "function") {
      try {
        return await WebAssembly.instantiateStreaming(module, imports);
      } catch (e) {
        if (module.headers.get("Content-Type") != "application/wasm") {
          console.warn("`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\n", e);
        } else {
          throw e;
        }
      }
    }
    const bytes = await module.arrayBuffer();
    return await WebAssembly.instantiate(bytes, imports);
  } else {
    const instance = await WebAssembly.instantiate(module, imports);
    if (instance instanceof WebAssembly.Instance) {
      return { instance, module };
    } else {
      return instance;
    }
  }
}
async function init(input) {
  if (typeof input === "undefined") {
    input = new URL("data:application/wasm;base64,", self.location);
  }
  const imports = {};
  imports.wbg = {};
  imports.wbg.__wbindgen_string_new = function(arg0, arg1) {
    var ret = getStringFromWasm0(arg0, arg1);
    return addHeapObject(ret);
  };
  imports.wbg.__wbindgen_rethrow = function(arg0) {
    throw takeObject(arg0);
  };
  if (typeof input === "string" || typeof Request === "function" && input instanceof Request || typeof URL === "function" && input instanceof URL) {
    input = fetch(input);
  }
  const { instance, module } = await load(await input, imports);
  wasm$3 = instance.exports;
  init.__wbindgen_wasm_module = module;
  return wasm$3;
}
const wasm$2 = new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 142, 1, 21, 96, 2, 127, 127, 1, 127, 96, 3, 127, 127, 127, 1, 127, 96, 1, 127, 0, 96, 3, 127, 127, 127, 0, 96, 2, 127, 127, 0, 96, 4, 127, 127, 127, 127, 0, 96, 1, 127, 1, 127, 96, 1, 127, 1, 126, 96, 3, 127, 127, 127, 1, 126, 96, 5, 127, 127, 127, 127, 127, 0, 96, 6, 127, 127, 127, 127, 127, 127, 0, 96, 7, 127, 127, 127, 127, 127, 127, 127, 0, 96, 4, 127, 127, 127, 127, 1, 127, 96, 0, 1, 126, 96, 0, 0, 96, 8, 127, 127, 127, 127, 127, 127, 127, 127, 0, 96, 0, 1, 127, 96, 5, 127, 127, 127, 127, 127, 1, 127, 96, 6, 127, 127, 127, 127, 127, 127, 1, 127, 96, 3, 126, 127, 127, 1, 127, 96, 2, 127, 127, 1, 126, 2, 54, 2, 3, 119, 98, 103, 21, 95, 95, 119, 98, 105, 110, 100, 103, 101, 110, 95, 115, 116, 114, 105, 110, 103, 95, 110, 101, 119, 0, 0, 3, 119, 98, 103, 18, 95, 95, 119, 98, 105, 110, 100, 103, 101, 110, 95, 114, 101, 116, 104, 114, 111, 119, 0, 2, 3, 180, 1, 178, 1, 15, 12, 5, 5, 9, 11, 3, 0, 8, 3, 9, 4, 1, 1, 3, 3, 3, 9, 9, 6, 11, 9, 3, 10, 8, 18, 5, 5, 3, 1, 17, 0, 7, 5, 0, 4, 0, 1, 6, 8, 8, 8, 8, 8, 4, 5, 0, 3, 2, 4, 19, 2, 4, 11, 0, 7, 7, 16, 4, 4, 3, 3, 0, 10, 3, 3, 0, 0, 4, 10, 5, 4, 5, 3, 5, 2, 7, 13, 3, 3, 7, 0, 0, 3, 6, 0, 2, 5, 13, 2, 5, 9, 0, 6, 3, 2, 3, 3, 3, 3, 0, 4, 0, 0, 0, 8, 0, 0, 10, 12, 0, 6, 3, 0, 0, 0, 4, 4, 2, 1, 0, 1, 2, 6, 3, 5, 20, 2, 4, 1, 0, 6, 2, 2, 4, 7, 2, 6, 2, 3, 0, 1, 4, 1, 4, 6, 0, 0, 4, 0, 0, 0, 4, 0, 3, 0, 14, 0, 0, 1, 6, 7, 0, 4, 1, 4, 2, 7, 6, 0, 6, 0, 7, 7, 7, 7, 2, 4, 4, 5, 1, 112, 1, 75, 75, 5, 3, 1, 0, 17, 6, 9, 1, 127, 1, 65, 128, 128, 192, 0, 11, 7, 136, 1, 10, 6, 109, 101, 109, 111, 114, 121, 2, 0, 7, 100, 101, 102, 108, 97, 116, 101, 0, 19, 7, 105, 110, 102, 108, 97, 116, 101, 0, 17, 4, 103, 122, 105, 112, 0, 23, 6, 103, 117, 110, 122, 105, 112, 0, 11, 4, 122, 108, 105, 98, 0, 20, 6, 117, 110, 122, 108, 105, 98, 0, 18, 31, 95, 95, 119, 98, 105, 110, 100, 103, 101, 110, 95, 97, 100, 100, 95, 116, 111, 95, 115, 116, 97, 99, 107, 95, 112, 111, 105, 110, 116, 101, 114, 0, 162, 1, 17, 95, 95, 119, 98, 105, 110, 100, 103, 101, 110, 95, 109, 97, 108, 108, 111, 99, 0, 125, 15, 95, 95, 119, 98, 105, 110, 100, 103, 101, 110, 95, 102, 114, 101, 101, 0, 144, 1, 9, 129, 1, 1, 0, 65, 1, 11, 74, 122, 140, 1, 167, 1, 169, 1, 170, 1, 146, 1, 152, 1, 153, 1, 33, 64, 178, 1, 92, 171, 1, 172, 1, 74, 173, 1, 170, 1, 178, 1, 178, 1, 117, 109, 112, 164, 1, 178, 1, 167, 1, 174, 1, 170, 1, 150, 1, 115, 116, 178, 1, 122, 178, 1, 87, 140, 1, 167, 1, 169, 1, 170, 1, 151, 1, 132, 1, 152, 1, 179, 1, 178, 1, 145, 1, 36, 104, 176, 1, 135, 1, 60, 73, 118, 154, 1, 134, 1, 177, 1, 175, 1, 178, 1, 145, 1, 157, 1, 105, 142, 1, 160, 1, 155, 1, 94, 38, 159, 1, 148, 1, 178, 1, 176, 1, 39, 69, 108, 161, 1, 68, 106, 10, 226, 186, 4, 178, 1, 217, 68, 1, 36, 127, 35, 0, 65, 48, 107, 34, 8, 36, 0, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 32, 5, 32, 6, 79, 4, 64, 65, 127, 65, 0, 32, 5, 65, 127, 106, 34, 9, 32, 9, 32, 5, 75, 27, 32, 7, 65, 4, 113, 34, 32, 27, 34, 29, 65, 1, 106, 34, 38, 32, 29, 113, 69, 13, 1, 11, 32, 0, 65, 0, 54, 2, 8, 32, 0, 65, 0, 54, 2, 0, 32, 0, 65, 253, 1, 58, 0, 4, 12, 1, 11, 32, 8, 32, 2, 54, 2, 0, 32, 8, 32, 2, 32, 3, 106, 34, 39, 54, 2, 4, 32, 1, 45, 0, 152, 82, 33, 10, 32, 8, 32, 1, 40, 2, 36, 54, 2, 24, 32, 8, 32, 1, 41, 2, 28, 55, 3, 16, 32, 8, 32, 1, 40, 2, 0, 54, 2, 12, 32, 8, 32, 1, 40, 2, 52, 54, 2, 8, 65, 1, 65, 3, 32, 7, 65, 1, 113, 34, 35, 27, 33, 40, 65, 1, 65, 124, 32, 7, 65, 2, 113, 34, 9, 27, 33, 26, 65, 130, 2, 65, 130, 120, 32, 9, 27, 33, 22, 32, 1, 65, 248, 207, 0, 106, 33, 41, 32, 1, 65, 184, 25, 106, 33, 36, 32, 1, 65, 157, 210, 0, 106, 33, 42, 32, 1, 65, 216, 52, 106, 33, 31, 32, 1, 65, 184, 27, 106, 33, 33, 32, 1, 65, 200, 26, 106, 33, 43, 32, 1, 65, 248, 54, 106, 33, 37, 32, 1, 65, 56, 106, 33, 30, 32, 1, 65, 216, 27, 106, 33, 34, 32, 6, 33, 15, 2, 64, 2, 64, 2, 64, 2, 64, 3, 64, 65, 255, 1, 33, 16, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 32, 10, 34, 11, 65, 255, 1, 113, 14, 25, 26, 25, 27, 24, 23, 22, 17, 16, 15, 14, 13, 12, 0, 10, 8, 7, 6, 21, 18, 4, 3, 9, 5, 2, 1, 30, 11, 32, 8, 40, 2, 4, 34, 20, 32, 8, 40, 2, 0, 34, 9, 107, 34, 10, 65, 4, 73, 13, 10, 32, 9, 33, 17, 2, 64, 3, 64, 32, 5, 32, 15, 107, 34, 12, 65, 1, 77, 13, 12, 32, 12, 65, 131, 2, 73, 32, 10, 65, 13, 77, 114, 69, 4, 64, 32, 8, 40, 2, 24, 33, 27, 32, 8, 40, 2, 20, 33, 19, 32, 8, 40, 2, 16, 33, 28, 32, 8, 40, 2, 12, 33, 17, 32, 8, 40, 2, 8, 33, 13, 32, 9, 33, 18, 32, 9, 33, 23, 32, 9, 33, 24, 32, 9, 33, 25, 32, 9, 33, 21, 2, 64, 3, 64, 65, 12, 33, 10, 32, 20, 32, 9, 107, 65, 14, 73, 13, 1, 3, 64, 2, 64, 2, 64, 2, 64, 32, 17, 65, 14, 77, 4, 64, 32, 20, 32, 21, 107, 34, 9, 65, 1, 77, 13, 45, 32, 21, 47, 0, 0, 32, 8, 32, 21, 65, 2, 106, 34, 9, 54, 2, 0, 32, 17, 116, 32, 13, 114, 33, 13, 32, 9, 33, 18, 32, 9, 33, 23, 32, 9, 33, 24, 32, 9, 33, 25, 32, 9, 33, 21, 32, 17, 65, 16, 106, 33, 17, 11, 32, 30, 32, 13, 65, 255, 7, 113, 65, 1, 116, 106, 46, 1, 0, 34, 12, 65, 127, 76, 4, 64, 65, 10, 33, 11, 3, 64, 32, 13, 32, 11, 65, 31, 113, 118, 65, 1, 113, 32, 12, 65, 127, 115, 106, 34, 12, 65, 191, 4, 75, 13, 47, 32, 11, 65, 1, 106, 33, 11, 32, 1, 32, 12, 65, 1, 116, 106, 65, 184, 16, 106, 46, 1, 0, 34, 12, 65, 127, 76, 13, 0, 11, 12, 1, 11, 32, 12, 65, 9, 118, 34, 11, 13, 0, 65, 34, 33, 11, 12, 1, 11, 32, 17, 32, 11, 107, 33, 17, 32, 13, 32, 11, 65, 31, 113, 118, 33, 13, 65, 128, 2, 33, 19, 2, 127, 2, 64, 2, 64, 2, 64, 2, 64, 32, 12, 65, 128, 2, 113, 69, 4, 64, 2, 64, 2, 64, 32, 17, 65, 14, 77, 4, 64, 32, 20, 32, 25, 107, 34, 9, 65, 1, 77, 13, 52, 32, 25, 47, 0, 0, 32, 8, 32, 25, 65, 2, 106, 34, 9, 54, 2, 0, 32, 17, 116, 32, 13, 114, 33, 13, 32, 9, 33, 18, 32, 9, 33, 23, 32, 9, 33, 24, 32, 9, 33, 25, 32, 9, 33, 21, 32, 17, 65, 16, 106, 33, 17, 11, 32, 30, 32, 13, 65, 255, 7, 113, 65, 1, 116, 106, 46, 1, 0, 34, 14, 65, 127, 76, 4, 64, 65, 10, 33, 11, 3, 64, 32, 13, 32, 11, 65, 31, 113, 118, 65, 1, 113, 32, 14, 65, 127, 115, 106, 34, 14, 65, 191, 4, 75, 13, 2, 32, 11, 65, 1, 106, 33, 11, 32, 1, 32, 14, 65, 1, 116, 106, 65, 184, 16, 106, 46, 1, 0, 34, 14, 65, 127, 76, 13, 0, 11, 12, 2, 11, 32, 14, 65, 9, 118, 34, 11, 13, 1, 65, 34, 33, 11, 32, 12, 33, 19, 12, 8, 11, 32, 14, 65, 192, 4, 65, 248, 176, 192, 0, 16, 98, 0, 11, 32, 15, 32, 5, 79, 13, 51, 32, 17, 32, 11, 107, 33, 17, 32, 13, 32, 11, 65, 31, 113, 118, 33, 13, 32, 4, 32, 15, 106, 32, 12, 58, 0, 0, 32, 15, 65, 1, 106, 33, 11, 32, 14, 65, 128, 2, 113, 69, 13, 1, 32, 11, 33, 15, 32, 14, 33, 12, 11, 32, 12, 65, 255, 3, 113, 34, 14, 65, 128, 2, 71, 13, 1, 65, 20, 33, 10, 12, 9, 11, 32, 11, 32, 5, 79, 13, 1, 32, 4, 32, 11, 106, 32, 14, 58, 0, 0, 32, 5, 32, 15, 65, 2, 106, 34, 15, 107, 65, 131, 2, 79, 13, 5, 32, 12, 33, 19, 12, 8, 11, 32, 14, 65, 157, 2, 75, 4, 64, 32, 14, 33, 19, 65, 32, 12, 3, 11, 32, 17, 65, 14, 77, 4, 64, 32, 20, 32, 24, 107, 34, 9, 65, 1, 77, 13, 47, 32, 24, 47, 0, 0, 32, 8, 32, 24, 65, 2, 106, 34, 9, 54, 2, 0, 32, 17, 116, 32, 13, 114, 33, 13, 32, 9, 33, 18, 32, 9, 33, 23, 32, 9, 33, 24, 32, 9, 33, 25, 32, 9, 33, 21, 32, 17, 65, 16, 106, 33, 17, 11, 32, 12, 65, 127, 106, 65, 31, 113, 34, 12, 65, 1, 116, 65, 216, 181, 192, 0, 106, 47, 1, 0, 33, 19, 2, 64, 32, 12, 65, 184, 181, 192, 0, 106, 45, 0, 0, 34, 27, 69, 13, 0, 32, 13, 32, 27, 65, 31, 113, 34, 12, 118, 33, 11, 32, 13, 65, 127, 32, 12, 116, 65, 127, 115, 113, 32, 19, 106, 33, 19, 32, 17, 32, 27, 107, 34, 12, 65, 14, 75, 4, 64, 32, 12, 33, 17, 32, 11, 33, 13, 12, 1, 11, 32, 20, 32, 23, 107, 34, 9, 65, 1, 77, 13, 47, 32, 23, 47, 0, 0, 32, 8, 32, 23, 65, 2, 106, 34, 9, 54, 2, 0, 32, 12, 65, 16, 106, 33, 17, 32, 12, 116, 32, 11, 114, 33, 13, 32, 9, 33, 18, 32, 9, 33, 23, 32, 9, 33, 24, 32, 9, 33, 25, 32, 9, 33, 21, 11, 32, 34, 32, 13, 65, 255, 7, 113, 65, 1, 116, 106, 46, 1, 0, 34, 12, 65, 127, 76, 4, 64, 65, 10, 33, 11, 3, 64, 32, 13, 32, 11, 65, 31, 113, 118, 65, 1, 113, 32, 12, 65, 127, 115, 106, 34, 12, 65, 191, 4, 75, 13, 49, 32, 11, 65, 1, 106, 33, 11, 32, 1, 32, 12, 65, 1, 116, 106, 65, 216, 43, 106, 46, 1, 0, 34, 12, 65, 127, 76, 13, 0, 11, 12, 2, 11, 32, 12, 65, 9, 118, 34, 11, 13, 1, 65, 34, 33, 11, 12, 3, 11, 32, 11, 32, 5, 65, 196, 185, 192, 0, 16, 98, 0, 11, 32, 17, 32, 11, 107, 33, 17, 32, 13, 32, 11, 65, 31, 113, 118, 33, 14, 2, 64, 32, 12, 65, 255, 3, 113, 34, 12, 65, 29, 77, 4, 64, 32, 12, 65, 1, 116, 65, 184, 182, 192, 0, 106, 47, 1, 0, 33, 28, 2, 64, 32, 12, 65, 152, 182, 192, 0, 106, 45, 0, 0, 34, 27, 69, 4, 64, 32, 14, 33, 13, 12, 1, 11, 32, 17, 65, 14, 75, 4, 127, 32, 17, 5, 32, 20, 32, 18, 107, 34, 9, 65, 1, 77, 13, 48, 32, 18, 47, 0, 0, 32, 8, 32, 18, 65, 2, 106, 34, 9, 54, 2, 0, 32, 17, 116, 32, 14, 114, 33, 14, 32, 9, 33, 18, 32, 9, 33, 23, 32, 9, 33, 24, 32, 9, 33, 25, 32, 9, 33, 21, 32, 17, 65, 16, 106, 11, 32, 27, 107, 33, 17, 32, 14, 32, 27, 65, 31, 113, 34, 12, 118, 33, 13, 32, 14, 65, 127, 32, 12, 116, 65, 127, 115, 113, 32, 28, 106, 33, 28, 11, 32, 32, 65, 0, 32, 28, 32, 15, 75, 27, 13, 1, 32, 4, 32, 5, 32, 15, 32, 28, 32, 19, 32, 29, 16, 71, 32, 5, 32, 15, 32, 19, 106, 34, 15, 107, 65, 131, 2, 79, 13, 6, 12, 7, 11, 65, 33, 33, 11, 32, 14, 33, 13, 12, 2, 11, 65, 29, 11, 33, 11, 11, 32, 8, 32, 27, 54, 2, 24, 32, 8, 32, 19, 54, 2, 20, 32, 8, 32, 28, 54, 2, 16, 32, 8, 32, 17, 54, 2, 12, 32, 8, 32, 13, 54, 2, 8, 12, 36, 11, 32, 9, 33, 18, 32, 9, 33, 23, 32, 9, 33, 24, 32, 9, 33, 25, 32, 9, 33, 21, 32, 12, 33, 19, 32, 20, 32, 9, 107, 65, 14, 79, 13, 0, 11, 11, 11, 32, 8, 32, 27, 54, 2, 24, 32, 8, 32, 19, 54, 2, 20, 32, 8, 32, 28, 54, 2, 16, 32, 8, 32, 17, 54, 2, 12, 32, 8, 32, 13, 54, 2, 8, 12, 30, 11, 2, 64, 2, 64, 32, 8, 40, 2, 12, 34, 14, 65, 15, 79, 4, 64, 32, 8, 40, 2, 8, 33, 12, 12, 1, 11, 32, 20, 32, 17, 107, 34, 9, 65, 1, 77, 13, 39, 32, 17, 47, 0, 0, 33, 12, 32, 8, 32, 17, 65, 2, 106, 34, 9, 54, 2, 0, 32, 8, 32, 14, 65, 16, 106, 34, 10, 54, 2, 12, 32, 8, 32, 8, 40, 2, 8, 32, 12, 32, 14, 116, 114, 34, 12, 54, 2, 8, 32, 9, 33, 17, 32, 10, 33, 14, 11, 2, 64, 32, 30, 32, 12, 65, 255, 7, 113, 65, 1, 116, 106, 46, 1, 0, 34, 13, 65, 127, 76, 4, 64, 65, 10, 33, 11, 3, 64, 32, 12, 32, 11, 65, 31, 113, 118, 65, 1, 113, 32, 13, 65, 127, 115, 106, 34, 10, 65, 191, 4, 75, 13, 2, 32, 11, 65, 1, 106, 33, 11, 32, 1, 32, 10, 65, 1, 116, 106, 65, 184, 16, 106, 46, 1, 0, 34, 13, 65, 127, 76, 13, 0, 11, 12, 2, 11, 32, 13, 65, 9, 118, 34, 11, 13, 1, 65, 34, 33, 10, 12, 31, 11, 32, 10, 65, 192, 4, 65, 248, 176, 192, 0, 16, 98, 0, 11, 32, 8, 32, 14, 32, 11, 107, 34, 18, 54, 2, 12, 32, 8, 32, 12, 32, 11, 65, 31, 113, 118, 34, 14, 54, 2, 8, 32, 8, 32, 13, 54, 2, 20, 65, 21, 33, 10, 32, 13, 65, 128, 2, 113, 13, 29, 2, 64, 2, 64, 32, 18, 65, 14, 75, 4, 64, 32, 18, 33, 21, 12, 1, 11, 32, 20, 32, 17, 107, 34, 9, 65, 1, 77, 13, 39, 32, 17, 47, 0, 0, 33, 12, 32, 8, 32, 18, 65, 16, 106, 34, 21, 54, 2, 12, 32, 8, 32, 17, 65, 2, 106, 34, 9, 54, 2, 0, 32, 8, 32, 12, 32, 18, 116, 32, 14, 114, 34, 14, 54, 2, 8, 32, 9, 33, 17, 11, 32, 30, 32, 14, 65, 255, 7, 113, 65, 1, 116, 106, 46, 1, 0, 34, 12, 65, 127, 76, 4, 64, 65, 10, 33, 11, 3, 64, 32, 14, 32, 11, 65, 31, 113, 118, 65, 1, 113, 32, 12, 65, 127, 115, 106, 34, 12, 65, 191, 4, 75, 13, 41, 32, 11, 65, 1, 106, 33, 11, 32, 1, 32, 12, 65, 1, 116, 106, 65, 184, 16, 106, 46, 1, 0, 34, 12, 65, 127, 76, 13, 0, 11, 12, 1, 11, 32, 12, 65, 9, 118, 34, 11, 13, 0, 65, 34, 33, 10, 12, 30, 11, 32, 8, 32, 21, 32, 11, 107, 54, 2, 12, 32, 8, 32, 14, 32, 11, 65, 31, 113, 118, 54, 2, 8, 32, 15, 32, 5, 73, 4, 64, 32, 4, 32, 15, 106, 32, 13, 58, 0, 0, 32, 15, 65, 1, 106, 33, 11, 32, 12, 65, 128, 2, 113, 4, 64, 32, 8, 32, 12, 54, 2, 20, 32, 11, 33, 15, 12, 31, 11, 32, 11, 32, 5, 79, 13, 2, 32, 4, 32, 11, 106, 32, 12, 58, 0, 0, 32, 15, 65, 2, 106, 33, 15, 32, 20, 32, 17, 107, 34, 10, 65, 4, 79, 13, 1, 12, 13, 11, 11, 12, 38, 11, 32, 11, 32, 5, 65, 196, 185, 192, 0, 16, 98, 0, 11, 65, 0, 33, 16, 12, 28, 11, 32, 8, 40, 2, 20, 33, 14, 32, 8, 40, 2, 4, 33, 12, 3, 64, 32, 14, 65, 3, 75, 4, 64, 65, 24, 33, 10, 12, 27, 11, 2, 127, 32, 8, 2, 127, 32, 8, 40, 2, 12, 34, 11, 4, 64, 3, 64, 32, 11, 65, 8, 79, 4, 64, 32, 1, 32, 8, 40, 2, 8, 34, 9, 65, 255, 1, 113, 32, 1, 40, 2, 12, 65, 8, 116, 114, 54, 2, 12, 32, 8, 32, 11, 65, 120, 106, 54, 2, 12, 32, 8, 32, 9, 65, 8, 118, 54, 2, 8, 32, 14, 65, 1, 106, 12, 3, 11, 2, 127, 32, 22, 32, 12, 32, 8, 40, 2, 0, 34, 9, 70, 13, 0, 26, 32, 8, 32, 9, 65, 1, 106, 54, 2, 0, 32, 9, 45, 0, 0, 33, 10, 32, 8, 32, 11, 65, 8, 106, 34, 9, 54, 2, 12, 32, 8, 32, 8, 40, 2, 8, 32, 10, 32, 11, 116, 114, 54, 2, 8, 32, 9, 33, 11, 65, 0, 11, 34, 13, 65, 2, 113, 69, 13, 0, 11, 32, 13, 65, 128, 254, 3, 113, 65, 8, 118, 12, 2, 11, 32, 12, 32, 8, 40, 2, 0, 34, 9, 70, 4, 64, 65, 23, 33, 11, 32, 26, 33, 10, 12, 30, 11, 32, 8, 32, 9, 65, 1, 106, 54, 2, 0, 32, 1, 32, 9, 45, 0, 0, 32, 1, 40, 2, 12, 65, 8, 116, 114, 54, 2, 12, 32, 14, 65, 1, 106, 11, 34, 14, 54, 2, 20, 65, 0, 33, 13, 65, 0, 11, 33, 10, 65, 23, 33, 11, 32, 13, 65, 255, 1, 113, 65, 1, 107, 14, 2, 26, 27, 0, 11, 0, 11, 65, 3, 33, 10, 32, 1, 40, 2, 16, 69, 13, 24, 32, 8, 40, 2, 12, 34, 11, 65, 7, 113, 33, 16, 32, 8, 40, 2, 4, 33, 9, 3, 64, 2, 64, 32, 11, 32, 16, 79, 4, 64, 32, 8, 32, 11, 32, 16, 107, 34, 11, 54, 2, 12, 32, 8, 32, 8, 40, 2, 8, 32, 16, 118, 54, 2, 8, 32, 8, 40, 2, 0, 33, 14, 12, 1, 11, 2, 127, 32, 9, 32, 8, 40, 2, 0, 34, 10, 70, 4, 64, 32, 9, 33, 14, 32, 22, 12, 1, 11, 32, 8, 32, 10, 65, 1, 106, 34, 14, 54, 2, 0, 32, 10, 45, 0, 0, 33, 10, 32, 8, 32, 11, 65, 8, 106, 34, 12, 54, 2, 12, 32, 8, 32, 8, 40, 2, 8, 32, 10, 32, 11, 65, 31, 113, 116, 114, 54, 2, 8, 32, 12, 33, 11, 65, 0, 11, 65, 2, 113, 69, 13, 1, 11, 11, 32, 8, 32, 11, 32, 14, 32, 9, 107, 32, 3, 106, 34, 9, 32, 11, 65, 3, 118, 34, 10, 32, 10, 32, 9, 75, 27, 34, 10, 65, 3, 116, 107, 34, 12, 54, 2, 12, 32, 9, 32, 10, 107, 34, 9, 32, 3, 77, 4, 64, 32, 8, 32, 39, 54, 2, 4, 32, 8, 32, 2, 32, 9, 106, 54, 2, 0, 32, 8, 32, 8, 40, 2, 8, 65, 127, 32, 12, 65, 31, 113, 116, 65, 127, 115, 113, 54, 2, 8, 65, 24, 33, 10, 32, 35, 69, 13, 25, 32, 8, 65, 0, 54, 2, 20, 65, 23, 33, 10, 12, 25, 11, 32, 9, 32, 3, 65, 248, 182, 192, 0, 16, 101, 0, 11, 32, 8, 40, 2, 16, 33, 12, 3, 64, 32, 5, 32, 15, 107, 34, 9, 69, 4, 64, 65, 19, 33, 11, 65, 2, 33, 16, 12, 27, 11, 32, 4, 32, 5, 32, 15, 32, 12, 107, 32, 29, 113, 32, 15, 32, 8, 40, 2, 20, 34, 10, 32, 9, 32, 9, 32, 10, 75, 27, 34, 9, 32, 29, 16, 25, 32, 8, 32, 10, 32, 9, 107, 34, 11, 54, 2, 20, 32, 9, 32, 15, 106, 33, 15, 65, 12, 33, 10, 32, 11, 13, 0, 11, 12, 23, 11, 32, 8, 40, 2, 16, 33, 12, 32, 32, 4, 64, 65, 29, 33, 10, 32, 15, 32, 12, 73, 13, 23, 11, 2, 64, 32, 8, 40, 2, 20, 34, 10, 32, 15, 106, 34, 9, 32, 5, 75, 13, 0, 32, 15, 32, 12, 107, 32, 29, 113, 34, 11, 32, 15, 79, 65, 0, 32, 11, 32, 15, 107, 32, 10, 73, 27, 13, 0, 32, 4, 32, 5, 32, 15, 32, 12, 32, 10, 32, 29, 16, 71, 65, 12, 33, 10, 32, 9, 33, 15, 12, 23, 11, 65, 19, 65, 12, 32, 10, 27, 33, 10, 12, 22, 11, 32, 8, 40, 2, 12, 33, 11, 32, 8, 40, 2, 4, 33, 14, 32, 8, 40, 2, 24, 33, 12, 3, 64, 32, 11, 32, 12, 79, 4, 64, 32, 8, 32, 11, 32, 12, 107, 54, 2, 12, 32, 8, 32, 8, 40, 2, 8, 34, 9, 32, 12, 65, 31, 113, 34, 10, 118, 54, 2, 8, 32, 8, 32, 8, 40, 2, 16, 32, 9, 65, 127, 32, 10, 116, 65, 127, 115, 113, 106, 54, 2, 16, 65, 22, 33, 10, 12, 23, 11, 2, 127, 32, 22, 32, 14, 32, 8, 40, 2, 0, 34, 9, 70, 13, 0, 26, 32, 8, 32, 9, 65, 1, 106, 54, 2, 0, 32, 9, 45, 0, 0, 33, 10, 32, 8, 32, 11, 65, 8, 106, 34, 9, 54, 2, 12, 32, 8, 32, 8, 40, 2, 8, 32, 10, 32, 11, 65, 31, 113, 116, 114, 54, 2, 8, 32, 9, 33, 11, 65, 0, 11, 34, 10, 65, 2, 113, 69, 32, 10, 65, 255, 1, 113, 69, 114, 13, 0, 11, 32, 10, 65, 128, 254, 3, 113, 65, 8, 118, 33, 10, 65, 16, 33, 11, 12, 22, 11, 2, 64, 32, 8, 40, 2, 12, 34, 16, 65, 15, 79, 4, 64, 32, 8, 40, 2, 8, 33, 13, 12, 1, 11, 32, 8, 40, 2, 4, 34, 17, 32, 8, 40, 2, 0, 34, 14, 107, 65, 1, 77, 4, 64, 32, 8, 40, 2, 8, 33, 13, 32, 16, 33, 12, 3, 64, 2, 64, 2, 64, 32, 34, 32, 13, 65, 255, 7, 113, 65, 1, 116, 106, 46, 1, 0, 34, 10, 65, 0, 78, 4, 64, 32, 10, 65, 9, 118, 65, 127, 106, 32, 12, 79, 13, 1, 32, 12, 33, 16, 12, 5, 11, 65, 11, 33, 11, 32, 12, 65, 11, 73, 13, 0, 3, 64, 32, 13, 32, 11, 65, 127, 106, 65, 31, 113, 118, 65, 1, 113, 32, 10, 65, 127, 115, 106, 34, 9, 65, 191, 4, 75, 13, 2, 32, 1, 32, 9, 65, 1, 116, 106, 65, 216, 43, 106, 46, 1, 0, 34, 10, 65, 127, 74, 4, 64, 32, 12, 33, 16, 12, 6, 11, 32, 12, 32, 11, 65, 1, 106, 34, 11, 79, 13, 0, 11, 11, 32, 14, 32, 17, 70, 4, 64, 65, 15, 33, 11, 32, 26, 33, 10, 12, 26, 11, 32, 8, 32, 14, 65, 1, 106, 34, 9, 54, 2, 0, 32, 14, 45, 0, 0, 33, 10, 32, 8, 32, 12, 65, 8, 106, 34, 16, 54, 2, 12, 32, 8, 32, 10, 32, 12, 65, 31, 113, 116, 32, 13, 114, 34, 13, 54, 2, 8, 32, 9, 33, 14, 32, 16, 34, 12, 65, 15, 73, 13, 1, 12, 3, 11, 11, 32, 9, 65, 192, 4, 65, 152, 177, 192, 0, 16, 98, 0, 11, 32, 14, 47, 0, 0, 33, 10, 32, 8, 32, 14, 65, 2, 106, 54, 2, 0, 32, 8, 32, 16, 65, 16, 106, 34, 9, 54, 2, 12, 32, 8, 32, 8, 40, 2, 8, 32, 10, 32, 16, 116, 114, 34, 13, 54, 2, 8, 32, 9, 33, 16, 11, 2, 64, 32, 34, 32, 13, 65, 255, 7, 113, 65, 1, 116, 106, 46, 1, 0, 34, 10, 65, 127, 76, 4, 64, 65, 10, 33, 11, 3, 64, 32, 13, 32, 11, 65, 31, 113, 118, 65, 1, 113, 32, 10, 65, 127, 115, 106, 34, 9, 65, 191, 4, 75, 13, 34, 32, 11, 65, 1, 106, 33, 11, 32, 1, 32, 9, 65, 1, 116, 106, 65, 216, 43, 106, 46, 1, 0, 34, 10, 65, 127, 76, 13, 0, 11, 32, 10, 33, 12, 12, 1, 11, 32, 10, 65, 255, 3, 113, 33, 12, 32, 10, 65, 9, 118, 33, 11, 12, 0, 11, 65, 34, 33, 10, 32, 11, 69, 13, 20, 32, 8, 32, 16, 32, 11, 107, 54, 2, 12, 32, 8, 32, 13, 32, 11, 65, 31, 113, 118, 54, 2, 8, 65, 33, 33, 10, 32, 12, 65, 29, 74, 13, 20, 32, 8, 32, 12, 65, 31, 113, 34, 9, 65, 1, 116, 65, 184, 182, 192, 0, 106, 47, 1, 0, 54, 2, 16, 32, 8, 32, 9, 65, 152, 182, 192, 0, 106, 45, 0, 0, 34, 9, 54, 2, 24, 65, 16, 65, 22, 32, 9, 27, 33, 10, 12, 20, 11, 32, 8, 40, 2, 12, 33, 11, 32, 8, 40, 2, 4, 33, 14, 32, 8, 40, 2, 24, 33, 12, 3, 64, 32, 11, 32, 12, 79, 4, 64, 32, 8, 32, 11, 32, 12, 107, 54, 2, 12, 32, 8, 32, 8, 40, 2, 8, 34, 9, 32, 12, 65, 31, 113, 34, 10, 118, 54, 2, 8, 32, 8, 32, 8, 40, 2, 20, 32, 9, 65, 127, 32, 10, 116, 65, 127, 115, 113, 106, 54, 2, 20, 65, 15, 33, 10, 12, 21, 11, 2, 127, 32, 22, 32, 14, 32, 8, 40, 2, 0, 34, 9, 70, 13, 0, 26, 32, 8, 32, 9, 65, 1, 106, 54, 2, 0, 32, 9, 45, 0, 0, 33, 10, 32, 8, 32, 11, 65, 8, 106, 34, 9, 54, 2, 12, 32, 8, 32, 8, 40, 2, 8, 32, 10, 32, 11, 65, 31, 113, 116, 114, 54, 2, 8, 32, 9, 33, 11, 65, 0, 11, 34, 10, 65, 2, 113, 69, 32, 10, 65, 255, 1, 113, 69, 114, 13, 0, 11, 32, 10, 65, 128, 254, 3, 113, 65, 8, 118, 33, 10, 65, 14, 33, 11, 12, 20, 11, 32, 8, 32, 8, 40, 2, 20, 34, 12, 65, 255, 3, 113, 34, 9, 54, 2, 20, 65, 20, 33, 10, 32, 9, 65, 128, 2, 70, 13, 18, 65, 32, 33, 10, 32, 9, 65, 157, 2, 75, 13, 18, 32, 8, 32, 12, 65, 127, 106, 65, 31, 113, 34, 9, 65, 1, 116, 65, 216, 181, 192, 0, 106, 47, 1, 0, 54, 2, 20, 32, 8, 32, 9, 65, 184, 181, 192, 0, 106, 45, 0, 0, 34, 9, 54, 2, 24, 65, 14, 65, 15, 32, 9, 27, 33, 10, 12, 18, 11, 65, 21, 33, 10, 32, 8, 40, 2, 20, 34, 9, 65, 255, 1, 75, 13, 17, 32, 5, 32, 15, 70, 13, 8, 32, 15, 32, 5, 73, 4, 64, 32, 4, 32, 15, 106, 32, 9, 58, 0, 0, 32, 15, 65, 1, 106, 33, 15, 65, 12, 33, 10, 12, 18, 11, 12, 27, 11, 2, 64, 2, 64, 2, 64, 2, 64, 32, 8, 40, 2, 12, 34, 16, 65, 15, 79, 4, 64, 32, 8, 40, 2, 8, 33, 13, 12, 1, 11, 32, 10, 65, 1, 77, 4, 64, 32, 8, 40, 2, 8, 33, 13, 32, 16, 33, 12, 3, 64, 2, 64, 2, 64, 32, 30, 32, 13, 65, 255, 7, 113, 65, 1, 116, 106, 46, 1, 0, 34, 10, 65, 0, 78, 4, 64, 32, 10, 65, 9, 118, 65, 127, 106, 32, 12, 79, 13, 1, 32, 12, 33, 16, 12, 5, 11, 65, 11, 33, 11, 32, 12, 65, 11, 73, 13, 0, 3, 64, 32, 13, 32, 11, 65, 127, 106, 65, 31, 113, 118, 65, 1, 113, 32, 10, 65, 127, 115, 106, 34, 10, 65, 191, 4, 75, 13, 2, 32, 1, 32, 10, 65, 1, 116, 106, 65, 184, 16, 106, 46, 1, 0, 34, 10, 65, 127, 74, 4, 64, 32, 12, 33, 16, 12, 6, 11, 32, 12, 32, 11, 65, 1, 106, 34, 11, 79, 13, 0, 11, 11, 32, 9, 32, 20, 70, 4, 64, 65, 12, 33, 11, 32, 26, 33, 10, 12, 25, 11, 32, 8, 32, 9, 65, 1, 106, 34, 10, 54, 2, 0, 32, 9, 45, 0, 0, 33, 9, 32, 8, 32, 12, 65, 8, 106, 34, 16, 54, 2, 12, 32, 8, 32, 9, 32, 12, 65, 31, 113, 116, 32, 13, 114, 34, 13, 54, 2, 8, 32, 10, 33, 9, 32, 16, 34, 12, 65, 15, 73, 13, 1, 12, 3, 11, 11, 32, 10, 65, 192, 4, 65, 152, 177, 192, 0, 16, 98, 0, 11, 32, 20, 32, 9, 107, 34, 10, 65, 1, 77, 13, 1, 32, 9, 47, 0, 0, 33, 10, 32, 8, 32, 9, 65, 2, 106, 54, 2, 0, 32, 8, 32, 16, 65, 16, 106, 34, 9, 54, 2, 12, 32, 8, 32, 8, 40, 2, 8, 32, 10, 32, 16, 116, 114, 34, 13, 54, 2, 8, 32, 9, 33, 16, 11, 32, 30, 32, 13, 65, 255, 7, 113, 65, 1, 116, 106, 46, 1, 0, 34, 10, 65, 127, 74, 13, 1, 65, 10, 33, 11, 3, 64, 32, 13, 32, 11, 65, 31, 113, 118, 65, 1, 113, 32, 10, 65, 127, 115, 106, 34, 9, 65, 191, 4, 75, 13, 31, 32, 11, 65, 1, 106, 33, 11, 32, 1, 32, 9, 65, 1, 116, 106, 65, 184, 16, 106, 46, 1, 0, 34, 10, 65, 127, 76, 13, 0, 11, 32, 10, 33, 12, 12, 2, 11, 65, 2, 32, 10, 65, 136, 177, 192, 0, 16, 99, 0, 11, 32, 10, 65, 255, 3, 113, 33, 12, 32, 10, 65, 9, 118, 33, 11, 12, 0, 11, 65, 34, 33, 10, 32, 11, 69, 13, 16, 32, 8, 32, 12, 54, 2, 20, 32, 8, 32, 16, 32, 11, 107, 54, 2, 12, 32, 8, 32, 13, 32, 11, 65, 31, 113, 118, 54, 2, 8, 65, 13, 33, 10, 12, 16, 11, 32, 8, 40, 2, 12, 33, 11, 32, 8, 40, 2, 4, 33, 14, 32, 8, 40, 2, 24, 33, 12, 2, 64, 2, 64, 3, 64, 32, 11, 32, 12, 79, 4, 64, 32, 8, 32, 11, 32, 12, 107, 54, 2, 12, 32, 8, 32, 8, 40, 2, 8, 34, 11, 32, 12, 65, 31, 113, 34, 14, 118, 54, 2, 8, 32, 8, 65, 11, 54, 2, 40, 32, 8, 66, 131, 128, 128, 128, 48, 55, 2, 32, 2, 64, 32, 8, 40, 2, 16, 34, 10, 65, 3, 113, 34, 9, 65, 3, 71, 4, 64, 32, 8, 65, 32, 106, 32, 9, 65, 2, 116, 106, 40, 2, 0, 33, 16, 65, 0, 33, 12, 32, 8, 40, 2, 20, 33, 9, 32, 10, 65, 16, 70, 4, 64, 32, 9, 65, 127, 106, 34, 10, 65, 200, 3, 75, 13, 2, 32, 1, 32, 10, 106, 65, 157, 210, 0, 106, 45, 0, 0, 33, 12, 11, 32, 9, 32, 16, 32, 11, 65, 127, 32, 14, 116, 65, 127, 115, 113, 106, 34, 11, 106, 34, 10, 32, 9, 73, 13, 4, 32, 10, 65, 202, 3, 79, 13, 5, 32, 11, 4, 64, 32, 1, 32, 9, 106, 65, 157, 210, 0, 106, 32, 12, 32, 11, 16, 131, 1, 26, 11, 32, 8, 32, 10, 54, 2, 20, 65, 10, 33, 10, 12, 21, 11, 65, 3, 65, 3, 65, 164, 184, 192, 0, 16, 98, 0, 11, 32, 10, 65, 201, 3, 65, 180, 184, 192, 0, 16, 98, 0, 11, 2, 127, 32, 22, 32, 14, 32, 8, 40, 2, 0, 34, 9, 70, 13, 0, 26, 32, 8, 32, 9, 65, 1, 106, 54, 2, 0, 32, 9, 45, 0, 0, 33, 10, 32, 8, 32, 11, 65, 8, 106, 34, 9, 54, 2, 12, 32, 8, 32, 8, 40, 2, 8, 32, 10, 32, 11, 65, 31, 113, 116, 114, 54, 2, 8, 32, 9, 33, 11, 65, 0, 11, 34, 10, 65, 2, 113, 69, 32, 10, 65, 255, 1, 113, 69, 114, 13, 0, 11, 32, 10, 65, 128, 254, 3, 113, 65, 8, 118, 33, 10, 65, 11, 33, 11, 12, 18, 11, 32, 9, 32, 10, 65, 196, 184, 192, 0, 16, 100, 0, 11, 32, 10, 65, 201, 3, 65, 196, 184, 192, 0, 16, 99, 0, 11, 3, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 32, 8, 40, 2, 20, 34, 16, 32, 1, 40, 2, 44, 34, 10, 32, 1, 40, 2, 40, 34, 9, 106, 34, 12, 73, 4, 64, 32, 8, 40, 2, 12, 34, 14, 65, 15, 79, 4, 64, 32, 8, 40, 2, 8, 33, 13, 12, 7, 11, 32, 8, 40, 2, 4, 34, 17, 32, 8, 40, 2, 0, 34, 9, 107, 65, 1, 75, 13, 1, 32, 8, 40, 2, 8, 33, 13, 32, 14, 33, 12, 3, 64, 2, 64, 2, 64, 32, 37, 32, 13, 65, 255, 7, 113, 65, 1, 116, 106, 46, 1, 0, 34, 10, 65, 0, 78, 4, 64, 32, 10, 65, 9, 118, 65, 127, 106, 32, 12, 79, 13, 1, 32, 12, 33, 14, 12, 10, 11, 65, 11, 33, 11, 32, 12, 65, 11, 73, 13, 0, 3, 64, 32, 13, 32, 11, 65, 127, 106, 65, 31, 113, 118, 65, 1, 113, 32, 10, 65, 127, 115, 106, 34, 10, 65, 191, 4, 75, 13, 2, 32, 1, 32, 10, 65, 1, 116, 106, 65, 248, 198, 0, 106, 46, 1, 0, 34, 10, 65, 127, 74, 4, 64, 32, 12, 33, 14, 12, 11, 11, 32, 12, 32, 11, 65, 1, 106, 34, 11, 79, 13, 0, 11, 11, 32, 9, 32, 17, 70, 4, 64, 65, 10, 33, 11, 32, 26, 33, 10, 12, 27, 11, 32, 8, 32, 9, 65, 1, 106, 34, 10, 54, 2, 0, 32, 9, 45, 0, 0, 33, 9, 32, 8, 32, 12, 65, 8, 106, 34, 14, 54, 2, 12, 32, 8, 32, 9, 32, 12, 65, 31, 113, 116, 32, 13, 114, 34, 13, 54, 2, 8, 32, 10, 33, 9, 32, 14, 34, 12, 65, 15, 73, 13, 1, 12, 8, 11, 11, 32, 10, 65, 192, 4, 65, 152, 177, 192, 0, 16, 98, 0, 11, 32, 12, 32, 16, 71, 4, 64, 65, 26, 33, 10, 12, 23, 11, 32, 9, 65, 161, 2, 79, 13, 1, 32, 36, 32, 42, 32, 9, 16, 121, 26, 32, 10, 65, 161, 2, 79, 13, 2, 32, 16, 32, 9, 73, 13, 3, 32, 16, 65, 202, 3, 79, 13, 4, 32, 31, 32, 1, 32, 9, 106, 65, 157, 210, 0, 106, 32, 10, 16, 121, 26, 32, 1, 32, 1, 40, 2, 20, 65, 127, 106, 54, 2, 20, 32, 1, 32, 8, 65, 8, 106, 16, 9, 34, 11, 65, 128, 254, 3, 113, 65, 8, 118, 33, 10, 12, 6, 11, 32, 9, 47, 0, 0, 33, 10, 32, 8, 32, 9, 65, 2, 106, 54, 2, 0, 32, 8, 32, 14, 65, 16, 106, 34, 9, 54, 2, 12, 32, 8, 32, 8, 40, 2, 8, 32, 10, 32, 14, 116, 114, 34, 13, 54, 2, 8, 32, 9, 33, 14, 12, 4, 11, 32, 9, 65, 160, 2, 65, 136, 183, 192, 0, 16, 99, 0, 11, 32, 10, 65, 160, 2, 65, 152, 183, 192, 0, 16, 99, 0, 11, 32, 9, 32, 16, 65, 168, 183, 192, 0, 16, 100, 0, 11, 32, 16, 65, 201, 3, 65, 168, 183, 192, 0, 16, 99, 0, 11, 2, 64, 32, 37, 32, 13, 65, 255, 7, 113, 65, 1, 116, 106, 46, 1, 0, 34, 10, 65, 127, 76, 4, 64, 65, 10, 33, 11, 3, 64, 32, 13, 32, 11, 65, 31, 113, 118, 65, 1, 113, 32, 10, 65, 127, 115, 106, 34, 9, 65, 191, 4, 75, 13, 30, 32, 11, 65, 1, 106, 33, 11, 32, 1, 32, 9, 65, 1, 116, 106, 65, 248, 198, 0, 106, 46, 1, 0, 34, 10, 65, 127, 76, 13, 0, 11, 32, 10, 33, 12, 12, 1, 11, 32, 10, 65, 255, 3, 113, 33, 12, 32, 10, 65, 9, 118, 33, 11, 12, 0, 11, 32, 11, 69, 4, 64, 65, 34, 33, 10, 12, 17, 11, 32, 8, 32, 14, 32, 11, 107, 54, 2, 12, 65, 31, 33, 10, 32, 8, 32, 13, 32, 11, 65, 31, 113, 118, 54, 2, 8, 32, 8, 32, 12, 54, 2, 16, 2, 64, 2, 64, 32, 12, 65, 15, 77, 4, 64, 32, 16, 65, 201, 3, 79, 13, 1, 32, 1, 32, 16, 106, 65, 157, 210, 0, 106, 32, 12, 58, 0, 0, 32, 8, 32, 16, 65, 1, 106, 54, 2, 20, 65, 0, 33, 11, 12, 3, 11, 65, 0, 32, 12, 65, 16, 70, 32, 16, 27, 13, 18, 32, 8, 65, 7, 54, 2, 40, 32, 8, 66, 130, 128, 128, 128, 48, 55, 2, 32, 32, 12, 65, 112, 106, 34, 9, 65, 2, 75, 13, 1, 32, 8, 32, 8, 65, 32, 106, 32, 9, 65, 2, 116, 106, 40, 2, 0, 54, 2, 24, 65, 11, 33, 10, 12, 18, 11, 32, 16, 65, 201, 3, 65, 132, 184, 192, 0, 16, 98, 0, 11, 32, 9, 65, 3, 65, 148, 184, 192, 0, 16, 98, 0, 11, 2, 64, 32, 11, 65, 255, 1, 113, 65, 1, 107, 14, 2, 16, 0, 1, 11, 11, 65, 10, 33, 11, 12, 15, 11, 3, 64, 2, 127, 32, 8, 40, 2, 20, 34, 10, 32, 1, 40, 2, 48, 73, 4, 64, 32, 8, 40, 2, 4, 33, 12, 32, 8, 40, 2, 12, 33, 11, 2, 64, 3, 64, 32, 11, 65, 3, 79, 4, 64, 32, 8, 32, 11, 65, 125, 106, 54, 2, 12, 32, 8, 32, 8, 40, 2, 8, 34, 9, 65, 3, 118, 54, 2, 8, 32, 10, 65, 19, 79, 13, 2, 32, 1, 32, 10, 65, 222, 183, 192, 0, 106, 45, 0, 0, 106, 65, 248, 207, 0, 106, 32, 9, 65, 7, 113, 58, 0, 0, 32, 8, 32, 10, 65, 1, 106, 54, 2, 20, 65, 0, 33, 13, 65, 0, 12, 4, 11, 2, 127, 32, 22, 32, 12, 32, 8, 40, 2, 0, 34, 9, 70, 13, 0, 26, 32, 8, 32, 9, 65, 1, 106, 54, 2, 0, 32, 9, 45, 0, 0, 33, 14, 32, 8, 32, 11, 65, 8, 106, 34, 9, 54, 2, 12, 32, 8, 32, 8, 40, 2, 8, 32, 14, 32, 11, 116, 114, 54, 2, 8, 32, 9, 33, 11, 65, 0, 11, 34, 13, 65, 2, 113, 69, 13, 0, 11, 32, 13, 65, 128, 254, 3, 113, 65, 8, 118, 12, 2, 11, 32, 10, 65, 19, 65, 244, 183, 192, 0, 16, 98, 0, 11, 32, 1, 65, 19, 54, 2, 48, 32, 1, 32, 8, 65, 8, 106, 16, 9, 34, 13, 65, 128, 254, 3, 113, 65, 8, 118, 11, 33, 10, 2, 64, 32, 13, 65, 255, 1, 113, 65, 1, 107, 14, 2, 15, 0, 1, 11, 11, 65, 9, 33, 11, 12, 14, 11, 32, 8, 40, 2, 20, 33, 9, 32, 8, 40, 2, 4, 33, 14, 3, 64, 32, 9, 65, 3, 79, 4, 64, 32, 41, 65, 0, 65, 160, 2, 16, 131, 1, 26, 32, 8, 65, 0, 54, 2, 20, 65, 9, 33, 10, 12, 14, 11, 32, 8, 65, 4, 54, 2, 40, 32, 8, 66, 133, 128, 128, 128, 208, 0, 55, 2, 32, 32, 8, 65, 32, 106, 32, 9, 65, 2, 116, 106, 40, 2, 0, 33, 12, 32, 8, 40, 2, 12, 33, 11, 2, 127, 3, 64, 32, 11, 32, 12, 79, 4, 64, 32, 1, 32, 9, 65, 2, 116, 106, 65, 40, 106, 32, 9, 65, 1, 116, 65, 216, 183, 192, 0, 106, 47, 1, 0, 32, 8, 40, 2, 8, 34, 10, 65, 127, 32, 12, 65, 31, 113, 34, 16, 116, 65, 127, 115, 113, 106, 54, 2, 0, 32, 8, 32, 11, 32, 12, 107, 54, 2, 12, 32, 8, 32, 9, 65, 1, 106, 34, 9, 54, 2, 20, 32, 8, 32, 10, 32, 16, 118, 54, 2, 8, 65, 0, 33, 13, 65, 0, 12, 2, 11, 2, 127, 32, 22, 32, 14, 32, 8, 40, 2, 0, 34, 10, 70, 13, 0, 26, 32, 8, 32, 10, 65, 1, 106, 54, 2, 0, 32, 10, 45, 0, 0, 33, 16, 32, 8, 32, 11, 65, 8, 106, 34, 10, 54, 2, 12, 32, 8, 32, 8, 40, 2, 8, 32, 16, 32, 11, 65, 31, 113, 116, 114, 54, 2, 8, 32, 10, 33, 11, 65, 0, 11, 34, 13, 65, 2, 113, 69, 13, 0, 11, 32, 13, 65, 128, 254, 3, 113, 65, 8, 118, 11, 33, 10, 2, 64, 32, 13, 65, 255, 1, 113, 65, 1, 107, 14, 2, 14, 0, 1, 11, 11, 65, 8, 33, 11, 12, 13, 11, 32, 8, 40, 2, 4, 34, 16, 32, 8, 40, 2, 0, 34, 11, 107, 34, 12, 69, 4, 64, 65, 7, 33, 11, 32, 26, 33, 10, 12, 13, 11, 2, 64, 2, 64, 32, 12, 32, 8, 40, 2, 20, 34, 14, 32, 12, 32, 5, 32, 15, 107, 34, 9, 32, 9, 32, 12, 75, 27, 34, 9, 32, 9, 32, 14, 75, 27, 34, 10, 79, 4, 64, 32, 10, 32, 15, 106, 34, 9, 32, 10, 73, 13, 1, 32, 9, 32, 5, 75, 13, 2, 32, 4, 32, 15, 106, 32, 11, 32, 10, 16, 121, 26, 2, 64, 32, 12, 32, 10, 65, 127, 106, 77, 4, 64, 32, 8, 32, 16, 54, 2, 0, 12, 1, 11, 32, 8, 32, 10, 32, 11, 106, 54, 2, 0, 11, 32, 8, 32, 14, 32, 10, 107, 54, 2, 20, 65, 6, 33, 10, 32, 9, 33, 15, 12, 14, 11, 32, 10, 32, 12, 65, 184, 183, 192, 0, 16, 99, 0, 11, 32, 15, 32, 9, 65, 212, 185, 192, 0, 16, 100, 0, 11, 32, 9, 32, 5, 65, 212, 185, 192, 0, 16, 99, 0, 11, 65, 20, 33, 10, 32, 8, 40, 2, 20, 69, 13, 10, 65, 7, 33, 10, 32, 5, 32, 15, 71, 13, 10, 12, 1, 11, 32, 5, 32, 15, 71, 13, 1, 11, 65, 2, 33, 16, 32, 5, 33, 15, 12, 10, 11, 32, 15, 32, 5, 73, 4, 64, 32, 4, 32, 15, 106, 32, 8, 40, 2, 16, 58, 0, 0, 32, 8, 40, 2, 12, 33, 9, 32, 8, 32, 8, 40, 2, 20, 65, 127, 106, 34, 10, 54, 2, 20, 65, 17, 65, 6, 32, 9, 27, 65, 6, 32, 10, 27, 33, 10, 32, 15, 65, 1, 106, 33, 15, 12, 8, 11, 12, 17, 11, 32, 8, 40, 2, 12, 33, 11, 32, 8, 40, 2, 4, 33, 12, 3, 64, 32, 11, 65, 8, 79, 4, 64, 32, 8, 32, 8, 40, 2, 8, 34, 9, 65, 255, 1, 113, 54, 2, 16, 32, 8, 32, 11, 65, 120, 106, 54, 2, 12, 32, 8, 32, 9, 65, 8, 118, 54, 2, 8, 65, 18, 33, 10, 12, 8, 11, 2, 127, 32, 22, 32, 12, 32, 8, 40, 2, 0, 34, 9, 70, 13, 0, 26, 32, 8, 32, 9, 65, 1, 106, 54, 2, 0, 32, 9, 45, 0, 0, 33, 10, 32, 8, 32, 11, 65, 8, 106, 34, 9, 54, 2, 12, 32, 8, 32, 8, 40, 2, 8, 32, 10, 32, 11, 116, 114, 54, 2, 8, 32, 9, 33, 11, 65, 0, 11, 34, 10, 65, 2, 113, 69, 32, 10, 65, 255, 1, 113, 69, 114, 13, 0, 11, 32, 10, 65, 128, 254, 3, 113, 65, 8, 118, 33, 10, 65, 17, 33, 11, 12, 7, 11, 32, 8, 40, 2, 20, 33, 14, 32, 8, 40, 2, 4, 33, 12, 3, 64, 2, 64, 32, 14, 65, 3, 77, 4, 64, 32, 8, 2, 127, 32, 8, 40, 2, 12, 34, 11, 4, 64, 3, 64, 32, 11, 65, 8, 79, 4, 64, 32, 1, 32, 14, 106, 65, 153, 210, 0, 106, 32, 8, 40, 2, 8, 34, 9, 58, 0, 0, 32, 8, 32, 11, 65, 120, 106, 54, 2, 12, 32, 8, 32, 9, 65, 8, 118, 54, 2, 8, 32, 14, 65, 1, 106, 12, 3, 11, 2, 127, 32, 22, 32, 12, 32, 8, 40, 2, 0, 34, 9, 70, 13, 0, 26, 32, 8, 32, 9, 65, 1, 106, 54, 2, 0, 32, 9, 45, 0, 0, 33, 10, 32, 8, 32, 11, 65, 8, 106, 34, 9, 54, 2, 12, 32, 8, 32, 8, 40, 2, 8, 32, 10, 32, 11, 116, 114, 54, 2, 8, 32, 9, 33, 11, 65, 0, 11, 34, 13, 65, 2, 113, 69, 13, 0, 11, 32, 13, 65, 128, 254, 3, 113, 65, 8, 118, 33, 10, 12, 3, 11, 32, 12, 32, 8, 40, 2, 0, 34, 9, 70, 4, 64, 65, 5, 33, 11, 32, 26, 33, 10, 12, 11, 11, 32, 8, 32, 9, 65, 1, 106, 54, 2, 0, 32, 1, 32, 14, 106, 65, 153, 210, 0, 106, 32, 9, 45, 0, 0, 58, 0, 0, 32, 14, 65, 1, 106, 11, 34, 14, 54, 2, 20, 65, 0, 33, 10, 65, 0, 33, 13, 12, 1, 11, 32, 8, 32, 1, 47, 0, 153, 82, 34, 9, 54, 2, 20, 65, 30, 33, 10, 32, 9, 32, 1, 47, 0, 155, 82, 65, 255, 255, 3, 115, 71, 13, 7, 65, 20, 33, 10, 32, 9, 69, 13, 7, 65, 17, 65, 6, 32, 8, 40, 2, 12, 27, 33, 10, 12, 7, 11, 65, 5, 33, 11, 32, 13, 65, 255, 1, 113, 65, 1, 107, 14, 2, 6, 7, 0, 11, 0, 11, 32, 8, 40, 2, 12, 33, 13, 32, 8, 40, 2, 4, 33, 12, 3, 64, 32, 13, 65, 7, 113, 33, 9, 32, 13, 33, 11, 3, 64, 32, 11, 32, 9, 79, 4, 64, 32, 8, 65, 0, 54, 2, 20, 32, 8, 32, 11, 32, 9, 107, 54, 2, 12, 32, 8, 32, 8, 40, 2, 8, 32, 9, 118, 54, 2, 8, 65, 5, 33, 10, 12, 7, 11, 2, 127, 32, 22, 32, 12, 32, 8, 40, 2, 0, 34, 10, 70, 13, 0, 26, 32, 8, 32, 10, 65, 1, 106, 54, 2, 0, 32, 10, 45, 0, 0, 33, 10, 32, 8, 32, 11, 65, 8, 106, 34, 13, 54, 2, 12, 32, 8, 32, 8, 40, 2, 8, 32, 10, 32, 11, 65, 31, 113, 116, 114, 54, 2, 8, 32, 13, 33, 11, 65, 0, 11, 34, 10, 65, 2, 113, 69, 13, 0, 11, 32, 10, 65, 255, 1, 113, 69, 13, 0, 11, 32, 10, 65, 128, 254, 3, 113, 65, 8, 118, 33, 10, 65, 4, 33, 11, 12, 5, 11, 2, 64, 3, 64, 32, 8, 40, 2, 4, 33, 10, 32, 8, 40, 2, 12, 33, 11, 2, 127, 3, 64, 32, 11, 65, 3, 79, 4, 64, 32, 1, 32, 8, 40, 2, 8, 34, 9, 65, 1, 113, 54, 2, 16, 32, 1, 32, 9, 65, 1, 118, 65, 3, 113, 34, 12, 54, 2, 20, 32, 8, 32, 11, 65, 125, 106, 54, 2, 12, 32, 8, 32, 9, 65, 3, 118, 54, 2, 8, 65, 4, 33, 10, 2, 64, 2, 64, 32, 12, 65, 1, 107, 14, 3, 0, 1, 6, 10, 11, 32, 1, 66, 160, 130, 128, 128, 128, 4, 55, 2, 40, 32, 36, 65, 8, 65, 144, 1, 16, 131, 1, 26, 32, 43, 65, 9, 65, 240, 0, 16, 131, 1, 26, 32, 33, 65, 16, 106, 66, 135, 142, 156, 184, 240, 224, 193, 131, 7, 55, 2, 0, 32, 33, 65, 8, 106, 66, 135, 142, 156, 184, 240, 224, 193, 131, 7, 55, 2, 0, 32, 33, 66, 135, 142, 156, 184, 240, 224, 193, 131, 7, 55, 2, 0, 32, 1, 66, 136, 144, 160, 192, 128, 129, 130, 132, 8, 55, 2, 208, 27, 32, 31, 66, 133, 138, 148, 168, 208, 160, 193, 130, 5, 55, 2, 0, 32, 31, 65, 8, 106, 66, 133, 138, 148, 168, 208, 160, 193, 130, 5, 55, 2, 0, 32, 31, 65, 16, 106, 66, 133, 138, 148, 168, 208, 160, 193, 130, 5, 55, 2, 0, 32, 31, 65, 24, 106, 66, 133, 138, 148, 168, 208, 160, 193, 130, 5, 55, 2, 0, 32, 1, 32, 8, 65, 8, 106, 16, 9, 34, 13, 65, 128, 254, 3, 113, 65, 8, 118, 12, 3, 11, 32, 8, 65, 0, 54, 2, 20, 65, 8, 33, 10, 12, 8, 11, 2, 127, 32, 22, 32, 10, 32, 8, 40, 2, 0, 34, 9, 70, 13, 0, 26, 32, 8, 32, 9, 65, 1, 106, 54, 2, 0, 32, 9, 45, 0, 0, 33, 12, 32, 8, 32, 11, 65, 8, 106, 34, 9, 54, 2, 12, 32, 8, 32, 8, 40, 2, 8, 32, 12, 32, 11, 116, 114, 54, 2, 8, 32, 9, 33, 11, 65, 0, 11, 34, 13, 65, 2, 113, 69, 13, 0, 11, 32, 13, 65, 128, 254, 3, 113, 65, 8, 118, 11, 33, 10, 2, 64, 32, 13, 65, 255, 1, 113, 65, 1, 107, 14, 2, 6, 0, 1, 11, 11, 65, 3, 33, 11, 12, 5, 11, 65, 25, 33, 10, 12, 3, 11, 32, 8, 40, 2, 0, 34, 9, 32, 8, 40, 2, 4, 70, 4, 64, 65, 1, 33, 11, 32, 26, 33, 10, 12, 4, 11, 32, 8, 32, 9, 65, 1, 106, 54, 2, 0, 32, 1, 32, 9, 45, 0, 0, 54, 2, 4, 65, 2, 33, 10, 12, 2, 11, 32, 1, 65, 1, 54, 2, 24, 32, 1, 65, 1, 54, 2, 12, 32, 1, 66, 0, 55, 2, 4, 32, 8, 65, 24, 106, 65, 0, 54, 2, 0, 32, 8, 65, 16, 106, 66, 0, 55, 3, 0, 32, 8, 66, 0, 55, 3, 8, 32, 40, 33, 10, 12, 1, 11, 32, 1, 40, 2, 4, 34, 9, 65, 15, 113, 33, 11, 32, 9, 65, 8, 116, 33, 14, 32, 9, 65, 4, 118, 65, 8, 106, 65, 31, 113, 33, 10, 32, 8, 40, 2, 0, 33, 9, 32, 8, 40, 2, 4, 33, 12, 2, 64, 2, 64, 32, 32, 69, 4, 64, 32, 9, 32, 12, 71, 13, 1, 12, 2, 11, 32, 10, 65, 16, 79, 4, 64, 32, 9, 32, 12, 70, 13, 2, 32, 8, 32, 9, 65, 1, 106, 54, 2, 0, 32, 1, 32, 9, 45, 0, 0, 54, 2, 8, 65, 28, 33, 10, 12, 3, 11, 32, 9, 32, 12, 70, 13, 1, 32, 8, 32, 9, 65, 1, 106, 54, 2, 0, 32, 1, 32, 9, 45, 0, 0, 34, 9, 54, 2, 8, 65, 28, 65, 28, 65, 3, 32, 9, 32, 14, 114, 65, 31, 112, 32, 9, 65, 32, 113, 114, 27, 32, 11, 65, 8, 71, 27, 33, 10, 12, 2, 11, 32, 8, 32, 9, 65, 1, 106, 54, 2, 0, 32, 1, 32, 9, 45, 0, 0, 34, 9, 54, 2, 8, 65, 28, 65, 28, 65, 28, 65, 3, 32, 9, 32, 14, 114, 65, 31, 112, 32, 9, 65, 32, 113, 114, 27, 32, 11, 65, 8, 71, 27, 65, 28, 32, 38, 32, 10, 118, 27, 32, 10, 65, 15, 75, 27, 33, 10, 12, 1, 11, 11, 65, 2, 33, 11, 32, 26, 33, 10, 11, 65, 0, 33, 2, 32, 10, 65, 255, 1, 113, 34, 9, 65, 1, 70, 13, 1, 32, 10, 33, 16, 32, 9, 65, 252, 1, 70, 13, 2, 11, 32, 8, 32, 8, 40, 2, 12, 34, 2, 32, 8, 40, 2, 0, 32, 8, 40, 2, 4, 107, 32, 3, 106, 34, 9, 32, 2, 65, 3, 118, 34, 2, 32, 2, 32, 9, 75, 27, 34, 2, 65, 3, 116, 107, 54, 2, 12, 12, 1, 11, 65, 2, 65, 1, 32, 5, 32, 15, 70, 27, 33, 16, 11, 32, 1, 32, 11, 58, 0, 152, 82, 32, 1, 32, 8, 40, 2, 12, 34, 9, 54, 2, 0, 32, 1, 32, 8, 40, 2, 16, 54, 2, 28, 32, 1, 32, 8, 41, 2, 20, 55, 2, 32, 32, 1, 32, 8, 40, 2, 8, 65, 127, 32, 9, 65, 31, 113, 116, 65, 127, 115, 113, 54, 2, 52, 2, 64, 32, 7, 65, 9, 113, 65, 0, 32, 16, 65, 24, 116, 65, 24, 117, 65, 127, 74, 27, 69, 4, 64, 32, 15, 32, 6, 107, 33, 15, 12, 1, 11, 32, 15, 32, 6, 73, 13, 2, 32, 15, 32, 5, 75, 13, 3, 32, 8, 32, 1, 40, 2, 24, 34, 5, 59, 1, 32, 32, 8, 32, 5, 65, 16, 118, 59, 1, 34, 32, 8, 65, 32, 106, 32, 4, 32, 6, 106, 32, 15, 32, 6, 107, 34, 15, 16, 30, 32, 1, 32, 8, 40, 2, 32, 34, 4, 54, 2, 24, 32, 35, 69, 32, 16, 65, 255, 1, 113, 114, 13, 0, 65, 0, 65, 126, 32, 4, 32, 1, 40, 2, 12, 70, 27, 33, 16, 11, 32, 0, 32, 16, 58, 0, 4, 32, 0, 32, 15, 54, 2, 8, 32, 0, 32, 8, 40, 2, 0, 32, 3, 106, 32, 2, 32, 8, 40, 2, 4, 106, 107, 54, 2, 0, 11, 32, 8, 65, 48, 106, 36, 0, 15, 11, 32, 6, 32, 15, 65, 200, 183, 192, 0, 16, 100, 0, 11, 32, 15, 32, 5, 65, 200, 183, 192, 0, 16, 99, 0, 11, 65, 2, 32, 9, 65, 136, 177, 192, 0, 16, 99, 0, 11, 32, 12, 65, 192, 4, 65, 248, 176, 192, 0, 16, 98, 0, 11, 32, 15, 32, 5, 65, 196, 185, 192, 0, 16, 98, 0, 11, 32, 9, 65, 192, 4, 65, 248, 176, 192, 0, 16, 98, 0, 11, 183, 45, 2, 13, 127, 2, 126, 35, 0, 65, 144, 5, 107, 34, 9, 36, 0, 2, 64, 2, 64, 2, 64, 2, 64, 32, 3, 4, 64, 32, 0, 65, 128, 27, 106, 65, 8, 65, 144, 1, 16, 131, 1, 26, 32, 0, 65, 144, 28, 106, 65, 9, 65, 240, 0, 16, 131, 1, 26, 32, 0, 65, 144, 29, 106, 66, 135, 142, 156, 184, 240, 224, 193, 131, 7, 55, 1, 0, 32, 0, 65, 136, 29, 106, 66, 135, 142, 156, 184, 240, 224, 193, 131, 7, 55, 1, 0, 32, 0, 65, 128, 29, 106, 66, 135, 142, 156, 184, 240, 224, 193, 131, 7, 55, 1, 0, 32, 0, 65, 160, 29, 106, 66, 133, 138, 148, 168, 208, 160, 193, 130, 5, 55, 1, 0, 32, 0, 65, 152, 29, 106, 66, 136, 144, 160, 192, 128, 129, 130, 132, 8, 55, 1, 0, 32, 0, 65, 168, 29, 106, 66, 133, 138, 148, 168, 208, 160, 193, 130, 5, 55, 1, 0, 32, 0, 65, 176, 29, 106, 66, 133, 138, 148, 168, 208, 160, 193, 130, 5, 55, 1, 0, 32, 0, 65, 184, 29, 106, 66, 133, 138, 148, 168, 208, 160, 193, 130, 5, 55, 1, 0, 32, 0, 65, 0, 65, 160, 2, 65, 15, 65, 1, 16, 6, 32, 0, 65, 1, 65, 32, 65, 15, 65, 1, 16, 6, 32, 1, 32, 1, 40, 2, 16, 34, 3, 65, 2, 106, 34, 5, 54, 2, 16, 32, 1, 32, 1, 40, 2, 12, 65, 1, 32, 3, 65, 31, 113, 116, 114, 34, 3, 54, 2, 12, 32, 5, 65, 8, 73, 13, 1, 32, 1, 40, 2, 8, 33, 4, 3, 64, 32, 4, 32, 1, 40, 2, 4, 34, 6, 73, 4, 64, 32, 1, 40, 2, 0, 32, 4, 106, 32, 3, 58, 0, 0, 32, 1, 32, 1, 40, 2, 8, 65, 1, 106, 34, 4, 54, 2, 8, 32, 1, 32, 1, 40, 2, 12, 65, 8, 118, 34, 3, 54, 2, 12, 32, 1, 32, 1, 40, 2, 16, 65, 120, 106, 34, 5, 54, 2, 16, 32, 5, 65, 7, 75, 13, 1, 12, 3, 11, 11, 12, 3, 11, 32, 0, 65, 1, 59, 1, 128, 4, 32, 9, 32, 0, 54, 2, 0, 32, 0, 65, 0, 65, 160, 2, 65, 15, 65, 0, 16, 6, 32, 0, 65, 1, 65, 32, 65, 15, 65, 0, 16, 6, 65, 158, 2, 2, 127, 65, 0, 32, 0, 65, 157, 29, 106, 45, 0, 0, 13, 0, 26, 65, 1, 32, 0, 65, 156, 29, 106, 45, 0, 0, 13, 0, 26, 65, 2, 32, 0, 65, 155, 29, 106, 45, 0, 0, 13, 0, 26, 65, 3, 32, 0, 65, 154, 29, 106, 45, 0, 0, 13, 0, 26, 65, 4, 32, 0, 65, 153, 29, 106, 45, 0, 0, 13, 0, 26, 65, 5, 32, 0, 65, 152, 29, 106, 45, 0, 0, 13, 0, 26, 65, 6, 32, 0, 65, 151, 29, 106, 45, 0, 0, 13, 0, 26, 65, 7, 32, 0, 65, 150, 29, 106, 45, 0, 0, 13, 0, 26, 65, 8, 32, 0, 65, 149, 29, 106, 45, 0, 0, 13, 0, 26, 65, 9, 32, 0, 65, 148, 29, 106, 45, 0, 0, 13, 0, 26, 65, 10, 32, 0, 65, 147, 29, 106, 45, 0, 0, 13, 0, 26, 65, 11, 32, 0, 65, 146, 29, 106, 45, 0, 0, 13, 0, 26, 65, 12, 32, 0, 65, 145, 29, 106, 45, 0, 0, 13, 0, 26, 65, 13, 32, 0, 65, 144, 29, 106, 45, 0, 0, 13, 0, 26, 65, 14, 32, 0, 65, 143, 29, 106, 45, 0, 0, 13, 0, 26, 65, 15, 32, 0, 65, 142, 29, 106, 45, 0, 0, 13, 0, 26, 65, 16, 32, 0, 65, 141, 29, 106, 45, 0, 0, 13, 0, 26, 65, 17, 32, 0, 65, 140, 29, 106, 45, 0, 0, 13, 0, 26, 65, 18, 32, 0, 65, 139, 29, 106, 45, 0, 0, 13, 0, 26, 65, 19, 32, 0, 65, 138, 29, 106, 45, 0, 0, 13, 0, 26, 65, 20, 32, 0, 65, 137, 29, 106, 45, 0, 0, 13, 0, 26, 65, 21, 32, 0, 65, 136, 29, 106, 45, 0, 0, 13, 0, 26, 65, 22, 32, 0, 65, 135, 29, 106, 45, 0, 0, 13, 0, 26, 65, 23, 32, 0, 65, 134, 29, 106, 45, 0, 0, 13, 0, 26, 65, 24, 32, 0, 65, 133, 29, 106, 45, 0, 0, 13, 0, 26, 65, 25, 32, 0, 65, 132, 29, 106, 45, 0, 0, 13, 0, 26, 65, 26, 32, 0, 65, 131, 29, 106, 45, 0, 0, 13, 0, 26, 65, 27, 32, 0, 65, 130, 29, 106, 45, 0, 0, 13, 0, 26, 65, 28, 65, 29, 32, 0, 65, 129, 29, 106, 45, 0, 0, 27, 11, 34, 14, 107, 33, 3, 2, 64, 32, 0, 65, 189, 29, 106, 45, 0, 0, 13, 0, 65, 1, 33, 8, 32, 0, 65, 188, 29, 106, 45, 0, 0, 13, 0, 65, 2, 33, 8, 32, 0, 65, 187, 29, 106, 45, 0, 0, 13, 0, 65, 3, 33, 8, 32, 0, 65, 186, 29, 106, 45, 0, 0, 13, 0, 65, 4, 33, 8, 32, 0, 65, 185, 29, 106, 45, 0, 0, 13, 0, 65, 5, 33, 8, 32, 0, 65, 184, 29, 106, 45, 0, 0, 13, 0, 65, 6, 33, 8, 32, 0, 65, 183, 29, 106, 45, 0, 0, 13, 0, 65, 7, 33, 8, 32, 0, 65, 182, 29, 106, 45, 0, 0, 13, 0, 65, 8, 33, 8, 32, 0, 65, 181, 29, 106, 45, 0, 0, 13, 0, 65, 9, 33, 8, 32, 0, 65, 180, 29, 106, 45, 0, 0, 13, 0, 65, 10, 33, 8, 32, 0, 65, 179, 29, 106, 45, 0, 0, 13, 0, 65, 11, 33, 8, 32, 0, 65, 178, 29, 106, 45, 0, 0, 13, 0, 65, 12, 33, 8, 32, 0, 65, 177, 29, 106, 45, 0, 0, 13, 0, 65, 13, 33, 8, 32, 0, 65, 176, 29, 106, 45, 0, 0, 13, 0, 65, 14, 33, 8, 32, 0, 65, 175, 29, 106, 45, 0, 0, 13, 0, 65, 15, 33, 8, 32, 0, 65, 174, 29, 106, 45, 0, 0, 13, 0, 65, 16, 33, 8, 32, 0, 65, 173, 29, 106, 45, 0, 0, 13, 0, 65, 17, 33, 8, 32, 0, 65, 172, 29, 106, 45, 0, 0, 13, 0, 65, 18, 33, 8, 32, 0, 65, 171, 29, 106, 45, 0, 0, 13, 0, 65, 19, 33, 8, 32, 0, 65, 170, 29, 106, 45, 0, 0, 13, 0, 65, 20, 33, 8, 32, 0, 65, 169, 29, 106, 45, 0, 0, 13, 0, 65, 21, 33, 8, 32, 0, 65, 168, 29, 106, 45, 0, 0, 13, 0, 65, 22, 33, 8, 32, 0, 65, 167, 29, 106, 45, 0, 0, 13, 0, 65, 23, 33, 8, 32, 0, 65, 166, 29, 106, 45, 0, 0, 13, 0, 65, 24, 33, 8, 32, 0, 65, 165, 29, 106, 45, 0, 0, 13, 0, 65, 25, 33, 8, 32, 0, 65, 164, 29, 106, 45, 0, 0, 13, 0, 65, 26, 33, 8, 32, 0, 65, 163, 29, 106, 45, 0, 0, 13, 0, 65, 27, 33, 8, 32, 0, 65, 162, 29, 106, 45, 0, 0, 13, 0, 65, 28, 65, 29, 32, 0, 65, 161, 29, 106, 45, 0, 0, 27, 33, 8, 11, 32, 9, 65, 4, 106, 65, 0, 65, 192, 2, 16, 131, 1, 26, 32, 9, 65, 196, 2, 106, 65, 0, 65, 192, 2, 16, 131, 1, 26, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 32, 3, 65, 193, 2, 73, 4, 64, 32, 3, 65, 161, 2, 79, 13, 1, 32, 9, 65, 4, 106, 32, 0, 65, 128, 27, 106, 32, 3, 16, 121, 26, 65, 30, 32, 8, 107, 34, 6, 32, 3, 106, 34, 4, 32, 3, 73, 13, 2, 32, 4, 65, 193, 2, 79, 13, 3, 32, 6, 65, 161, 2, 79, 13, 4, 32, 9, 65, 4, 106, 32, 3, 106, 32, 0, 65, 160, 29, 106, 32, 6, 16, 121, 26, 32, 0, 65, 128, 9, 106, 65, 0, 65, 38, 16, 131, 1, 26, 32, 0, 33, 6, 2, 64, 2, 64, 2, 64, 32, 4, 69, 13, 0, 65, 188, 2, 32, 8, 32, 14, 106, 107, 33, 15, 32, 9, 40, 2, 0, 33, 11, 32, 9, 65, 4, 106, 33, 13, 32, 0, 33, 10, 65, 0, 33, 3, 65, 255, 1, 33, 7, 65, 0, 33, 4, 3, 64, 32, 7, 33, 12, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 32, 13, 45, 0, 0, 34, 7, 69, 4, 64, 2, 64, 32, 5, 69, 4, 64, 32, 4, 33, 6, 12, 1, 11, 32, 5, 65, 2, 77, 4, 64, 32, 10, 32, 12, 65, 255, 1, 113, 65, 1, 116, 106, 65, 128, 9, 106, 34, 6, 32, 6, 47, 1, 0, 32, 5, 106, 59, 1, 0, 32, 9, 32, 12, 58, 0, 134, 5, 32, 9, 32, 12, 58, 0, 133, 5, 32, 9, 32, 12, 58, 0, 132, 5, 32, 4, 32, 5, 106, 34, 6, 32, 4, 73, 32, 6, 65, 192, 2, 75, 114, 13, 11, 32, 9, 65, 196, 2, 106, 32, 4, 106, 32, 9, 65, 132, 5, 106, 32, 5, 16, 121, 26, 12, 1, 11, 32, 10, 65, 160, 9, 106, 34, 6, 32, 6, 47, 1, 0, 65, 1, 106, 59, 1, 0, 32, 4, 65, 125, 75, 13, 10, 32, 4, 65, 2, 106, 34, 6, 65, 192, 2, 75, 13, 10, 32, 9, 65, 196, 2, 106, 32, 4, 106, 34, 4, 32, 5, 65, 125, 106, 58, 0, 1, 32, 4, 65, 16, 58, 0, 0, 11, 65, 0, 33, 5, 32, 3, 65, 1, 106, 34, 3, 65, 138, 1, 70, 13, 1, 32, 6, 33, 4, 12, 6, 11, 2, 64, 32, 3, 69, 4, 64, 32, 4, 33, 6, 12, 1, 11, 32, 3, 65, 2, 77, 4, 64, 32, 10, 32, 10, 47, 1, 128, 9, 32, 3, 106, 59, 1, 128, 9, 32, 3, 32, 4, 106, 34, 6, 32, 4, 73, 32, 6, 65, 192, 2, 75, 114, 13, 10, 32, 9, 65, 196, 2, 106, 32, 4, 106, 65, 0, 32, 3, 16, 131, 1, 26, 12, 1, 11, 32, 3, 65, 10, 77, 4, 64, 32, 10, 65, 162, 9, 106, 34, 6, 32, 6, 47, 1, 0, 65, 1, 106, 59, 1, 0, 32, 4, 65, 125, 75, 13, 10, 32, 4, 65, 2, 106, 34, 6, 65, 192, 2, 75, 13, 10, 32, 9, 65, 196, 2, 106, 32, 4, 106, 34, 4, 32, 3, 65, 125, 106, 58, 0, 1, 32, 4, 65, 17, 58, 0, 0, 12, 1, 11, 32, 10, 65, 164, 9, 106, 34, 6, 32, 6, 47, 1, 0, 65, 1, 106, 59, 1, 0, 32, 4, 65, 125, 75, 13, 9, 32, 4, 65, 2, 106, 34, 6, 65, 192, 2, 75, 13, 9, 32, 9, 65, 196, 2, 106, 32, 4, 106, 34, 4, 32, 3, 65, 117, 106, 58, 0, 1, 32, 4, 65, 18, 58, 0, 0, 11, 32, 7, 32, 12, 65, 255, 1, 113, 34, 3, 70, 13, 3, 32, 5, 69, 13, 2, 32, 5, 65, 2, 75, 13, 1, 32, 10, 32, 3, 65, 1, 116, 106, 65, 128, 9, 106, 34, 3, 32, 3, 47, 1, 0, 32, 5, 106, 59, 1, 0, 32, 9, 32, 12, 58, 0, 134, 5, 32, 9, 32, 12, 58, 0, 133, 5, 32, 9, 32, 12, 58, 0, 132, 5, 32, 5, 32, 6, 106, 34, 3, 32, 6, 73, 32, 3, 65, 192, 2, 75, 114, 13, 8, 32, 9, 65, 196, 2, 106, 32, 6, 106, 32, 9, 65, 132, 5, 106, 32, 5, 16, 121, 26, 32, 3, 33, 6, 32, 11, 33, 10, 12, 2, 11, 32, 11, 32, 11, 47, 1, 164, 9, 65, 1, 106, 59, 1, 164, 9, 32, 6, 65, 125, 75, 13, 7, 32, 6, 65, 2, 106, 34, 4, 65, 192, 2, 75, 13, 7, 32, 9, 65, 196, 2, 106, 32, 6, 106, 65, 146, 254, 1, 59, 0, 0, 12, 3, 11, 32, 10, 65, 160, 9, 106, 34, 3, 32, 3, 47, 1, 0, 65, 1, 106, 59, 1, 0, 32, 6, 65, 125, 75, 13, 6, 32, 6, 65, 2, 106, 34, 3, 65, 192, 2, 75, 13, 6, 32, 9, 65, 196, 2, 106, 32, 6, 106, 34, 6, 32, 5, 65, 125, 106, 58, 0, 1, 32, 6, 65, 16, 58, 0, 0, 32, 3, 33, 6, 11, 32, 10, 32, 7, 65, 1, 116, 106, 65, 128, 9, 106, 34, 3, 32, 3, 47, 1, 0, 65, 1, 106, 59, 1, 0, 32, 6, 65, 1, 106, 34, 4, 32, 6, 73, 32, 4, 65, 192, 2, 75, 114, 13, 5, 32, 9, 65, 196, 2, 106, 32, 6, 106, 32, 7, 58, 0, 0, 12, 1, 11, 65, 0, 33, 3, 32, 5, 65, 1, 106, 34, 5, 65, 6, 71, 4, 64, 32, 6, 33, 4, 12, 2, 11, 32, 10, 65, 160, 9, 106, 34, 3, 32, 3, 47, 1, 0, 65, 1, 106, 59, 1, 0, 32, 6, 65, 125, 75, 13, 4, 32, 6, 65, 2, 106, 34, 4, 65, 192, 2, 75, 13, 4, 32, 9, 65, 196, 2, 106, 32, 6, 106, 65, 144, 6, 59, 0, 0, 11, 65, 0, 33, 3, 65, 0, 33, 5, 11, 32, 13, 65, 1, 106, 33, 13, 32, 11, 33, 10, 32, 15, 65, 127, 106, 34, 15, 13, 0, 11, 32, 9, 40, 2, 0, 33, 6, 32, 5, 4, 64, 32, 5, 65, 2, 77, 4, 64, 32, 6, 32, 7, 65, 1, 116, 106, 65, 128, 9, 106, 34, 3, 32, 3, 47, 1, 0, 32, 5, 106, 59, 1, 0, 32, 9, 32, 7, 58, 0, 134, 5, 32, 9, 32, 7, 58, 0, 133, 5, 32, 9, 32, 7, 58, 0, 132, 5, 32, 4, 32, 5, 106, 34, 10, 32, 4, 73, 32, 10, 65, 192, 2, 75, 114, 13, 3, 32, 9, 65, 196, 2, 106, 32, 4, 106, 32, 9, 65, 132, 5, 106, 32, 5, 16, 121, 26, 32, 9, 40, 2, 0, 33, 6, 12, 2, 11, 32, 6, 65, 160, 9, 106, 34, 3, 32, 3, 47, 1, 0, 65, 1, 106, 59, 1, 0, 32, 4, 65, 125, 75, 13, 2, 32, 4, 65, 2, 106, 34, 10, 65, 192, 2, 75, 13, 2, 32, 9, 65, 196, 2, 106, 32, 4, 106, 34, 3, 32, 5, 65, 125, 106, 58, 0, 1, 32, 3, 65, 16, 58, 0, 0, 12, 1, 11, 32, 3, 69, 4, 64, 32, 4, 33, 10, 12, 1, 11, 32, 3, 65, 2, 77, 4, 64, 32, 6, 32, 6, 47, 1, 128, 9, 32, 3, 106, 59, 1, 128, 9, 32, 3, 32, 4, 106, 34, 10, 32, 4, 73, 32, 10, 65, 192, 2, 75, 114, 13, 2, 32, 9, 65, 196, 2, 106, 32, 4, 106, 65, 0, 32, 3, 16, 131, 1, 26, 12, 1, 11, 32, 3, 65, 10, 77, 4, 64, 32, 6, 65, 162, 9, 106, 34, 7, 32, 7, 47, 1, 0, 65, 1, 106, 59, 1, 0, 32, 4, 65, 125, 75, 13, 2, 32, 4, 65, 2, 106, 34, 10, 65, 192, 2, 75, 13, 2, 32, 9, 65, 196, 2, 106, 32, 4, 106, 34, 4, 32, 3, 65, 125, 106, 58, 0, 1, 32, 4, 65, 17, 58, 0, 0, 12, 1, 11, 32, 6, 65, 164, 9, 106, 34, 7, 32, 7, 47, 1, 0, 65, 1, 106, 59, 1, 0, 32, 4, 65, 125, 75, 13, 1, 32, 4, 65, 2, 106, 34, 10, 65, 192, 2, 75, 13, 1, 32, 9, 65, 196, 2, 106, 32, 4, 106, 34, 4, 32, 3, 65, 117, 106, 58, 0, 1, 32, 4, 65, 18, 58, 0, 0, 11, 32, 6, 65, 2, 65, 19, 65, 7, 65, 0, 16, 6, 32, 1, 32, 1, 40, 2, 16, 34, 3, 65, 2, 106, 34, 5, 54, 2, 16, 32, 1, 32, 1, 40, 2, 12, 65, 2, 32, 3, 65, 31, 113, 116, 114, 34, 7, 54, 2, 12, 32, 5, 65, 8, 79, 4, 64, 32, 1, 40, 2, 8, 33, 3, 3, 64, 32, 3, 32, 1, 40, 2, 4, 34, 6, 79, 13, 9, 32, 1, 40, 2, 0, 32, 3, 106, 32, 7, 58, 0, 0, 32, 1, 32, 1, 40, 2, 8, 65, 1, 106, 34, 3, 54, 2, 8, 32, 1, 32, 1, 40, 2, 12, 65, 8, 118, 34, 7, 54, 2, 12, 32, 1, 32, 1, 40, 2, 16, 65, 120, 106, 34, 5, 54, 2, 16, 32, 5, 65, 7, 75, 13, 0, 11, 11, 65, 29, 32, 14, 107, 34, 3, 65, 32, 79, 13, 14, 32, 1, 32, 5, 65, 5, 106, 34, 4, 54, 2, 16, 32, 1, 32, 3, 32, 5, 116, 32, 7, 114, 34, 6, 54, 2, 12, 32, 5, 65, 3, 79, 4, 64, 32, 1, 40, 2, 8, 33, 3, 3, 64, 32, 3, 32, 1, 40, 2, 4, 34, 4, 79, 13, 10, 32, 1, 40, 2, 0, 32, 3, 106, 32, 6, 58, 0, 0, 32, 1, 32, 1, 40, 2, 8, 65, 1, 106, 34, 3, 54, 2, 8, 32, 1, 32, 1, 40, 2, 12, 65, 8, 118, 34, 6, 54, 2, 12, 32, 1, 32, 1, 40, 2, 16, 65, 120, 106, 34, 4, 54, 2, 16, 32, 4, 65, 7, 75, 13, 0, 11, 11, 65, 29, 32, 8, 107, 34, 3, 65, 32, 79, 13, 14, 32, 1, 32, 4, 65, 5, 106, 34, 7, 54, 2, 16, 32, 1, 32, 3, 32, 4, 116, 32, 6, 114, 34, 6, 54, 2, 12, 32, 4, 65, 3, 79, 4, 64, 32, 1, 40, 2, 8, 33, 3, 3, 64, 32, 3, 32, 1, 40, 2, 4, 34, 4, 79, 13, 11, 32, 1, 40, 2, 0, 32, 3, 106, 32, 6, 58, 0, 0, 32, 1, 32, 1, 40, 2, 8, 65, 1, 106, 34, 3, 54, 2, 8, 32, 1, 32, 1, 40, 2, 12, 65, 8, 118, 34, 6, 54, 2, 12, 32, 1, 32, 1, 40, 2, 16, 65, 120, 106, 34, 7, 54, 2, 16, 32, 7, 65, 7, 75, 13, 0, 11, 11, 65, 0, 33, 4, 65, 0, 33, 3, 32, 9, 40, 2, 0, 34, 5, 65, 207, 31, 106, 45, 0, 0, 13, 10, 65, 1, 33, 3, 32, 5, 65, 193, 31, 106, 45, 0, 0, 69, 13, 1, 12, 10, 11, 65, 2, 33, 5, 12, 11, 11, 65, 2, 33, 3, 32, 5, 65, 206, 31, 106, 45, 0, 0, 13, 8, 65, 3, 33, 3, 32, 5, 65, 194, 31, 106, 45, 0, 0, 13, 8, 65, 4, 33, 3, 32, 5, 65, 205, 31, 106, 45, 0, 0, 13, 8, 65, 5, 33, 3, 32, 5, 65, 195, 31, 106, 45, 0, 0, 13, 8, 65, 6, 33, 3, 32, 5, 65, 204, 31, 106, 45, 0, 0, 13, 8, 65, 7, 33, 3, 32, 5, 65, 196, 31, 106, 45, 0, 0, 13, 8, 65, 8, 33, 3, 32, 5, 65, 203, 31, 106, 45, 0, 0, 13, 8, 65, 9, 33, 3, 32, 5, 65, 197, 31, 106, 45, 0, 0, 13, 8, 65, 10, 33, 3, 32, 5, 65, 202, 31, 106, 45, 0, 0, 13, 8, 65, 11, 33, 3, 32, 5, 65, 198, 31, 106, 45, 0, 0, 13, 8, 65, 12, 33, 3, 32, 5, 65, 201, 31, 106, 45, 0, 0, 13, 8, 65, 13, 33, 3, 32, 5, 65, 199, 31, 106, 45, 0, 0, 13, 8, 65, 14, 33, 3, 32, 5, 65, 200, 31, 106, 45, 0, 0, 13, 8, 65, 15, 33, 3, 32, 5, 65, 192, 31, 106, 45, 0, 0, 13, 8, 65, 16, 33, 3, 32, 5, 65, 210, 31, 106, 45, 0, 0, 13, 8, 65, 17, 33, 3, 32, 5, 65, 209, 31, 106, 45, 0, 0, 13, 8, 65, 18, 65, 19, 32, 5, 65, 208, 31, 106, 45, 0, 0, 27, 33, 3, 12, 8, 11, 32, 3, 65, 192, 2, 65, 132, 152, 192, 0, 16, 99, 0, 11, 32, 3, 65, 160, 2, 65, 148, 152, 192, 0, 16, 99, 0, 11, 32, 3, 32, 4, 65, 164, 152, 192, 0, 16, 100, 0, 11, 32, 4, 65, 192, 2, 65, 164, 152, 192, 0, 16, 99, 0, 11, 32, 6, 65, 160, 2, 65, 180, 152, 192, 0, 16, 99, 0, 11, 32, 3, 32, 6, 65, 164, 148, 192, 0, 16, 98, 0, 11, 32, 3, 32, 4, 65, 164, 148, 192, 0, 16, 98, 0, 11, 32, 3, 32, 4, 65, 164, 148, 192, 0, 16, 98, 0, 11, 65, 4, 33, 13, 2, 64, 2, 64, 65, 19, 32, 3, 107, 34, 5, 65, 5, 79, 4, 64, 32, 5, 33, 13, 65, 15, 32, 3, 107, 34, 4, 65, 16, 79, 13, 6, 11, 32, 1, 32, 7, 65, 4, 106, 34, 5, 54, 2, 16, 32, 1, 32, 4, 32, 7, 65, 31, 113, 116, 32, 6, 114, 34, 3, 54, 2, 12, 32, 5, 65, 8, 79, 4, 64, 32, 1, 40, 2, 8, 33, 4, 3, 64, 32, 4, 32, 1, 40, 2, 4, 34, 6, 79, 13, 6, 32, 1, 40, 2, 0, 32, 4, 106, 32, 3, 58, 0, 0, 32, 1, 32, 1, 40, 2, 8, 65, 1, 106, 34, 4, 54, 2, 8, 32, 1, 32, 1, 40, 2, 12, 65, 8, 118, 34, 3, 54, 2, 12, 32, 1, 32, 1, 40, 2, 16, 65, 120, 106, 34, 5, 54, 2, 16, 32, 5, 65, 7, 75, 13, 0, 11, 32, 13, 65, 20, 79, 13, 1, 11, 32, 13, 69, 13, 1, 65, 196, 152, 192, 0, 33, 7, 32, 13, 65, 196, 152, 192, 0, 106, 33, 11, 32, 9, 40, 2, 0, 33, 8, 3, 64, 32, 8, 32, 7, 45, 0, 0, 106, 65, 192, 31, 106, 45, 0, 0, 34, 4, 65, 248, 1, 113, 13, 6, 32, 1, 32, 5, 65, 3, 106, 34, 6, 54, 2, 16, 32, 1, 32, 4, 32, 5, 65, 31, 113, 116, 32, 3, 114, 34, 3, 54, 2, 12, 2, 64, 32, 6, 65, 8, 73, 4, 64, 32, 6, 33, 5, 12, 1, 11, 32, 1, 40, 2, 8, 33, 4, 3, 64, 32, 4, 32, 1, 40, 2, 4, 34, 6, 79, 13, 7, 32, 1, 40, 2, 0, 32, 4, 106, 32, 3, 58, 0, 0, 32, 1, 32, 1, 40, 2, 8, 65, 1, 106, 34, 4, 54, 2, 8, 32, 1, 32, 1, 40, 2, 12, 65, 8, 118, 34, 3, 54, 2, 12, 32, 1, 32, 1, 40, 2, 16, 65, 120, 106, 34, 5, 54, 2, 16, 32, 5, 65, 7, 75, 13, 0, 11, 11, 32, 7, 65, 1, 106, 34, 7, 32, 11, 71, 13, 0, 11, 12, 1, 11, 32, 13, 65, 19, 65, 216, 152, 192, 0, 16, 99, 0, 11, 32, 10, 69, 13, 0, 65, 0, 33, 7, 32, 9, 40, 2, 0, 33, 8, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 3, 64, 32, 7, 65, 191, 2, 77, 4, 64, 32, 9, 65, 196, 2, 106, 32, 7, 106, 45, 0, 0, 34, 11, 65, 19, 79, 13, 4, 32, 8, 32, 11, 65, 1, 116, 106, 65, 192, 22, 106, 47, 1, 0, 34, 6, 32, 8, 32, 11, 106, 65, 192, 31, 106, 45, 0, 0, 34, 4, 65, 31, 113, 118, 13, 10, 32, 1, 32, 4, 32, 5, 106, 34, 4, 54, 2, 16, 32, 1, 32, 6, 32, 5, 65, 31, 113, 116, 32, 3, 114, 34, 3, 54, 2, 12, 32, 4, 65, 8, 79, 4, 64, 32, 1, 40, 2, 8, 33, 5, 3, 64, 32, 5, 32, 1, 40, 2, 4, 34, 6, 79, 13, 7, 32, 1, 40, 2, 0, 32, 5, 106, 32, 3, 58, 0, 0, 32, 1, 32, 1, 40, 2, 8, 65, 1, 106, 34, 5, 54, 2, 8, 32, 1, 32, 1, 40, 2, 12, 65, 8, 118, 34, 3, 54, 2, 12, 32, 1, 32, 1, 40, 2, 16, 65, 120, 106, 34, 4, 54, 2, 16, 32, 4, 65, 7, 75, 13, 0, 11, 11, 32, 7, 65, 1, 106, 33, 6, 2, 127, 32, 11, 65, 16, 73, 4, 64, 32, 4, 33, 5, 32, 6, 12, 1, 11, 32, 7, 65, 190, 2, 75, 13, 3, 32, 9, 65, 196, 2, 106, 32, 6, 106, 45, 0, 0, 33, 6, 32, 9, 65, 7, 54, 2, 140, 5, 32, 9, 66, 130, 128, 128, 128, 48, 55, 2, 132, 5, 32, 11, 65, 112, 106, 34, 5, 65, 2, 75, 13, 4, 32, 6, 32, 9, 65, 132, 5, 106, 32, 5, 65, 2, 116, 106, 40, 2, 0, 34, 5, 65, 31, 113, 118, 13, 11, 32, 1, 32, 4, 32, 5, 106, 34, 5, 54, 2, 16, 32, 1, 32, 6, 32, 4, 116, 32, 3, 114, 34, 3, 54, 2, 12, 32, 5, 65, 8, 79, 4, 64, 32, 1, 40, 2, 8, 33, 4, 3, 64, 32, 4, 32, 1, 40, 2, 4, 34, 6, 79, 13, 9, 32, 1, 40, 2, 0, 32, 4, 106, 32, 3, 58, 0, 0, 32, 1, 32, 1, 40, 2, 8, 65, 1, 106, 34, 4, 54, 2, 8, 32, 1, 32, 1, 40, 2, 12, 65, 8, 118, 34, 3, 54, 2, 12, 32, 1, 32, 1, 40, 2, 16, 65, 120, 106, 34, 5, 54, 2, 16, 32, 5, 65, 7, 75, 13, 0, 11, 11, 32, 7, 65, 2, 106, 11, 34, 7, 32, 10, 73, 13, 1, 12, 7, 11, 11, 32, 7, 65, 192, 2, 65, 232, 152, 192, 0, 16, 98, 0, 11, 65, 192, 2, 65, 192, 2, 65, 180, 153, 192, 0, 16, 98, 0, 11, 32, 5, 65, 3, 65, 196, 153, 192, 0, 16, 98, 0, 11, 65, 248, 152, 192, 0, 65, 43, 65, 164, 153, 192, 0, 16, 114, 0, 11, 32, 5, 32, 6, 65, 164, 148, 192, 0, 16, 98, 0, 11, 12, 2, 11, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 32, 2, 40, 2, 0, 34, 11, 65, 129, 128, 4, 73, 4, 64, 32, 3, 173, 33, 17, 32, 11, 69, 13, 5, 32, 2, 65, 16, 106, 33, 13, 65, 1, 33, 6, 65, 0, 33, 8, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 3, 64, 2, 64, 2, 64, 2, 127, 32, 6, 65, 1, 71, 4, 64, 32, 8, 33, 10, 32, 6, 12, 1, 11, 32, 8, 65, 1, 106, 33, 10, 32, 2, 32, 8, 106, 65, 16, 106, 45, 0, 0, 65, 128, 2, 114, 11, 34, 7, 65, 1, 113, 4, 64, 32, 10, 32, 11, 79, 13, 4, 32, 10, 65, 1, 106, 34, 6, 32, 11, 79, 13, 10, 32, 10, 65, 2, 106, 34, 8, 32, 11, 79, 13, 11, 32, 2, 32, 10, 106, 65, 16, 106, 45, 0, 0, 34, 14, 65, 1, 116, 65, 164, 154, 192, 0, 106, 47, 1, 0, 34, 3, 65, 159, 2, 75, 13, 5, 32, 14, 65, 248, 158, 192, 0, 106, 45, 0, 0, 34, 4, 65, 16, 75, 13, 6, 32, 0, 32, 3, 106, 65, 128, 27, 106, 45, 0, 0, 33, 16, 32, 0, 32, 3, 65, 1, 116, 106, 65, 192, 13, 106, 51, 1, 0, 2, 127, 32, 6, 32, 13, 106, 45, 0, 0, 32, 8, 32, 13, 106, 45, 0, 0, 34, 8, 65, 8, 116, 114, 34, 3, 65, 255, 3, 77, 4, 64, 32, 3, 65, 136, 161, 192, 0, 106, 33, 15, 32, 3, 65, 136, 165, 192, 0, 106, 12, 1, 11, 32, 3, 65, 16, 116, 65, 16, 117, 65, 0, 72, 13, 8, 32, 8, 65, 136, 169, 192, 0, 106, 33, 15, 32, 8, 65, 152, 170, 192, 0, 106, 11, 45, 0, 0, 34, 12, 65, 16, 75, 13, 8, 32, 7, 65, 1, 118, 33, 6, 32, 10, 65, 3, 106, 33, 8, 32, 5, 65, 63, 113, 173, 134, 32, 17, 132, 32, 4, 65, 2, 116, 65, 180, 158, 192, 0, 106, 53, 2, 0, 32, 14, 173, 131, 32, 5, 32, 16, 106, 34, 7, 65, 63, 113, 173, 134, 132, 32, 0, 32, 15, 45, 0, 0, 34, 10, 65, 1, 116, 106, 65, 128, 18, 106, 51, 1, 0, 32, 4, 32, 7, 106, 34, 4, 65, 63, 113, 173, 134, 132, 32, 12, 65, 2, 116, 65, 180, 158, 192, 0, 106, 53, 2, 0, 32, 3, 173, 131, 32, 4, 32, 0, 32, 10, 106, 65, 160, 29, 106, 45, 0, 0, 106, 34, 3, 65, 63, 113, 173, 134, 132, 33, 17, 32, 3, 32, 12, 106, 33, 4, 12, 1, 11, 32, 10, 32, 13, 106, 33, 12, 32, 10, 65, 3, 106, 33, 8, 32, 10, 32, 10, 32, 11, 32, 10, 32, 11, 75, 27, 34, 14, 107, 33, 15, 65, 0, 33, 3, 32, 5, 33, 4, 3, 64, 32, 3, 65, 3, 70, 4, 64, 32, 7, 33, 6, 12, 2, 11, 32, 3, 32, 15, 106, 69, 13, 2, 32, 7, 65, 1, 118, 33, 6, 32, 0, 32, 3, 32, 12, 106, 45, 0, 0, 34, 16, 65, 1, 116, 106, 65, 192, 13, 106, 51, 1, 0, 32, 4, 65, 63, 113, 173, 134, 32, 17, 132, 33, 17, 32, 3, 65, 1, 106, 33, 5, 32, 4, 32, 0, 32, 16, 106, 65, 128, 27, 106, 45, 0, 0, 106, 33, 4, 32, 3, 32, 10, 106, 65, 1, 106, 32, 11, 73, 4, 64, 32, 7, 65, 2, 113, 32, 5, 33, 3, 32, 6, 33, 7, 69, 13, 1, 11, 11, 32, 5, 32, 10, 106, 33, 8, 11, 32, 1, 40, 2, 8, 34, 3, 65, 8, 106, 33, 7, 32, 3, 65, 120, 79, 13, 10, 32, 1, 40, 2, 4, 34, 10, 32, 7, 73, 13, 11, 32, 1, 40, 2, 0, 32, 3, 106, 32, 17, 55, 0, 0, 65, 2, 33, 5, 32, 1, 40, 2, 8, 34, 7, 32, 4, 65, 3, 118, 106, 34, 3, 32, 7, 73, 13, 13, 32, 3, 32, 1, 40, 2, 4, 75, 13, 13, 32, 1, 32, 3, 54, 2, 8, 32, 4, 65, 7, 113, 33, 5, 32, 17, 32, 4, 65, 56, 113, 173, 136, 33, 17, 32, 8, 32, 11, 73, 13, 1, 12, 12, 11, 11, 32, 14, 32, 11, 65, 132, 154, 192, 0, 16, 98, 0, 11, 32, 10, 32, 11, 65, 148, 154, 192, 0, 16, 98, 0, 11, 32, 3, 65, 160, 2, 65, 164, 158, 192, 0, 16, 98, 0, 11, 32, 4, 65, 17, 65, 248, 160, 192, 0, 16, 98, 0, 11, 32, 8, 65, 128, 1, 65, 136, 170, 192, 0, 16, 98, 0, 11, 32, 12, 65, 17, 65, 152, 171, 192, 0, 16, 98, 0, 11, 32, 11, 65, 128, 128, 4, 65, 168, 171, 192, 0, 16, 99, 0, 11, 32, 6, 32, 11, 65, 132, 147, 192, 0, 16, 98, 0, 11, 32, 8, 32, 11, 65, 148, 147, 192, 0, 16, 98, 0, 11, 32, 3, 32, 7, 65, 180, 148, 192, 0, 16, 100, 0, 11, 32, 7, 32, 10, 65, 180, 148, 192, 0, 16, 99, 0, 11, 32, 1, 66, 0, 55, 2, 12, 65, 0, 33, 7, 2, 64, 32, 5, 69, 4, 64, 65, 0, 33, 4, 12, 1, 11, 65, 0, 33, 4, 2, 64, 3, 64, 32, 5, 65, 16, 32, 5, 65, 16, 73, 27, 34, 6, 65, 2, 116, 65, 180, 158, 192, 0, 106, 40, 2, 0, 32, 17, 167, 113, 34, 3, 32, 6, 118, 69, 4, 64, 32, 1, 32, 4, 32, 6, 106, 34, 2, 54, 2, 16, 32, 1, 32, 3, 32, 4, 116, 32, 7, 114, 34, 7, 54, 2, 12, 2, 64, 32, 2, 65, 8, 73, 4, 64, 32, 2, 33, 4, 12, 1, 11, 32, 1, 40, 2, 8, 33, 3, 3, 64, 32, 3, 32, 1, 40, 2, 4, 34, 2, 79, 13, 4, 32, 1, 40, 2, 0, 32, 3, 106, 32, 7, 58, 0, 0, 32, 1, 32, 1, 40, 2, 8, 65, 1, 106, 34, 3, 54, 2, 8, 32, 1, 32, 1, 40, 2, 12, 65, 8, 118, 34, 7, 54, 2, 12, 32, 1, 32, 1, 40, 2, 16, 65, 120, 106, 34, 4, 54, 2, 16, 32, 4, 65, 7, 75, 13, 0, 11, 11, 32, 17, 32, 6, 173, 136, 33, 17, 32, 5, 32, 6, 107, 34, 5, 13, 1, 12, 3, 11, 11, 12, 4, 11, 32, 3, 32, 2, 65, 164, 148, 192, 0, 16, 98, 0, 11, 32, 0, 65, 192, 17, 106, 47, 1, 0, 34, 2, 32, 0, 65, 128, 29, 106, 45, 0, 0, 34, 0, 65, 31, 113, 118, 13, 2, 32, 1, 32, 0, 32, 4, 106, 34, 0, 54, 2, 16, 32, 1, 32, 2, 32, 4, 116, 32, 7, 114, 34, 4, 54, 2, 12, 65, 1, 33, 5, 32, 0, 65, 8, 73, 13, 0, 32, 1, 40, 2, 8, 33, 3, 3, 64, 32, 3, 32, 1, 40, 2, 4, 34, 0, 73, 4, 64, 32, 1, 40, 2, 0, 32, 3, 106, 32, 4, 58, 0, 0, 32, 1, 32, 1, 40, 2, 8, 65, 1, 106, 34, 3, 54, 2, 8, 32, 1, 32, 1, 40, 2, 12, 65, 8, 118, 34, 4, 54, 2, 12, 32, 1, 32, 1, 40, 2, 16, 65, 120, 106, 34, 0, 54, 2, 16, 32, 0, 65, 7, 75, 13, 1, 12, 2, 11, 11, 32, 3, 32, 0, 65, 164, 148, 192, 0, 16, 98, 0, 11, 32, 9, 65, 144, 5, 106, 36, 0, 32, 5, 15, 11, 32, 4, 32, 6, 65, 164, 148, 192, 0, 16, 98, 0, 11, 65, 228, 147, 192, 0, 65, 48, 65, 148, 148, 192, 0, 16, 114, 0, 11, 187, 43, 2, 34, 127, 1, 126, 35, 0, 65, 48, 107, 34, 13, 36, 0, 32, 1, 65, 172, 128, 4, 106, 66, 0, 55, 2, 0, 32, 1, 65, 180, 128, 4, 106, 40, 2, 0, 33, 5, 2, 64, 2, 64, 2, 64, 2, 64, 32, 1, 65, 198, 128, 4, 106, 45, 0, 0, 65, 4, 70, 4, 64, 32, 1, 32, 3, 58, 0, 198, 128, 4, 32, 3, 65, 255, 1, 113, 65, 4, 71, 32, 5, 114, 13, 1, 12, 2, 11, 32, 1, 32, 3, 58, 0, 198, 128, 4, 32, 5, 69, 13, 1, 11, 32, 0, 65, 0, 54, 2, 8, 32, 0, 66, 254, 255, 255, 255, 15, 55, 2, 0, 32, 1, 65, 126, 54, 2, 180, 128, 4, 12, 1, 11, 32, 1, 65, 144, 128, 4, 106, 33, 24, 2, 64, 32, 1, 65, 164, 128, 4, 106, 40, 2, 0, 69, 4, 64, 32, 1, 65, 199, 128, 4, 106, 45, 0, 0, 69, 13, 1, 11, 32, 13, 65, 32, 106, 32, 2, 32, 24, 16, 67, 32, 1, 32, 13, 40, 2, 32, 54, 2, 180, 128, 4, 32, 0, 32, 13, 41, 3, 32, 55, 2, 0, 32, 0, 65, 8, 106, 32, 13, 65, 40, 106, 40, 2, 0, 54, 2, 0, 12, 1, 11, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 32, 24, 40, 2, 0, 65, 255, 159, 45, 113, 65, 129, 128, 1, 71, 4, 64, 32, 2, 40, 2, 0, 34, 26, 69, 13, 2, 32, 1, 65, 204, 128, 4, 106, 33, 31, 32, 1, 65, 156, 128, 4, 106, 40, 2, 0, 33, 3, 32, 1, 65, 152, 128, 4, 106, 40, 2, 0, 33, 17, 32, 1, 65, 197, 128, 4, 106, 45, 0, 0, 33, 19, 32, 1, 65, 224, 128, 4, 106, 40, 2, 0, 33, 16, 32, 1, 65, 220, 128, 4, 106, 40, 2, 0, 33, 10, 32, 2, 40, 2, 4, 33, 18, 32, 1, 65, 212, 128, 4, 106, 33, 14, 2, 64, 3, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 32, 18, 32, 11, 77, 4, 64, 32, 10, 69, 13, 1, 32, 1, 45, 0, 198, 128, 4, 69, 13, 1, 11, 2, 127, 2, 64, 65, 130, 2, 32, 10, 107, 34, 5, 32, 18, 32, 11, 107, 34, 4, 32, 4, 32, 5, 75, 27, 34, 6, 69, 13, 0, 32, 1, 40, 2, 228, 128, 4, 32, 10, 106, 65, 2, 73, 13, 0, 32, 6, 32, 11, 106, 34, 7, 32, 6, 79, 4, 64, 32, 18, 32, 7, 79, 4, 64, 32, 14, 40, 2, 0, 34, 5, 65, 128, 128, 8, 106, 34, 8, 32, 10, 32, 16, 106, 34, 9, 65, 126, 106, 34, 4, 65, 255, 255, 1, 113, 106, 45, 0, 0, 65, 5, 116, 32, 8, 32, 9, 65, 127, 106, 65, 255, 255, 1, 113, 106, 45, 0, 0, 115, 33, 12, 32, 6, 32, 10, 106, 33, 10, 32, 6, 65, 127, 106, 33, 6, 32, 11, 32, 26, 106, 33, 8, 3, 64, 32, 5, 32, 9, 65, 255, 255, 1, 113, 34, 9, 106, 65, 128, 128, 8, 106, 32, 8, 45, 0, 0, 34, 5, 58, 0, 0, 32, 9, 65, 128, 2, 77, 4, 64, 32, 14, 40, 2, 0, 32, 9, 65, 128, 128, 2, 114, 106, 65, 128, 128, 8, 106, 32, 5, 58, 0, 0, 11, 32, 14, 40, 2, 0, 34, 11, 32, 4, 65, 255, 255, 1, 113, 65, 1, 116, 106, 32, 11, 32, 12, 65, 5, 116, 65, 224, 255, 1, 113, 32, 5, 115, 34, 12, 65, 1, 116, 34, 5, 106, 65, 128, 128, 4, 106, 47, 1, 0, 59, 1, 0, 32, 14, 40, 2, 0, 32, 5, 106, 65, 128, 128, 4, 106, 32, 4, 59, 1, 0, 32, 7, 32, 6, 69, 13, 4, 26, 32, 8, 65, 1, 106, 33, 8, 32, 6, 65, 127, 106, 33, 6, 32, 9, 65, 1, 106, 33, 9, 32, 4, 65, 1, 106, 33, 4, 32, 14, 40, 2, 0, 33, 5, 12, 0, 11, 0, 11, 32, 7, 32, 18, 65, 216, 173, 192, 0, 16, 99, 0, 11, 32, 11, 32, 7, 65, 216, 173, 192, 0, 16, 100, 0, 11, 32, 6, 32, 11, 106, 34, 5, 32, 6, 73, 13, 2, 32, 18, 32, 5, 73, 13, 3, 32, 6, 4, 64, 32, 11, 32, 26, 106, 33, 12, 32, 10, 32, 16, 106, 33, 7, 65, 0, 33, 4, 3, 64, 32, 4, 32, 7, 106, 34, 9, 65, 255, 255, 1, 113, 34, 8, 32, 14, 40, 2, 0, 106, 65, 128, 128, 8, 106, 32, 4, 32, 12, 106, 45, 0, 0, 34, 11, 58, 0, 0, 32, 8, 65, 128, 2, 77, 4, 64, 32, 14, 40, 2, 0, 32, 8, 65, 128, 128, 2, 114, 106, 65, 128, 128, 8, 106, 32, 11, 58, 0, 0, 11, 32, 1, 40, 2, 228, 128, 4, 32, 4, 32, 10, 106, 106, 65, 1, 106, 65, 3, 79, 4, 64, 32, 14, 40, 2, 0, 34, 8, 32, 9, 65, 126, 106, 34, 15, 65, 255, 255, 1, 113, 34, 20, 65, 1, 116, 106, 32, 8, 32, 11, 32, 8, 65, 128, 128, 8, 106, 34, 11, 32, 9, 65, 127, 106, 65, 255, 255, 1, 113, 106, 45, 0, 0, 65, 5, 116, 115, 32, 11, 32, 20, 106, 45, 0, 0, 65, 10, 116, 65, 128, 248, 1, 113, 115, 65, 1, 116, 34, 9, 106, 65, 128, 128, 4, 106, 47, 1, 0, 59, 1, 0, 32, 14, 40, 2, 0, 32, 9, 106, 65, 128, 128, 4, 106, 32, 15, 59, 1, 0, 11, 32, 6, 32, 4, 65, 1, 106, 34, 4, 71, 13, 0, 11, 32, 4, 32, 10, 106, 33, 10, 11, 32, 5, 11, 33, 11, 32, 1, 32, 1, 40, 2, 228, 128, 4, 34, 5, 65, 128, 128, 2, 32, 10, 107, 34, 4, 32, 4, 32, 5, 75, 27, 34, 27, 54, 2, 228, 128, 4, 32, 10, 65, 129, 2, 77, 4, 64, 32, 1, 45, 0, 198, 128, 4, 69, 13, 1, 11, 32, 16, 65, 255, 255, 1, 113, 33, 7, 32, 3, 65, 2, 32, 3, 27, 33, 9, 2, 64, 2, 64, 32, 1, 40, 2, 144, 128, 4, 34, 23, 65, 128, 128, 36, 113, 4, 64, 65, 0, 33, 4, 32, 27, 69, 32, 23, 65, 128, 128, 32, 113, 114, 13, 17, 32, 7, 32, 10, 106, 34, 5, 32, 10, 73, 13, 14, 32, 5, 65, 131, 130, 2, 79, 13, 15, 32, 10, 13, 1, 12, 2, 11, 65, 0, 33, 4, 32, 10, 65, 130, 2, 32, 10, 65, 130, 2, 73, 27, 34, 15, 32, 9, 65, 1, 32, 9, 65, 1, 75, 27, 34, 9, 77, 13, 16, 32, 7, 32, 9, 106, 34, 6, 65, 127, 106, 34, 5, 65, 129, 130, 2, 75, 13, 5, 32, 5, 65, 129, 130, 2, 70, 13, 6, 32, 31, 32, 9, 65, 31, 75, 65, 2, 116, 106, 40, 2, 0, 65, 127, 106, 34, 28, 69, 13, 16, 32, 14, 40, 2, 0, 34, 20, 32, 7, 106, 34, 29, 65, 128, 128, 8, 106, 47, 0, 0, 33, 32, 32, 20, 65, 128, 128, 8, 106, 34, 25, 32, 6, 106, 45, 0, 0, 65, 8, 116, 32, 5, 32, 25, 106, 45, 0, 0, 114, 33, 30, 32, 20, 65, 130, 128, 8, 106, 33, 33, 65, 128, 130, 2, 32, 7, 107, 65, 248, 255, 3, 113, 33, 34, 32, 7, 33, 5, 3, 64, 65, 4, 33, 8, 2, 64, 3, 64, 32, 8, 65, 127, 106, 34, 8, 69, 13, 1, 32, 20, 32, 5, 65, 1, 116, 106, 47, 1, 0, 34, 22, 69, 13, 19, 32, 16, 32, 22, 107, 65, 255, 255, 3, 113, 34, 12, 32, 27, 75, 13, 19, 32, 22, 65, 255, 255, 1, 113, 34, 5, 32, 9, 106, 34, 21, 65, 127, 106, 34, 6, 65, 129, 130, 2, 75, 13, 10, 32, 6, 65, 129, 130, 2, 70, 13, 11, 32, 6, 32, 25, 106, 45, 0, 0, 32, 21, 32, 25, 106, 45, 0, 0, 65, 8, 116, 114, 32, 30, 71, 13, 0, 11, 32, 12, 69, 13, 18, 32, 5, 32, 20, 106, 65, 128, 128, 8, 106, 47, 0, 0, 32, 32, 71, 13, 0, 32, 5, 32, 33, 106, 33, 21, 65, 128, 130, 2, 32, 5, 107, 65, 248, 255, 3, 113, 65, 8, 106, 33, 35, 65, 0, 33, 6, 3, 64, 32, 6, 65, 128, 2, 70, 13, 18, 32, 6, 32, 34, 70, 13, 12, 32, 35, 32, 6, 65, 8, 106, 34, 8, 70, 13, 13, 32, 6, 32, 21, 106, 32, 6, 32, 29, 106, 33, 37, 32, 8, 33, 6, 41, 0, 0, 32, 37, 65, 130, 128, 8, 106, 41, 0, 0, 133, 34, 38, 80, 13, 0, 11, 32, 38, 122, 167, 34, 22, 65, 3, 118, 34, 21, 32, 8, 106, 65, 122, 106, 34, 6, 32, 9, 77, 13, 0, 32, 15, 32, 6, 77, 13, 17, 32, 7, 32, 21, 106, 32, 8, 106, 34, 4, 65, 121, 106, 65, 129, 130, 2, 75, 13, 13, 32, 4, 65, 248, 253, 125, 106, 69, 13, 14, 32, 21, 32, 29, 106, 32, 8, 106, 65, 249, 255, 7, 106, 47, 0, 0, 33, 30, 32, 6, 33, 9, 32, 12, 33, 4, 11, 32, 28, 65, 127, 106, 34, 28, 13, 0, 11, 12, 16, 11, 32, 14, 40, 2, 0, 34, 5, 32, 16, 65, 127, 106, 65, 255, 255, 1, 113, 106, 65, 128, 128, 8, 106, 45, 0, 0, 33, 9, 32, 5, 32, 7, 106, 65, 128, 128, 8, 106, 33, 5, 3, 64, 32, 4, 32, 5, 106, 45, 0, 0, 32, 9, 71, 13, 1, 32, 10, 32, 4, 65, 1, 106, 34, 4, 71, 13, 0, 11, 32, 10, 33, 4, 11, 65, 0, 32, 4, 32, 4, 65, 3, 73, 27, 33, 9, 32, 4, 65, 2, 75, 33, 4, 12, 14, 11, 32, 1, 32, 16, 54, 2, 224, 128, 4, 32, 1, 32, 10, 54, 2, 220, 128, 4, 32, 1, 32, 11, 54, 2, 172, 128, 4, 32, 1, 32, 19, 58, 0, 197, 128, 4, 32, 1, 32, 3, 54, 2, 156, 128, 4, 32, 1, 32, 17, 54, 2, 152, 128, 4, 12, 17, 11, 32, 11, 32, 5, 65, 232, 173, 192, 0, 16, 100, 0, 11, 32, 5, 32, 18, 65, 232, 173, 192, 0, 16, 99, 0, 11, 32, 5, 65, 130, 130, 2, 65, 132, 147, 192, 0, 16, 98, 0, 11, 32, 6, 65, 130, 130, 2, 65, 148, 147, 192, 0, 16, 98, 0, 11, 32, 6, 65, 130, 130, 2, 65, 132, 147, 192, 0, 16, 98, 0, 11, 32, 21, 65, 130, 130, 2, 65, 148, 147, 192, 0, 16, 98, 0, 11, 32, 16, 65, 255, 255, 1, 113, 32, 6, 106, 65, 10, 106, 65, 130, 130, 2, 65, 212, 153, 192, 0, 16, 99, 0, 11, 32, 22, 65, 255, 255, 1, 113, 32, 6, 106, 65, 10, 106, 65, 130, 130, 2, 65, 212, 153, 192, 0, 16, 99, 0, 11, 32, 16, 65, 255, 255, 1, 113, 32, 22, 65, 3, 118, 106, 32, 8, 106, 65, 121, 106, 65, 130, 130, 2, 65, 132, 147, 192, 0, 16, 98, 0, 11, 32, 16, 65, 255, 255, 1, 113, 32, 22, 65, 3, 118, 106, 32, 8, 106, 65, 122, 106, 65, 130, 130, 2, 65, 148, 147, 192, 0, 16, 98, 0, 11, 32, 7, 32, 5, 65, 248, 173, 192, 0, 16, 100, 0, 11, 32, 5, 65, 130, 130, 2, 65, 248, 173, 192, 0, 16, 99, 0, 11, 32, 15, 33, 9, 32, 12, 33, 4, 11, 65, 0, 32, 4, 32, 9, 65, 3, 70, 32, 4, 65, 255, 63, 75, 113, 32, 23, 65, 128, 128, 8, 113, 65, 17, 118, 32, 9, 65, 6, 73, 113, 114, 32, 4, 32, 7, 70, 114, 34, 5, 27, 33, 6, 65, 0, 32, 9, 32, 5, 27, 33, 5, 2, 127, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 127, 32, 3, 4, 64, 32, 1, 40, 2, 200, 128, 4, 33, 4, 32, 5, 32, 3, 77, 13, 3, 32, 1, 32, 1, 40, 2, 8, 65, 1, 106, 54, 2, 8, 32, 1, 40, 2, 0, 34, 3, 65, 128, 128, 4, 79, 13, 26, 32, 1, 32, 3, 106, 65, 16, 106, 32, 19, 58, 0, 0, 32, 1, 32, 1, 40, 2, 0, 65, 1, 106, 54, 2, 0, 32, 1, 40, 2, 4, 34, 3, 65, 128, 128, 4, 79, 13, 2, 32, 1, 32, 3, 106, 65, 16, 106, 34, 3, 32, 3, 45, 0, 0, 65, 1, 118, 58, 0, 0, 32, 1, 32, 1, 40, 2, 12, 65, 127, 106, 34, 3, 54, 2, 12, 32, 3, 69, 4, 64, 32, 1, 65, 8, 54, 2, 12, 32, 1, 32, 1, 40, 2, 0, 34, 3, 54, 2, 4, 32, 1, 32, 3, 65, 1, 106, 54, 2, 0, 11, 32, 4, 32, 19, 65, 1, 116, 106, 34, 3, 32, 3, 47, 1, 0, 65, 1, 106, 59, 1, 0, 32, 5, 65, 255, 0, 75, 4, 64, 12, 7, 11, 32, 14, 40, 2, 0, 32, 7, 106, 65, 128, 128, 8, 106, 45, 0, 0, 12, 1, 11, 2, 64, 32, 6, 4, 64, 32, 23, 65, 128, 128, 4, 113, 32, 5, 65, 255, 0, 75, 114, 69, 4, 64, 32, 1, 45, 0, 196, 128, 4, 69, 13, 2, 11, 12, 7, 11, 32, 14, 40, 2, 0, 32, 7, 106, 65, 128, 128, 8, 106, 45, 0, 0, 33, 3, 32, 1, 32, 1, 40, 2, 8, 65, 1, 106, 54, 2, 8, 32, 1, 40, 2, 0, 34, 5, 65, 128, 128, 4, 79, 13, 4, 32, 1, 40, 2, 200, 128, 4, 32, 1, 32, 5, 106, 65, 16, 106, 32, 3, 58, 0, 0, 32, 1, 32, 1, 40, 2, 0, 65, 1, 106, 54, 2, 0, 32, 1, 40, 2, 4, 34, 5, 65, 128, 128, 4, 79, 13, 5, 32, 1, 32, 5, 106, 65, 16, 106, 34, 5, 32, 5, 45, 0, 0, 65, 1, 118, 58, 0, 0, 32, 1, 32, 1, 40, 2, 12, 65, 127, 106, 34, 5, 54, 2, 12, 32, 5, 69, 4, 64, 32, 1, 65, 8, 54, 2, 12, 32, 1, 32, 1, 40, 2, 0, 34, 5, 54, 2, 4, 32, 1, 32, 5, 65, 1, 106, 54, 2, 0, 11, 65, 1, 33, 4, 32, 3, 65, 1, 116, 106, 34, 3, 32, 3, 47, 1, 0, 65, 1, 106, 59, 1, 0, 65, 0, 12, 7, 11, 32, 14, 40, 2, 0, 32, 7, 106, 65, 128, 128, 8, 106, 45, 0, 0, 11, 33, 19, 65, 1, 33, 4, 32, 6, 33, 17, 32, 5, 12, 5, 11, 32, 3, 65, 128, 128, 4, 65, 244, 153, 192, 0, 16, 98, 0, 11, 32, 4, 32, 1, 32, 3, 32, 17, 16, 35, 32, 3, 65, 127, 106, 33, 4, 65, 0, 12, 3, 11, 32, 5, 65, 128, 128, 4, 65, 228, 153, 192, 0, 16, 98, 0, 11, 32, 5, 65, 128, 128, 4, 65, 244, 153, 192, 0, 16, 98, 0, 11, 32, 1, 40, 2, 200, 128, 4, 32, 1, 32, 5, 32, 6, 16, 35, 32, 5, 33, 4, 65, 0, 11, 33, 3, 32, 10, 32, 4, 73, 13, 1, 32, 4, 32, 16, 106, 33, 16, 32, 1, 32, 1, 40, 2, 228, 128, 4, 32, 4, 106, 34, 5, 65, 128, 128, 2, 32, 5, 65, 128, 128, 2, 73, 27, 54, 2, 228, 128, 4, 32, 10, 32, 4, 107, 33, 10, 32, 1, 40, 2, 0, 33, 5, 2, 64, 32, 1, 40, 2, 8, 34, 4, 65, 129, 248, 1, 79, 4, 64, 32, 5, 65, 248, 255, 3, 75, 32, 5, 65, 243, 0, 108, 65, 7, 118, 32, 4, 79, 114, 13, 1, 32, 1, 40, 2, 144, 128, 4, 65, 128, 128, 32, 113, 69, 13, 2, 12, 1, 11, 32, 5, 65, 249, 255, 3, 73, 13, 1, 11, 32, 1, 32, 16, 54, 2, 224, 128, 4, 32, 1, 32, 10, 54, 2, 220, 128, 4, 32, 1, 32, 11, 54, 2, 172, 128, 4, 32, 13, 65, 24, 106, 32, 1, 32, 2, 65, 0, 16, 5, 65, 127, 32, 13, 40, 2, 28, 32, 13, 40, 2, 24, 27, 34, 5, 69, 13, 0, 11, 32, 1, 32, 3, 54, 2, 156, 128, 4, 32, 1, 32, 17, 54, 2, 152, 128, 4, 32, 1, 32, 19, 58, 0, 197, 128, 4, 32, 5, 65, 0, 74, 13, 2, 32, 1, 40, 2, 172, 128, 4, 33, 5, 12, 15, 11, 65, 136, 174, 192, 0, 65, 47, 65, 184, 174, 192, 0, 16, 114, 0, 11, 32, 2, 40, 2, 0, 34, 16, 69, 13, 1, 32, 1, 65, 224, 128, 4, 106, 40, 2, 0, 34, 11, 65, 255, 255, 1, 113, 33, 9, 32, 2, 40, 2, 4, 33, 10, 32, 1, 40, 2, 220, 128, 4, 33, 3, 32, 1, 65, 212, 128, 4, 106, 33, 17, 65, 0, 33, 5, 3, 64, 2, 64, 2, 64, 32, 10, 32, 5, 77, 4, 64, 32, 3, 69, 13, 1, 32, 1, 45, 0, 198, 128, 4, 69, 13, 1, 11, 65, 128, 32, 32, 3, 107, 34, 4, 32, 10, 32, 5, 107, 34, 6, 32, 6, 32, 4, 75, 27, 34, 4, 4, 64, 32, 3, 32, 11, 106, 33, 12, 32, 5, 33, 8, 32, 4, 33, 6, 3, 64, 32, 6, 65, 128, 128, 2, 32, 12, 65, 255, 255, 1, 113, 34, 15, 107, 34, 5, 32, 5, 32, 6, 75, 27, 34, 7, 32, 15, 106, 34, 12, 65, 131, 130, 2, 79, 13, 17, 32, 7, 32, 8, 106, 34, 5, 32, 7, 73, 13, 16, 32, 10, 32, 5, 73, 13, 15, 32, 17, 40, 2, 0, 32, 15, 106, 65, 128, 128, 8, 106, 32, 8, 32, 16, 106, 34, 19, 32, 7, 16, 121, 26, 32, 15, 65, 128, 2, 77, 4, 64, 65, 129, 2, 32, 15, 107, 34, 14, 32, 7, 32, 7, 32, 14, 75, 27, 34, 14, 32, 15, 65, 128, 128, 2, 114, 34, 18, 106, 34, 15, 65, 131, 130, 2, 79, 13, 15, 32, 8, 32, 14, 106, 34, 15, 32, 14, 73, 13, 14, 32, 10, 32, 15, 73, 13, 13, 32, 17, 40, 2, 0, 32, 18, 106, 65, 128, 128, 8, 106, 32, 19, 32, 14, 16, 121, 26, 11, 32, 5, 33, 8, 32, 6, 32, 7, 107, 34, 6, 13, 0, 11, 11, 32, 1, 32, 1, 40, 2, 228, 128, 4, 34, 6, 65, 128, 128, 2, 32, 3, 32, 4, 106, 34, 12, 107, 34, 3, 32, 3, 32, 6, 75, 27, 54, 2, 228, 128, 4, 32, 12, 65, 255, 31, 75, 13, 1, 32, 1, 45, 0, 198, 128, 4, 13, 1, 32, 12, 33, 3, 11, 32, 1, 32, 11, 54, 2, 224, 128, 4, 32, 1, 32, 3, 54, 2, 220, 128, 4, 32, 1, 32, 5, 54, 2, 172, 128, 4, 12, 2, 11, 2, 64, 32, 12, 65, 4, 79, 4, 64, 3, 64, 32, 17, 40, 2, 0, 34, 3, 32, 3, 32, 9, 65, 255, 255, 1, 113, 106, 65, 128, 128, 8, 106, 40, 0, 0, 34, 6, 65, 255, 255, 255, 7, 113, 34, 3, 65, 17, 118, 32, 6, 65, 255, 31, 113, 115, 65, 1, 116, 106, 65, 128, 128, 4, 106, 34, 4, 47, 1, 0, 33, 8, 32, 4, 32, 11, 59, 1, 0, 2, 64, 32, 11, 32, 8, 107, 34, 15, 65, 255, 255, 3, 113, 34, 7, 32, 1, 40, 2, 228, 128, 4, 75, 13, 0, 2, 64, 2, 64, 32, 3, 32, 17, 40, 2, 0, 34, 4, 32, 8, 65, 255, 255, 1, 113, 34, 3, 106, 65, 128, 128, 8, 106, 40, 0, 0, 65, 255, 255, 255, 7, 113, 70, 4, 64, 32, 4, 65, 131, 128, 8, 106, 34, 4, 32, 3, 106, 33, 14, 32, 4, 32, 9, 106, 33, 19, 65, 255, 129, 2, 32, 3, 107, 65, 248, 255, 3, 113, 65, 8, 106, 33, 18, 65, 0, 33, 3, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 3, 64, 32, 3, 65, 128, 2, 70, 4, 64, 65, 130, 2, 33, 3, 32, 7, 13, 6, 12, 2, 11, 32, 3, 32, 9, 106, 34, 4, 65, 3, 106, 65, 120, 79, 13, 2, 32, 4, 65, 11, 106, 65, 131, 130, 2, 79, 13, 3, 32, 18, 32, 3, 65, 8, 106, 34, 4, 70, 13, 4, 32, 3, 32, 19, 106, 33, 20, 32, 3, 32, 14, 106, 32, 4, 33, 3, 41, 0, 0, 32, 20, 41, 0, 0, 133, 34, 38, 80, 13, 0, 11, 32, 38, 122, 167, 65, 3, 118, 32, 4, 106, 34, 4, 65, 123, 106, 34, 3, 65, 3, 73, 13, 0, 32, 4, 65, 120, 106, 32, 7, 65, 128, 192, 0, 73, 114, 13, 4, 11, 32, 1, 40, 2, 0, 34, 3, 65, 128, 128, 4, 79, 13, 27, 32, 1, 32, 3, 106, 65, 16, 106, 32, 6, 58, 0, 0, 32, 1, 32, 1, 40, 2, 0, 65, 1, 106, 54, 2, 0, 32, 1, 40, 2, 4, 34, 4, 65, 128, 128, 4, 73, 13, 5, 32, 4, 65, 128, 128, 4, 65, 244, 153, 192, 0, 16, 98, 0, 11, 32, 4, 65, 3, 106, 32, 4, 65, 11, 106, 65, 212, 153, 192, 0, 16, 100, 0, 11, 32, 4, 65, 11, 106, 65, 130, 130, 2, 65, 212, 153, 192, 0, 16, 99, 0, 11, 32, 8, 65, 255, 255, 1, 113, 32, 3, 106, 65, 11, 106, 65, 130, 130, 2, 65, 212, 153, 192, 0, 16, 99, 0, 11, 2, 64, 2, 64, 2, 64, 2, 64, 32, 1, 40, 2, 0, 34, 4, 65, 128, 128, 4, 73, 4, 64, 32, 1, 32, 4, 106, 65, 16, 106, 32, 12, 32, 3, 32, 3, 32, 12, 75, 27, 34, 3, 65, 125, 106, 34, 6, 58, 0, 0, 32, 1, 32, 1, 40, 2, 0, 65, 1, 106, 34, 4, 54, 2, 0, 32, 4, 65, 128, 128, 4, 79, 13, 1, 32, 1, 32, 4, 106, 65, 16, 106, 32, 15, 65, 127, 106, 34, 4, 58, 0, 0, 32, 1, 32, 1, 40, 2, 0, 65, 1, 106, 34, 8, 54, 2, 0, 32, 8, 65, 128, 128, 4, 79, 13, 2, 32, 1, 32, 8, 106, 65, 16, 106, 32, 4, 65, 128, 254, 3, 113, 65, 8, 118, 34, 8, 58, 0, 0, 32, 1, 32, 1, 40, 2, 0, 65, 1, 106, 54, 2, 0, 32, 1, 40, 2, 4, 34, 7, 65, 128, 128, 4, 79, 13, 3, 32, 1, 32, 7, 106, 65, 16, 106, 34, 7, 32, 7, 45, 0, 0, 65, 1, 118, 58, 0, 0, 32, 1, 40, 2, 4, 34, 7, 65, 128, 128, 4, 79, 13, 4, 32, 1, 32, 7, 106, 65, 16, 106, 34, 7, 32, 7, 45, 0, 0, 65, 128, 1, 114, 58, 0, 0, 2, 64, 2, 64, 2, 127, 32, 4, 65, 255, 255, 3, 113, 34, 7, 65, 128, 4, 79, 4, 64, 32, 4, 65, 16, 116, 65, 16, 117, 65, 127, 76, 13, 2, 32, 8, 65, 136, 169, 192, 0, 106, 12, 1, 11, 32, 7, 65, 136, 161, 192, 0, 106, 11, 33, 4, 32, 1, 40, 2, 200, 128, 4, 32, 4, 45, 0, 0, 65, 1, 116, 106, 65, 192, 4, 106, 34, 4, 32, 4, 47, 1, 0, 65, 1, 106, 59, 1, 0, 32, 6, 65, 255, 1, 75, 13, 1, 32, 6, 65, 1, 116, 65, 164, 154, 192, 0, 106, 47, 1, 0, 34, 4, 65, 160, 2, 73, 13, 9, 32, 4, 65, 160, 2, 65, 168, 175, 192, 0, 16, 98, 0, 11, 32, 8, 65, 128, 1, 65, 136, 175, 192, 0, 16, 98, 0, 11, 32, 6, 65, 128, 2, 65, 152, 175, 192, 0, 16, 98, 0, 11, 32, 4, 65, 128, 128, 4, 65, 228, 153, 192, 0, 16, 98, 0, 11, 32, 4, 65, 128, 128, 4, 65, 228, 153, 192, 0, 16, 98, 0, 11, 32, 8, 65, 128, 128, 4, 65, 228, 153, 192, 0, 16, 98, 0, 11, 32, 7, 65, 128, 128, 4, 65, 244, 153, 192, 0, 16, 98, 0, 11, 32, 7, 65, 128, 128, 4, 65, 244, 153, 192, 0, 16, 98, 0, 11, 32, 1, 40, 2, 0, 34, 3, 65, 128, 128, 4, 79, 13, 22, 32, 1, 32, 3, 106, 65, 16, 106, 32, 6, 58, 0, 0, 32, 1, 32, 1, 40, 2, 0, 65, 1, 106, 54, 2, 0, 32, 1, 40, 2, 4, 34, 4, 65, 128, 128, 4, 73, 13, 0, 32, 4, 65, 128, 128, 4, 65, 244, 153, 192, 0, 16, 98, 0, 11, 65, 1, 33, 3, 32, 1, 32, 4, 106, 65, 16, 106, 34, 4, 32, 4, 45, 0, 0, 65, 1, 118, 58, 0, 0, 32, 6, 65, 255, 1, 113, 33, 4, 11, 32, 1, 40, 2, 200, 128, 4, 32, 4, 65, 1, 116, 106, 34, 4, 32, 4, 47, 1, 0, 65, 1, 106, 59, 1, 0, 32, 1, 32, 1, 40, 2, 12, 65, 127, 106, 34, 4, 54, 2, 12, 2, 64, 32, 4, 4, 64, 32, 1, 40, 2, 0, 33, 4, 12, 1, 11, 32, 1, 65, 8, 54, 2, 12, 32, 1, 32, 1, 40, 2, 0, 34, 4, 54, 2, 4, 32, 1, 32, 4, 65, 1, 106, 34, 4, 54, 2, 0, 11, 32, 1, 32, 1, 40, 2, 8, 32, 3, 106, 54, 2, 8, 32, 1, 32, 1, 40, 2, 228, 128, 4, 32, 3, 106, 34, 6, 65, 128, 128, 2, 32, 6, 65, 128, 128, 2, 73, 27, 54, 2, 228, 128, 4, 32, 12, 32, 3, 107, 33, 12, 32, 3, 32, 11, 106, 33, 11, 32, 3, 32, 9, 106, 65, 255, 255, 1, 113, 33, 9, 32, 4, 65, 249, 255, 3, 73, 13, 0, 32, 1, 32, 11, 54, 2, 224, 128, 4, 32, 1, 32, 12, 54, 2, 220, 128, 4, 32, 13, 65, 16, 106, 32, 1, 32, 2, 65, 0, 16, 5, 32, 13, 40, 2, 16, 13, 7, 32, 13, 40, 2, 20, 34, 3, 13, 3, 32, 1, 40, 2, 224, 128, 4, 33, 11, 32, 1, 40, 2, 220, 128, 4, 33, 12, 11, 32, 12, 65, 3, 75, 13, 0, 11, 11, 65, 0, 33, 3, 32, 12, 69, 13, 1, 3, 64, 32, 17, 40, 2, 0, 32, 9, 106, 65, 128, 128, 8, 106, 45, 0, 0, 33, 4, 32, 1, 32, 1, 40, 2, 8, 65, 1, 106, 54, 2, 8, 32, 1, 40, 2, 0, 34, 6, 65, 128, 128, 4, 79, 13, 6, 32, 1, 32, 6, 106, 65, 16, 106, 32, 4, 58, 0, 0, 32, 1, 32, 1, 40, 2, 0, 65, 1, 106, 54, 2, 0, 32, 1, 40, 2, 4, 34, 6, 65, 128, 128, 4, 79, 13, 7, 32, 1, 32, 6, 106, 65, 16, 106, 34, 6, 32, 6, 45, 0, 0, 65, 1, 118, 58, 0, 0, 32, 1, 32, 1, 40, 2, 12, 65, 127, 106, 34, 6, 54, 2, 12, 32, 6, 69, 4, 64, 32, 1, 65, 8, 54, 2, 12, 32, 1, 32, 1, 40, 2, 0, 34, 6, 54, 2, 4, 32, 1, 32, 6, 65, 1, 106, 54, 2, 0, 11, 32, 1, 40, 2, 200, 128, 4, 32, 4, 65, 1, 116, 106, 34, 4, 32, 4, 47, 1, 0, 65, 1, 106, 59, 1, 0, 32, 1, 32, 1, 40, 2, 228, 128, 4, 65, 1, 106, 34, 4, 65, 128, 128, 2, 32, 4, 65, 128, 128, 2, 73, 27, 54, 2, 228, 128, 4, 32, 12, 65, 127, 106, 33, 12, 32, 11, 65, 1, 106, 33, 11, 32, 1, 40, 2, 0, 65, 249, 255, 3, 79, 4, 64, 32, 1, 32, 11, 54, 2, 224, 128, 4, 32, 1, 32, 12, 54, 2, 220, 128, 4, 32, 13, 65, 8, 106, 32, 1, 32, 2, 65, 0, 16, 5, 32, 13, 40, 2, 8, 13, 9, 32, 13, 40, 2, 12, 34, 4, 4, 64, 32, 1, 32, 5, 54, 2, 172, 128, 4, 32, 4, 65, 0, 76, 13, 18, 12, 5, 11, 32, 1, 40, 2, 220, 128, 4, 33, 12, 32, 1, 40, 2, 224, 128, 4, 33, 11, 11, 32, 9, 65, 1, 106, 65, 255, 255, 1, 113, 33, 9, 32, 12, 13, 0, 11, 12, 1, 11, 11, 32, 1, 32, 5, 54, 2, 172, 128, 4, 32, 3, 65, 0, 76, 13, 13, 11, 32, 2, 40, 2, 0, 34, 5, 69, 13, 0, 32, 24, 65, 1, 106, 45, 0, 0, 65, 48, 113, 69, 13, 0, 32, 2, 40, 2, 4, 34, 4, 32, 1, 40, 2, 172, 128, 4, 34, 3, 73, 13, 5, 32, 13, 32, 1, 40, 2, 168, 128, 4, 34, 4, 65, 16, 118, 59, 1, 34, 32, 13, 32, 4, 59, 1, 32, 32, 13, 65, 32, 106, 32, 5, 32, 3, 16, 30, 32, 1, 32, 13, 40, 2, 32, 54, 2, 168, 128, 4, 11, 2, 64, 32, 1, 45, 0, 198, 128, 4, 34, 3, 69, 13, 0, 32, 1, 40, 2, 172, 128, 4, 32, 2, 40, 2, 4, 65, 0, 32, 2, 40, 2, 0, 27, 71, 13, 0, 32, 1, 65, 220, 128, 4, 106, 40, 2, 0, 32, 1, 40, 2, 164, 128, 4, 114, 13, 0, 32, 13, 32, 1, 32, 2, 32, 3, 16, 5, 32, 13, 40, 2, 0, 4, 64, 32, 1, 65, 127, 54, 2, 180, 128, 4, 32, 0, 65, 127, 54, 2, 0, 32, 0, 32, 1, 41, 2, 172, 128, 4, 55, 2, 4, 12, 14, 11, 32, 13, 40, 2, 4, 65, 127, 76, 4, 64, 32, 0, 32, 1, 40, 2, 176, 128, 4, 54, 2, 8, 32, 0, 32, 1, 40, 2, 172, 128, 4, 54, 2, 4, 32, 0, 32, 1, 40, 2, 180, 128, 4, 54, 2, 0, 12, 14, 11, 32, 1, 32, 1, 45, 0, 198, 128, 4, 34, 3, 65, 4, 70, 58, 0, 199, 128, 4, 32, 3, 65, 3, 71, 13, 0, 32, 1, 65, 212, 128, 4, 106, 34, 3, 40, 2, 0, 65, 128, 128, 4, 106, 65, 0, 65, 128, 128, 4, 16, 131, 1, 26, 32, 3, 40, 2, 0, 65, 0, 65, 128, 128, 4, 16, 131, 1, 26, 32, 1, 65, 228, 128, 4, 106, 65, 0, 54, 2, 0, 11, 32, 13, 65, 32, 106, 32, 2, 32, 24, 16, 67, 32, 1, 32, 13, 40, 2, 32, 54, 2, 180, 128, 4, 32, 0, 32, 13, 41, 3, 32, 55, 2, 0, 32, 0, 65, 8, 106, 32, 13, 65, 40, 106, 40, 2, 0, 54, 2, 0, 12, 12, 11, 32, 1, 65, 127, 54, 2, 180, 128, 4, 32, 1, 32, 5, 54, 2, 172, 128, 4, 12, 10, 11, 32, 6, 65, 128, 128, 4, 65, 228, 153, 192, 0, 16, 98, 0, 11, 32, 6, 65, 128, 128, 4, 65, 244, 153, 192, 0, 16, 98, 0, 11, 32, 1, 32, 5, 54, 2, 172, 128, 4, 32, 1, 65, 127, 54, 2, 180, 128, 4, 12, 7, 11, 32, 3, 32, 4, 65, 216, 175, 192, 0, 16, 99, 0, 11, 32, 15, 32, 10, 65, 248, 174, 192, 0, 16, 99, 0, 11, 32, 8, 32, 15, 65, 248, 174, 192, 0, 16, 100, 0, 11, 32, 15, 65, 130, 130, 2, 65, 232, 174, 192, 0, 16, 99, 0, 11, 32, 5, 32, 10, 65, 216, 174, 192, 0, 16, 99, 0, 11, 32, 8, 32, 5, 65, 216, 174, 192, 0, 16, 100, 0, 11, 32, 12, 65, 130, 130, 2, 65, 200, 174, 192, 0, 16, 99, 0, 11, 32, 0, 32, 5, 54, 2, 4, 32, 0, 32, 1, 40, 2, 176, 128, 4, 54, 2, 8, 32, 0, 32, 1, 40, 2, 180, 128, 4, 54, 2, 0, 11, 32, 13, 65, 48, 106, 36, 0, 15, 11, 32, 3, 65, 128, 128, 4, 65, 228, 153, 192, 0, 16, 98, 0, 11, 220, 26, 1, 9, 127, 35, 0, 65, 32, 107, 34, 4, 36, 0, 65, 1, 33, 5, 32, 1, 65, 192, 128, 4, 106, 40, 2, 0, 33, 8, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 32, 2, 40, 2, 16, 65, 1, 71, 13, 0, 32, 2, 65, 24, 106, 40, 2, 0, 34, 7, 32, 1, 65, 176, 128, 4, 106, 40, 2, 0, 34, 6, 107, 65, 204, 153, 5, 73, 13, 0, 32, 6, 65, 188, 153, 5, 106, 33, 8, 32, 6, 65, 196, 230, 122, 79, 13, 1, 32, 7, 32, 8, 73, 13, 2, 32, 2, 65, 20, 106, 40, 2, 0, 32, 6, 106, 33, 8, 65, 0, 33, 5, 11, 32, 4, 32, 5, 58, 0, 28, 32, 4, 66, 188, 153, 5, 55, 2, 12, 32, 4, 32, 8, 54, 2, 8, 32, 4, 32, 1, 65, 184, 128, 4, 106, 40, 2, 0, 34, 9, 54, 2, 20, 32, 4, 32, 1, 65, 188, 128, 4, 106, 40, 2, 0, 34, 6, 54, 2, 24, 32, 1, 65, 146, 128, 4, 106, 45, 0, 0, 65, 8, 113, 69, 13, 2, 65, 1, 33, 11, 32, 1, 65, 224, 128, 4, 106, 40, 2, 0, 32, 1, 65, 216, 128, 4, 106, 40, 2, 0, 107, 32, 1, 65, 228, 128, 4, 106, 40, 2, 0, 75, 13, 2, 12, 3, 11, 32, 6, 32, 8, 65, 212, 147, 192, 0, 16, 100, 0, 11, 32, 8, 32, 7, 65, 212, 147, 192, 0, 16, 99, 0, 11, 65, 0, 33, 11, 11, 2, 64, 2, 64, 2, 64, 2, 64, 2, 127, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 32, 1, 65, 164, 128, 4, 106, 40, 2, 0, 69, 4, 64, 32, 1, 65, 160, 128, 4, 106, 66, 0, 55, 2, 0, 32, 1, 40, 2, 4, 34, 5, 65, 128, 128, 4, 79, 13, 1, 32, 1, 32, 5, 106, 65, 16, 106, 33, 5, 2, 64, 32, 1, 40, 2, 12, 34, 7, 65, 8, 70, 4, 64, 32, 5, 65, 0, 58, 0, 0, 32, 1, 32, 1, 40, 2, 0, 65, 127, 106, 54, 2, 0, 12, 1, 11, 32, 5, 32, 5, 45, 0, 0, 32, 7, 65, 7, 113, 118, 58, 0, 0, 11, 65, 0, 33, 5, 2, 64, 32, 1, 40, 2, 144, 128, 4, 34, 10, 65, 128, 32, 113, 69, 13, 0, 32, 1, 65, 148, 128, 4, 106, 40, 2, 0, 13, 0, 32, 4, 32, 6, 65, 8, 106, 34, 7, 54, 2, 24, 32, 4, 65, 248, 0, 32, 6, 65, 31, 113, 116, 32, 9, 114, 34, 9, 54, 2, 20, 32, 10, 65, 255, 31, 113, 34, 5, 65, 1, 75, 65, 3, 65, 2, 32, 5, 65, 255, 5, 75, 27, 32, 10, 65, 128, 128, 1, 113, 27, 65, 6, 116, 34, 10, 65, 128, 240, 1, 114, 65, 31, 112, 33, 12, 65, 0, 33, 5, 2, 64, 32, 6, 65, 119, 75, 13, 0, 32, 8, 32, 9, 58, 0, 0, 32, 4, 32, 4, 40, 2, 16, 65, 1, 106, 34, 5, 54, 2, 16, 32, 4, 32, 4, 40, 2, 20, 65, 8, 118, 34, 9, 54, 2, 20, 32, 4, 32, 4, 40, 2, 24, 65, 120, 106, 34, 7, 54, 2, 24, 32, 7, 65, 8, 73, 13, 0, 3, 64, 32, 5, 32, 4, 40, 2, 12, 34, 6, 79, 13, 21, 32, 4, 40, 2, 8, 32, 5, 106, 32, 9, 58, 0, 0, 32, 4, 32, 4, 40, 2, 16, 65, 1, 106, 34, 5, 54, 2, 16, 32, 4, 32, 4, 40, 2, 20, 65, 8, 118, 34, 9, 54, 2, 20, 32, 4, 32, 4, 40, 2, 24, 65, 120, 106, 34, 7, 54, 2, 24, 32, 7, 65, 7, 75, 13, 0, 11, 11, 32, 4, 32, 7, 65, 8, 106, 34, 6, 54, 2, 24, 32, 4, 32, 10, 32, 12, 114, 65, 31, 115, 32, 7, 65, 31, 113, 116, 32, 9, 114, 34, 9, 54, 2, 20, 32, 7, 65, 119, 75, 13, 0, 3, 64, 32, 5, 32, 4, 40, 2, 12, 34, 6, 79, 13, 20, 32, 4, 40, 2, 8, 32, 5, 106, 32, 9, 58, 0, 0, 32, 4, 32, 4, 40, 2, 16, 65, 1, 106, 34, 5, 54, 2, 16, 32, 4, 32, 4, 40, 2, 20, 65, 8, 118, 34, 9, 54, 2, 20, 32, 4, 32, 4, 40, 2, 24, 65, 120, 106, 34, 6, 54, 2, 24, 32, 6, 65, 7, 75, 13, 0, 11, 11, 65, 1, 33, 8, 32, 4, 32, 6, 65, 1, 106, 34, 7, 54, 2, 24, 32, 4, 32, 3, 65, 255, 1, 113, 65, 4, 70, 32, 6, 65, 31, 113, 116, 32, 9, 114, 34, 6, 54, 2, 20, 32, 7, 65, 8, 79, 4, 64, 3, 64, 32, 5, 32, 4, 40, 2, 12, 34, 7, 79, 13, 4, 32, 4, 40, 2, 8, 32, 5, 106, 32, 6, 58, 0, 0, 32, 4, 32, 4, 40, 2, 16, 65, 1, 106, 34, 5, 54, 2, 16, 32, 4, 32, 4, 40, 2, 20, 65, 8, 118, 34, 6, 54, 2, 20, 32, 4, 32, 4, 40, 2, 24, 65, 120, 106, 34, 7, 54, 2, 24, 32, 7, 65, 7, 75, 13, 0, 11, 11, 32, 4, 45, 0, 28, 33, 9, 32, 11, 69, 4, 64, 65, 0, 33, 8, 32, 1, 40, 2, 200, 128, 4, 32, 4, 65, 8, 106, 32, 1, 32, 1, 40, 2, 144, 128, 4, 65, 128, 128, 16, 113, 65, 18, 118, 32, 1, 40, 2, 8, 65, 48, 73, 114, 16, 3, 65, 255, 1, 113, 65, 2, 70, 13, 6, 11, 32, 1, 40, 2, 8, 34, 10, 65, 32, 77, 13, 3, 32, 4, 40, 2, 16, 32, 5, 107, 65, 1, 106, 32, 10, 73, 13, 3, 32, 11, 32, 1, 65, 224, 128, 4, 106, 40, 2, 0, 32, 1, 65, 216, 128, 4, 106, 40, 2, 0, 107, 32, 1, 65, 228, 128, 4, 106, 40, 2, 0, 77, 114, 69, 13, 4, 12, 6, 11, 65, 184, 171, 192, 0, 65, 47, 65, 232, 171, 192, 0, 16, 114, 0, 11, 32, 5, 65, 128, 128, 4, 65, 244, 153, 192, 0, 16, 98, 0, 11, 32, 5, 32, 7, 65, 164, 148, 192, 0, 16, 98, 0, 11, 32, 11, 13, 2, 11, 32, 8, 69, 13, 2, 32, 4, 32, 9, 58, 0, 28, 32, 4, 32, 7, 54, 2, 24, 32, 4, 32, 6, 54, 2, 20, 32, 4, 32, 5, 54, 2, 16, 32, 1, 40, 2, 200, 128, 4, 32, 4, 65, 8, 106, 32, 1, 65, 1, 16, 3, 65, 255, 1, 113, 65, 2, 71, 13, 2, 11, 65, 1, 33, 5, 12, 11, 11, 32, 4, 32, 9, 58, 0, 28, 32, 4, 32, 5, 54, 2, 16, 32, 4, 32, 6, 54, 2, 20, 32, 4, 32, 7, 65, 2, 106, 54, 2, 24, 2, 64, 2, 64, 32, 7, 65, 6, 73, 13, 0, 3, 64, 32, 5, 32, 4, 40, 2, 12, 34, 8, 79, 13, 15, 32, 4, 40, 2, 8, 32, 5, 106, 32, 6, 58, 0, 0, 32, 4, 32, 4, 40, 2, 16, 65, 1, 106, 34, 5, 54, 2, 16, 32, 4, 32, 4, 40, 2, 20, 65, 8, 118, 34, 6, 54, 2, 20, 32, 4, 32, 4, 40, 2, 24, 65, 120, 106, 34, 8, 54, 2, 24, 32, 8, 65, 7, 75, 13, 0, 11, 32, 8, 13, 0, 65, 0, 33, 7, 12, 1, 11, 32, 4, 65, 8, 54, 2, 24, 3, 64, 32, 5, 32, 4, 40, 2, 12, 34, 8, 79, 13, 14, 32, 4, 40, 2, 8, 32, 5, 106, 32, 6, 58, 0, 0, 32, 4, 32, 4, 40, 2, 16, 65, 1, 106, 34, 5, 54, 2, 16, 32, 4, 32, 4, 40, 2, 20, 65, 8, 118, 34, 6, 54, 2, 20, 32, 4, 32, 4, 40, 2, 24, 65, 120, 106, 34, 7, 54, 2, 24, 32, 7, 65, 7, 75, 13, 0, 11, 11, 32, 4, 32, 7, 65, 16, 106, 54, 2, 24, 32, 4, 32, 1, 47, 1, 8, 32, 7, 116, 32, 6, 114, 34, 6, 54, 2, 20, 3, 64, 32, 5, 32, 4, 40, 2, 12, 34, 8, 79, 13, 13, 32, 4, 40, 2, 8, 32, 5, 106, 32, 6, 58, 0, 0, 32, 4, 32, 4, 40, 2, 16, 65, 1, 106, 34, 5, 54, 2, 16, 32, 4, 32, 4, 40, 2, 20, 65, 8, 118, 34, 6, 54, 2, 20, 32, 4, 32, 4, 40, 2, 24, 34, 7, 65, 120, 106, 34, 8, 54, 2, 24, 32, 8, 65, 7, 75, 13, 0, 11, 32, 4, 32, 7, 65, 8, 106, 54, 2, 24, 32, 4, 32, 1, 47, 1, 8, 65, 255, 255, 3, 115, 32, 8, 116, 32, 6, 114, 34, 7, 54, 2, 20, 3, 64, 32, 5, 32, 4, 40, 2, 12, 34, 6, 79, 13, 12, 32, 4, 40, 2, 8, 32, 5, 106, 32, 7, 58, 0, 0, 32, 4, 32, 4, 40, 2, 16, 65, 1, 106, 34, 5, 54, 2, 16, 32, 4, 32, 4, 40, 2, 20, 65, 8, 118, 34, 7, 54, 2, 20, 32, 4, 32, 4, 40, 2, 24, 65, 120, 106, 34, 6, 54, 2, 24, 32, 6, 65, 7, 75, 13, 0, 11, 32, 1, 40, 2, 8, 34, 11, 69, 13, 0, 65, 0, 33, 9, 3, 64, 32, 1, 40, 2, 212, 128, 4, 32, 1, 40, 2, 216, 128, 4, 32, 9, 106, 65, 255, 255, 1, 113, 106, 65, 128, 128, 8, 106, 45, 0, 0, 33, 10, 32, 4, 32, 6, 65, 8, 106, 34, 8, 54, 2, 24, 32, 4, 32, 10, 32, 6, 65, 31, 113, 116, 32, 7, 114, 34, 7, 54, 2, 20, 2, 64, 32, 6, 65, 119, 75, 4, 64, 32, 8, 33, 6, 12, 1, 11, 3, 64, 32, 5, 32, 4, 40, 2, 12, 34, 6, 79, 13, 14, 32, 4, 40, 2, 8, 32, 5, 106, 32, 7, 58, 0, 0, 32, 4, 32, 4, 40, 2, 16, 65, 1, 106, 34, 5, 54, 2, 16, 32, 4, 32, 4, 40, 2, 20, 65, 8, 118, 34, 7, 54, 2, 20, 32, 4, 32, 4, 40, 2, 24, 65, 120, 106, 34, 6, 54, 2, 24, 32, 6, 65, 7, 75, 13, 0, 11, 11, 32, 9, 65, 1, 106, 34, 9, 32, 11, 71, 13, 0, 11, 11, 32, 3, 65, 255, 1, 113, 34, 6, 69, 13, 1, 32, 4, 40, 2, 24, 33, 3, 32, 6, 65, 4, 71, 13, 0, 2, 64, 32, 3, 69, 4, 64, 65, 0, 33, 6, 12, 1, 11, 32, 4, 65, 8, 54, 2, 24, 32, 4, 40, 2, 16, 33, 5, 32, 4, 40, 2, 20, 33, 7, 3, 64, 32, 5, 32, 4, 40, 2, 12, 34, 3, 79, 13, 14, 32, 4, 40, 2, 8, 32, 5, 106, 32, 7, 58, 0, 0, 32, 4, 32, 4, 40, 2, 16, 65, 1, 106, 34, 5, 54, 2, 16, 32, 4, 32, 4, 40, 2, 20, 65, 8, 118, 34, 7, 54, 2, 20, 32, 4, 32, 4, 40, 2, 24, 65, 120, 106, 34, 6, 54, 2, 24, 32, 6, 65, 7, 75, 13, 0, 11, 11, 32, 1, 65, 145, 128, 4, 106, 45, 0, 0, 65, 16, 113, 69, 13, 1, 32, 4, 32, 6, 65, 8, 106, 54, 2, 24, 32, 4, 32, 4, 40, 2, 20, 32, 1, 65, 168, 128, 4, 106, 40, 2, 0, 34, 3, 65, 24, 118, 32, 6, 116, 114, 34, 7, 54, 2, 20, 32, 4, 40, 2, 16, 33, 5, 3, 64, 32, 5, 32, 4, 40, 2, 12, 34, 6, 79, 13, 11, 32, 4, 40, 2, 8, 32, 5, 106, 32, 7, 58, 0, 0, 32, 4, 32, 4, 40, 2, 16, 65, 1, 106, 34, 5, 54, 2, 16, 32, 4, 32, 4, 40, 2, 20, 65, 8, 118, 34, 7, 54, 2, 20, 32, 4, 32, 4, 40, 2, 24, 34, 8, 65, 120, 106, 34, 6, 54, 2, 24, 32, 6, 65, 7, 75, 13, 0, 11, 32, 4, 32, 8, 54, 2, 24, 32, 4, 32, 3, 65, 16, 118, 65, 255, 1, 113, 32, 6, 116, 32, 7, 114, 34, 7, 54, 2, 20, 32, 3, 65, 255, 1, 113, 33, 8, 32, 4, 40, 2, 16, 33, 5, 3, 64, 32, 5, 32, 4, 40, 2, 12, 34, 6, 79, 13, 11, 32, 4, 40, 2, 8, 32, 5, 106, 32, 7, 58, 0, 0, 32, 4, 32, 4, 40, 2, 16, 65, 1, 106, 34, 5, 54, 2, 16, 32, 4, 32, 4, 40, 2, 20, 65, 8, 118, 34, 7, 54, 2, 20, 32, 4, 32, 4, 40, 2, 24, 34, 9, 65, 120, 106, 34, 6, 54, 2, 24, 32, 6, 65, 7, 75, 13, 0, 11, 32, 4, 32, 9, 54, 2, 24, 32, 4, 32, 3, 65, 8, 118, 65, 255, 1, 113, 32, 6, 116, 32, 7, 114, 34, 7, 54, 2, 20, 32, 4, 40, 2, 16, 33, 5, 3, 64, 32, 5, 32, 4, 40, 2, 12, 34, 6, 79, 13, 11, 32, 4, 40, 2, 8, 32, 5, 106, 32, 7, 58, 0, 0, 32, 4, 32, 4, 40, 2, 16, 65, 1, 106, 34, 5, 54, 2, 16, 32, 4, 32, 4, 40, 2, 20, 65, 8, 118, 34, 7, 54, 2, 20, 32, 4, 32, 4, 40, 2, 24, 34, 6, 65, 120, 106, 34, 3, 54, 2, 24, 32, 3, 65, 7, 75, 13, 0, 11, 32, 4, 32, 6, 54, 2, 24, 32, 4, 32, 8, 32, 3, 116, 32, 7, 114, 34, 7, 54, 2, 20, 32, 4, 40, 2, 16, 33, 5, 3, 64, 32, 5, 32, 4, 40, 2, 12, 34, 6, 79, 13, 11, 32, 4, 40, 2, 8, 32, 5, 106, 32, 7, 58, 0, 0, 32, 4, 32, 4, 40, 2, 16, 65, 1, 106, 34, 5, 54, 2, 16, 32, 4, 32, 4, 40, 2, 20, 65, 8, 118, 34, 7, 54, 2, 20, 32, 4, 32, 4, 40, 2, 24, 65, 120, 106, 34, 3, 54, 2, 24, 32, 3, 65, 7, 75, 13, 0, 11, 12, 1, 11, 32, 4, 32, 3, 65, 3, 106, 34, 7, 54, 2, 24, 32, 4, 40, 2, 20, 33, 6, 32, 7, 65, 8, 79, 4, 64, 32, 4, 40, 2, 16, 33, 5, 3, 64, 32, 5, 32, 4, 40, 2, 12, 34, 3, 79, 13, 13, 32, 4, 40, 2, 8, 32, 5, 106, 32, 6, 58, 0, 0, 32, 4, 32, 4, 40, 2, 16, 65, 1, 106, 34, 5, 54, 2, 16, 32, 4, 32, 4, 40, 2, 20, 65, 8, 118, 34, 6, 54, 2, 20, 32, 4, 32, 4, 40, 2, 24, 65, 120, 106, 34, 7, 54, 2, 24, 32, 7, 65, 7, 75, 13, 0, 11, 11, 32, 4, 2, 127, 32, 7, 69, 4, 64, 32, 4, 40, 2, 16, 33, 5, 65, 16, 12, 1, 11, 32, 4, 65, 8, 54, 2, 24, 32, 4, 40, 2, 16, 33, 5, 3, 64, 32, 5, 32, 4, 40, 2, 12, 34, 3, 79, 13, 13, 32, 4, 40, 2, 8, 32, 5, 106, 32, 6, 58, 0, 0, 32, 4, 32, 4, 40, 2, 16, 65, 1, 106, 34, 5, 54, 2, 16, 32, 4, 32, 4, 40, 2, 20, 65, 8, 118, 34, 6, 54, 2, 20, 32, 4, 32, 4, 40, 2, 24, 34, 3, 65, 120, 106, 34, 8, 54, 2, 24, 32, 8, 65, 7, 75, 13, 0, 11, 32, 3, 65, 8, 106, 11, 54, 2, 24, 3, 64, 32, 5, 32, 4, 40, 2, 12, 34, 3, 79, 13, 12, 32, 4, 40, 2, 8, 32, 5, 106, 32, 6, 58, 0, 0, 32, 4, 32, 4, 40, 2, 16, 65, 1, 106, 34, 5, 54, 2, 16, 32, 4, 32, 4, 40, 2, 20, 65, 8, 118, 34, 6, 54, 2, 20, 32, 4, 32, 4, 40, 2, 24, 34, 8, 65, 120, 106, 34, 3, 54, 2, 24, 32, 3, 65, 7, 75, 13, 0, 11, 32, 4, 32, 8, 65, 8, 106, 54, 2, 24, 32, 4, 65, 255, 255, 3, 32, 3, 116, 32, 6, 114, 34, 6, 54, 2, 20, 3, 64, 32, 5, 32, 4, 40, 2, 12, 34, 3, 73, 4, 64, 32, 4, 40, 2, 8, 32, 5, 106, 32, 6, 58, 0, 0, 32, 4, 32, 4, 40, 2, 16, 65, 1, 106, 34, 5, 54, 2, 16, 32, 4, 32, 4, 40, 2, 20, 65, 8, 118, 34, 6, 54, 2, 20, 32, 4, 32, 4, 40, 2, 24, 65, 120, 106, 34, 3, 54, 2, 24, 32, 3, 65, 7, 75, 13, 1, 12, 2, 11, 11, 12, 11, 11, 65, 0, 33, 5, 32, 1, 40, 2, 200, 128, 4, 65, 0, 65, 192, 4, 16, 131, 1, 26, 32, 1, 40, 2, 200, 128, 4, 65, 192, 4, 106, 65, 0, 65, 192, 0, 16, 131, 1, 26, 32, 1, 65, 8, 54, 2, 12, 32, 1, 66, 1, 55, 2, 0, 32, 1, 40, 2, 8, 33, 3, 32, 1, 65, 0, 54, 2, 8, 32, 1, 32, 4, 41, 2, 20, 55, 2, 184, 128, 4, 32, 1, 65, 216, 128, 4, 106, 34, 6, 32, 3, 32, 6, 40, 2, 0, 106, 54, 2, 0, 32, 1, 65, 148, 128, 4, 106, 34, 3, 32, 3, 40, 2, 0, 65, 1, 106, 54, 2, 0, 32, 4, 40, 2, 16, 34, 3, 69, 4, 64, 32, 1, 40, 2, 164, 128, 4, 33, 6, 12, 8, 11, 32, 4, 45, 0, 28, 33, 6, 32, 2, 40, 2, 8, 34, 8, 4, 64, 32, 8, 32, 1, 65, 172, 128, 4, 106, 40, 2, 0, 54, 2, 0, 11, 32, 2, 40, 2, 16, 65, 1, 70, 4, 64, 32, 6, 69, 13, 4, 32, 2, 65, 24, 106, 40, 2, 0, 34, 7, 32, 1, 40, 2, 176, 128, 4, 34, 8, 107, 34, 6, 32, 3, 32, 6, 32, 3, 73, 34, 9, 27, 34, 6, 32, 8, 106, 34, 5, 32, 6, 73, 13, 1, 32, 7, 32, 5, 73, 13, 2, 32, 6, 65, 205, 153, 5, 79, 13, 3, 32, 2, 40, 2, 20, 32, 8, 106, 32, 1, 40, 2, 192, 128, 4, 32, 6, 16, 121, 26, 32, 1, 32, 1, 40, 2, 176, 128, 4, 32, 6, 106, 54, 2, 176, 128, 4, 32, 9, 69, 13, 6, 32, 1, 32, 6, 54, 2, 160, 128, 4, 32, 1, 32, 3, 32, 6, 107, 54, 2, 164, 128, 4, 12, 6, 11, 32, 3, 65, 205, 153, 5, 79, 13, 4, 32, 2, 40, 2, 20, 32, 1, 40, 2, 192, 128, 4, 32, 3, 32, 2, 65, 24, 106, 40, 2, 0, 40, 2, 12, 17, 1, 0, 13, 5, 32, 1, 65, 180, 128, 4, 106, 65, 127, 54, 2, 0, 65, 127, 12, 6, 11, 32, 8, 32, 5, 65, 180, 147, 192, 0, 16, 100, 0, 11, 32, 5, 32, 7, 65, 180, 147, 192, 0, 16, 99, 0, 11, 32, 6, 65, 204, 153, 5, 65, 196, 147, 192, 0, 16, 99, 0, 11, 32, 1, 32, 1, 40, 2, 176, 128, 4, 32, 3, 106, 54, 2, 176, 128, 4, 32, 1, 40, 2, 164, 128, 4, 12, 2, 11, 32, 3, 65, 204, 153, 5, 65, 164, 147, 192, 0, 16, 99, 0, 11, 32, 1, 40, 2, 164, 128, 4, 11, 33, 6, 65, 0, 33, 5, 11, 32, 0, 32, 6, 54, 2, 4, 32, 0, 32, 5, 54, 2, 0, 32, 4, 65, 32, 106, 36, 0, 15, 11, 32, 5, 32, 6, 65, 164, 148, 192, 0, 16, 98, 0, 11, 32, 5, 32, 8, 65, 164, 148, 192, 0, 16, 98, 0, 11, 32, 5, 32, 3, 65, 164, 148, 192, 0, 16, 98, 0, 11, 130, 22, 1, 14, 127, 35, 0, 65, 144, 44, 107, 34, 10, 36, 0, 32, 10, 65, 8, 106, 65, 0, 65, 132, 1, 16, 131, 1, 26, 32, 10, 65, 140, 1, 106, 65, 0, 65, 132, 1, 16, 131, 1, 26, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 65, 1, 65, 2, 2, 127, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 32, 4, 69, 4, 64, 32, 10, 65, 144, 2, 106, 65, 0, 65, 128, 9, 16, 131, 1, 26, 32, 10, 65, 144, 11, 106, 65, 0, 65, 128, 9, 16, 131, 1, 26, 32, 2, 13, 1, 32, 10, 65, 144, 20, 106, 65, 0, 65, 128, 16, 16, 131, 1, 26, 65, 0, 12, 6, 11, 32, 2, 69, 13, 14, 32, 0, 32, 1, 65, 160, 2, 108, 106, 65, 128, 27, 106, 33, 4, 32, 2, 33, 5, 3, 64, 32, 4, 45, 0, 0, 34, 6, 65, 32, 75, 13, 2, 32, 10, 65, 8, 106, 32, 6, 65, 2, 116, 106, 34, 6, 32, 6, 40, 2, 0, 65, 1, 106, 54, 2, 0, 32, 4, 65, 1, 106, 33, 4, 32, 5, 65, 127, 106, 34, 5, 13, 0, 11, 12, 14, 11, 32, 0, 32, 1, 65, 192, 4, 108, 106, 33, 5, 65, 0, 33, 4, 3, 64, 32, 4, 65, 160, 2, 70, 13, 2, 32, 5, 47, 1, 0, 34, 8, 4, 64, 32, 6, 65, 159, 2, 75, 13, 4, 32, 10, 65, 144, 2, 106, 32, 6, 65, 2, 116, 106, 34, 14, 32, 4, 59, 1, 2, 32, 14, 32, 8, 59, 1, 0, 32, 6, 65, 1, 106, 33, 6, 11, 32, 5, 65, 2, 106, 33, 5, 32, 4, 65, 1, 106, 34, 4, 32, 2, 71, 13, 0, 11, 12, 3, 11, 32, 6, 65, 33, 65, 212, 150, 192, 0, 16, 98, 0, 11, 65, 160, 2, 65, 160, 2, 65, 228, 150, 192, 0, 16, 98, 0, 11, 32, 6, 65, 160, 2, 65, 244, 150, 192, 0, 16, 98, 0, 11, 32, 6, 65, 161, 2, 79, 13, 1, 65, 0, 33, 14, 32, 10, 65, 144, 20, 106, 65, 0, 65, 128, 16, 16, 131, 1, 26, 65, 0, 32, 6, 69, 13, 0, 26, 32, 6, 65, 2, 116, 33, 5, 32, 10, 65, 144, 2, 106, 33, 4, 3, 64, 32, 10, 65, 144, 20, 106, 32, 4, 45, 0, 0, 65, 2, 116, 106, 34, 8, 32, 8, 40, 2, 0, 65, 1, 106, 54, 2, 0, 32, 4, 45, 0, 1, 65, 2, 116, 32, 10, 106, 65, 144, 28, 106, 34, 8, 32, 8, 40, 2, 0, 65, 1, 106, 54, 2, 0, 32, 4, 65, 4, 106, 33, 4, 32, 5, 65, 124, 106, 34, 5, 13, 0, 11, 32, 6, 33, 14, 32, 10, 40, 2, 144, 28, 11, 32, 14, 70, 27, 33, 15, 32, 10, 65, 144, 20, 106, 33, 9, 32, 10, 65, 144, 11, 106, 33, 11, 32, 10, 65, 144, 2, 106, 33, 4, 32, 14, 34, 5, 33, 12, 65, 0, 33, 6, 2, 64, 2, 64, 3, 64, 32, 12, 33, 7, 32, 11, 33, 8, 32, 5, 33, 12, 32, 4, 33, 11, 32, 10, 65, 144, 36, 106, 65, 0, 65, 128, 8, 16, 131, 1, 26, 32, 6, 65, 2, 70, 13, 2, 65, 0, 33, 4, 65, 0, 33, 5, 3, 64, 32, 10, 65, 144, 36, 106, 32, 4, 106, 32, 5, 54, 2, 0, 32, 4, 32, 9, 106, 40, 2, 0, 32, 5, 106, 33, 5, 32, 4, 65, 4, 106, 34, 4, 65, 128, 8, 71, 13, 0, 11, 32, 12, 4, 64, 32, 11, 32, 12, 65, 2, 116, 106, 33, 16, 32, 6, 65, 3, 116, 65, 8, 113, 33, 17, 32, 11, 33, 4, 3, 64, 32, 10, 65, 144, 36, 106, 32, 4, 47, 1, 0, 34, 18, 32, 17, 118, 65, 255, 1, 113, 65, 2, 116, 106, 34, 5, 40, 2, 0, 34, 13, 32, 7, 79, 13, 3, 32, 8, 32, 13, 65, 2, 116, 106, 34, 13, 32, 4, 65, 2, 106, 47, 1, 0, 59, 1, 2, 32, 13, 32, 18, 59, 1, 0, 32, 5, 32, 5, 40, 2, 0, 65, 1, 106, 54, 2, 0, 32, 4, 65, 4, 106, 34, 4, 32, 16, 71, 13, 0, 11, 11, 32, 9, 65, 128, 8, 106, 33, 9, 32, 8, 33, 4, 32, 7, 33, 5, 32, 6, 65, 1, 106, 34, 13, 33, 6, 32, 13, 32, 15, 71, 13, 0, 11, 2, 64, 32, 7, 14, 2, 7, 4, 0, 11, 32, 8, 32, 8, 47, 1, 0, 32, 8, 47, 1, 4, 106, 59, 1, 0, 32, 7, 65, 127, 106, 34, 4, 65, 2, 79, 4, 64, 32, 8, 65, 4, 106, 33, 6, 65, 0, 33, 5, 65, 2, 33, 11, 65, 2, 33, 9, 3, 64, 32, 11, 65, 127, 106, 33, 12, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 32, 9, 32, 7, 73, 4, 64, 32, 5, 32, 7, 79, 13, 3, 32, 8, 32, 5, 65, 2, 116, 106, 47, 1, 0, 32, 8, 32, 9, 65, 2, 116, 106, 47, 1, 0, 34, 13, 79, 13, 1, 11, 32, 5, 32, 7, 79, 13, 3, 32, 12, 32, 7, 79, 13, 4, 32, 6, 32, 8, 32, 5, 65, 2, 116, 106, 34, 13, 47, 1, 0, 59, 1, 0, 32, 13, 32, 12, 59, 1, 0, 32, 5, 65, 1, 106, 33, 5, 12, 1, 11, 32, 12, 32, 7, 79, 13, 4, 32, 6, 32, 13, 59, 1, 0, 32, 9, 65, 1, 106, 33, 9, 11, 2, 64, 32, 9, 32, 7, 79, 4, 64, 32, 12, 32, 7, 73, 13, 1, 12, 21, 11, 32, 5, 32, 12, 79, 13, 7, 32, 5, 32, 7, 79, 13, 5, 32, 8, 32, 5, 65, 2, 116, 106, 47, 1, 0, 32, 8, 32, 9, 65, 2, 116, 106, 47, 1, 0, 79, 13, 7, 32, 12, 32, 7, 79, 13, 20, 11, 32, 5, 32, 7, 79, 13, 5, 32, 6, 32, 8, 32, 5, 65, 2, 116, 106, 34, 13, 47, 1, 0, 32, 6, 47, 1, 0, 106, 59, 1, 0, 32, 13, 32, 12, 59, 1, 0, 32, 5, 65, 1, 106, 33, 5, 12, 7, 11, 32, 5, 32, 7, 65, 228, 148, 192, 0, 16, 98, 0, 11, 32, 5, 32, 7, 65, 244, 148, 192, 0, 16, 98, 0, 11, 32, 11, 65, 127, 106, 32, 7, 65, 132, 149, 192, 0, 16, 98, 0, 11, 32, 11, 65, 127, 106, 32, 7, 65, 148, 149, 192, 0, 16, 98, 0, 11, 32, 5, 32, 7, 65, 164, 149, 192, 0, 16, 98, 0, 11, 32, 5, 32, 7, 65, 196, 149, 192, 0, 16, 98, 0, 11, 32, 12, 32, 7, 79, 4, 64, 32, 11, 65, 127, 106, 32, 7, 65, 212, 149, 192, 0, 16, 98, 0, 11, 32, 6, 32, 8, 32, 9, 65, 2, 116, 106, 47, 1, 0, 32, 6, 47, 1, 0, 106, 59, 1, 0, 32, 9, 65, 1, 106, 33, 9, 11, 32, 6, 65, 4, 106, 33, 6, 32, 7, 32, 11, 65, 1, 106, 34, 11, 71, 13, 0, 11, 32, 7, 65, 126, 106, 33, 11, 2, 64, 2, 64, 32, 7, 65, 1, 75, 4, 64, 65, 0, 33, 9, 32, 8, 32, 11, 65, 2, 116, 106, 65, 0, 59, 1, 0, 32, 11, 69, 13, 8, 32, 7, 65, 125, 106, 33, 6, 32, 8, 32, 7, 65, 2, 116, 106, 65, 116, 106, 33, 5, 3, 64, 32, 6, 32, 7, 79, 13, 2, 32, 7, 32, 5, 47, 1, 0, 34, 12, 77, 13, 3, 32, 5, 32, 8, 32, 12, 65, 2, 116, 106, 47, 1, 0, 65, 1, 106, 59, 1, 0, 32, 5, 65, 124, 106, 33, 5, 32, 6, 65, 127, 106, 34, 6, 65, 127, 71, 13, 0, 11, 32, 11, 33, 9, 12, 8, 11, 32, 11, 32, 7, 65, 228, 149, 192, 0, 16, 98, 0, 11, 32, 6, 32, 7, 65, 244, 149, 192, 0, 16, 98, 0, 11, 32, 12, 32, 7, 65, 132, 150, 192, 0, 16, 98, 0, 11, 65, 0, 33, 9, 32, 7, 65, 2, 116, 32, 8, 106, 65, 120, 106, 65, 0, 59, 1, 0, 12, 4, 11, 32, 13, 32, 7, 65, 212, 148, 192, 0, 16, 98, 0, 11, 65, 2, 65, 2, 65, 196, 148, 192, 0, 16, 98, 0, 11, 32, 6, 65, 160, 2, 65, 132, 151, 192, 0, 16, 99, 0, 11, 32, 8, 65, 1, 59, 1, 0, 32, 8, 65, 4, 106, 33, 6, 12, 1, 11, 65, 0, 33, 11, 65, 1, 33, 13, 2, 64, 3, 64, 2, 64, 32, 9, 65, 0, 72, 4, 64, 65, 0, 33, 6, 12, 1, 11, 32, 9, 65, 1, 106, 33, 12, 32, 8, 32, 9, 65, 2, 116, 106, 33, 5, 65, 0, 33, 6, 2, 64, 3, 64, 32, 9, 32, 7, 79, 13, 1, 32, 5, 47, 1, 0, 32, 11, 65, 255, 255, 3, 113, 71, 13, 2, 32, 5, 65, 124, 106, 33, 5, 32, 6, 65, 1, 106, 33, 6, 32, 9, 65, 127, 106, 34, 9, 65, 127, 71, 13, 0, 11, 32, 12, 33, 6, 65, 127, 33, 9, 12, 1, 11, 32, 9, 32, 7, 65, 148, 150, 192, 0, 16, 98, 0, 11, 32, 13, 32, 6, 74, 4, 64, 32, 8, 32, 4, 65, 2, 116, 106, 33, 5, 3, 64, 32, 4, 32, 7, 79, 13, 3, 32, 5, 32, 11, 59, 1, 0, 32, 5, 65, 124, 106, 33, 5, 32, 4, 65, 127, 106, 33, 4, 32, 13, 65, 127, 106, 34, 13, 32, 6, 74, 13, 0, 11, 11, 32, 11, 65, 1, 106, 33, 11, 32, 6, 65, 1, 116, 34, 13, 65, 0, 74, 13, 0, 11, 32, 7, 69, 13, 2, 32, 8, 32, 7, 65, 2, 116, 106, 33, 6, 12, 1, 11, 32, 4, 32, 7, 65, 164, 150, 192, 0, 16, 98, 0, 11, 32, 8, 33, 4, 3, 64, 32, 4, 47, 1, 0, 34, 5, 65, 33, 79, 13, 3, 32, 10, 65, 8, 106, 32, 5, 65, 2, 116, 106, 34, 5, 32, 5, 40, 2, 0, 65, 1, 106, 54, 2, 0, 32, 6, 32, 4, 65, 4, 106, 34, 4, 71, 13, 0, 11, 12, 1, 11, 65, 0, 33, 7, 11, 2, 64, 32, 14, 65, 2, 73, 13, 0, 2, 64, 32, 3, 65, 32, 70, 4, 64, 32, 10, 65, 8, 106, 32, 3, 65, 2, 116, 106, 34, 12, 40, 2, 0, 33, 6, 12, 1, 11, 32, 3, 65, 2, 116, 33, 4, 32, 10, 65, 12, 106, 33, 6, 65, 0, 33, 5, 3, 64, 32, 4, 32, 6, 106, 40, 2, 0, 32, 5, 106, 33, 5, 32, 4, 65, 4, 106, 34, 4, 65, 128, 1, 71, 13, 0, 11, 32, 10, 65, 8, 106, 32, 3, 65, 2, 116, 106, 34, 12, 32, 12, 40, 2, 0, 32, 5, 106, 34, 6, 54, 2, 0, 32, 3, 69, 13, 1, 11, 32, 6, 33, 11, 32, 3, 65, 1, 71, 4, 64, 32, 3, 65, 2, 116, 32, 10, 106, 65, 4, 106, 33, 4, 65, 1, 33, 5, 3, 64, 32, 4, 40, 2, 0, 32, 5, 65, 31, 113, 116, 32, 11, 106, 33, 11, 32, 4, 65, 124, 106, 33, 4, 32, 3, 32, 5, 65, 1, 106, 34, 5, 71, 13, 0, 11, 11, 65, 1, 32, 3, 65, 31, 113, 116, 34, 13, 32, 11, 79, 13, 0, 32, 3, 65, 2, 116, 32, 10, 106, 65, 12, 106, 33, 9, 2, 64, 3, 64, 32, 12, 32, 6, 65, 127, 106, 54, 2, 0, 32, 13, 65, 1, 106, 33, 13, 32, 9, 33, 5, 32, 3, 33, 4, 2, 64, 2, 64, 3, 64, 32, 4, 65, 2, 73, 13, 1, 32, 4, 65, 127, 106, 34, 6, 65, 32, 75, 13, 2, 32, 5, 65, 120, 106, 32, 5, 65, 124, 106, 34, 15, 33, 5, 32, 6, 33, 4, 40, 2, 0, 34, 16, 69, 13, 0, 11, 32, 15, 65, 124, 106, 32, 16, 65, 127, 106, 54, 2, 0, 32, 6, 65, 1, 106, 65, 32, 75, 13, 3, 32, 15, 32, 15, 40, 2, 0, 65, 2, 106, 54, 2, 0, 11, 32, 11, 32, 13, 70, 13, 3, 32, 12, 40, 2, 0, 33, 6, 12, 1, 11, 11, 32, 4, 65, 127, 106, 65, 33, 65, 180, 150, 192, 0, 16, 98, 0, 11, 65, 33, 65, 33, 65, 196, 150, 192, 0, 16, 98, 0, 11, 32, 0, 32, 1, 65, 160, 2, 108, 106, 34, 11, 65, 128, 27, 106, 65, 0, 65, 160, 2, 16, 131, 1, 26, 32, 0, 32, 1, 65, 192, 4, 108, 106, 65, 192, 13, 106, 65, 0, 65, 192, 4, 16, 131, 1, 26, 32, 3, 69, 13, 2, 32, 8, 65, 2, 106, 33, 8, 65, 1, 33, 6, 3, 64, 32, 14, 33, 5, 2, 64, 2, 64, 2, 64, 2, 64, 32, 6, 65, 33, 73, 4, 64, 32, 5, 32, 10, 65, 8, 106, 32, 6, 65, 2, 116, 106, 40, 2, 0, 34, 4, 107, 33, 14, 32, 5, 32, 4, 73, 13, 2, 32, 7, 32, 5, 73, 13, 3, 32, 4, 69, 13, 4, 65, 0, 32, 4, 65, 2, 116, 107, 33, 4, 32, 8, 32, 5, 65, 2, 116, 106, 33, 12, 3, 64, 32, 4, 32, 12, 106, 47, 1, 0, 34, 5, 65, 159, 2, 75, 13, 2, 32, 5, 32, 11, 106, 65, 128, 27, 106, 32, 6, 58, 0, 0, 32, 4, 65, 4, 106, 34, 4, 13, 0, 11, 12, 4, 11, 32, 6, 65, 33, 65, 164, 151, 192, 0, 16, 98, 0, 11, 32, 5, 65, 160, 2, 65, 196, 151, 192, 0, 16, 98, 0, 11, 32, 14, 32, 5, 65, 180, 151, 192, 0, 16, 100, 0, 11, 32, 5, 32, 7, 65, 180, 151, 192, 0, 16, 99, 0, 11, 32, 6, 32, 3, 79, 32, 6, 32, 6, 32, 3, 73, 106, 34, 6, 32, 3, 75, 114, 69, 13, 0, 11, 12, 2, 11, 32, 5, 65, 33, 65, 148, 151, 192, 0, 16, 98, 0, 11, 32, 11, 65, 127, 106, 32, 7, 65, 180, 149, 192, 0, 16, 98, 0, 11, 65, 0, 33, 5, 32, 10, 65, 0, 54, 2, 144, 1, 2, 64, 32, 3, 65, 2, 73, 13, 0, 65, 2, 33, 4, 3, 64, 32, 4, 65, 127, 106, 34, 6, 65, 33, 79, 4, 64, 32, 6, 65, 33, 65, 212, 151, 192, 0, 16, 98, 0, 11, 32, 4, 65, 32, 77, 4, 64, 32, 4, 32, 3, 79, 32, 10, 65, 140, 1, 106, 32, 4, 65, 2, 116, 106, 32, 10, 65, 8, 106, 32, 6, 65, 2, 116, 106, 40, 2, 0, 32, 5, 106, 65, 1, 116, 34, 5, 54, 2, 0, 32, 4, 32, 4, 32, 3, 73, 106, 34, 6, 33, 4, 32, 6, 32, 3, 75, 114, 69, 13, 1, 12, 2, 11, 11, 32, 4, 65, 33, 65, 228, 151, 192, 0, 16, 98, 0, 11, 2, 64, 32, 2, 69, 13, 0, 32, 0, 32, 1, 65, 160, 2, 108, 106, 34, 3, 65, 160, 29, 106, 33, 8, 32, 3, 65, 128, 27, 106, 33, 9, 32, 0, 32, 1, 65, 192, 4, 108, 106, 65, 192, 13, 106, 33, 7, 3, 64, 32, 8, 32, 9, 70, 13, 1, 2, 64, 32, 9, 45, 0, 0, 34, 0, 4, 64, 32, 0, 65, 32, 75, 13, 1, 32, 10, 65, 140, 1, 106, 32, 0, 65, 2, 116, 106, 34, 1, 32, 1, 40, 2, 0, 34, 4, 65, 1, 106, 54, 2, 0, 65, 0, 33, 5, 65, 0, 33, 6, 3, 64, 32, 4, 65, 1, 113, 32, 5, 65, 1, 116, 114, 33, 5, 32, 4, 65, 1, 118, 33, 4, 32, 6, 65, 1, 106, 34, 6, 65, 255, 1, 113, 32, 0, 73, 13, 0, 11, 32, 7, 32, 5, 59, 1, 0, 11, 32, 7, 65, 2, 106, 33, 7, 32, 9, 65, 1, 106, 33, 9, 32, 2, 65, 127, 106, 34, 2, 13, 1, 12, 2, 11, 11, 32, 0, 65, 33, 65, 244, 151, 192, 0, 16, 98, 0, 11, 32, 10, 65, 144, 44, 106, 36, 0, 11, 154, 13, 1, 11, 127, 35, 0, 65, 16, 107, 34, 8, 36, 0, 2, 64, 2, 64, 2, 64, 32, 6, 65, 3, 70, 4, 64, 32, 0, 66, 129, 128, 128, 128, 96, 55, 2, 8, 32, 0, 66, 0, 55, 2, 0, 12, 1, 11, 32, 1, 45, 0, 240, 213, 2, 33, 11, 32, 1, 65, 0, 58, 0, 240, 213, 2, 32, 1, 44, 0, 243, 213, 2, 65, 127, 76, 4, 64, 32, 0, 66, 129, 128, 128, 128, 80, 55, 2, 8, 32, 0, 66, 0, 55, 2, 0, 12, 1, 11, 32, 1, 45, 0, 242, 213, 2, 33, 7, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 32, 6, 65, 4, 70, 34, 10, 69, 65, 0, 32, 1, 45, 0, 241, 213, 2, 34, 9, 27, 69, 4, 64, 65, 8, 65, 9, 32, 7, 27, 33, 7, 32, 1, 32, 10, 32, 9, 65, 0, 71, 114, 58, 0, 241, 213, 2, 2, 64, 32, 11, 65, 0, 32, 6, 65, 4, 70, 27, 69, 4, 64, 32, 1, 40, 2, 236, 85, 34, 9, 69, 13, 1, 32, 1, 40, 2, 232, 85, 34, 3, 32, 5, 32, 9, 32, 9, 32, 5, 75, 27, 34, 2, 106, 34, 5, 32, 3, 73, 13, 3, 32, 5, 65, 129, 128, 2, 79, 13, 4, 32, 4, 32, 1, 32, 3, 106, 65, 240, 213, 0, 106, 32, 2, 16, 121, 26, 32, 0, 65, 0, 54, 2, 8, 32, 0, 32, 2, 54, 2, 4, 32, 0, 65, 0, 54, 2, 0, 32, 1, 32, 1, 40, 2, 236, 85, 32, 2, 107, 34, 3, 54, 2, 236, 85, 32, 1, 32, 1, 40, 2, 232, 85, 32, 2, 106, 65, 255, 255, 1, 113, 54, 2, 232, 85, 32, 0, 65, 12, 106, 32, 3, 32, 1, 45, 0, 243, 213, 2, 114, 69, 54, 2, 0, 12, 16, 11, 65, 0, 33, 6, 32, 8, 32, 1, 32, 2, 32, 3, 32, 4, 32, 5, 65, 0, 32, 7, 65, 4, 114, 16, 2, 32, 1, 32, 8, 44, 0, 4, 34, 2, 58, 0, 243, 213, 2, 32, 8, 40, 2, 8, 33, 3, 32, 8, 40, 2, 0, 33, 4, 2, 64, 32, 2, 65, 0, 72, 4, 127, 65, 125, 5, 32, 2, 69, 4, 64, 65, 1, 33, 1, 12, 2, 11, 32, 1, 65, 255, 1, 58, 0, 243, 213, 2, 65, 123, 11, 33, 1, 65, 1, 33, 6, 11, 32, 0, 32, 6, 54, 2, 8, 32, 0, 32, 3, 54, 2, 4, 32, 0, 32, 4, 54, 2, 0, 32, 0, 65, 12, 106, 32, 1, 54, 2, 0, 12, 15, 11, 32, 7, 32, 7, 65, 2, 114, 32, 6, 65, 4, 70, 27, 33, 14, 32, 1, 65, 240, 213, 0, 106, 33, 15, 32, 1, 40, 2, 232, 85, 33, 7, 32, 3, 69, 13, 3, 32, 8, 32, 1, 32, 2, 32, 3, 32, 15, 65, 128, 128, 2, 32, 7, 32, 14, 16, 2, 32, 1, 32, 8, 45, 0, 4, 34, 9, 58, 0, 243, 213, 2, 32, 8, 40, 2, 0, 34, 12, 32, 3, 75, 13, 11, 32, 8, 40, 2, 8, 33, 7, 32, 6, 65, 4, 70, 13, 10, 65, 0, 33, 11, 3, 64, 32, 1, 32, 7, 54, 2, 236, 85, 32, 1, 40, 2, 232, 85, 34, 10, 32, 5, 32, 7, 32, 7, 32, 5, 75, 27, 34, 6, 106, 34, 7, 32, 10, 73, 13, 17, 32, 7, 65, 129, 128, 2, 79, 13, 16, 32, 12, 32, 13, 106, 33, 13, 32, 4, 32, 1, 32, 10, 106, 65, 240, 213, 0, 106, 32, 6, 16, 121, 33, 10, 32, 1, 32, 1, 40, 2, 236, 85, 32, 6, 107, 34, 7, 54, 2, 236, 85, 32, 1, 32, 1, 40, 2, 232, 85, 32, 6, 106, 65, 255, 255, 1, 113, 34, 16, 54, 2, 232, 85, 32, 6, 32, 11, 106, 33, 11, 32, 9, 65, 24, 116, 65, 24, 117, 65, 0, 72, 13, 5, 32, 9, 65, 255, 1, 113, 34, 17, 69, 33, 4, 32, 7, 69, 33, 9, 32, 7, 32, 17, 69, 114, 13, 7, 32, 5, 32, 6, 107, 34, 5, 69, 13, 7, 32, 3, 32, 12, 107, 34, 3, 69, 13, 7, 32, 6, 32, 10, 106, 33, 4, 32, 8, 32, 1, 32, 2, 32, 12, 106, 34, 2, 32, 3, 32, 15, 65, 128, 128, 2, 32, 16, 32, 14, 16, 2, 32, 1, 32, 8, 45, 0, 4, 34, 9, 58, 0, 243, 213, 2, 32, 8, 40, 2, 8, 33, 7, 32, 3, 32, 8, 40, 2, 0, 34, 12, 79, 13, 0, 11, 12, 11, 11, 32, 0, 66, 129, 128, 128, 128, 96, 55, 2, 8, 32, 0, 66, 0, 55, 2, 0, 12, 13, 11, 32, 3, 32, 5, 65, 220, 186, 192, 0, 16, 100, 0, 11, 32, 5, 65, 128, 128, 2, 65, 220, 186, 192, 0, 16, 99, 0, 11, 65, 0, 33, 3, 32, 8, 32, 1, 32, 2, 65, 0, 32, 15, 65, 128, 128, 2, 32, 7, 32, 14, 16, 2, 32, 1, 32, 8, 44, 0, 4, 34, 9, 58, 0, 243, 213, 2, 32, 8, 40, 2, 0, 34, 12, 13, 7, 32, 8, 40, 2, 8, 33, 7, 32, 6, 65, 4, 70, 4, 64, 65, 0, 33, 11, 3, 64, 32, 1, 32, 7, 54, 2, 236, 85, 32, 1, 40, 2, 232, 85, 34, 6, 32, 5, 32, 7, 32, 7, 32, 5, 75, 27, 34, 3, 106, 34, 7, 32, 6, 73, 13, 6, 32, 7, 65, 128, 128, 2, 75, 13, 7, 32, 4, 32, 1, 32, 6, 106, 65, 240, 213, 0, 106, 32, 3, 16, 121, 33, 7, 32, 1, 32, 1, 40, 2, 236, 85, 32, 3, 107, 34, 4, 54, 2, 236, 85, 32, 1, 32, 1, 40, 2, 232, 85, 32, 3, 106, 65, 255, 255, 1, 113, 34, 12, 54, 2, 232, 85, 32, 3, 32, 11, 106, 33, 11, 65, 1, 33, 10, 32, 9, 65, 24, 116, 65, 24, 117, 65, 0, 72, 4, 64, 65, 125, 33, 6, 12, 12, 11, 65, 123, 33, 6, 2, 64, 32, 9, 65, 255, 1, 113, 14, 2, 6, 12, 0, 11, 32, 5, 32, 3, 107, 34, 5, 69, 13, 11, 32, 3, 32, 7, 106, 33, 4, 65, 0, 33, 3, 32, 8, 32, 1, 32, 2, 65, 0, 32, 15, 65, 128, 128, 2, 32, 12, 32, 14, 16, 2, 32, 1, 32, 8, 45, 0, 4, 34, 9, 58, 0, 243, 213, 2, 32, 8, 40, 2, 8, 33, 7, 32, 8, 40, 2, 0, 34, 12, 69, 13, 0, 11, 12, 8, 11, 32, 1, 32, 7, 54, 2, 236, 85, 32, 1, 40, 2, 232, 85, 34, 6, 32, 5, 32, 7, 32, 7, 32, 5, 75, 27, 34, 11, 106, 34, 7, 32, 6, 73, 13, 4, 32, 7, 65, 129, 128, 2, 79, 13, 5, 32, 4, 32, 1, 32, 6, 106, 65, 240, 213, 0, 106, 32, 11, 16, 121, 26, 32, 1, 32, 1, 40, 2, 236, 85, 32, 11, 107, 34, 2, 54, 2, 236, 85, 32, 1, 32, 1, 40, 2, 232, 85, 32, 11, 106, 65, 255, 255, 1, 113, 54, 2, 232, 85, 32, 9, 65, 0, 78, 13, 1, 11, 65, 1, 33, 10, 65, 125, 33, 6, 12, 8, 11, 65, 1, 33, 10, 65, 123, 33, 6, 32, 9, 65, 1, 70, 13, 7, 32, 9, 69, 33, 4, 32, 2, 69, 33, 9, 11, 32, 4, 32, 9, 113, 33, 6, 65, 0, 33, 10, 12, 6, 11, 12, 4, 11, 32, 6, 32, 7, 65, 220, 186, 192, 0, 16, 100, 0, 11, 32, 7, 65, 128, 128, 2, 65, 220, 186, 192, 0, 16, 99, 0, 11, 65, 0, 33, 11, 3, 64, 32, 1, 32, 7, 54, 2, 236, 85, 32, 1, 40, 2, 232, 85, 34, 10, 32, 5, 32, 7, 32, 7, 32, 5, 75, 27, 34, 6, 106, 34, 7, 32, 10, 73, 13, 6, 32, 7, 65, 128, 128, 2, 75, 13, 5, 32, 12, 32, 13, 106, 33, 13, 32, 4, 32, 1, 32, 10, 106, 65, 240, 213, 0, 106, 32, 6, 16, 121, 33, 7, 32, 1, 32, 1, 40, 2, 236, 85, 32, 6, 107, 34, 4, 54, 2, 236, 85, 32, 1, 32, 1, 40, 2, 232, 85, 32, 6, 106, 65, 255, 255, 1, 113, 34, 16, 54, 2, 232, 85, 32, 6, 32, 11, 106, 33, 11, 65, 1, 33, 10, 32, 9, 65, 24, 116, 65, 24, 117, 65, 0, 72, 4, 64, 65, 125, 33, 6, 12, 4, 11, 32, 9, 65, 255, 1, 113, 69, 13, 2, 32, 5, 32, 6, 107, 34, 5, 69, 4, 64, 65, 123, 33, 6, 12, 4, 11, 32, 6, 32, 7, 106, 33, 4, 32, 8, 32, 1, 32, 2, 32, 12, 106, 34, 2, 32, 3, 32, 12, 107, 34, 3, 32, 15, 65, 128, 128, 2, 32, 16, 32, 14, 16, 2, 32, 1, 32, 8, 45, 0, 4, 34, 9, 58, 0, 243, 213, 2, 32, 8, 40, 2, 8, 33, 7, 32, 3, 32, 8, 40, 2, 0, 34, 12, 79, 13, 0, 11, 11, 32, 12, 32, 3, 65, 204, 186, 192, 0, 16, 101, 0, 11, 65, 123, 65, 1, 32, 4, 27, 33, 6, 32, 4, 65, 0, 71, 33, 10, 11, 32, 0, 32, 10, 54, 2, 8, 32, 0, 32, 11, 54, 2, 4, 32, 0, 32, 13, 54, 2, 0, 32, 0, 65, 12, 106, 32, 6, 54, 2, 0, 11, 32, 8, 65, 16, 106, 36, 0, 15, 11, 32, 7, 65, 128, 128, 2, 65, 220, 186, 192, 0, 16, 99, 0, 11, 32, 10, 32, 7, 65, 220, 186, 192, 0, 16, 100, 0, 11, 174, 12, 1, 1, 127, 32, 0, 40, 2, 0, 65, 127, 115, 33, 3, 32, 2, 65, 192, 0, 79, 4, 64, 3, 64, 32, 1, 65, 51, 106, 45, 0, 0, 32, 1, 65, 35, 106, 45, 0, 0, 32, 1, 65, 19, 106, 45, 0, 0, 32, 1, 45, 0, 0, 32, 3, 65, 255, 1, 113, 115, 65, 2, 116, 65, 172, 180, 193, 0, 106, 40, 2, 0, 32, 1, 65, 1, 106, 45, 0, 0, 32, 3, 65, 8, 118, 65, 255, 1, 113, 115, 65, 2, 116, 65, 172, 172, 193, 0, 106, 40, 2, 0, 32, 1, 65, 2, 106, 45, 0, 0, 32, 3, 65, 16, 118, 65, 255, 1, 113, 115, 65, 2, 116, 65, 172, 164, 193, 0, 106, 40, 2, 0, 32, 1, 65, 3, 106, 45, 0, 0, 32, 3, 65, 24, 118, 115, 65, 2, 116, 65, 172, 156, 193, 0, 106, 40, 2, 0, 32, 1, 65, 4, 106, 45, 0, 0, 65, 2, 116, 65, 172, 148, 193, 0, 106, 40, 2, 0, 32, 1, 65, 5, 106, 45, 0, 0, 65, 2, 116, 65, 172, 140, 193, 0, 106, 40, 2, 0, 32, 1, 65, 6, 106, 45, 0, 0, 65, 2, 116, 65, 172, 132, 193, 0, 106, 40, 2, 0, 32, 1, 65, 7, 106, 45, 0, 0, 65, 2, 116, 65, 172, 252, 192, 0, 106, 40, 2, 0, 32, 1, 65, 8, 106, 45, 0, 0, 65, 2, 116, 65, 172, 244, 192, 0, 106, 40, 2, 0, 32, 1, 65, 9, 106, 45, 0, 0, 65, 2, 116, 65, 172, 236, 192, 0, 106, 40, 2, 0, 32, 1, 65, 10, 106, 45, 0, 0, 65, 2, 116, 65, 172, 228, 192, 0, 106, 40, 2, 0, 32, 1, 65, 11, 106, 45, 0, 0, 65, 2, 116, 65, 172, 220, 192, 0, 106, 40, 2, 0, 32, 1, 65, 12, 106, 45, 0, 0, 65, 2, 116, 65, 172, 212, 192, 0, 106, 40, 2, 0, 32, 1, 65, 13, 106, 45, 0, 0, 65, 2, 116, 65, 172, 204, 192, 0, 106, 40, 2, 0, 32, 1, 65, 14, 106, 45, 0, 0, 65, 2, 116, 65, 172, 196, 192, 0, 106, 40, 2, 0, 32, 1, 65, 15, 106, 45, 0, 0, 65, 2, 116, 65, 172, 188, 192, 0, 106, 40, 2, 0, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 34, 3, 65, 24, 118, 115, 65, 2, 116, 65, 172, 156, 193, 0, 106, 40, 2, 0, 32, 1, 65, 20, 106, 45, 0, 0, 65, 2, 116, 65, 172, 148, 193, 0, 106, 40, 2, 0, 32, 1, 65, 21, 106, 45, 0, 0, 65, 2, 116, 65, 172, 140, 193, 0, 106, 40, 2, 0, 32, 1, 65, 22, 106, 45, 0, 0, 65, 2, 116, 65, 172, 132, 193, 0, 106, 40, 2, 0, 32, 1, 65, 23, 106, 45, 0, 0, 65, 2, 116, 65, 172, 252, 192, 0, 106, 40, 2, 0, 32, 1, 65, 24, 106, 45, 0, 0, 65, 2, 116, 65, 172, 244, 192, 0, 106, 40, 2, 0, 32, 1, 65, 25, 106, 45, 0, 0, 65, 2, 116, 65, 172, 236, 192, 0, 106, 40, 2, 0, 32, 1, 65, 26, 106, 45, 0, 0, 65, 2, 116, 65, 172, 228, 192, 0, 106, 40, 2, 0, 32, 1, 65, 27, 106, 45, 0, 0, 65, 2, 116, 65, 172, 220, 192, 0, 106, 40, 2, 0, 32, 1, 65, 28, 106, 45, 0, 0, 65, 2, 116, 65, 172, 212, 192, 0, 106, 40, 2, 0, 32, 1, 65, 29, 106, 45, 0, 0, 65, 2, 116, 65, 172, 204, 192, 0, 106, 40, 2, 0, 32, 1, 65, 30, 106, 45, 0, 0, 65, 2, 116, 65, 172, 196, 192, 0, 106, 40, 2, 0, 32, 1, 65, 31, 106, 45, 0, 0, 65, 2, 116, 65, 172, 188, 192, 0, 106, 40, 2, 0, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 32, 1, 65, 18, 106, 45, 0, 0, 32, 3, 65, 16, 118, 65, 255, 1, 113, 115, 65, 2, 116, 65, 172, 164, 193, 0, 106, 40, 2, 0, 115, 32, 1, 65, 17, 106, 45, 0, 0, 32, 3, 65, 8, 118, 65, 255, 1, 113, 115, 65, 2, 116, 65, 172, 172, 193, 0, 106, 40, 2, 0, 115, 32, 1, 65, 16, 106, 45, 0, 0, 32, 3, 65, 255, 1, 113, 115, 65, 2, 116, 65, 172, 180, 193, 0, 106, 40, 2, 0, 115, 34, 3, 65, 24, 118, 115, 65, 2, 116, 65, 172, 156, 193, 0, 106, 40, 2, 0, 32, 1, 65, 36, 106, 45, 0, 0, 65, 2, 116, 65, 172, 148, 193, 0, 106, 40, 2, 0, 32, 1, 65, 37, 106, 45, 0, 0, 65, 2, 116, 65, 172, 140, 193, 0, 106, 40, 2, 0, 32, 1, 65, 38, 106, 45, 0, 0, 65, 2, 116, 65, 172, 132, 193, 0, 106, 40, 2, 0, 32, 1, 65, 39, 106, 45, 0, 0, 65, 2, 116, 65, 172, 252, 192, 0, 106, 40, 2, 0, 32, 1, 65, 40, 106, 45, 0, 0, 65, 2, 116, 65, 172, 244, 192, 0, 106, 40, 2, 0, 32, 1, 65, 41, 106, 45, 0, 0, 65, 2, 116, 65, 172, 236, 192, 0, 106, 40, 2, 0, 32, 1, 65, 42, 106, 45, 0, 0, 65, 2, 116, 65, 172, 228, 192, 0, 106, 40, 2, 0, 32, 1, 65, 43, 106, 45, 0, 0, 65, 2, 116, 65, 172, 220, 192, 0, 106, 40, 2, 0, 32, 1, 65, 44, 106, 45, 0, 0, 65, 2, 116, 65, 172, 212, 192, 0, 106, 40, 2, 0, 32, 1, 65, 45, 106, 45, 0, 0, 65, 2, 116, 65, 172, 204, 192, 0, 106, 40, 2, 0, 32, 1, 65, 46, 106, 45, 0, 0, 65, 2, 116, 65, 172, 196, 192, 0, 106, 40, 2, 0, 32, 1, 65, 47, 106, 45, 0, 0, 65, 2, 116, 65, 172, 188, 192, 0, 106, 40, 2, 0, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 32, 1, 65, 34, 106, 45, 0, 0, 32, 3, 65, 16, 118, 65, 255, 1, 113, 115, 65, 2, 116, 65, 172, 164, 193, 0, 106, 40, 2, 0, 115, 32, 1, 65, 33, 106, 45, 0, 0, 32, 3, 65, 8, 118, 65, 255, 1, 113, 115, 65, 2, 116, 65, 172, 172, 193, 0, 106, 40, 2, 0, 115, 32, 1, 65, 32, 106, 45, 0, 0, 32, 3, 65, 255, 1, 113, 115, 65, 2, 116, 65, 172, 180, 193, 0, 106, 40, 2, 0, 115, 34, 3, 65, 24, 118, 115, 65, 2, 116, 65, 172, 156, 193, 0, 106, 40, 2, 0, 32, 1, 65, 52, 106, 45, 0, 0, 65, 2, 116, 65, 172, 148, 193, 0, 106, 40, 2, 0, 32, 1, 65, 53, 106, 45, 0, 0, 65, 2, 116, 65, 172, 140, 193, 0, 106, 40, 2, 0, 32, 1, 65, 54, 106, 45, 0, 0, 65, 2, 116, 65, 172, 132, 193, 0, 106, 40, 2, 0, 32, 1, 65, 55, 106, 45, 0, 0, 65, 2, 116, 65, 172, 252, 192, 0, 106, 40, 2, 0, 32, 1, 65, 56, 106, 45, 0, 0, 65, 2, 116, 65, 172, 244, 192, 0, 106, 40, 2, 0, 32, 1, 65, 57, 106, 45, 0, 0, 65, 2, 116, 65, 172, 236, 192, 0, 106, 40, 2, 0, 32, 1, 65, 58, 106, 45, 0, 0, 65, 2, 116, 65, 172, 228, 192, 0, 106, 40, 2, 0, 32, 1, 65, 59, 106, 45, 0, 0, 65, 2, 116, 65, 172, 220, 192, 0, 106, 40, 2, 0, 32, 1, 65, 60, 106, 45, 0, 0, 65, 2, 116, 65, 172, 212, 192, 0, 106, 40, 2, 0, 32, 1, 65, 61, 106, 45, 0, 0, 65, 2, 116, 65, 172, 204, 192, 0, 106, 40, 2, 0, 32, 1, 65, 62, 106, 45, 0, 0, 65, 2, 116, 65, 172, 196, 192, 0, 106, 40, 2, 0, 32, 1, 65, 63, 106, 45, 0, 0, 65, 2, 116, 65, 172, 188, 192, 0, 106, 40, 2, 0, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 32, 1, 65, 50, 106, 45, 0, 0, 32, 3, 65, 16, 118, 65, 255, 1, 113, 115, 65, 2, 116, 65, 172, 164, 193, 0, 106, 40, 2, 0, 115, 32, 1, 65, 49, 106, 45, 0, 0, 32, 3, 65, 8, 118, 65, 255, 1, 113, 115, 65, 2, 116, 65, 172, 172, 193, 0, 106, 40, 2, 0, 115, 32, 1, 65, 48, 106, 45, 0, 0, 32, 3, 65, 255, 1, 113, 115, 65, 2, 116, 65, 172, 180, 193, 0, 106, 40, 2, 0, 115, 33, 3, 32, 1, 65, 64, 107, 33, 1, 32, 2, 65, 64, 106, 34, 2, 65, 63, 75, 13, 0, 11, 11, 32, 2, 4, 64, 3, 64, 32, 1, 45, 0, 0, 32, 3, 115, 65, 255, 1, 113, 65, 2, 116, 65, 172, 188, 192, 0, 106, 40, 2, 0, 32, 3, 65, 8, 118, 115, 33, 3, 32, 1, 65, 1, 106, 33, 1, 32, 2, 65, 127, 106, 34, 2, 13, 0, 11, 11, 32, 0, 32, 3, 65, 127, 115, 54, 2, 0, 11, 151, 11, 1, 27, 127, 35, 0, 65, 144, 1, 107, 34, 2, 36, 0, 2, 64, 2, 64, 2, 64, 2, 64, 32, 0, 40, 2, 20, 34, 4, 65, 2, 77, 4, 64, 32, 0, 65, 56, 106, 33, 21, 32, 2, 65, 56, 106, 33, 22, 32, 2, 65, 40, 106, 33, 23, 32, 2, 65, 32, 106, 33, 24, 32, 2, 65, 24, 106, 33, 25, 32, 2, 65, 16, 106, 33, 26, 3, 64, 32, 0, 32, 4, 65, 2, 116, 106, 65, 40, 106, 40, 2, 0, 33, 12, 32, 2, 65, 64, 107, 66, 0, 55, 3, 0, 32, 22, 66, 0, 55, 3, 0, 32, 2, 65, 48, 106, 66, 0, 55, 3, 0, 32, 23, 66, 0, 55, 3, 0, 32, 24, 66, 0, 55, 3, 0, 32, 25, 66, 0, 55, 3, 0, 32, 26, 66, 0, 55, 3, 0, 32, 2, 66, 0, 55, 3, 8, 32, 2, 65, 204, 0, 106, 65, 0, 65, 196, 0, 16, 131, 1, 26, 32, 0, 32, 4, 65, 160, 27, 108, 34, 27, 106, 34, 14, 65, 56, 106, 65, 0, 65, 128, 16, 16, 131, 1, 33, 28, 32, 14, 65, 184, 16, 106, 65, 0, 65, 128, 9, 16, 131, 1, 26, 2, 127, 2, 64, 32, 12, 65, 161, 2, 73, 4, 64, 32, 12, 69, 4, 64, 65, 0, 33, 4, 65, 0, 33, 6, 65, 0, 33, 10, 65, 0, 33, 9, 65, 0, 33, 8, 65, 0, 33, 11, 65, 0, 33, 13, 65, 0, 33, 7, 65, 0, 33, 15, 65, 0, 33, 16, 65, 0, 33, 17, 65, 0, 33, 18, 65, 0, 33, 19, 65, 0, 33, 20, 65, 0, 12, 3, 11, 32, 14, 65, 184, 25, 106, 33, 4, 32, 12, 33, 6, 3, 64, 32, 4, 45, 0, 0, 34, 5, 65, 15, 77, 4, 64, 32, 2, 65, 8, 106, 32, 5, 65, 2, 116, 106, 34, 5, 32, 5, 40, 2, 0, 65, 1, 106, 54, 2, 0, 32, 4, 65, 1, 106, 33, 4, 32, 6, 65, 127, 106, 34, 6, 13, 1, 12, 3, 11, 11, 32, 5, 65, 16, 65, 200, 177, 192, 0, 16, 98, 0, 11, 32, 12, 65, 160, 2, 65, 184, 177, 192, 0, 16, 99, 0, 11, 32, 2, 40, 2, 68, 33, 4, 32, 2, 40, 2, 64, 33, 6, 32, 2, 40, 2, 56, 33, 10, 32, 2, 40, 2, 52, 33, 9, 32, 2, 40, 2, 48, 33, 8, 32, 2, 40, 2, 44, 33, 11, 32, 2, 40, 2, 40, 33, 13, 32, 2, 40, 2, 36, 33, 7, 32, 2, 40, 2, 32, 33, 15, 32, 2, 40, 2, 28, 33, 16, 32, 2, 40, 2, 24, 33, 17, 32, 2, 40, 2, 20, 33, 18, 32, 2, 40, 2, 16, 33, 19, 32, 2, 40, 2, 12, 33, 20, 32, 2, 40, 2, 60, 11, 33, 5, 32, 2, 32, 20, 65, 1, 116, 34, 3, 54, 2, 84, 32, 2, 32, 3, 32, 19, 106, 65, 1, 116, 34, 3, 54, 2, 88, 32, 2, 32, 3, 32, 18, 106, 65, 1, 116, 34, 3, 54, 2, 92, 32, 2, 32, 3, 32, 17, 106, 65, 1, 116, 34, 3, 54, 2, 96, 32, 2, 32, 3, 32, 16, 106, 65, 1, 116, 34, 3, 54, 2, 100, 32, 2, 32, 3, 32, 15, 106, 65, 1, 116, 34, 3, 54, 2, 104, 32, 2, 32, 3, 32, 7, 106, 65, 1, 116, 34, 3, 54, 2, 108, 32, 2, 32, 3, 32, 13, 106, 65, 1, 116, 34, 3, 54, 2, 112, 32, 2, 32, 3, 32, 11, 106, 65, 1, 116, 34, 3, 54, 2, 116, 32, 2, 32, 3, 32, 8, 106, 65, 1, 116, 34, 3, 54, 2, 120, 32, 2, 32, 3, 32, 9, 106, 65, 1, 116, 34, 3, 54, 2, 124, 32, 2, 32, 3, 32, 10, 106, 65, 1, 116, 34, 3, 54, 2, 128, 1, 32, 2, 32, 3, 32, 5, 106, 65, 1, 116, 34, 3, 54, 2, 132, 1, 32, 2, 32, 3, 32, 6, 106, 65, 1, 116, 34, 3, 54, 2, 136, 1, 32, 2, 32, 3, 32, 4, 106, 65, 1, 116, 34, 3, 54, 2, 140, 1, 2, 64, 2, 127, 65, 27, 32, 3, 65, 128, 128, 4, 70, 32, 4, 32, 6, 32, 5, 32, 10, 32, 9, 32, 8, 32, 11, 32, 13, 32, 7, 32, 15, 32, 16, 32, 17, 32, 18, 32, 19, 32, 20, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 65, 2, 73, 114, 69, 13, 0, 26, 2, 64, 32, 12, 69, 13, 0, 32, 21, 32, 27, 106, 33, 15, 65, 0, 33, 11, 65, 255, 255, 3, 33, 7, 3, 64, 32, 11, 65, 160, 2, 32, 11, 65, 160, 2, 75, 27, 33, 13, 3, 64, 32, 11, 34, 10, 32, 13, 70, 13, 7, 32, 10, 65, 1, 106, 33, 11, 2, 64, 2, 64, 32, 10, 32, 14, 106, 65, 184, 25, 106, 45, 0, 0, 34, 8, 69, 13, 0, 32, 8, 65, 16, 75, 13, 10, 32, 2, 65, 204, 0, 106, 32, 8, 65, 2, 116, 106, 34, 5, 32, 5, 40, 2, 0, 34, 6, 65, 1, 106, 54, 2, 0, 65, 0, 33, 4, 65, 0, 33, 5, 3, 64, 32, 6, 65, 1, 113, 32, 4, 34, 9, 65, 1, 116, 114, 33, 4, 32, 6, 65, 1, 118, 33, 6, 32, 5, 65, 1, 106, 34, 5, 65, 255, 1, 113, 32, 8, 73, 13, 0, 11, 32, 8, 65, 11, 79, 13, 1, 32, 4, 65, 255, 7, 75, 13, 0, 32, 8, 65, 9, 116, 32, 10, 114, 33, 5, 32, 15, 32, 4, 65, 1, 116, 106, 33, 6, 65, 1, 32, 8, 65, 31, 113, 116, 34, 10, 65, 1, 116, 33, 9, 3, 64, 32, 6, 32, 5, 59, 1, 0, 32, 6, 32, 9, 106, 33, 6, 32, 4, 32, 10, 106, 34, 4, 65, 128, 8, 73, 13, 0, 11, 11, 32, 11, 32, 12, 73, 13, 1, 12, 3, 11, 11, 2, 127, 32, 7, 32, 28, 32, 4, 65, 255, 7, 113, 65, 1, 116, 106, 34, 5, 47, 1, 0, 34, 6, 13, 0, 26, 32, 5, 32, 7, 59, 1, 0, 32, 7, 34, 6, 65, 126, 106, 11, 33, 5, 32, 9, 65, 8, 118, 65, 255, 255, 255, 3, 113, 33, 9, 2, 64, 32, 8, 65, 12, 73, 4, 64, 32, 5, 33, 7, 12, 1, 11, 65, 11, 33, 4, 3, 64, 32, 9, 65, 1, 118, 34, 9, 65, 1, 113, 32, 6, 65, 127, 115, 106, 34, 6, 65, 16, 116, 65, 16, 117, 33, 7, 32, 6, 65, 255, 255, 3, 113, 65, 192, 4, 79, 13, 10, 32, 4, 65, 1, 106, 33, 4, 2, 64, 32, 14, 32, 7, 65, 1, 116, 106, 65, 184, 16, 106, 34, 7, 47, 1, 0, 34, 6, 4, 64, 32, 5, 33, 7, 12, 1, 11, 32, 7, 32, 5, 59, 1, 0, 32, 5, 34, 6, 65, 126, 106, 34, 7, 33, 5, 11, 32, 4, 65, 255, 1, 113, 32, 8, 73, 13, 0, 11, 11, 32, 9, 65, 1, 118, 65, 1, 113, 32, 6, 65, 127, 115, 106, 34, 6, 65, 16, 116, 65, 16, 117, 33, 5, 32, 6, 65, 255, 255, 3, 113, 65, 192, 4, 79, 13, 9, 32, 14, 32, 5, 65, 1, 116, 106, 65, 184, 16, 106, 32, 10, 59, 1, 0, 32, 11, 32, 12, 73, 13, 0, 11, 11, 2, 64, 2, 64, 32, 0, 40, 2, 20, 34, 5, 14, 3, 0, 3, 1, 3, 11, 32, 1, 65, 0, 54, 2, 12, 65, 12, 12, 1, 11, 32, 1, 65, 0, 54, 2, 12, 65, 10, 11, 32, 2, 65, 144, 1, 106, 36, 0, 65, 8, 116, 65, 1, 114, 15, 11, 32, 0, 32, 5, 65, 127, 106, 34, 4, 54, 2, 20, 32, 4, 65, 3, 73, 13, 0, 11, 11, 32, 4, 65, 3, 65, 168, 177, 192, 0, 16, 98, 0, 11, 32, 13, 65, 160, 2, 65, 216, 177, 192, 0, 16, 98, 0, 11, 32, 8, 65, 17, 65, 232, 177, 192, 0, 16, 98, 0, 11, 32, 7, 65, 192, 4, 65, 248, 177, 192, 0, 16, 98, 0, 11, 32, 5, 65, 192, 4, 65, 136, 178, 192, 0, 16, 98, 0, 11, 164, 11, 2, 19, 127, 5, 126, 35, 0, 65, 144, 1, 107, 34, 3, 36, 0, 65, 3, 33, 14, 2, 64, 32, 2, 69, 13, 0, 32, 0, 65, 208, 0, 106, 33, 16, 32, 0, 65, 232, 0, 106, 33, 10, 32, 0, 65, 140, 1, 106, 33, 17, 32, 3, 65, 4, 114, 33, 18, 32, 3, 65, 236, 0, 106, 33, 11, 32, 0, 65, 216, 0, 106, 33, 13, 32, 0, 65, 148, 1, 106, 33, 7, 32, 0, 65, 252, 0, 106, 33, 19, 32, 0, 65, 240, 0, 106, 33, 20, 32, 0, 65, 228, 0, 106, 33, 21, 3, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 32, 0, 40, 2, 92, 65, 1, 71, 4, 64, 32, 3, 65, 0, 54, 2, 36, 32, 3, 65, 0, 58, 0, 32, 32, 3, 32, 2, 54, 2, 28, 32, 3, 32, 1, 54, 2, 24, 32, 3, 32, 7, 40, 2, 0, 54, 2, 20, 32, 3, 32, 0, 40, 2, 140, 1, 54, 2, 16, 32, 3, 65, 224, 0, 106, 32, 3, 65, 16, 106, 16, 13, 32, 3, 65, 216, 0, 106, 32, 11, 65, 32, 106, 40, 2, 0, 34, 4, 54, 2, 0, 32, 3, 65, 208, 0, 106, 32, 11, 65, 24, 106, 41, 2, 0, 34, 23, 55, 3, 0, 32, 3, 65, 200, 0, 106, 32, 11, 65, 16, 106, 41, 2, 0, 34, 24, 55, 3, 0, 32, 3, 65, 64, 107, 32, 11, 65, 8, 106, 41, 2, 0, 34, 25, 55, 3, 0, 32, 3, 32, 11, 41, 2, 0, 34, 26, 55, 3, 56, 32, 3, 41, 2, 100, 33, 22, 32, 3, 40, 2, 96, 32, 3, 40, 2, 36, 33, 6, 32, 3, 65, 48, 106, 34, 9, 32, 4, 54, 2, 0, 32, 3, 65, 40, 106, 34, 4, 32, 23, 55, 3, 0, 32, 3, 65, 32, 106, 34, 15, 32, 24, 55, 3, 0, 32, 3, 65, 24, 106, 34, 8, 32, 25, 55, 3, 0, 32, 3, 32, 26, 55, 3, 16, 69, 4, 64, 32, 3, 65, 128, 1, 106, 34, 5, 32, 9, 40, 2, 0, 54, 2, 0, 32, 3, 65, 248, 0, 106, 34, 9, 32, 4, 41, 3, 0, 55, 3, 0, 32, 3, 65, 240, 0, 106, 34, 4, 32, 15, 41, 3, 0, 55, 3, 0, 32, 3, 65, 232, 0, 106, 34, 15, 32, 8, 41, 3, 0, 55, 3, 0, 32, 3, 32, 3, 41, 3, 16, 55, 3, 96, 2, 64, 32, 0, 40, 2, 92, 69, 13, 0, 2, 64, 32, 0, 40, 2, 96, 34, 8, 69, 13, 0, 32, 21, 40, 2, 0, 34, 12, 69, 13, 0, 32, 8, 32, 12, 65, 1, 16, 156, 1, 11, 2, 64, 32, 0, 40, 2, 108, 34, 8, 69, 13, 0, 32, 20, 40, 2, 0, 34, 12, 69, 13, 0, 32, 8, 32, 12, 65, 1, 16, 156, 1, 11, 32, 0, 40, 2, 120, 34, 8, 69, 13, 0, 32, 19, 40, 2, 0, 34, 12, 69, 13, 0, 32, 8, 32, 12, 65, 1, 16, 156, 1, 11, 32, 0, 32, 22, 55, 2, 96, 32, 0, 65, 1, 54, 2, 92, 32, 10, 32, 3, 41, 3, 96, 55, 2, 0, 32, 10, 65, 8, 106, 32, 15, 41, 3, 0, 55, 2, 0, 32, 10, 65, 16, 106, 32, 4, 41, 3, 0, 55, 2, 0, 32, 10, 65, 24, 106, 32, 9, 41, 3, 0, 55, 2, 0, 32, 10, 65, 32, 106, 32, 5, 40, 2, 0, 54, 2, 0, 32, 7, 40, 2, 0, 33, 4, 32, 7, 65, 0, 54, 2, 0, 32, 3, 65, 0, 54, 2, 0, 32, 6, 32, 4, 107, 33, 4, 12, 2, 11, 32, 3, 32, 22, 55, 3, 96, 32, 3, 65, 224, 0, 106, 16, 133, 1, 65, 255, 1, 113, 65, 17, 71, 13, 3, 32, 17, 32, 7, 40, 2, 0, 32, 2, 16, 75, 32, 0, 40, 2, 140, 1, 32, 7, 40, 2, 0, 106, 32, 1, 32, 2, 16, 121, 26, 32, 7, 32, 7, 40, 2, 0, 32, 2, 106, 54, 2, 0, 32, 3, 32, 2, 54, 2, 4, 32, 3, 65, 0, 54, 2, 0, 32, 3, 45, 0, 96, 65, 1, 77, 4, 64, 32, 2, 33, 4, 12, 3, 11, 32, 3, 40, 2, 100, 34, 4, 40, 2, 0, 32, 4, 40, 2, 4, 40, 2, 0, 17, 2, 0, 32, 4, 40, 2, 4, 34, 5, 40, 2, 4, 34, 6, 4, 64, 32, 4, 40, 2, 0, 32, 6, 32, 5, 40, 2, 8, 16, 156, 1, 11, 32, 3, 40, 2, 100, 65, 12, 65, 4, 16, 156, 1, 32, 3, 40, 2, 0, 65, 1, 70, 13, 10, 32, 3, 40, 2, 4, 33, 4, 12, 2, 11, 32, 3, 65, 224, 0, 106, 32, 0, 32, 1, 32, 2, 16, 47, 32, 3, 41, 2, 100, 33, 22, 32, 3, 40, 2, 96, 65, 1, 70, 13, 3, 2, 64, 32, 2, 32, 22, 167, 34, 4, 77, 32, 22, 66, 128, 128, 128, 128, 240, 31, 131, 66, 128, 128, 128, 128, 32, 82, 114, 13, 0, 32, 13, 40, 2, 0, 34, 9, 65, 7, 75, 13, 0, 65, 8, 32, 9, 107, 34, 5, 32, 2, 32, 4, 107, 34, 6, 32, 6, 32, 5, 75, 27, 34, 6, 32, 4, 106, 34, 5, 32, 6, 73, 13, 5, 32, 5, 32, 2, 75, 13, 6, 32, 16, 32, 9, 32, 6, 16, 75, 32, 0, 40, 2, 80, 32, 13, 40, 2, 0, 106, 32, 1, 32, 4, 106, 32, 6, 16, 121, 26, 32, 13, 32, 13, 40, 2, 0, 32, 6, 106, 54, 2, 0, 32, 3, 32, 5, 54, 2, 4, 32, 3, 65, 0, 54, 2, 0, 32, 5, 33, 4, 12, 2, 11, 32, 3, 65, 0, 54, 2, 0, 11, 32, 3, 32, 4, 54, 2, 4, 11, 32, 4, 69, 4, 64, 65, 28, 65, 1, 16, 149, 1, 34, 0, 69, 13, 5, 32, 0, 65, 24, 106, 65, 244, 128, 192, 0, 40, 0, 0, 54, 0, 0, 32, 0, 65, 16, 106, 65, 236, 128, 192, 0, 41, 0, 0, 55, 0, 0, 32, 0, 65, 8, 106, 65, 228, 128, 192, 0, 41, 0, 0, 55, 0, 0, 32, 0, 65, 220, 128, 192, 0, 41, 0, 0, 55, 0, 0, 65, 12, 65, 4, 16, 149, 1, 34, 1, 69, 13, 6, 32, 1, 66, 156, 128, 128, 128, 192, 3, 55, 2, 4, 32, 1, 32, 0, 54, 2, 0, 65, 14, 32, 1, 65, 200, 132, 192, 0, 16, 107, 34, 23, 66, 8, 136, 33, 22, 32, 23, 167, 33, 14, 12, 11, 11, 32, 2, 32, 4, 73, 13, 6, 32, 1, 32, 4, 106, 33, 1, 32, 2, 32, 4, 107, 33, 2, 12, 8, 11, 32, 3, 32, 3, 41, 3, 96, 55, 2, 4, 32, 3, 65, 1, 54, 2, 0, 12, 6, 11, 32, 3, 65, 1, 54, 2, 0, 32, 3, 32, 22, 55, 2, 4, 12, 5, 11, 32, 22, 167, 32, 5, 65, 228, 129, 192, 0, 16, 100, 0, 11, 32, 5, 32, 2, 65, 228, 129, 192, 0, 16, 99, 0, 11, 65, 28, 65, 1, 16, 165, 1, 0, 11, 65, 12, 65, 4, 16, 165, 1, 0, 11, 32, 4, 32, 2, 65, 204, 128, 192, 0, 16, 101, 0, 11, 32, 18, 16, 133, 1, 65, 255, 1, 113, 65, 15, 71, 4, 64, 32, 3, 53, 0, 5, 32, 3, 65, 9, 106, 51, 0, 0, 32, 3, 65, 11, 106, 49, 0, 0, 66, 16, 134, 132, 66, 32, 134, 132, 33, 22, 32, 3, 45, 0, 4, 33, 14, 12, 3, 11, 32, 3, 40, 2, 0, 65, 1, 71, 13, 0, 32, 3, 45, 0, 4, 65, 2, 73, 13, 0, 32, 3, 40, 2, 8, 34, 4, 40, 2, 0, 32, 4, 40, 2, 4, 40, 2, 0, 17, 2, 0, 32, 4, 40, 2, 4, 34, 5, 40, 2, 4, 34, 6, 4, 64, 32, 4, 40, 2, 0, 32, 6, 32, 5, 40, 2, 8, 16, 156, 1, 11, 32, 3, 40, 2, 8, 65, 12, 65, 4, 16, 156, 1, 11, 32, 2, 13, 0, 11, 11, 32, 3, 65, 144, 1, 106, 36, 0, 32, 14, 173, 66, 255, 1, 131, 32, 22, 66, 8, 134, 132, 11, 165, 9, 2, 5, 127, 1, 126, 35, 0, 65, 240, 3, 107, 34, 3, 36, 0, 32, 3, 65, 216, 2, 106, 16, 124, 32, 3, 65, 248, 2, 106, 34, 4, 65, 0, 54, 2, 0, 32, 3, 66, 1, 55, 3, 240, 2, 32, 3, 65, 168, 1, 106, 65, 0, 16, 136, 1, 32, 3, 65, 32, 106, 32, 4, 41, 3, 0, 55, 3, 0, 32, 3, 65, 24, 106, 32, 3, 41, 3, 240, 2, 55, 3, 0, 32, 3, 65, 16, 106, 32, 3, 65, 232, 2, 106, 41, 3, 0, 55, 3, 0, 32, 3, 65, 8, 106, 32, 3, 65, 224, 2, 106, 41, 3, 0, 55, 3, 0, 32, 3, 32, 3, 41, 3, 216, 2, 55, 3, 0, 2, 64, 2, 64, 2, 64, 65, 128, 128, 2, 65, 1, 16, 149, 1, 34, 4, 4, 64, 32, 3, 65, 196, 0, 106, 66, 128, 128, 2, 55, 2, 0, 32, 3, 65, 56, 106, 32, 3, 65, 184, 1, 106, 41, 3, 0, 55, 3, 0, 32, 3, 65, 48, 106, 32, 3, 65, 176, 1, 106, 41, 3, 0, 55, 3, 0, 32, 3, 32, 3, 41, 3, 168, 1, 55, 3, 40, 32, 3, 32, 4, 54, 2, 64, 65, 8, 65, 1, 16, 149, 1, 34, 4, 69, 13, 1, 32, 3, 65, 148, 1, 106, 65, 0, 54, 2, 0, 32, 3, 65, 212, 0, 106, 66, 8, 55, 2, 0, 32, 3, 66, 1, 55, 2, 140, 1, 32, 3, 65, 0, 54, 2, 92, 32, 3, 32, 4, 54, 2, 80, 32, 3, 32, 1, 32, 2, 16, 10, 33, 8, 32, 3, 65, 168, 1, 106, 32, 3, 65, 152, 1, 16, 121, 26, 2, 127, 2, 64, 32, 3, 2, 127, 32, 8, 167, 34, 4, 65, 255, 1, 113, 65, 3, 71, 4, 64, 32, 3, 65, 163, 1, 106, 32, 8, 66, 56, 136, 60, 0, 0, 32, 3, 65, 161, 1, 106, 32, 8, 66, 40, 136, 61, 0, 0, 32, 3, 32, 4, 58, 0, 156, 1, 32, 3, 65, 1, 54, 2, 152, 1, 32, 3, 32, 8, 66, 8, 136, 62, 0, 157, 1, 2, 64, 32, 3, 40, 2, 192, 1, 69, 13, 0, 32, 3, 65, 168, 1, 106, 16, 82, 34, 8, 167, 65, 3, 113, 65, 2, 70, 4, 64, 32, 8, 66, 32, 136, 167, 34, 4, 40, 2, 0, 32, 4, 40, 2, 4, 40, 2, 0, 17, 2, 0, 32, 4, 40, 2, 4, 34, 5, 40, 2, 4, 34, 6, 4, 64, 32, 4, 40, 2, 0, 32, 6, 32, 5, 40, 2, 8, 16, 156, 1, 11, 32, 4, 65, 12, 65, 4, 16, 156, 1, 11, 32, 3, 40, 2, 192, 1, 34, 4, 69, 13, 0, 32, 3, 40, 2, 196, 1, 34, 5, 69, 13, 0, 32, 4, 32, 5, 65, 1, 16, 156, 1, 11, 32, 3, 65, 224, 1, 106, 40, 2, 0, 65, 244, 213, 2, 65, 4, 16, 156, 1, 32, 3, 65, 236, 1, 106, 40, 2, 0, 34, 4, 4, 64, 32, 3, 40, 2, 232, 1, 32, 4, 65, 1, 16, 156, 1, 11, 32, 3, 65, 252, 1, 106, 40, 2, 0, 34, 4, 4, 64, 32, 3, 40, 2, 248, 1, 32, 4, 65, 1, 16, 156, 1, 11, 2, 64, 32, 3, 40, 2, 132, 2, 69, 13, 0, 2, 64, 32, 3, 65, 136, 2, 106, 40, 2, 0, 34, 4, 69, 13, 0, 32, 3, 65, 140, 2, 106, 40, 2, 0, 34, 5, 69, 13, 0, 32, 4, 32, 5, 65, 1, 16, 156, 1, 11, 2, 64, 32, 3, 65, 148, 2, 106, 40, 2, 0, 34, 4, 69, 13, 0, 32, 3, 65, 152, 2, 106, 40, 2, 0, 34, 5, 69, 13, 0, 32, 4, 32, 5, 65, 1, 16, 156, 1, 11, 32, 3, 65, 160, 2, 106, 40, 2, 0, 34, 4, 69, 13, 0, 32, 3, 65, 164, 2, 106, 40, 2, 0, 34, 5, 69, 13, 0, 32, 4, 32, 5, 65, 1, 16, 156, 1, 11, 32, 3, 65, 184, 2, 106, 40, 2, 0, 34, 4, 4, 64, 32, 3, 40, 2, 180, 2, 32, 4, 65, 1, 16, 156, 1, 11, 32, 3, 65, 152, 1, 106, 65, 4, 114, 12, 1, 11, 32, 3, 65, 216, 2, 106, 32, 3, 65, 168, 1, 106, 65, 152, 1, 16, 121, 26, 32, 3, 65, 152, 1, 106, 32, 3, 65, 216, 2, 106, 16, 54, 32, 3, 40, 2, 152, 1, 65, 1, 71, 13, 1, 32, 3, 65, 152, 1, 106, 65, 4, 114, 11, 41, 2, 0, 55, 3, 192, 2, 32, 3, 65, 192, 2, 106, 16, 133, 1, 33, 4, 32, 3, 65, 180, 1, 106, 65, 9, 54, 2, 0, 32, 3, 65, 236, 2, 106, 65, 2, 54, 2, 0, 32, 3, 65, 10, 54, 2, 172, 1, 32, 3, 66, 2, 55, 2, 220, 2, 32, 3, 65, 244, 132, 192, 0, 54, 2, 216, 2, 32, 3, 32, 4, 58, 0, 215, 2, 32, 3, 32, 3, 65, 192, 2, 106, 54, 2, 176, 1, 32, 3, 32, 3, 65, 215, 2, 106, 54, 2, 168, 1, 32, 3, 32, 3, 65, 168, 1, 106, 54, 2, 232, 2, 32, 3, 65, 200, 2, 106, 32, 3, 65, 216, 2, 106, 16, 51, 32, 3, 40, 2, 200, 2, 34, 5, 32, 3, 40, 2, 208, 2, 16, 0, 33, 4, 32, 3, 40, 2, 204, 2, 34, 6, 4, 64, 32, 5, 32, 6, 65, 1, 16, 156, 1, 11, 32, 3, 45, 0, 192, 2, 65, 2, 79, 4, 64, 32, 3, 40, 2, 196, 2, 34, 5, 40, 2, 0, 32, 5, 40, 2, 4, 40, 2, 0, 17, 2, 0, 32, 5, 40, 2, 4, 34, 6, 40, 2, 4, 34, 7, 4, 64, 32, 5, 40, 2, 0, 32, 7, 32, 6, 40, 2, 8, 16, 156, 1, 11, 32, 3, 40, 2, 196, 2, 65, 12, 65, 4, 16, 156, 1, 11, 65, 1, 12, 1, 11, 32, 3, 65, 160, 1, 106, 41, 3, 0, 33, 8, 32, 3, 40, 2, 156, 1, 33, 4, 65, 0, 11, 32, 2, 4, 64, 32, 1, 32, 2, 65, 1, 16, 156, 1, 11, 13, 2, 2, 64, 32, 8, 167, 34, 5, 32, 8, 66, 32, 136, 167, 34, 2, 77, 4, 64, 32, 4, 33, 1, 12, 1, 11, 32, 2, 69, 4, 64, 65, 1, 33, 1, 32, 4, 32, 5, 65, 1, 16, 156, 1, 12, 1, 11, 32, 4, 32, 5, 32, 2, 16, 143, 1, 34, 1, 69, 13, 4, 11, 32, 0, 32, 2, 54, 2, 4, 32, 0, 32, 1, 54, 2, 0, 32, 3, 65, 240, 3, 106, 36, 0, 15, 11, 65, 128, 128, 2, 65, 1, 16, 165, 1, 0, 11, 65, 8, 65, 1, 16, 165, 1, 0, 11, 32, 4, 16, 168, 1, 0, 11, 32, 2, 65, 1, 16, 165, 1, 0, 11, 169, 8, 1, 6, 127, 35, 0, 65, 240, 0, 107, 34, 5, 36, 0, 32, 5, 32, 3, 54, 2, 12, 32, 5, 32, 2, 54, 2, 8, 65, 1, 33, 6, 32, 1, 33, 7, 2, 64, 32, 1, 65, 129, 2, 73, 13, 0, 65, 0, 32, 1, 107, 33, 9, 65, 128, 2, 33, 8, 3, 64, 2, 64, 32, 8, 32, 1, 79, 13, 0, 65, 0, 33, 6, 32, 0, 32, 8, 106, 44, 0, 0, 65, 191, 127, 76, 13, 0, 32, 8, 33, 7, 12, 2, 11, 32, 8, 65, 127, 106, 33, 7, 65, 0, 33, 6, 32, 8, 65, 1, 70, 13, 1, 32, 8, 32, 9, 106, 32, 7, 33, 8, 65, 1, 71, 13, 0, 11, 11, 32, 5, 32, 7, 54, 2, 20, 32, 5, 32, 0, 54, 2, 16, 32, 5, 65, 0, 65, 5, 32, 6, 27, 54, 2, 28, 32, 5, 65, 228, 196, 193, 0, 65, 136, 203, 193, 0, 32, 6, 27, 54, 2, 24, 2, 64, 2, 127, 2, 64, 2, 64, 32, 2, 32, 1, 75, 34, 6, 32, 3, 32, 1, 75, 114, 69, 4, 64, 32, 2, 32, 3, 75, 13, 1, 2, 64, 32, 2, 69, 32, 1, 32, 2, 70, 114, 69, 4, 64, 32, 1, 32, 2, 77, 13, 1, 32, 0, 32, 2, 106, 44, 0, 0, 65, 64, 72, 13, 1, 11, 32, 3, 33, 2, 11, 32, 5, 32, 2, 54, 2, 32, 32, 2, 65, 0, 32, 1, 32, 2, 71, 27, 69, 4, 64, 32, 2, 33, 6, 12, 3, 11, 32, 1, 65, 1, 106, 33, 3, 3, 64, 2, 64, 32, 2, 32, 1, 79, 13, 0, 32, 0, 32, 2, 106, 44, 0, 0, 65, 64, 72, 13, 0, 32, 2, 33, 6, 32, 5, 65, 36, 106, 12, 5, 11, 32, 2, 65, 127, 106, 33, 6, 32, 2, 65, 1, 70, 13, 3, 32, 2, 32, 3, 70, 32, 6, 33, 2, 69, 13, 0, 11, 12, 2, 11, 32, 5, 32, 2, 32, 3, 32, 6, 27, 54, 2, 40, 32, 5, 65, 196, 0, 106, 65, 3, 54, 2, 0, 32, 5, 65, 220, 0, 106, 65, 62, 54, 2, 0, 32, 5, 65, 212, 0, 106, 65, 62, 54, 2, 0, 32, 5, 66, 3, 55, 2, 52, 32, 5, 65, 176, 203, 193, 0, 54, 2, 48, 32, 5, 65, 61, 54, 2, 76, 32, 5, 32, 5, 65, 200, 0, 106, 54, 2, 64, 32, 5, 32, 5, 65, 24, 106, 54, 2, 88, 32, 5, 32, 5, 65, 16, 106, 54, 2, 80, 32, 5, 32, 5, 65, 40, 106, 54, 2, 72, 12, 3, 11, 32, 5, 65, 228, 0, 106, 65, 62, 54, 2, 0, 32, 5, 65, 220, 0, 106, 65, 62, 54, 2, 0, 32, 5, 65, 212, 0, 106, 65, 61, 54, 2, 0, 32, 5, 65, 196, 0, 106, 65, 4, 54, 2, 0, 32, 5, 66, 4, 55, 2, 52, 32, 5, 65, 236, 203, 193, 0, 54, 2, 48, 32, 5, 65, 61, 54, 2, 76, 32, 5, 32, 5, 65, 200, 0, 106, 54, 2, 64, 32, 5, 32, 5, 65, 24, 106, 54, 2, 96, 32, 5, 32, 5, 65, 16, 106, 54, 2, 88, 32, 5, 32, 5, 65, 12, 106, 54, 2, 80, 32, 5, 32, 5, 65, 8, 106, 54, 2, 72, 12, 2, 11, 32, 5, 65, 36, 106, 11, 33, 8, 2, 64, 32, 1, 32, 6, 70, 13, 0, 65, 1, 33, 3, 65, 0, 33, 9, 2, 64, 32, 0, 32, 6, 106, 34, 7, 44, 0, 0, 34, 2, 65, 0, 78, 4, 64, 32, 5, 32, 2, 65, 255, 1, 113, 54, 2, 36, 32, 5, 65, 40, 106, 33, 1, 12, 1, 11, 32, 0, 32, 1, 106, 34, 1, 33, 3, 32, 1, 32, 7, 65, 1, 106, 71, 4, 64, 32, 7, 45, 0, 1, 65, 63, 113, 33, 9, 32, 7, 65, 2, 106, 33, 3, 11, 32, 2, 65, 31, 113, 33, 10, 2, 64, 32, 2, 65, 255, 1, 113, 65, 224, 1, 73, 4, 64, 32, 9, 32, 10, 65, 6, 116, 114, 33, 2, 12, 1, 11, 65, 0, 33, 0, 32, 1, 33, 7, 32, 1, 32, 3, 71, 4, 127, 32, 3, 65, 1, 106, 33, 7, 32, 3, 45, 0, 0, 65, 63, 113, 5, 32, 0, 11, 32, 9, 65, 6, 116, 114, 33, 0, 32, 2, 65, 255, 1, 113, 65, 240, 1, 73, 4, 64, 32, 0, 32, 10, 65, 12, 116, 114, 33, 2, 12, 1, 11, 65, 0, 33, 2, 32, 1, 32, 7, 71, 4, 127, 32, 7, 45, 0, 0, 65, 63, 113, 5, 32, 2, 11, 32, 10, 65, 18, 116, 65, 128, 128, 240, 0, 113, 32, 0, 65, 6, 116, 114, 114, 34, 2, 65, 128, 128, 196, 0, 70, 13, 2, 11, 32, 5, 32, 2, 54, 2, 36, 65, 1, 33, 3, 32, 5, 65, 40, 106, 33, 1, 32, 2, 65, 128, 1, 73, 13, 0, 65, 2, 33, 3, 32, 2, 65, 128, 16, 73, 13, 0, 65, 3, 65, 4, 32, 2, 65, 128, 128, 4, 73, 27, 33, 3, 11, 32, 5, 32, 6, 54, 2, 40, 32, 5, 32, 3, 32, 6, 106, 54, 2, 44, 32, 5, 65, 196, 0, 106, 65, 5, 54, 2, 0, 32, 5, 65, 236, 0, 106, 65, 62, 54, 2, 0, 32, 5, 65, 228, 0, 106, 65, 62, 54, 2, 0, 32, 5, 65, 220, 0, 106, 65, 63, 54, 2, 0, 32, 5, 65, 212, 0, 106, 65, 192, 0, 54, 2, 0, 32, 5, 66, 5, 55, 2, 52, 32, 5, 65, 192, 204, 193, 0, 54, 2, 48, 32, 5, 32, 1, 54, 2, 88, 32, 5, 32, 8, 54, 2, 80, 32, 5, 65, 61, 54, 2, 76, 32, 5, 32, 5, 65, 200, 0, 106, 54, 2, 64, 32, 5, 32, 5, 65, 24, 106, 54, 2, 104, 32, 5, 32, 5, 65, 16, 106, 54, 2, 96, 32, 5, 32, 5, 65, 32, 106, 54, 2, 72, 12, 1, 11, 65, 240, 196, 193, 0, 65, 43, 32, 4, 16, 114, 0, 11, 32, 5, 65, 48, 106, 32, 4, 16, 130, 1, 0, 11, 176, 8, 2, 11, 127, 1, 126, 35, 0, 65, 208, 0, 107, 34, 2, 36, 0, 32, 2, 16, 124, 32, 2, 32, 1, 54, 2, 24, 32, 2, 65, 40, 106, 65, 0, 59, 1, 0, 32, 2, 66, 0, 55, 3, 32, 2, 64, 2, 64, 2, 64, 2, 64, 32, 2, 32, 2, 65, 32, 106, 65, 10, 16, 41, 34, 13, 167, 65, 255, 1, 113, 65, 3, 70, 4, 64, 2, 64, 32, 2, 45, 0, 32, 65, 31, 70, 4, 64, 32, 2, 45, 0, 33, 65, 139, 1, 70, 13, 1, 11, 16, 90, 33, 13, 32, 0, 65, 1, 54, 2, 0, 32, 0, 32, 13, 55, 2, 4, 12, 5, 11, 32, 2, 45, 0, 34, 65, 8, 71, 4, 64, 16, 90, 33, 13, 32, 0, 65, 1, 54, 2, 0, 32, 0, 32, 13, 55, 2, 4, 12, 5, 11, 32, 2, 45, 0, 41, 33, 9, 32, 2, 40, 2, 36, 33, 10, 32, 2, 45, 0, 35, 34, 6, 65, 4, 113, 69, 13, 3, 32, 2, 65, 0, 59, 1, 64, 32, 2, 32, 2, 65, 64, 107, 65, 2, 16, 41, 34, 13, 167, 65, 255, 1, 113, 65, 3, 71, 13, 2, 2, 64, 32, 2, 47, 1, 64, 34, 3, 69, 4, 64, 65, 1, 33, 5, 12, 1, 11, 32, 3, 16, 139, 1, 34, 5, 69, 13, 2, 11, 32, 2, 32, 5, 32, 3, 16, 41, 34, 13, 167, 65, 255, 1, 113, 65, 3, 70, 13, 3, 32, 0, 65, 1, 54, 2, 0, 32, 0, 32, 13, 55, 2, 4, 32, 3, 69, 13, 4, 32, 5, 32, 3, 65, 1, 16, 156, 1, 12, 4, 11, 32, 0, 65, 1, 54, 2, 0, 32, 0, 32, 13, 55, 2, 4, 12, 3, 11, 32, 3, 65, 1, 16, 165, 1, 0, 11, 32, 0, 65, 1, 54, 2, 0, 32, 0, 32, 13, 55, 2, 4, 12, 1, 11, 2, 64, 2, 64, 2, 64, 2, 64, 2, 127, 2, 64, 2, 64, 32, 6, 65, 8, 113, 4, 64, 32, 2, 65, 0, 54, 2, 56, 32, 2, 66, 1, 55, 3, 48, 32, 2, 32, 2, 54, 2, 60, 32, 2, 65, 64, 107, 32, 2, 65, 60, 106, 16, 70, 2, 64, 32, 2, 45, 0, 64, 34, 1, 65, 2, 70, 13, 0, 3, 64, 32, 1, 65, 255, 1, 113, 65, 1, 70, 13, 3, 32, 2, 45, 0, 65, 34, 4, 69, 13, 1, 32, 2, 40, 2, 56, 34, 1, 32, 2, 40, 2, 52, 70, 4, 127, 32, 2, 65, 48, 106, 32, 1, 65, 1, 16, 75, 32, 2, 40, 2, 56, 5, 32, 1, 11, 32, 2, 40, 2, 48, 106, 32, 4, 58, 0, 0, 32, 2, 32, 2, 40, 2, 56, 65, 1, 106, 54, 2, 56, 32, 2, 65, 64, 107, 32, 2, 65, 60, 106, 16, 70, 32, 2, 45, 0, 64, 34, 1, 65, 2, 71, 13, 0, 11, 11, 32, 2, 40, 2, 56, 33, 11, 32, 2, 40, 2, 48, 33, 8, 32, 2, 40, 2, 52, 33, 7, 11, 32, 6, 65, 16, 113, 13, 1, 65, 0, 12, 2, 11, 32, 2, 41, 2, 68, 33, 13, 32, 0, 65, 1, 54, 2, 0, 32, 0, 32, 13, 55, 2, 4, 32, 2, 40, 2, 52, 34, 0, 69, 13, 4, 32, 2, 40, 2, 48, 32, 0, 65, 1, 16, 156, 1, 12, 4, 11, 32, 2, 65, 0, 54, 2, 56, 32, 2, 66, 1, 55, 3, 48, 32, 2, 32, 2, 54, 2, 60, 32, 2, 65, 64, 107, 32, 2, 65, 60, 106, 16, 70, 2, 64, 32, 2, 45, 0, 64, 34, 1, 65, 2, 70, 13, 0, 3, 64, 32, 1, 65, 255, 1, 113, 65, 1, 70, 13, 3, 32, 2, 45, 0, 65, 34, 4, 69, 13, 1, 32, 2, 40, 2, 56, 34, 1, 32, 2, 40, 2, 52, 70, 4, 127, 32, 2, 65, 48, 106, 32, 1, 65, 1, 16, 75, 32, 2, 40, 2, 56, 5, 32, 1, 11, 32, 2, 40, 2, 48, 106, 32, 4, 58, 0, 0, 32, 2, 32, 2, 40, 2, 56, 65, 1, 106, 54, 2, 56, 32, 2, 65, 64, 107, 32, 2, 65, 60, 106, 16, 70, 32, 2, 45, 0, 64, 34, 1, 65, 2, 71, 13, 0, 11, 11, 32, 2, 40, 2, 52, 33, 4, 32, 2, 40, 2, 56, 33, 12, 32, 2, 40, 2, 48, 11, 33, 1, 32, 6, 65, 2, 113, 69, 13, 3, 32, 2, 16, 147, 1, 33, 6, 32, 2, 65, 0, 59, 1, 64, 32, 2, 32, 2, 65, 64, 107, 65, 2, 16, 41, 34, 13, 167, 65, 255, 1, 113, 65, 3, 70, 4, 64, 32, 2, 47, 1, 64, 32, 6, 65, 255, 255, 3, 113, 70, 13, 4, 16, 79, 33, 13, 11, 32, 0, 65, 1, 54, 2, 0, 32, 0, 32, 13, 55, 2, 4, 32, 1, 69, 32, 4, 69, 114, 13, 1, 32, 1, 32, 4, 65, 1, 16, 156, 1, 12, 1, 11, 32, 2, 41, 2, 68, 33, 13, 32, 0, 65, 1, 54, 2, 0, 32, 0, 32, 13, 55, 2, 4, 32, 2, 40, 2, 52, 34, 0, 69, 13, 0, 32, 2, 40, 2, 48, 32, 0, 65, 1, 16, 156, 1, 11, 32, 7, 69, 32, 8, 69, 114, 13, 0, 32, 8, 32, 7, 65, 1, 16, 156, 1, 11, 32, 3, 69, 32, 5, 69, 114, 13, 1, 32, 5, 32, 3, 65, 1, 16, 156, 1, 12, 1, 11, 32, 0, 32, 5, 54, 2, 4, 32, 0, 65, 0, 54, 2, 0, 32, 0, 65, 44, 106, 32, 9, 58, 0, 0, 32, 0, 65, 40, 106, 32, 10, 54, 2, 0, 32, 0, 65, 36, 106, 32, 12, 54, 2, 0, 32, 0, 65, 32, 106, 32, 4, 54, 2, 0, 32, 0, 65, 28, 106, 32, 1, 54, 2, 0, 32, 0, 65, 24, 106, 32, 11, 54, 2, 0, 32, 0, 65, 20, 106, 32, 7, 54, 2, 0, 32, 0, 65, 16, 106, 32, 8, 54, 2, 0, 32, 0, 65, 12, 106, 32, 3, 54, 2, 0, 32, 0, 65, 8, 106, 32, 3, 54, 2, 0, 11, 32, 2, 65, 208, 0, 106, 36, 0, 11, 152, 7, 1, 10, 127, 32, 0, 40, 2, 16, 33, 3, 2, 64, 2, 64, 2, 64, 32, 0, 40, 2, 8, 34, 12, 65, 1, 70, 4, 64, 32, 3, 65, 1, 71, 13, 2, 12, 1, 11, 32, 3, 65, 1, 70, 13, 0, 12, 2, 11, 32, 1, 32, 2, 106, 33, 3, 2, 64, 2, 64, 32, 0, 65, 20, 106, 40, 2, 0, 34, 8, 69, 4, 64, 32, 1, 33, 4, 12, 1, 11, 32, 1, 33, 4, 3, 64, 32, 3, 32, 4, 34, 7, 70, 13, 2, 32, 7, 65, 1, 106, 33, 4, 2, 64, 32, 7, 44, 0, 0, 34, 6, 65, 127, 74, 13, 0, 32, 6, 65, 255, 1, 113, 33, 9, 2, 127, 32, 3, 32, 4, 70, 4, 64, 65, 0, 33, 10, 32, 3, 12, 1, 11, 32, 7, 45, 0, 1, 65, 63, 113, 33, 10, 32, 7, 65, 2, 106, 34, 4, 11, 33, 6, 32, 9, 65, 224, 1, 73, 13, 0, 2, 127, 32, 3, 32, 6, 70, 4, 64, 65, 0, 33, 11, 32, 3, 12, 1, 11, 32, 6, 45, 0, 0, 65, 63, 113, 33, 11, 32, 6, 65, 1, 106, 34, 4, 11, 33, 6, 32, 9, 65, 240, 1, 73, 13, 0, 32, 3, 32, 6, 70, 4, 127, 65, 0, 5, 32, 6, 65, 1, 106, 33, 4, 32, 6, 45, 0, 0, 65, 63, 113, 11, 32, 9, 65, 18, 116, 65, 128, 128, 240, 0, 113, 32, 10, 65, 12, 116, 114, 32, 11, 65, 6, 116, 114, 114, 65, 128, 128, 196, 0, 70, 13, 3, 11, 32, 4, 32, 7, 107, 32, 5, 106, 33, 5, 32, 8, 65, 127, 106, 34, 8, 13, 0, 11, 11, 32, 3, 32, 4, 70, 13, 0, 2, 64, 32, 4, 44, 0, 0, 34, 7, 65, 127, 74, 13, 0, 2, 127, 32, 3, 32, 4, 65, 1, 106, 70, 4, 64, 32, 3, 33, 8, 65, 0, 12, 1, 11, 32, 4, 65, 2, 106, 33, 8, 32, 4, 45, 0, 1, 65, 63, 113, 65, 6, 116, 11, 32, 7, 65, 255, 1, 113, 65, 224, 1, 73, 13, 0, 2, 127, 32, 3, 32, 8, 70, 4, 64, 32, 3, 33, 6, 65, 0, 12, 1, 11, 32, 8, 65, 1, 106, 33, 6, 32, 8, 45, 0, 0, 65, 63, 113, 11, 32, 7, 65, 255, 1, 113, 65, 240, 1, 73, 13, 0, 32, 7, 65, 255, 1, 113, 33, 7, 114, 33, 4, 32, 3, 32, 6, 70, 4, 127, 65, 0, 5, 32, 6, 45, 0, 0, 65, 63, 113, 11, 32, 7, 65, 18, 116, 65, 128, 128, 240, 0, 113, 32, 4, 65, 6, 116, 114, 114, 65, 128, 128, 196, 0, 70, 13, 1, 11, 2, 64, 32, 5, 69, 32, 2, 32, 5, 70, 114, 69, 4, 64, 65, 0, 33, 3, 32, 5, 32, 2, 79, 13, 1, 32, 1, 32, 5, 106, 44, 0, 0, 65, 64, 72, 13, 1, 11, 32, 1, 33, 3, 11, 32, 5, 32, 2, 32, 3, 27, 33, 2, 32, 3, 32, 1, 32, 3, 27, 33, 1, 11, 32, 12, 65, 1, 70, 13, 0, 12, 1, 11, 2, 64, 32, 2, 4, 64, 65, 0, 33, 4, 32, 2, 33, 5, 32, 1, 33, 3, 3, 64, 32, 4, 32, 3, 45, 0, 0, 65, 192, 1, 113, 65, 128, 1, 71, 106, 33, 4, 32, 3, 65, 1, 106, 33, 3, 32, 5, 65, 127, 106, 34, 5, 13, 0, 11, 32, 4, 32, 0, 40, 2, 12, 34, 6, 79, 13, 2, 65, 0, 33, 4, 32, 2, 33, 5, 32, 1, 33, 3, 3, 64, 32, 4, 32, 3, 45, 0, 0, 65, 192, 1, 113, 65, 128, 1, 71, 106, 33, 4, 32, 3, 65, 1, 106, 33, 3, 32, 5, 65, 127, 106, 34, 5, 13, 0, 11, 12, 1, 11, 65, 0, 33, 4, 32, 0, 40, 2, 12, 34, 6, 13, 0, 12, 1, 11, 65, 0, 33, 3, 32, 6, 32, 4, 107, 34, 4, 33, 5, 2, 64, 2, 64, 2, 64, 65, 0, 32, 0, 45, 0, 32, 34, 6, 32, 6, 65, 3, 70, 27, 65, 3, 113, 65, 1, 107, 14, 3, 1, 0, 1, 2, 11, 32, 4, 65, 1, 118, 33, 3, 32, 4, 65, 1, 106, 65, 1, 118, 33, 5, 12, 1, 11, 65, 0, 33, 5, 32, 4, 33, 3, 11, 32, 3, 65, 1, 106, 33, 3, 2, 127, 2, 64, 3, 64, 32, 3, 65, 127, 106, 34, 3, 4, 64, 32, 0, 40, 2, 24, 32, 0, 40, 2, 4, 32, 0, 40, 2, 28, 40, 2, 16, 17, 0, 0, 69, 13, 1, 12, 2, 11, 11, 32, 0, 40, 2, 4, 33, 4, 65, 1, 32, 0, 40, 2, 24, 32, 1, 32, 2, 32, 0, 40, 2, 28, 40, 2, 12, 17, 1, 0, 13, 1, 26, 32, 5, 65, 1, 106, 33, 3, 32, 0, 40, 2, 28, 33, 1, 32, 0, 40, 2, 24, 33, 0, 3, 64, 32, 3, 65, 127, 106, 34, 3, 69, 4, 64, 65, 0, 15, 11, 32, 0, 32, 4, 32, 1, 40, 2, 16, 17, 0, 0, 69, 13, 0, 11, 11, 65, 1, 11, 15, 11, 32, 0, 40, 2, 24, 32, 1, 32, 2, 32, 0, 65, 28, 106, 40, 2, 0, 40, 2, 12, 17, 1, 0, 11, 153, 8, 2, 11, 127, 1, 126, 65, 1, 33, 9, 2, 64, 2, 64, 32, 2, 40, 2, 24, 65, 34, 32, 2, 65, 28, 106, 40, 2, 0, 40, 2, 16, 17, 0, 0, 13, 0, 2, 64, 32, 1, 69, 4, 64, 12, 1, 11, 32, 0, 32, 1, 106, 33, 10, 32, 0, 34, 6, 33, 12, 3, 64, 2, 64, 32, 6, 65, 1, 106, 33, 5, 2, 64, 2, 64, 32, 6, 44, 0, 0, 34, 7, 65, 0, 78, 4, 64, 32, 7, 65, 255, 1, 113, 33, 4, 12, 1, 11, 2, 127, 32, 5, 32, 10, 70, 4, 64, 65, 0, 33, 4, 32, 10, 12, 1, 11, 32, 6, 45, 0, 1, 65, 63, 113, 33, 4, 32, 6, 65, 2, 106, 34, 5, 11, 33, 6, 32, 7, 65, 31, 113, 33, 11, 32, 7, 65, 255, 1, 113, 34, 13, 65, 224, 1, 73, 4, 64, 32, 4, 32, 11, 65, 6, 116, 114, 33, 4, 12, 1, 11, 2, 127, 32, 6, 32, 10, 70, 4, 64, 65, 0, 33, 9, 32, 10, 12, 1, 11, 32, 6, 45, 0, 0, 65, 63, 113, 33, 9, 32, 6, 65, 1, 106, 34, 5, 11, 33, 7, 32, 9, 32, 4, 65, 6, 116, 114, 33, 4, 32, 13, 65, 240, 1, 73, 4, 64, 32, 4, 32, 11, 65, 12, 116, 114, 33, 4, 12, 1, 11, 2, 127, 32, 7, 32, 10, 70, 4, 64, 32, 5, 33, 6, 65, 0, 12, 1, 11, 32, 7, 65, 1, 106, 33, 6, 32, 7, 45, 0, 0, 65, 63, 113, 11, 32, 11, 65, 18, 116, 65, 128, 128, 240, 0, 113, 32, 4, 65, 6, 116, 114, 114, 34, 4, 65, 128, 128, 196, 0, 71, 13, 1, 12, 2, 11, 32, 5, 33, 6, 11, 65, 2, 33, 5, 65, 244, 0, 33, 7, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 32, 4, 65, 119, 106, 14, 31, 5, 1, 3, 3, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 3, 3, 3, 3, 4, 2, 11, 65, 242, 0, 33, 7, 12, 4, 11, 65, 238, 0, 33, 7, 12, 3, 11, 32, 4, 65, 220, 0, 70, 13, 1, 11, 32, 4, 16, 40, 69, 4, 64, 32, 4, 16, 21, 13, 3, 11, 32, 4, 65, 1, 114, 103, 65, 2, 118, 65, 7, 115, 173, 66, 128, 128, 128, 128, 208, 0, 132, 33, 14, 65, 3, 33, 5, 11, 32, 4, 33, 7, 11, 2, 64, 2, 64, 32, 8, 32, 3, 73, 13, 0, 32, 3, 69, 32, 1, 32, 3, 70, 114, 69, 4, 64, 32, 3, 32, 1, 79, 13, 1, 32, 0, 32, 3, 106, 44, 0, 0, 65, 191, 127, 76, 13, 1, 11, 32, 8, 69, 32, 1, 32, 8, 70, 114, 69, 4, 64, 32, 8, 32, 1, 79, 13, 1, 32, 0, 32, 8, 106, 44, 0, 0, 65, 191, 127, 76, 13, 1, 11, 32, 2, 40, 2, 24, 32, 0, 32, 3, 106, 32, 8, 32, 3, 107, 32, 2, 40, 2, 28, 40, 2, 12, 17, 1, 0, 69, 13, 1, 65, 1, 15, 11, 32, 0, 32, 1, 32, 3, 32, 8, 65, 160, 201, 193, 0, 16, 12, 0, 11, 3, 64, 32, 5, 33, 11, 65, 1, 33, 9, 65, 220, 0, 33, 3, 65, 1, 33, 5, 2, 64, 2, 126, 2, 64, 2, 64, 2, 64, 2, 64, 32, 11, 65, 1, 107, 14, 3, 1, 5, 0, 2, 11, 2, 64, 2, 64, 2, 64, 2, 64, 32, 14, 66, 32, 136, 167, 65, 255, 1, 113, 65, 1, 107, 14, 5, 3, 2, 1, 0, 6, 5, 11, 32, 14, 66, 255, 255, 255, 255, 143, 96, 131, 66, 128, 128, 128, 128, 48, 132, 33, 14, 65, 3, 33, 5, 65, 245, 0, 33, 3, 12, 7, 11, 32, 14, 66, 255, 255, 255, 255, 143, 96, 131, 66, 128, 128, 128, 128, 32, 132, 33, 14, 65, 3, 33, 5, 65, 251, 0, 33, 3, 12, 6, 11, 65, 48, 65, 215, 0, 32, 7, 32, 14, 167, 34, 5, 65, 2, 116, 65, 28, 113, 118, 65, 15, 113, 34, 3, 65, 10, 73, 27, 32, 3, 106, 33, 3, 32, 14, 66, 255, 255, 255, 255, 143, 96, 131, 66, 128, 128, 128, 128, 16, 132, 32, 5, 69, 13, 4, 26, 32, 14, 66, 127, 124, 66, 255, 255, 255, 255, 15, 131, 32, 14, 66, 128, 128, 128, 128, 112, 131, 132, 12, 4, 11, 32, 14, 66, 255, 255, 255, 255, 143, 96, 131, 33, 14, 65, 3, 33, 5, 65, 253, 0, 33, 3, 12, 4, 11, 65, 0, 33, 5, 32, 7, 33, 3, 12, 3, 11, 2, 127, 65, 1, 32, 4, 65, 128, 1, 73, 13, 0, 26, 65, 2, 32, 4, 65, 128, 16, 73, 13, 0, 26, 65, 3, 65, 4, 32, 4, 65, 128, 128, 4, 73, 27, 11, 32, 8, 106, 33, 3, 12, 4, 11, 32, 14, 66, 255, 255, 255, 255, 143, 96, 131, 66, 128, 128, 128, 128, 192, 0, 132, 11, 33, 14, 65, 3, 33, 5, 11, 32, 2, 40, 2, 24, 32, 3, 32, 2, 40, 2, 28, 40, 2, 16, 17, 0, 0, 69, 13, 0, 11, 12, 4, 11, 32, 8, 32, 12, 107, 32, 6, 106, 33, 8, 32, 6, 33, 12, 32, 6, 32, 10, 71, 13, 1, 11, 11, 32, 3, 69, 32, 1, 32, 3, 70, 114, 13, 0, 32, 3, 32, 1, 79, 13, 2, 32, 0, 32, 3, 106, 44, 0, 0, 65, 191, 127, 76, 13, 2, 11, 65, 1, 33, 9, 32, 2, 40, 2, 24, 32, 0, 32, 3, 106, 32, 1, 32, 3, 107, 32, 2, 40, 2, 28, 40, 2, 12, 17, 1, 0, 13, 0, 32, 2, 40, 2, 24, 65, 34, 32, 2, 40, 2, 28, 40, 2, 16, 17, 0, 0, 33, 9, 11, 32, 9, 15, 11, 32, 0, 32, 1, 32, 3, 32, 1, 65, 176, 201, 193, 0, 16, 12, 0, 11, 229, 7, 2, 11, 127, 2, 126, 32, 1, 65, 33, 106, 45, 0, 0, 33, 11, 32, 1, 65, 24, 106, 40, 2, 0, 33, 8, 32, 1, 65, 16, 106, 40, 2, 0, 33, 6, 32, 1, 40, 2, 28, 33, 9, 32, 1, 45, 0, 32, 33, 12, 32, 1, 40, 2, 20, 33, 3, 32, 1, 40, 2, 12, 33, 5, 32, 1, 41, 2, 4, 33, 14, 32, 1, 40, 2, 0, 33, 7, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 65, 10, 16, 139, 1, 34, 1, 4, 64, 32, 0, 32, 1, 54, 2, 0, 32, 0, 65, 4, 106, 34, 10, 66, 138, 128, 128, 128, 160, 1, 55, 2, 0, 2, 64, 32, 7, 69, 13, 0, 32, 0, 65, 10, 65, 1, 16, 75, 32, 0, 40, 2, 0, 32, 0, 65, 8, 106, 34, 1, 40, 2, 0, 106, 32, 14, 66, 32, 136, 34, 15, 60, 0, 0, 32, 1, 32, 1, 40, 2, 0, 65, 1, 106, 34, 4, 54, 2, 0, 32, 10, 40, 2, 0, 32, 4, 70, 4, 127, 32, 0, 32, 4, 65, 1, 16, 75, 32, 1, 40, 2, 0, 5, 32, 4, 11, 32, 0, 40, 2, 0, 106, 32, 14, 66, 40, 136, 60, 0, 0, 32, 1, 32, 1, 40, 2, 0, 65, 1, 106, 34, 4, 54, 2, 0, 32, 0, 32, 4, 32, 15, 167, 34, 4, 16, 75, 32, 0, 40, 2, 0, 32, 1, 40, 2, 0, 106, 32, 7, 32, 4, 16, 121, 26, 32, 1, 32, 1, 40, 2, 0, 32, 4, 106, 54, 2, 0, 65, 4, 33, 4, 32, 14, 167, 34, 1, 69, 13, 0, 32, 7, 32, 1, 65, 1, 16, 156, 1, 11, 2, 64, 32, 5, 69, 13, 0, 32, 0, 32, 0, 65, 8, 106, 34, 1, 40, 2, 0, 32, 6, 16, 75, 32, 4, 65, 8, 114, 33, 4, 32, 6, 69, 4, 64, 32, 5, 65, 0, 58, 0, 0, 12, 1, 11, 32, 5, 32, 6, 106, 33, 7, 32, 1, 40, 2, 0, 34, 10, 32, 0, 40, 2, 0, 106, 33, 13, 65, 0, 33, 1, 3, 64, 32, 1, 32, 13, 106, 32, 1, 32, 5, 106, 45, 0, 0, 58, 0, 0, 32, 6, 32, 1, 65, 1, 106, 34, 1, 71, 13, 0, 11, 32, 0, 65, 8, 106, 32, 7, 32, 10, 32, 5, 107, 106, 54, 2, 0, 32, 5, 65, 0, 58, 0, 0, 32, 6, 69, 13, 0, 32, 5, 32, 6, 65, 1, 16, 156, 1, 11, 2, 64, 32, 3, 69, 13, 0, 32, 0, 32, 0, 65, 8, 106, 34, 1, 40, 2, 0, 32, 8, 16, 75, 32, 4, 65, 16, 114, 33, 4, 32, 8, 69, 4, 64, 32, 3, 65, 0, 58, 0, 0, 12, 1, 11, 32, 3, 32, 8, 106, 33, 5, 32, 1, 40, 2, 0, 34, 6, 32, 0, 40, 2, 0, 106, 33, 7, 65, 0, 33, 1, 3, 64, 32, 1, 32, 7, 106, 32, 1, 32, 3, 106, 45, 0, 0, 58, 0, 0, 32, 8, 32, 1, 65, 1, 106, 34, 1, 71, 13, 0, 11, 32, 0, 65, 8, 106, 32, 5, 32, 6, 32, 3, 107, 106, 54, 2, 0, 32, 3, 65, 0, 58, 0, 0, 32, 8, 69, 13, 0, 32, 3, 32, 8, 65, 1, 16, 156, 1, 11, 32, 0, 65, 8, 106, 34, 1, 40, 2, 0, 69, 13, 1, 32, 0, 40, 2, 0, 65, 31, 58, 0, 0, 32, 1, 40, 2, 0, 34, 1, 65, 1, 77, 13, 2, 32, 0, 40, 2, 0, 65, 139, 1, 58, 0, 1, 32, 0, 65, 8, 106, 34, 1, 40, 2, 0, 34, 3, 65, 2, 77, 13, 3, 32, 0, 40, 2, 0, 65, 8, 58, 0, 2, 32, 1, 40, 2, 0, 34, 1, 65, 3, 77, 13, 4, 32, 0, 40, 2, 0, 32, 4, 58, 0, 3, 32, 0, 65, 8, 106, 34, 1, 40, 2, 0, 34, 3, 65, 4, 77, 13, 5, 32, 0, 40, 2, 0, 32, 9, 58, 0, 4, 32, 1, 40, 2, 0, 34, 1, 65, 5, 77, 13, 6, 32, 0, 40, 2, 0, 32, 9, 65, 8, 118, 58, 0, 5, 32, 0, 65, 8, 106, 34, 1, 40, 2, 0, 34, 3, 65, 6, 77, 13, 7, 32, 0, 40, 2, 0, 32, 9, 65, 16, 118, 58, 0, 6, 32, 1, 40, 2, 0, 34, 1, 65, 7, 77, 13, 8, 32, 0, 40, 2, 0, 32, 9, 65, 24, 118, 58, 0, 7, 32, 0, 65, 8, 106, 34, 1, 40, 2, 0, 34, 3, 65, 8, 77, 13, 9, 32, 0, 40, 2, 0, 32, 2, 65, 2, 73, 65, 2, 116, 65, 2, 32, 2, 65, 9, 73, 27, 58, 0, 8, 32, 1, 40, 2, 0, 34, 1, 65, 9, 77, 13, 10, 32, 0, 40, 2, 0, 32, 11, 65, 127, 32, 12, 27, 58, 0, 9, 15, 11, 65, 10, 65, 1, 16, 165, 1, 0, 11, 65, 0, 65, 0, 65, 148, 142, 192, 0, 16, 98, 0, 11, 65, 1, 32, 1, 65, 164, 142, 192, 0, 16, 98, 0, 11, 65, 2, 32, 3, 65, 180, 142, 192, 0, 16, 98, 0, 11, 65, 3, 32, 1, 65, 196, 142, 192, 0, 16, 98, 0, 11, 65, 4, 32, 3, 65, 212, 142, 192, 0, 16, 98, 0, 11, 65, 5, 32, 1, 65, 228, 142, 192, 0, 16, 98, 0, 11, 65, 6, 32, 3, 65, 244, 142, 192, 0, 16, 98, 0, 11, 65, 7, 32, 1, 65, 132, 143, 192, 0, 16, 98, 0, 11, 65, 8, 32, 3, 65, 148, 143, 192, 0, 16, 98, 0, 11, 65, 9, 32, 1, 65, 164, 143, 192, 0, 16, 98, 0, 11, 172, 7, 2, 7, 127, 1, 126, 35, 0, 65, 192, 1, 107, 34, 3, 36, 0, 32, 3, 65, 8, 106, 65, 0, 16, 136, 1, 2, 64, 2, 64, 65, 128, 128, 2, 65, 1, 16, 149, 1, 34, 4, 4, 64, 32, 3, 65, 48, 106, 34, 5, 66, 128, 128, 2, 55, 3, 0, 32, 3, 65, 40, 106, 34, 6, 65, 0, 54, 2, 0, 32, 3, 32, 4, 54, 2, 44, 32, 3, 66, 1, 55, 3, 32, 32, 3, 65, 8, 106, 32, 1, 32, 2, 16, 44, 33, 10, 32, 3, 65, 240, 0, 106, 34, 4, 32, 5, 41, 3, 0, 55, 3, 0, 32, 3, 65, 232, 0, 106, 34, 5, 32, 6, 41, 3, 0, 55, 3, 0, 32, 3, 65, 224, 0, 106, 34, 6, 32, 3, 41, 3, 32, 55, 3, 0, 32, 3, 65, 216, 0, 106, 34, 7, 32, 3, 65, 24, 106, 41, 3, 0, 55, 3, 0, 32, 3, 65, 208, 0, 106, 34, 8, 32, 3, 65, 16, 106, 41, 3, 0, 55, 3, 0, 32, 3, 32, 3, 41, 3, 8, 55, 3, 72, 2, 127, 2, 64, 32, 3, 2, 127, 32, 10, 167, 34, 9, 65, 255, 1, 113, 65, 3, 71, 4, 64, 32, 3, 65, 195, 0, 106, 32, 10, 66, 56, 136, 60, 0, 0, 32, 3, 65, 193, 0, 106, 32, 10, 66, 40, 136, 61, 0, 0, 32, 3, 32, 9, 58, 0, 60, 32, 3, 65, 1, 54, 2, 56, 32, 3, 32, 10, 66, 8, 136, 62, 0, 61, 2, 64, 32, 3, 40, 2, 96, 69, 13, 0, 32, 3, 65, 200, 0, 106, 16, 58, 34, 10, 167, 65, 3, 113, 65, 2, 70, 4, 64, 32, 10, 66, 32, 136, 167, 34, 4, 40, 2, 0, 32, 4, 40, 2, 4, 40, 2, 0, 17, 2, 0, 32, 4, 40, 2, 4, 34, 5, 40, 2, 4, 34, 6, 4, 64, 32, 4, 40, 2, 0, 32, 6, 32, 5, 40, 2, 8, 16, 156, 1, 11, 32, 4, 65, 12, 65, 4, 16, 156, 1, 11, 32, 3, 40, 2, 96, 34, 4, 69, 13, 0, 32, 3, 65, 228, 0, 106, 40, 2, 0, 34, 5, 69, 13, 0, 32, 4, 32, 5, 65, 1, 16, 156, 1, 11, 32, 3, 40, 2, 88, 65, 244, 213, 2, 65, 4, 16, 156, 1, 32, 3, 65, 240, 0, 106, 40, 2, 0, 34, 4, 4, 64, 32, 3, 40, 2, 108, 32, 4, 65, 1, 16, 156, 1, 11, 32, 3, 65, 56, 106, 65, 4, 114, 12, 1, 11, 32, 3, 65, 184, 1, 106, 32, 4, 41, 3, 0, 55, 3, 0, 32, 3, 65, 176, 1, 106, 32, 5, 41, 3, 0, 55, 3, 0, 32, 3, 65, 168, 1, 106, 32, 6, 41, 3, 0, 55, 3, 0, 32, 3, 65, 160, 1, 106, 32, 7, 41, 3, 0, 55, 3, 0, 32, 3, 65, 152, 1, 106, 32, 8, 41, 3, 0, 55, 3, 0, 32, 3, 32, 3, 41, 3, 72, 55, 3, 144, 1, 32, 3, 65, 56, 106, 32, 3, 65, 144, 1, 106, 16, 61, 32, 3, 40, 2, 56, 65, 1, 71, 13, 1, 32, 3, 65, 56, 106, 65, 4, 114, 11, 41, 2, 0, 55, 3, 120, 32, 3, 65, 248, 0, 106, 16, 133, 1, 33, 4, 32, 3, 65, 212, 0, 106, 65, 9, 54, 2, 0, 32, 3, 65, 164, 1, 106, 65, 2, 54, 2, 0, 32, 3, 65, 10, 54, 2, 76, 32, 3, 66, 2, 55, 2, 148, 1, 32, 3, 65, 244, 132, 192, 0, 54, 2, 144, 1, 32, 3, 32, 4, 58, 0, 143, 1, 32, 3, 32, 3, 65, 248, 0, 106, 54, 2, 80, 32, 3, 32, 3, 65, 143, 1, 106, 54, 2, 72, 32, 3, 32, 3, 65, 200, 0, 106, 54, 2, 160, 1, 32, 3, 65, 128, 1, 106, 32, 3, 65, 144, 1, 106, 16, 51, 32, 3, 40, 2, 128, 1, 34, 5, 32, 3, 40, 2, 136, 1, 16, 0, 33, 4, 32, 3, 40, 2, 132, 1, 34, 6, 4, 64, 32, 5, 32, 6, 65, 1, 16, 156, 1, 11, 32, 3, 45, 0, 120, 65, 2, 79, 4, 64, 32, 3, 40, 2, 124, 34, 5, 40, 2, 0, 32, 5, 40, 2, 4, 40, 2, 0, 17, 2, 0, 32, 5, 40, 2, 4, 34, 6, 40, 2, 4, 34, 7, 4, 64, 32, 5, 40, 2, 0, 32, 7, 32, 6, 40, 2, 8, 16, 156, 1, 11, 32, 3, 40, 2, 124, 65, 12, 65, 4, 16, 156, 1, 11, 65, 1, 12, 1, 11, 32, 3, 65, 64, 107, 41, 3, 0, 33, 10, 32, 3, 40, 2, 60, 33, 4, 65, 0, 11, 32, 2, 4, 64, 32, 1, 32, 2, 65, 1, 16, 156, 1, 11, 13, 1, 2, 64, 32, 10, 167, 34, 5, 32, 10, 66, 32, 136, 167, 34, 2, 77, 4, 64, 32, 4, 33, 1, 12, 1, 11, 32, 2, 69, 4, 64, 65, 1, 33, 1, 32, 4, 32, 5, 65, 1, 16, 156, 1, 12, 1, 11, 32, 4, 32, 5, 32, 2, 16, 143, 1, 34, 1, 69, 13, 3, 11, 32, 0, 32, 2, 54, 2, 4, 32, 0, 32, 1, 54, 2, 0, 32, 3, 65, 192, 1, 106, 36, 0, 15, 11, 65, 128, 128, 2, 65, 1, 16, 165, 1, 0, 11, 32, 4, 16, 168, 1, 0, 11, 32, 2, 65, 1, 16, 165, 1, 0, 11, 172, 7, 2, 7, 127, 1, 126, 35, 0, 65, 192, 1, 107, 34, 3, 36, 0, 32, 3, 65, 8, 106, 65, 1, 16, 136, 1, 2, 64, 2, 64, 65, 128, 128, 2, 65, 1, 16, 149, 1, 34, 4, 4, 64, 32, 3, 65, 48, 106, 34, 5, 66, 128, 128, 2, 55, 3, 0, 32, 3, 65, 40, 106, 34, 6, 65, 0, 54, 2, 0, 32, 3, 32, 4, 54, 2, 44, 32, 3, 66, 1, 55, 3, 32, 32, 3, 65, 8, 106, 32, 1, 32, 2, 16, 43, 33, 10, 32, 3, 65, 240, 0, 106, 34, 4, 32, 5, 41, 3, 0, 55, 3, 0, 32, 3, 65, 232, 0, 106, 34, 5, 32, 6, 41, 3, 0, 55, 3, 0, 32, 3, 65, 224, 0, 106, 34, 6, 32, 3, 41, 3, 32, 55, 3, 0, 32, 3, 65, 216, 0, 106, 34, 7, 32, 3, 65, 24, 106, 41, 3, 0, 55, 3, 0, 32, 3, 65, 208, 0, 106, 34, 8, 32, 3, 65, 16, 106, 41, 3, 0, 55, 3, 0, 32, 3, 32, 3, 41, 3, 8, 55, 3, 72, 2, 127, 2, 64, 32, 3, 2, 127, 32, 10, 167, 34, 9, 65, 255, 1, 113, 65, 3, 71, 4, 64, 32, 3, 65, 195, 0, 106, 32, 10, 66, 56, 136, 60, 0, 0, 32, 3, 65, 193, 0, 106, 32, 10, 66, 40, 136, 61, 0, 0, 32, 3, 32, 9, 58, 0, 60, 32, 3, 65, 1, 54, 2, 56, 32, 3, 32, 10, 66, 8, 136, 62, 0, 61, 2, 64, 32, 3, 40, 2, 96, 69, 13, 0, 32, 3, 65, 200, 0, 106, 16, 58, 34, 10, 167, 65, 3, 113, 65, 2, 70, 4, 64, 32, 10, 66, 32, 136, 167, 34, 4, 40, 2, 0, 32, 4, 40, 2, 4, 40, 2, 0, 17, 2, 0, 32, 4, 40, 2, 4, 34, 5, 40, 2, 4, 34, 6, 4, 64, 32, 4, 40, 2, 0, 32, 6, 32, 5, 40, 2, 8, 16, 156, 1, 11, 32, 4, 65, 12, 65, 4, 16, 156, 1, 11, 32, 3, 40, 2, 96, 34, 4, 69, 13, 0, 32, 3, 65, 228, 0, 106, 40, 2, 0, 34, 5, 69, 13, 0, 32, 4, 32, 5, 65, 1, 16, 156, 1, 11, 32, 3, 40, 2, 88, 65, 244, 213, 2, 65, 4, 16, 156, 1, 32, 3, 65, 240, 0, 106, 40, 2, 0, 34, 4, 4, 64, 32, 3, 40, 2, 108, 32, 4, 65, 1, 16, 156, 1, 11, 32, 3, 65, 56, 106, 65, 4, 114, 12, 1, 11, 32, 3, 65, 184, 1, 106, 32, 4, 41, 3, 0, 55, 3, 0, 32, 3, 65, 176, 1, 106, 32, 5, 41, 3, 0, 55, 3, 0, 32, 3, 65, 168, 1, 106, 32, 6, 41, 3, 0, 55, 3, 0, 32, 3, 65, 160, 1, 106, 32, 7, 41, 3, 0, 55, 3, 0, 32, 3, 65, 152, 1, 106, 32, 8, 41, 3, 0, 55, 3, 0, 32, 3, 32, 3, 41, 3, 72, 55, 3, 144, 1, 32, 3, 65, 56, 106, 32, 3, 65, 144, 1, 106, 16, 61, 32, 3, 40, 2, 56, 65, 1, 71, 13, 1, 32, 3, 65, 56, 106, 65, 4, 114, 11, 41, 2, 0, 55, 3, 120, 32, 3, 65, 248, 0, 106, 16, 133, 1, 33, 4, 32, 3, 65, 212, 0, 106, 65, 9, 54, 2, 0, 32, 3, 65, 164, 1, 106, 65, 2, 54, 2, 0, 32, 3, 65, 10, 54, 2, 76, 32, 3, 66, 2, 55, 2, 148, 1, 32, 3, 65, 244, 132, 192, 0, 54, 2, 144, 1, 32, 3, 32, 4, 58, 0, 143, 1, 32, 3, 32, 3, 65, 248, 0, 106, 54, 2, 80, 32, 3, 32, 3, 65, 143, 1, 106, 54, 2, 72, 32, 3, 32, 3, 65, 200, 0, 106, 54, 2, 160, 1, 32, 3, 65, 128, 1, 106, 32, 3, 65, 144, 1, 106, 16, 51, 32, 3, 40, 2, 128, 1, 34, 5, 32, 3, 40, 2, 136, 1, 16, 0, 33, 4, 32, 3, 40, 2, 132, 1, 34, 6, 4, 64, 32, 5, 32, 6, 65, 1, 16, 156, 1, 11, 32, 3, 45, 0, 120, 65, 2, 79, 4, 64, 32, 3, 40, 2, 124, 34, 5, 40, 2, 0, 32, 5, 40, 2, 4, 40, 2, 0, 17, 2, 0, 32, 5, 40, 2, 4, 34, 6, 40, 2, 4, 34, 7, 4, 64, 32, 5, 40, 2, 0, 32, 7, 32, 6, 40, 2, 8, 16, 156, 1, 11, 32, 3, 40, 2, 124, 65, 12, 65, 4, 16, 156, 1, 11, 65, 1, 12, 1, 11, 32, 3, 65, 64, 107, 41, 3, 0, 33, 10, 32, 3, 40, 2, 60, 33, 4, 65, 0, 11, 32, 2, 4, 64, 32, 1, 32, 2, 65, 1, 16, 156, 1, 11, 13, 1, 2, 64, 32, 10, 167, 34, 5, 32, 10, 66, 32, 136, 167, 34, 2, 77, 4, 64, 32, 4, 33, 1, 12, 1, 11, 32, 2, 69, 4, 64, 65, 1, 33, 1, 32, 4, 32, 5, 65, 1, 16, 156, 1, 12, 1, 11, 32, 4, 32, 5, 32, 2, 16, 143, 1, 34, 1, 69, 13, 3, 11, 32, 0, 32, 2, 54, 2, 4, 32, 0, 32, 1, 54, 2, 0, 32, 3, 65, 192, 1, 106, 36, 0, 15, 11, 65, 128, 128, 2, 65, 1, 16, 165, 1, 0, 11, 32, 4, 16, 168, 1, 0, 11, 32, 2, 65, 1, 16, 165, 1, 0, 11, 218, 6, 2, 5, 127, 1, 126, 35, 0, 65, 192, 1, 107, 34, 5, 36, 0, 32, 5, 65, 8, 106, 32, 3, 4, 127, 32, 4, 5, 65, 6, 11, 65, 0, 16, 126, 2, 64, 2, 64, 65, 128, 128, 2, 65, 1, 16, 149, 1, 34, 3, 4, 64, 32, 5, 65, 48, 106, 34, 4, 66, 128, 128, 2, 55, 3, 0, 32, 5, 65, 40, 106, 34, 6, 65, 0, 54, 2, 0, 32, 5, 32, 3, 54, 2, 44, 32, 5, 66, 1, 55, 3, 32, 32, 5, 65, 8, 106, 32, 1, 32, 2, 16, 45, 33, 10, 32, 5, 65, 240, 0, 106, 34, 3, 32, 4, 41, 3, 0, 55, 3, 0, 32, 5, 65, 232, 0, 106, 34, 4, 32, 6, 41, 3, 0, 55, 3, 0, 32, 5, 65, 224, 0, 106, 34, 6, 32, 5, 41, 3, 32, 55, 3, 0, 32, 5, 65, 216, 0, 106, 34, 7, 32, 5, 65, 24, 106, 41, 3, 0, 55, 3, 0, 32, 5, 65, 208, 0, 106, 34, 8, 32, 5, 65, 16, 106, 41, 3, 0, 55, 3, 0, 32, 5, 32, 5, 41, 3, 8, 55, 3, 72, 2, 64, 2, 64, 2, 64, 32, 10, 167, 34, 9, 65, 255, 1, 113, 65, 3, 71, 4, 64, 32, 5, 32, 9, 58, 0, 56, 32, 5, 32, 10, 66, 56, 136, 60, 0, 63, 32, 5, 32, 10, 66, 40, 136, 61, 0, 61, 32, 5, 32, 10, 66, 8, 136, 62, 0, 57, 32, 5, 65, 200, 0, 106, 16, 77, 32, 5, 41, 3, 56, 33, 10, 12, 1, 11, 32, 5, 65, 184, 1, 106, 32, 3, 41, 3, 0, 55, 3, 0, 32, 5, 65, 176, 1, 106, 32, 4, 41, 3, 0, 55, 3, 0, 32, 5, 65, 168, 1, 106, 32, 6, 41, 3, 0, 55, 3, 0, 32, 5, 65, 160, 1, 106, 32, 7, 41, 3, 0, 55, 3, 0, 32, 5, 65, 152, 1, 106, 32, 8, 41, 3, 0, 55, 3, 0, 32, 5, 32, 5, 41, 3, 72, 55, 3, 144, 1, 32, 5, 65, 144, 1, 106, 16, 57, 34, 10, 167, 65, 255, 1, 113, 65, 3, 70, 4, 64, 32, 5, 40, 2, 168, 1, 33, 3, 65, 0, 33, 4, 32, 5, 65, 0, 54, 2, 168, 1, 32, 3, 13, 2, 65, 236, 130, 192, 0, 65, 43, 65, 240, 131, 192, 0, 16, 114, 0, 11, 32, 5, 32, 10, 55, 3, 56, 32, 5, 65, 144, 1, 106, 16, 77, 11, 32, 5, 32, 10, 55, 3, 120, 32, 5, 65, 248, 0, 106, 16, 133, 1, 33, 3, 32, 5, 65, 212, 0, 106, 65, 9, 54, 2, 0, 32, 5, 65, 164, 1, 106, 65, 2, 54, 2, 0, 32, 5, 65, 10, 54, 2, 76, 32, 5, 66, 2, 55, 2, 148, 1, 32, 5, 65, 244, 132, 192, 0, 54, 2, 144, 1, 32, 5, 32, 3, 58, 0, 143, 1, 32, 5, 32, 5, 65, 248, 0, 106, 54, 2, 80, 32, 5, 32, 5, 65, 143, 1, 106, 54, 2, 72, 32, 5, 32, 5, 65, 200, 0, 106, 54, 2, 160, 1, 32, 5, 65, 128, 1, 106, 32, 5, 65, 144, 1, 106, 16, 51, 32, 5, 40, 2, 128, 1, 34, 4, 32, 5, 40, 2, 136, 1, 16, 0, 33, 3, 32, 5, 40, 2, 132, 1, 34, 6, 4, 64, 32, 4, 32, 6, 65, 1, 16, 156, 1, 11, 32, 5, 45, 0, 120, 65, 2, 79, 4, 64, 32, 5, 40, 2, 124, 34, 4, 40, 2, 0, 32, 4, 40, 2, 4, 40, 2, 0, 17, 2, 0, 32, 4, 40, 2, 4, 34, 6, 40, 2, 4, 34, 7, 4, 64, 32, 4, 40, 2, 0, 32, 7, 32, 6, 40, 2, 8, 16, 156, 1, 11, 32, 5, 40, 2, 124, 65, 12, 65, 4, 16, 156, 1, 11, 65, 1, 33, 4, 12, 1, 11, 32, 5, 65, 172, 1, 106, 40, 2, 0, 33, 6, 32, 5, 32, 5, 65, 176, 1, 106, 40, 2, 0, 54, 2, 64, 32, 5, 32, 6, 54, 2, 60, 32, 5, 32, 3, 54, 2, 56, 32, 5, 65, 144, 1, 106, 16, 77, 32, 5, 41, 2, 60, 33, 10, 11, 32, 2, 4, 64, 32, 1, 32, 2, 65, 1, 16, 156, 1, 11, 32, 4, 13, 1, 2, 64, 32, 10, 167, 34, 4, 32, 10, 66, 32, 136, 167, 34, 2, 77, 4, 64, 32, 3, 33, 1, 12, 1, 11, 32, 2, 69, 4, 64, 65, 1, 33, 1, 32, 3, 32, 4, 65, 1, 16, 156, 1, 12, 1, 11, 32, 3, 32, 4, 32, 2, 16, 143, 1, 34, 1, 69, 13, 3, 11, 32, 0, 32, 2, 54, 2, 4, 32, 0, 32, 1, 54, 2, 0, 32, 5, 65, 192, 1, 106, 36, 0, 15, 11, 65, 128, 128, 2, 65, 1, 16, 165, 1, 0, 11, 32, 3, 16, 168, 1, 0, 11, 32, 2, 65, 1, 16, 165, 1, 0, 11, 218, 6, 2, 5, 127, 1, 126, 35, 0, 65, 192, 1, 107, 34, 5, 36, 0, 32, 5, 65, 8, 106, 32, 3, 4, 127, 32, 4, 5, 65, 6, 11, 65, 1, 16, 126, 2, 64, 2, 64, 65, 128, 128, 2, 65, 1, 16, 149, 1, 34, 3, 4, 64, 32, 5, 65, 48, 106, 34, 4, 66, 128, 128, 2, 55, 3, 0, 32, 5, 65, 40, 106, 34, 6, 65, 0, 54, 2, 0, 32, 5, 32, 3, 54, 2, 44, 32, 5, 66, 1, 55, 3, 32, 32, 5, 65, 8, 106, 32, 1, 32, 2, 16, 42, 33, 10, 32, 5, 65, 240, 0, 106, 34, 3, 32, 4, 41, 3, 0, 55, 3, 0, 32, 5, 65, 232, 0, 106, 34, 4, 32, 6, 41, 3, 0, 55, 3, 0, 32, 5, 65, 224, 0, 106, 34, 6, 32, 5, 41, 3, 32, 55, 3, 0, 32, 5, 65, 216, 0, 106, 34, 7, 32, 5, 65, 24, 106, 41, 3, 0, 55, 3, 0, 32, 5, 65, 208, 0, 106, 34, 8, 32, 5, 65, 16, 106, 41, 3, 0, 55, 3, 0, 32, 5, 32, 5, 41, 3, 8, 55, 3, 72, 2, 64, 2, 64, 2, 64, 32, 10, 167, 34, 9, 65, 255, 1, 113, 65, 3, 71, 4, 64, 32, 5, 32, 9, 58, 0, 56, 32, 5, 32, 10, 66, 56, 136, 60, 0, 63, 32, 5, 32, 10, 66, 40, 136, 61, 0, 61, 32, 5, 32, 10, 66, 8, 136, 62, 0, 57, 32, 5, 65, 200, 0, 106, 16, 77, 32, 5, 41, 3, 56, 33, 10, 12, 1, 11, 32, 5, 65, 184, 1, 106, 32, 3, 41, 3, 0, 55, 3, 0, 32, 5, 65, 176, 1, 106, 32, 4, 41, 3, 0, 55, 3, 0, 32, 5, 65, 168, 1, 106, 32, 6, 41, 3, 0, 55, 3, 0, 32, 5, 65, 160, 1, 106, 32, 7, 41, 3, 0, 55, 3, 0, 32, 5, 65, 152, 1, 106, 32, 8, 41, 3, 0, 55, 3, 0, 32, 5, 32, 5, 41, 3, 72, 55, 3, 144, 1, 32, 5, 65, 144, 1, 106, 16, 57, 34, 10, 167, 65, 255, 1, 113, 65, 3, 70, 4, 64, 32, 5, 40, 2, 168, 1, 33, 3, 65, 0, 33, 4, 32, 5, 65, 0, 54, 2, 168, 1, 32, 3, 13, 2, 65, 236, 130, 192, 0, 65, 43, 65, 240, 131, 192, 0, 16, 114, 0, 11, 32, 5, 32, 10, 55, 3, 56, 32, 5, 65, 144, 1, 106, 16, 77, 11, 32, 5, 32, 10, 55, 3, 120, 32, 5, 65, 248, 0, 106, 16, 133, 1, 33, 3, 32, 5, 65, 212, 0, 106, 65, 9, 54, 2, 0, 32, 5, 65, 164, 1, 106, 65, 2, 54, 2, 0, 32, 5, 65, 10, 54, 2, 76, 32, 5, 66, 2, 55, 2, 148, 1, 32, 5, 65, 244, 132, 192, 0, 54, 2, 144, 1, 32, 5, 32, 3, 58, 0, 143, 1, 32, 5, 32, 5, 65, 248, 0, 106, 54, 2, 80, 32, 5, 32, 5, 65, 143, 1, 106, 54, 2, 72, 32, 5, 32, 5, 65, 200, 0, 106, 54, 2, 160, 1, 32, 5, 65, 128, 1, 106, 32, 5, 65, 144, 1, 106, 16, 51, 32, 5, 40, 2, 128, 1, 34, 4, 32, 5, 40, 2, 136, 1, 16, 0, 33, 3, 32, 5, 40, 2, 132, 1, 34, 6, 4, 64, 32, 4, 32, 6, 65, 1, 16, 156, 1, 11, 32, 5, 45, 0, 120, 65, 2, 79, 4, 64, 32, 5, 40, 2, 124, 34, 4, 40, 2, 0, 32, 4, 40, 2, 4, 40, 2, 0, 17, 2, 0, 32, 4, 40, 2, 4, 34, 6, 40, 2, 4, 34, 7, 4, 64, 32, 4, 40, 2, 0, 32, 7, 32, 6, 40, 2, 8, 16, 156, 1, 11, 32, 5, 40, 2, 124, 65, 12, 65, 4, 16, 156, 1, 11, 65, 1, 33, 4, 12, 1, 11, 32, 5, 65, 172, 1, 106, 40, 2, 0, 33, 6, 32, 5, 32, 5, 65, 176, 1, 106, 40, 2, 0, 54, 2, 64, 32, 5, 32, 6, 54, 2, 60, 32, 5, 32, 3, 54, 2, 56, 32, 5, 65, 144, 1, 106, 16, 77, 32, 5, 41, 2, 60, 33, 10, 11, 32, 2, 4, 64, 32, 1, 32, 2, 65, 1, 16, 156, 1, 11, 32, 4, 13, 1, 2, 64, 32, 10, 167, 34, 4, 32, 10, 66, 32, 136, 167, 34, 2, 77, 4, 64, 32, 3, 33, 1, 12, 1, 11, 32, 2, 69, 4, 64, 65, 1, 33, 1, 32, 3, 32, 4, 65, 1, 16, 156, 1, 12, 1, 11, 32, 3, 32, 4, 32, 2, 16, 143, 1, 34, 1, 69, 13, 3, 11, 32, 0, 32, 2, 54, 2, 4, 32, 0, 32, 1, 54, 2, 0, 32, 5, 65, 192, 1, 106, 36, 0, 15, 11, 65, 128, 128, 2, 65, 1, 16, 165, 1, 0, 11, 32, 3, 16, 168, 1, 0, 11, 32, 2, 65, 1, 16, 165, 1, 0, 11, 177, 6, 1, 7, 127, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 32, 0, 65, 255, 255, 3, 77, 4, 64, 32, 0, 65, 128, 254, 3, 113, 65, 8, 118, 33, 6, 65, 176, 205, 193, 0, 33, 1, 32, 0, 65, 255, 1, 113, 33, 7, 3, 64, 2, 64, 32, 1, 65, 2, 106, 33, 5, 32, 2, 32, 1, 45, 0, 1, 34, 4, 106, 33, 3, 2, 64, 32, 6, 32, 1, 45, 0, 0, 34, 1, 70, 4, 64, 32, 3, 32, 2, 73, 13, 6, 32, 3, 65, 163, 2, 79, 13, 7, 32, 2, 65, 130, 206, 193, 0, 106, 33, 1, 3, 64, 32, 4, 69, 13, 2, 32, 4, 65, 127, 106, 33, 4, 32, 1, 45, 0, 0, 32, 1, 65, 1, 106, 33, 1, 32, 7, 71, 13, 0, 11, 65, 0, 33, 4, 12, 5, 11, 32, 1, 32, 6, 75, 13, 1, 32, 3, 33, 2, 32, 5, 34, 1, 65, 130, 206, 193, 0, 71, 13, 2, 12, 1, 11, 32, 3, 33, 2, 32, 5, 34, 1, 65, 130, 206, 193, 0, 71, 13, 1, 11, 11, 32, 0, 65, 255, 255, 3, 113, 33, 3, 65, 164, 208, 193, 0, 33, 1, 65, 1, 33, 4, 3, 64, 32, 1, 65, 1, 106, 33, 0, 2, 127, 32, 1, 45, 0, 0, 34, 2, 65, 24, 116, 65, 24, 117, 34, 5, 65, 127, 76, 4, 64, 32, 0, 65, 217, 210, 193, 0, 70, 13, 7, 32, 1, 45, 0, 1, 32, 5, 65, 255, 0, 113, 65, 8, 116, 114, 33, 2, 32, 1, 65, 2, 106, 12, 1, 11, 32, 0, 11, 33, 1, 32, 3, 32, 2, 107, 34, 3, 65, 0, 72, 13, 2, 32, 4, 65, 1, 115, 33, 4, 32, 1, 65, 217, 210, 193, 0, 71, 13, 0, 11, 12, 1, 11, 32, 0, 65, 255, 255, 7, 77, 4, 64, 32, 0, 65, 128, 254, 3, 113, 65, 8, 118, 33, 6, 65, 217, 210, 193, 0, 33, 1, 32, 0, 65, 255, 1, 113, 33, 7, 3, 64, 2, 64, 32, 1, 65, 2, 106, 33, 5, 32, 2, 32, 1, 45, 0, 1, 34, 4, 106, 33, 3, 2, 64, 32, 6, 32, 1, 45, 0, 0, 34, 1, 70, 4, 64, 32, 3, 32, 2, 73, 13, 9, 32, 3, 65, 176, 1, 79, 13, 10, 32, 2, 65, 165, 211, 193, 0, 106, 33, 1, 3, 64, 32, 4, 69, 13, 2, 32, 4, 65, 127, 106, 33, 4, 32, 1, 45, 0, 0, 32, 1, 65, 1, 106, 33, 1, 32, 7, 71, 13, 0, 11, 65, 0, 33, 4, 12, 5, 11, 32, 1, 32, 6, 75, 13, 1, 32, 3, 33, 2, 32, 5, 34, 1, 65, 165, 211, 193, 0, 71, 13, 2, 12, 1, 11, 32, 3, 33, 2, 32, 5, 34, 1, 65, 165, 211, 193, 0, 71, 13, 1, 11, 11, 32, 0, 65, 255, 255, 3, 113, 33, 3, 65, 212, 212, 193, 0, 33, 1, 65, 1, 33, 4, 3, 64, 32, 1, 65, 1, 106, 33, 0, 2, 127, 32, 1, 45, 0, 0, 34, 2, 65, 24, 116, 65, 24, 117, 34, 5, 65, 127, 76, 4, 64, 32, 0, 65, 247, 215, 193, 0, 70, 13, 10, 32, 1, 45, 0, 1, 32, 5, 65, 255, 0, 113, 65, 8, 116, 114, 33, 2, 32, 1, 65, 2, 106, 12, 1, 11, 32, 0, 11, 33, 1, 32, 3, 32, 2, 107, 34, 3, 65, 0, 72, 13, 2, 32, 4, 65, 1, 115, 33, 4, 32, 1, 65, 247, 215, 193, 0, 71, 13, 0, 11, 12, 1, 11, 32, 0, 65, 181, 217, 115, 106, 65, 181, 219, 43, 73, 32, 0, 65, 226, 139, 116, 106, 65, 226, 11, 73, 114, 32, 0, 65, 159, 168, 116, 106, 65, 159, 24, 73, 32, 0, 65, 222, 226, 116, 106, 65, 14, 73, 114, 114, 32, 0, 65, 254, 255, 255, 0, 113, 65, 158, 240, 10, 70, 32, 0, 65, 162, 178, 117, 106, 65, 34, 73, 114, 114, 13, 0, 32, 0, 65, 203, 145, 117, 106, 65, 11, 79, 13, 7, 11, 32, 4, 65, 1, 113, 15, 11, 32, 2, 32, 3, 65, 144, 205, 193, 0, 16, 100, 0, 11, 32, 3, 65, 162, 2, 65, 144, 205, 193, 0, 16, 99, 0, 11, 65, 240, 196, 193, 0, 65, 43, 65, 160, 205, 193, 0, 16, 114, 0, 11, 32, 2, 32, 3, 65, 144, 205, 193, 0, 16, 100, 0, 11, 32, 3, 65, 175, 1, 65, 144, 205, 193, 0, 16, 99, 0, 11, 65, 240, 196, 193, 0, 65, 43, 65, 160, 205, 193, 0, 16, 114, 0, 11, 32, 0, 65, 240, 131, 56, 73, 11, 254, 5, 1, 8, 127, 35, 0, 65, 48, 107, 34, 7, 36, 0, 2, 64, 2, 64, 32, 5, 69, 4, 64, 32, 0, 65, 1, 54, 2, 8, 32, 0, 66, 0, 55, 2, 0, 65, 123, 33, 10, 12, 1, 11, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 32, 1, 65, 180, 128, 4, 106, 40, 2, 0, 65, 1, 70, 4, 64, 32, 0, 66, 0, 55, 2, 0, 32, 6, 65, 4, 71, 13, 1, 32, 0, 65, 0, 54, 2, 8, 65, 1, 33, 10, 12, 8, 11, 32, 6, 65, 4, 71, 13, 1, 3, 64, 32, 7, 32, 5, 54, 2, 40, 32, 7, 32, 4, 54, 2, 36, 32, 7, 65, 1, 54, 2, 32, 32, 7, 66, 0, 55, 3, 24, 32, 7, 32, 2, 54, 2, 16, 32, 7, 32, 3, 54, 2, 20, 32, 7, 32, 1, 32, 7, 65, 16, 106, 65, 4, 16, 4, 32, 3, 32, 7, 40, 2, 4, 34, 9, 73, 13, 9, 32, 5, 32, 7, 40, 2, 8, 34, 8, 73, 13, 5, 32, 8, 32, 12, 106, 33, 12, 32, 9, 32, 11, 106, 33, 11, 65, 240, 177, 127, 33, 10, 65, 1, 33, 13, 2, 64, 32, 7, 40, 2, 0, 65, 2, 106, 14, 4, 8, 4, 0, 5, 0, 11, 32, 3, 32, 9, 107, 33, 3, 32, 2, 32, 9, 106, 33, 2, 32, 4, 32, 8, 106, 33, 4, 32, 5, 32, 8, 107, 34, 5, 13, 0, 11, 12, 5, 11, 32, 0, 65, 1, 54, 2, 8, 65, 123, 33, 10, 12, 6, 11, 65, 3, 32, 6, 65, 2, 70, 65, 1, 116, 32, 6, 65, 3, 70, 34, 14, 27, 33, 8, 2, 64, 32, 6, 65, 2, 70, 4, 64, 3, 64, 32, 7, 32, 5, 54, 2, 40, 32, 7, 32, 4, 54, 2, 36, 32, 7, 65, 1, 54, 2, 32, 32, 7, 66, 0, 55, 3, 24, 32, 7, 32, 2, 54, 2, 16, 32, 7, 32, 3, 54, 2, 20, 32, 7, 32, 1, 32, 7, 65, 16, 106, 32, 8, 16, 4, 32, 3, 32, 7, 40, 2, 4, 34, 9, 73, 13, 9, 32, 5, 32, 7, 40, 2, 8, 34, 8, 73, 13, 5, 32, 8, 32, 12, 106, 33, 12, 32, 9, 32, 11, 106, 33, 11, 65, 240, 177, 127, 33, 10, 65, 1, 33, 13, 2, 64, 32, 7, 40, 2, 0, 65, 2, 106, 14, 4, 8, 4, 0, 5, 0, 11, 32, 5, 32, 8, 107, 34, 5, 69, 13, 6, 32, 3, 32, 9, 107, 34, 3, 69, 13, 2, 32, 2, 32, 9, 106, 33, 2, 32, 4, 32, 8, 106, 33, 4, 65, 2, 33, 8, 12, 0, 11, 0, 11, 65, 3, 65, 0, 32, 14, 27, 33, 14, 3, 64, 32, 7, 32, 5, 54, 2, 40, 32, 7, 32, 4, 54, 2, 36, 32, 7, 65, 1, 54, 2, 32, 32, 7, 66, 0, 55, 3, 24, 32, 7, 32, 2, 54, 2, 16, 32, 7, 32, 3, 54, 2, 20, 32, 7, 32, 1, 32, 7, 65, 16, 106, 32, 8, 16, 4, 32, 3, 32, 7, 40, 2, 4, 34, 9, 73, 13, 8, 32, 5, 32, 7, 40, 2, 8, 34, 8, 73, 13, 4, 32, 8, 32, 12, 106, 33, 12, 32, 9, 32, 11, 106, 33, 11, 65, 240, 177, 127, 33, 10, 65, 1, 33, 13, 2, 64, 32, 7, 40, 2, 0, 65, 2, 106, 14, 4, 7, 3, 0, 4, 0, 11, 32, 5, 32, 8, 107, 34, 5, 69, 13, 5, 32, 3, 32, 9, 107, 34, 3, 69, 13, 1, 32, 2, 32, 9, 106, 33, 2, 32, 4, 32, 8, 106, 33, 4, 32, 14, 33, 8, 12, 0, 11, 0, 11, 65, 0, 65, 123, 32, 6, 32, 11, 114, 32, 12, 114, 34, 1, 27, 33, 10, 32, 1, 69, 33, 13, 12, 4, 11, 65, 126, 33, 10, 12, 3, 11, 65, 1, 33, 10, 65, 0, 33, 13, 12, 2, 11, 32, 8, 32, 5, 65, 156, 188, 192, 0, 16, 101, 0, 11, 65, 0, 33, 13, 65, 0, 33, 10, 11, 32, 0, 32, 13, 54, 2, 8, 32, 0, 32, 12, 54, 2, 4, 32, 0, 32, 11, 54, 2, 0, 11, 32, 0, 65, 12, 106, 32, 10, 54, 2, 0, 32, 7, 65, 48, 106, 36, 0, 15, 11, 32, 9, 32, 3, 65, 140, 188, 192, 0, 16, 101, 0, 11, 145, 6, 2, 3, 127, 1, 126, 35, 0, 65, 176, 2, 107, 34, 5, 36, 0, 32, 5, 65, 0, 54, 2, 224, 1, 32, 5, 66, 1, 55, 3, 216, 1, 32, 5, 32, 5, 65, 216, 1, 106, 32, 3, 4, 127, 32, 4, 5, 65, 6, 11, 16, 62, 32, 5, 32, 1, 32, 2, 16, 26, 33, 8, 32, 5, 65, 232, 0, 106, 32, 5, 65, 216, 0, 16, 121, 26, 2, 64, 2, 64, 2, 64, 32, 8, 167, 34, 3, 65, 255, 1, 113, 65, 3, 71, 4, 64, 32, 5, 32, 3, 58, 0, 88, 32, 5, 32, 8, 66, 56, 136, 60, 0, 95, 32, 5, 32, 8, 66, 40, 136, 61, 0, 93, 32, 5, 32, 8, 66, 8, 136, 62, 0, 89, 2, 64, 32, 5, 40, 2, 128, 1, 69, 13, 0, 32, 5, 65, 232, 0, 106, 16, 34, 34, 8, 167, 65, 3, 113, 65, 2, 71, 13, 0, 32, 8, 66, 32, 136, 167, 34, 3, 40, 2, 0, 32, 3, 40, 2, 4, 40, 2, 0, 17, 2, 0, 32, 3, 40, 2, 4, 34, 4, 40, 2, 4, 34, 6, 4, 64, 32, 3, 40, 2, 0, 32, 6, 32, 4, 40, 2, 8, 16, 156, 1, 11, 32, 3, 65, 12, 65, 4, 16, 156, 1, 11, 32, 5, 65, 232, 0, 106, 16, 77, 32, 5, 65, 184, 1, 106, 40, 2, 0, 34, 3, 4, 64, 32, 5, 40, 2, 180, 1, 32, 3, 65, 1, 16, 156, 1, 11, 32, 5, 41, 3, 88, 33, 8, 12, 1, 11, 32, 5, 65, 216, 1, 106, 32, 5, 65, 232, 0, 106, 65, 216, 0, 16, 121, 26, 32, 5, 65, 216, 1, 106, 16, 34, 34, 8, 167, 65, 255, 1, 113, 65, 3, 70, 4, 64, 32, 5, 40, 2, 240, 1, 33, 3, 65, 0, 33, 4, 32, 5, 65, 0, 54, 2, 240, 1, 32, 3, 13, 2, 65, 236, 130, 192, 0, 65, 43, 65, 240, 131, 192, 0, 16, 114, 0, 11, 32, 5, 32, 8, 55, 3, 88, 32, 5, 65, 216, 1, 106, 16, 53, 11, 32, 5, 32, 8, 55, 3, 192, 1, 32, 5, 65, 192, 1, 106, 16, 133, 1, 33, 3, 32, 5, 65, 244, 0, 106, 65, 9, 54, 2, 0, 32, 5, 65, 236, 1, 106, 65, 2, 54, 2, 0, 32, 5, 65, 10, 54, 2, 108, 32, 5, 66, 2, 55, 2, 220, 1, 32, 5, 65, 244, 132, 192, 0, 54, 2, 216, 1, 32, 5, 32, 3, 58, 0, 215, 1, 32, 5, 32, 5, 65, 192, 1, 106, 54, 2, 112, 32, 5, 32, 5, 65, 215, 1, 106, 54, 2, 104, 32, 5, 32, 5, 65, 232, 0, 106, 54, 2, 232, 1, 32, 5, 65, 200, 1, 106, 32, 5, 65, 216, 1, 106, 16, 51, 32, 5, 40, 2, 200, 1, 34, 4, 32, 5, 40, 2, 208, 1, 16, 0, 33, 3, 32, 5, 40, 2, 204, 1, 34, 6, 4, 64, 32, 4, 32, 6, 65, 1, 16, 156, 1, 11, 32, 5, 45, 0, 192, 1, 65, 2, 79, 4, 64, 32, 5, 40, 2, 196, 1, 34, 4, 40, 2, 0, 32, 4, 40, 2, 4, 40, 2, 0, 17, 2, 0, 32, 4, 40, 2, 4, 34, 6, 40, 2, 4, 34, 7, 4, 64, 32, 4, 40, 2, 0, 32, 7, 32, 6, 40, 2, 8, 16, 156, 1, 11, 32, 5, 40, 2, 196, 1, 65, 12, 65, 4, 16, 156, 1, 11, 65, 1, 33, 4, 12, 1, 11, 32, 5, 65, 244, 1, 106, 40, 2, 0, 33, 6, 32, 5, 32, 5, 65, 248, 1, 106, 40, 2, 0, 54, 2, 96, 32, 5, 32, 6, 54, 2, 92, 32, 5, 32, 3, 54, 2, 88, 32, 5, 65, 216, 1, 106, 16, 53, 32, 5, 41, 2, 92, 33, 8, 11, 32, 2, 4, 64, 32, 1, 32, 2, 65, 1, 16, 156, 1, 11, 2, 64, 32, 4, 69, 4, 64, 2, 64, 32, 8, 167, 34, 4, 32, 8, 66, 32, 136, 167, 34, 2, 77, 4, 64, 32, 3, 33, 1, 12, 1, 11, 32, 2, 69, 4, 64, 65, 1, 33, 1, 32, 3, 32, 4, 65, 1, 16, 156, 1, 12, 1, 11, 32, 3, 32, 4, 32, 2, 16, 143, 1, 34, 1, 69, 13, 2, 11, 32, 0, 32, 2, 54, 2, 4, 32, 0, 32, 1, 54, 2, 0, 32, 5, 65, 176, 2, 106, 36, 0, 15, 11, 32, 3, 16, 168, 1, 0, 11, 32, 2, 65, 1, 16, 165, 1, 0, 11, 201, 3, 1, 7, 127, 35, 0, 65, 16, 107, 34, 9, 36, 0, 2, 64, 32, 0, 69, 32, 1, 69, 114, 13, 0, 2, 64, 32, 2, 65, 4, 75, 13, 0, 32, 1, 65, 3, 106, 65, 2, 118, 65, 127, 106, 34, 1, 65, 255, 1, 75, 13, 0, 32, 1, 65, 2, 116, 65, 140, 223, 193, 0, 106, 34, 6, 40, 2, 0, 33, 4, 32, 0, 65, 0, 54, 2, 0, 32, 0, 65, 120, 106, 34, 7, 32, 7, 40, 2, 0, 65, 126, 113, 54, 2, 0, 32, 9, 65, 136, 223, 193, 0, 54, 2, 12, 32, 0, 32, 4, 54, 2, 0, 32, 6, 32, 7, 54, 2, 0, 12, 1, 11, 65, 136, 223, 193, 0, 40, 2, 0, 33, 2, 32, 0, 65, 0, 54, 2, 0, 32, 0, 65, 120, 106, 34, 1, 32, 1, 40, 2, 0, 34, 4, 65, 126, 113, 54, 2, 0, 2, 64, 2, 64, 2, 64, 32, 0, 65, 124, 106, 34, 6, 40, 2, 0, 65, 124, 113, 34, 5, 4, 64, 32, 5, 40, 2, 0, 34, 8, 65, 1, 113, 69, 13, 1, 11, 32, 4, 65, 124, 113, 34, 3, 69, 13, 1, 65, 0, 32, 3, 32, 4, 65, 2, 113, 27, 34, 3, 69, 13, 1, 32, 3, 45, 0, 0, 65, 1, 113, 13, 1, 32, 0, 32, 3, 40, 2, 8, 65, 124, 113, 54, 2, 0, 32, 3, 32, 1, 65, 1, 114, 54, 2, 8, 32, 2, 33, 1, 12, 2, 11, 2, 64, 2, 64, 32, 4, 65, 124, 113, 34, 0, 69, 4, 64, 32, 5, 33, 3, 12, 1, 11, 32, 5, 33, 3, 65, 0, 32, 0, 32, 4, 65, 2, 113, 27, 34, 4, 69, 13, 0, 32, 4, 32, 4, 40, 2, 4, 65, 3, 113, 32, 5, 114, 54, 2, 4, 32, 6, 40, 2, 0, 34, 0, 65, 124, 113, 34, 3, 69, 13, 1, 32, 1, 40, 2, 0, 65, 124, 113, 33, 0, 32, 3, 40, 2, 0, 33, 8, 11, 32, 3, 32, 8, 65, 3, 113, 32, 0, 114, 54, 2, 0, 32, 6, 40, 2, 0, 33, 0, 11, 32, 6, 32, 0, 65, 3, 113, 54, 2, 0, 32, 1, 32, 1, 40, 2, 0, 34, 0, 65, 3, 113, 54, 2, 0, 32, 0, 65, 2, 113, 69, 4, 64, 32, 2, 33, 1, 12, 2, 11, 32, 5, 32, 5, 40, 2, 0, 65, 2, 114, 54, 2, 0, 32, 2, 33, 1, 12, 1, 11, 32, 0, 32, 2, 54, 2, 0, 11, 65, 136, 223, 193, 0, 32, 1, 54, 2, 0, 11, 32, 9, 65, 16, 106, 36, 0, 11, 251, 5, 1, 7, 127, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 32, 4, 65, 2, 118, 34, 11, 4, 64, 32, 0, 32, 3, 106, 33, 12, 3, 64, 32, 2, 32, 6, 106, 34, 9, 32, 5, 113, 34, 7, 32, 1, 79, 13, 2, 32, 3, 32, 6, 106, 34, 8, 32, 1, 79, 13, 3, 32, 6, 32, 12, 106, 34, 10, 32, 0, 32, 7, 106, 45, 0, 0, 58, 0, 0, 32, 9, 65, 1, 106, 34, 9, 32, 5, 113, 34, 7, 32, 1, 79, 13, 4, 32, 8, 65, 1, 106, 32, 1, 79, 13, 5, 32, 10, 65, 1, 106, 32, 0, 32, 7, 106, 45, 0, 0, 58, 0, 0, 32, 9, 65, 1, 106, 34, 9, 32, 5, 113, 34, 7, 32, 1, 79, 13, 6, 32, 8, 65, 2, 106, 32, 1, 79, 13, 7, 32, 10, 65, 2, 106, 32, 0, 32, 7, 106, 45, 0, 0, 58, 0, 0, 32, 9, 65, 1, 106, 32, 5, 113, 34, 7, 32, 1, 79, 13, 8, 32, 8, 65, 3, 106, 32, 1, 79, 13, 9, 32, 10, 65, 3, 106, 32, 0, 32, 7, 106, 45, 0, 0, 58, 0, 0, 32, 6, 65, 4, 106, 33, 6, 32, 11, 65, 127, 106, 34, 11, 13, 0, 11, 32, 3, 32, 6, 106, 33, 3, 32, 2, 32, 6, 106, 33, 2, 11, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 32, 4, 65, 3, 113, 65, 1, 107, 14, 3, 0, 1, 2, 4, 11, 32, 2, 32, 5, 113, 34, 6, 32, 1, 79, 13, 21, 32, 3, 32, 1, 73, 13, 2, 32, 3, 32, 1, 65, 200, 180, 192, 0, 16, 98, 0, 11, 32, 2, 32, 5, 113, 34, 4, 32, 1, 79, 13, 17, 32, 3, 32, 1, 79, 13, 18, 32, 0, 32, 3, 106, 32, 0, 32, 4, 106, 45, 0, 0, 58, 0, 0, 32, 2, 65, 1, 106, 32, 5, 113, 34, 6, 32, 1, 79, 13, 19, 32, 3, 65, 1, 106, 34, 3, 32, 1, 73, 13, 1, 32, 3, 32, 1, 65, 168, 180, 192, 0, 16, 98, 0, 11, 32, 2, 32, 5, 113, 34, 4, 32, 1, 79, 13, 10, 32, 3, 32, 1, 79, 13, 11, 32, 0, 32, 3, 106, 32, 0, 32, 4, 106, 45, 0, 0, 58, 0, 0, 32, 2, 65, 1, 106, 32, 5, 113, 34, 4, 32, 1, 79, 13, 12, 32, 3, 65, 1, 106, 34, 6, 32, 1, 79, 13, 13, 32, 0, 32, 6, 106, 32, 0, 32, 4, 106, 45, 0, 0, 58, 0, 0, 32, 2, 65, 2, 106, 32, 5, 113, 34, 6, 32, 1, 79, 13, 14, 32, 3, 65, 2, 106, 34, 3, 32, 1, 79, 13, 15, 11, 32, 0, 32, 3, 106, 32, 0, 32, 6, 106, 45, 0, 0, 58, 0, 0, 11, 15, 11, 32, 7, 32, 1, 65, 152, 178, 192, 0, 16, 98, 0, 11, 32, 8, 32, 1, 65, 168, 178, 192, 0, 16, 98, 0, 11, 32, 7, 32, 1, 65, 184, 178, 192, 0, 16, 98, 0, 11, 32, 8, 65, 1, 106, 32, 1, 65, 200, 178, 192, 0, 16, 98, 0, 11, 32, 7, 32, 1, 65, 216, 178, 192, 0, 16, 98, 0, 11, 32, 8, 65, 2, 106, 32, 1, 65, 232, 178, 192, 0, 16, 98, 0, 11, 32, 7, 32, 1, 65, 248, 178, 192, 0, 16, 98, 0, 11, 32, 8, 65, 3, 106, 32, 1, 65, 136, 179, 192, 0, 16, 98, 0, 11, 32, 4, 32, 1, 65, 152, 179, 192, 0, 16, 98, 0, 11, 32, 3, 32, 1, 65, 168, 179, 192, 0, 16, 98, 0, 11, 32, 4, 32, 1, 65, 184, 179, 192, 0, 16, 98, 0, 11, 32, 6, 32, 1, 65, 200, 179, 192, 0, 16, 98, 0, 11, 32, 6, 32, 1, 65, 216, 179, 192, 0, 16, 98, 0, 11, 32, 3, 32, 1, 65, 232, 179, 192, 0, 16, 98, 0, 11, 32, 4, 32, 1, 65, 248, 179, 192, 0, 16, 98, 0, 11, 32, 3, 32, 1, 65, 136, 180, 192, 0, 16, 98, 0, 11, 32, 6, 32, 1, 65, 152, 180, 192, 0, 16, 98, 0, 11, 32, 6, 32, 1, 65, 184, 180, 192, 0, 16, 98, 0, 11, 153, 6, 2, 11, 127, 2, 126, 35, 0, 65, 64, 106, 34, 3, 36, 0, 65, 3, 33, 8, 2, 64, 32, 2, 69, 13, 0, 32, 0, 65, 24, 106, 33, 10, 32, 0, 65, 48, 106, 33, 12, 32, 0, 65, 200, 0, 106, 33, 11, 32, 3, 65, 4, 114, 33, 13, 32, 0, 65, 212, 0, 106, 33, 6, 32, 0, 65, 32, 106, 33, 7, 3, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 32, 11, 40, 2, 0, 69, 4, 64, 2, 64, 32, 6, 40, 2, 0, 34, 4, 69, 13, 0, 32, 10, 40, 2, 0, 4, 64, 3, 64, 32, 0, 40, 2, 76, 33, 5, 32, 10, 32, 7, 40, 2, 0, 32, 4, 16, 75, 32, 0, 40, 2, 24, 32, 7, 40, 2, 0, 106, 32, 5, 32, 4, 16, 121, 26, 32, 7, 32, 7, 40, 2, 0, 32, 4, 106, 54, 2, 0, 32, 6, 40, 2, 0, 34, 5, 32, 4, 73, 13, 4, 32, 6, 65, 0, 54, 2, 0, 32, 5, 32, 4, 107, 34, 5, 69, 13, 2, 32, 0, 40, 2, 76, 34, 9, 32, 4, 32, 9, 106, 32, 5, 16, 96, 32, 6, 32, 5, 54, 2, 0, 32, 5, 33, 4, 32, 0, 40, 2, 24, 13, 0, 11, 11, 65, 236, 130, 192, 0, 65, 43, 65, 168, 132, 192, 0, 16, 114, 0, 11, 32, 3, 65, 16, 106, 32, 0, 32, 1, 32, 2, 16, 29, 32, 3, 41, 2, 20, 33, 14, 2, 64, 2, 64, 32, 3, 40, 2, 16, 65, 1, 71, 4, 64, 32, 2, 32, 14, 167, 34, 4, 73, 13, 5, 32, 12, 32, 1, 32, 4, 16, 141, 1, 32, 3, 65, 0, 54, 2, 0, 32, 3, 32, 4, 54, 2, 4, 32, 4, 13, 1, 65, 28, 65, 1, 16, 149, 1, 34, 0, 69, 13, 6, 32, 0, 65, 24, 106, 65, 244, 128, 192, 0, 40, 0, 0, 54, 0, 0, 32, 0, 65, 16, 106, 65, 236, 128, 192, 0, 41, 0, 0, 55, 0, 0, 32, 0, 65, 8, 106, 65, 228, 128, 192, 0, 41, 0, 0, 55, 0, 0, 32, 0, 65, 220, 128, 192, 0, 41, 0, 0, 55, 0, 0, 65, 12, 65, 4, 16, 149, 1, 34, 1, 69, 13, 7, 32, 1, 66, 156, 128, 128, 128, 192, 3, 55, 2, 4, 32, 1, 32, 0, 54, 2, 0, 65, 14, 32, 1, 65, 200, 132, 192, 0, 16, 107, 34, 15, 66, 8, 136, 33, 14, 32, 15, 167, 33, 8, 12, 11, 11, 32, 3, 65, 1, 54, 2, 0, 32, 3, 32, 14, 55, 2, 4, 32, 13, 16, 133, 1, 65, 255, 1, 113, 65, 15, 70, 13, 1, 32, 3, 53, 0, 5, 32, 3, 65, 9, 106, 51, 0, 0, 32, 3, 65, 11, 106, 49, 0, 0, 66, 16, 134, 132, 66, 32, 134, 132, 33, 14, 32, 3, 45, 0, 4, 33, 8, 12, 10, 11, 32, 1, 32, 4, 106, 33, 1, 32, 2, 32, 4, 107, 33, 2, 12, 7, 11, 32, 3, 40, 2, 0, 65, 1, 71, 13, 6, 32, 3, 45, 0, 4, 65, 2, 79, 13, 5, 12, 6, 11, 32, 3, 65, 52, 106, 65, 1, 54, 2, 0, 32, 3, 65, 36, 106, 65, 2, 54, 2, 0, 32, 3, 32, 11, 54, 2, 56, 32, 3, 66, 3, 55, 2, 20, 32, 3, 65, 180, 130, 192, 0, 54, 2, 16, 32, 3, 65, 1, 54, 2, 44, 32, 3, 65, 244, 129, 192, 0, 54, 2, 60, 32, 3, 32, 3, 65, 40, 106, 54, 2, 32, 32, 3, 32, 3, 65, 60, 106, 54, 2, 48, 32, 3, 32, 3, 65, 56, 106, 54, 2, 40, 32, 3, 65, 16, 106, 65, 204, 130, 192, 0, 16, 130, 1, 0, 11, 32, 4, 32, 5, 65, 208, 133, 192, 0, 16, 99, 0, 11, 32, 4, 32, 2, 65, 220, 130, 192, 0, 16, 99, 0, 11, 65, 28, 65, 1, 16, 165, 1, 0, 11, 65, 12, 65, 4, 16, 165, 1, 0, 11, 32, 3, 40, 2, 8, 34, 4, 40, 2, 0, 32, 4, 40, 2, 4, 40, 2, 0, 17, 2, 0, 32, 4, 40, 2, 4, 34, 5, 40, 2, 4, 34, 9, 4, 64, 32, 4, 40, 2, 0, 32, 9, 32, 5, 40, 2, 8, 16, 156, 1, 11, 32, 3, 40, 2, 8, 65, 12, 65, 4, 16, 156, 1, 11, 32, 2, 13, 0, 11, 11, 32, 3, 65, 64, 107, 36, 0, 32, 8, 173, 66, 255, 1, 131, 32, 14, 66, 8, 134, 132, 11, 213, 5, 1, 6, 127, 2, 127, 32, 1, 69, 4, 64, 32, 0, 40, 2, 0, 33, 9, 65, 45, 33, 10, 32, 5, 65, 1, 106, 12, 1, 11, 65, 43, 65, 128, 128, 196, 0, 32, 0, 40, 2, 0, 34, 9, 65, 1, 113, 34, 1, 27, 33, 10, 32, 1, 32, 5, 106, 11, 33, 8, 2, 64, 32, 9, 65, 4, 113, 69, 4, 64, 65, 0, 33, 2, 12, 1, 11, 32, 3, 4, 64, 32, 3, 33, 6, 32, 2, 33, 1, 3, 64, 32, 7, 32, 1, 45, 0, 0, 65, 192, 1, 113, 65, 128, 1, 71, 106, 33, 7, 32, 1, 65, 1, 106, 33, 1, 32, 6, 65, 127, 106, 34, 6, 13, 0, 11, 11, 32, 7, 32, 8, 106, 33, 8, 11, 65, 1, 33, 1, 2, 64, 2, 64, 32, 0, 40, 2, 8, 65, 1, 71, 4, 64, 32, 0, 32, 10, 32, 2, 32, 3, 16, 111, 13, 1, 12, 2, 11, 32, 0, 65, 12, 106, 40, 2, 0, 34, 6, 32, 8, 77, 4, 64, 32, 0, 32, 10, 32, 2, 32, 3, 16, 111, 13, 1, 12, 2, 11, 2, 64, 2, 64, 2, 64, 2, 64, 32, 9, 65, 8, 113, 4, 64, 32, 0, 40, 2, 4, 33, 9, 32, 0, 65, 48, 54, 2, 4, 32, 0, 45, 0, 32, 33, 11, 32, 0, 65, 1, 58, 0, 32, 32, 0, 32, 10, 32, 2, 32, 3, 16, 111, 13, 5, 65, 0, 33, 1, 32, 6, 32, 8, 107, 34, 3, 33, 2, 65, 1, 32, 0, 45, 0, 32, 34, 6, 32, 6, 65, 3, 70, 27, 65, 3, 113, 65, 1, 107, 14, 3, 2, 1, 2, 3, 11, 65, 0, 33, 1, 32, 6, 32, 8, 107, 34, 6, 33, 8, 2, 64, 2, 64, 2, 64, 65, 1, 32, 0, 45, 0, 32, 34, 7, 32, 7, 65, 3, 70, 27, 65, 3, 113, 65, 1, 107, 14, 3, 1, 0, 1, 2, 11, 32, 6, 65, 1, 118, 33, 1, 32, 6, 65, 1, 106, 65, 1, 118, 33, 8, 12, 1, 11, 65, 0, 33, 8, 32, 6, 33, 1, 11, 32, 1, 65, 1, 106, 33, 1, 3, 64, 32, 1, 65, 127, 106, 34, 1, 69, 13, 4, 32, 0, 40, 2, 24, 32, 0, 40, 2, 4, 32, 0, 40, 2, 28, 40, 2, 16, 17, 0, 0, 69, 13, 0, 11, 65, 1, 15, 11, 32, 3, 65, 1, 118, 33, 1, 32, 3, 65, 1, 106, 65, 1, 118, 33, 2, 12, 1, 11, 65, 0, 33, 2, 32, 3, 33, 1, 11, 32, 1, 65, 1, 106, 33, 1, 2, 64, 3, 64, 32, 1, 65, 127, 106, 34, 1, 69, 13, 1, 32, 0, 40, 2, 24, 32, 0, 40, 2, 4, 32, 0, 40, 2, 28, 40, 2, 16, 17, 0, 0, 69, 13, 0, 11, 65, 1, 15, 11, 32, 0, 40, 2, 4, 33, 3, 65, 1, 33, 1, 32, 0, 40, 2, 24, 32, 4, 32, 5, 32, 0, 40, 2, 28, 40, 2, 12, 17, 1, 0, 13, 1, 32, 2, 65, 1, 106, 33, 7, 32, 0, 40, 2, 28, 33, 2, 32, 0, 40, 2, 24, 33, 4, 3, 64, 32, 7, 65, 127, 106, 34, 7, 4, 64, 32, 4, 32, 3, 32, 2, 40, 2, 16, 17, 0, 0, 69, 13, 1, 12, 3, 11, 11, 32, 0, 32, 11, 58, 0, 32, 32, 0, 32, 9, 54, 2, 4, 65, 0, 15, 11, 32, 0, 40, 2, 4, 33, 6, 65, 1, 33, 1, 32, 0, 32, 10, 32, 2, 32, 3, 16, 111, 13, 0, 32, 0, 40, 2, 24, 32, 4, 32, 5, 32, 0, 40, 2, 28, 40, 2, 12, 17, 1, 0, 13, 0, 32, 8, 65, 1, 106, 33, 7, 32, 0, 40, 2, 28, 33, 2, 32, 0, 40, 2, 24, 33, 0, 3, 64, 32, 7, 65, 127, 106, 34, 7, 69, 4, 64, 65, 0, 15, 11, 32, 0, 32, 6, 32, 2, 40, 2, 16, 17, 0, 0, 69, 13, 0, 11, 11, 32, 1, 15, 11, 32, 0, 40, 2, 24, 32, 4, 32, 5, 32, 0, 65, 28, 106, 40, 2, 0, 40, 2, 12, 17, 1, 0, 11, 205, 5, 2, 8, 127, 1, 126, 35, 0, 65, 16, 107, 34, 6, 36, 0, 2, 64, 2, 64, 2, 64, 2, 64, 32, 1, 65, 44, 106, 40, 2, 0, 34, 4, 69, 13, 0, 32, 1, 40, 2, 24, 4, 64, 32, 1, 65, 24, 106, 33, 9, 32, 1, 65, 32, 106, 33, 7, 32, 1, 65, 44, 106, 33, 8, 3, 64, 32, 1, 40, 2, 36, 33, 5, 32, 9, 32, 7, 40, 2, 0, 32, 4, 16, 75, 32, 1, 40, 2, 24, 32, 7, 40, 2, 0, 106, 32, 5, 32, 4, 16, 121, 26, 32, 7, 32, 7, 40, 2, 0, 32, 4, 106, 54, 2, 0, 32, 8, 40, 2, 0, 34, 5, 32, 4, 73, 13, 3, 32, 8, 65, 0, 54, 2, 0, 32, 5, 32, 4, 107, 34, 5, 69, 13, 2, 32, 1, 40, 2, 36, 34, 10, 32, 4, 32, 10, 106, 32, 5, 16, 96, 32, 8, 32, 5, 54, 2, 0, 32, 5, 33, 4, 32, 1, 40, 2, 24, 13, 0, 11, 11, 65, 236, 130, 192, 0, 65, 43, 65, 152, 132, 192, 0, 16, 114, 0, 11, 32, 1, 65, 36, 106, 33, 9, 32, 1, 41, 3, 0, 33, 12, 32, 3, 69, 13, 1, 32, 6, 32, 1, 32, 2, 32, 3, 32, 9, 65, 0, 16, 110, 32, 6, 45, 0, 0, 34, 4, 32, 1, 41, 3, 0, 32, 12, 125, 34, 12, 167, 114, 13, 2, 32, 6, 45, 0, 1, 65, 2, 70, 13, 2, 32, 1, 65, 24, 106, 33, 10, 32, 1, 65, 44, 106, 33, 7, 32, 1, 65, 32, 106, 33, 8, 3, 64, 2, 64, 32, 7, 40, 2, 0, 34, 4, 69, 13, 0, 2, 64, 32, 10, 40, 2, 0, 4, 64, 3, 64, 32, 1, 40, 2, 36, 33, 5, 32, 10, 32, 8, 40, 2, 0, 32, 4, 16, 75, 32, 1, 40, 2, 24, 32, 8, 40, 2, 0, 106, 32, 5, 32, 4, 16, 121, 26, 32, 8, 32, 8, 40, 2, 0, 32, 4, 106, 54, 2, 0, 32, 7, 40, 2, 0, 34, 5, 32, 4, 73, 13, 2, 32, 7, 65, 0, 54, 2, 0, 32, 5, 32, 4, 107, 34, 5, 69, 13, 3, 32, 1, 40, 2, 36, 34, 11, 32, 4, 32, 11, 106, 32, 5, 16, 96, 32, 7, 32, 5, 54, 2, 0, 32, 5, 33, 4, 32, 1, 40, 2, 24, 13, 0, 11, 11, 65, 236, 130, 192, 0, 65, 43, 65, 152, 132, 192, 0, 16, 114, 0, 11, 32, 4, 32, 5, 65, 208, 133, 192, 0, 16, 99, 0, 11, 32, 1, 41, 3, 0, 33, 12, 32, 6, 32, 1, 32, 2, 32, 3, 32, 9, 65, 0, 16, 110, 32, 6, 45, 0, 0, 34, 4, 32, 1, 41, 3, 0, 32, 12, 125, 34, 12, 167, 114, 13, 3, 32, 6, 45, 0, 1, 65, 2, 71, 13, 0, 11, 12, 2, 11, 32, 4, 32, 5, 65, 208, 133, 192, 0, 16, 99, 0, 11, 32, 6, 32, 1, 32, 2, 65, 0, 32, 9, 65, 0, 16, 110, 32, 1, 41, 3, 0, 32, 12, 125, 33, 12, 32, 6, 45, 0, 0, 33, 4, 11, 2, 64, 2, 64, 32, 0, 2, 127, 32, 4, 65, 255, 1, 113, 65, 1, 70, 4, 64, 65, 22, 65, 1, 16, 149, 1, 34, 1, 69, 13, 2, 32, 1, 65, 14, 106, 65, 142, 132, 192, 0, 41, 0, 0, 55, 0, 0, 32, 1, 65, 8, 106, 65, 136, 132, 192, 0, 41, 0, 0, 55, 0, 0, 32, 1, 65, 128, 132, 192, 0, 41, 0, 0, 55, 0, 0, 65, 12, 65, 4, 16, 149, 1, 34, 2, 69, 13, 3, 32, 2, 66, 150, 128, 128, 128, 224, 2, 55, 2, 4, 32, 2, 32, 1, 54, 2, 0, 32, 0, 65, 11, 32, 2, 65, 200, 132, 192, 0, 16, 107, 55, 2, 4, 65, 1, 12, 1, 11, 32, 0, 32, 12, 62, 2, 4, 65, 0, 11, 54, 2, 0, 32, 6, 65, 16, 106, 36, 0, 15, 11, 65, 22, 65, 1, 16, 165, 1, 0, 11, 65, 12, 65, 4, 16, 165, 1, 0, 11, 205, 5, 2, 8, 127, 1, 126, 35, 0, 65, 16, 107, 34, 6, 36, 0, 2, 64, 2, 64, 2, 64, 2, 64, 32, 1, 65, 44, 106, 40, 2, 0, 34, 4, 69, 13, 0, 32, 1, 40, 2, 24, 4, 64, 32, 1, 65, 24, 106, 33, 9, 32, 1, 65, 32, 106, 33, 7, 32, 1, 65, 44, 106, 33, 8, 3, 64, 32, 1, 40, 2, 36, 33, 5, 32, 9, 32, 7, 40, 2, 0, 32, 4, 16, 75, 32, 1, 40, 2, 24, 32, 7, 40, 2, 0, 106, 32, 5, 32, 4, 16, 121, 26, 32, 7, 32, 7, 40, 2, 0, 32, 4, 106, 54, 2, 0, 32, 8, 40, 2, 0, 34, 5, 32, 4, 73, 13, 3, 32, 8, 65, 0, 54, 2, 0, 32, 5, 32, 4, 107, 34, 5, 69, 13, 2, 32, 1, 40, 2, 36, 34, 10, 32, 4, 32, 10, 106, 32, 5, 16, 96, 32, 8, 32, 5, 54, 2, 0, 32, 5, 33, 4, 32, 1, 40, 2, 24, 13, 0, 11, 11, 65, 236, 130, 192, 0, 65, 43, 65, 152, 132, 192, 0, 16, 114, 0, 11, 32, 1, 65, 36, 106, 33, 9, 32, 1, 41, 3, 0, 33, 12, 32, 3, 69, 13, 1, 32, 6, 32, 1, 32, 2, 32, 3, 32, 9, 65, 0, 16, 65, 32, 6, 45, 0, 0, 34, 4, 32, 1, 41, 3, 0, 32, 12, 125, 34, 12, 167, 114, 13, 2, 32, 6, 45, 0, 1, 65, 2, 70, 13, 2, 32, 1, 65, 24, 106, 33, 10, 32, 1, 65, 44, 106, 33, 7, 32, 1, 65, 32, 106, 33, 8, 3, 64, 2, 64, 32, 7, 40, 2, 0, 34, 4, 69, 13, 0, 2, 64, 32, 10, 40, 2, 0, 4, 64, 3, 64, 32, 1, 40, 2, 36, 33, 5, 32, 10, 32, 8, 40, 2, 0, 32, 4, 16, 75, 32, 1, 40, 2, 24, 32, 8, 40, 2, 0, 106, 32, 5, 32, 4, 16, 121, 26, 32, 8, 32, 8, 40, 2, 0, 32, 4, 106, 54, 2, 0, 32, 7, 40, 2, 0, 34, 5, 32, 4, 73, 13, 2, 32, 7, 65, 0, 54, 2, 0, 32, 5, 32, 4, 107, 34, 5, 69, 13, 3, 32, 1, 40, 2, 36, 34, 11, 32, 4, 32, 11, 106, 32, 5, 16, 96, 32, 7, 32, 5, 54, 2, 0, 32, 5, 33, 4, 32, 1, 40, 2, 24, 13, 0, 11, 11, 65, 236, 130, 192, 0, 65, 43, 65, 152, 132, 192, 0, 16, 114, 0, 11, 32, 4, 32, 5, 65, 208, 133, 192, 0, 16, 99, 0, 11, 32, 1, 41, 3, 0, 33, 12, 32, 6, 32, 1, 32, 2, 32, 3, 32, 9, 65, 0, 16, 65, 32, 6, 45, 0, 0, 34, 4, 32, 1, 41, 3, 0, 32, 12, 125, 34, 12, 167, 114, 13, 3, 32, 6, 45, 0, 1, 65, 2, 71, 13, 0, 11, 12, 2, 11, 32, 4, 32, 5, 65, 208, 133, 192, 0, 16, 99, 0, 11, 32, 6, 32, 1, 32, 2, 65, 0, 32, 9, 65, 0, 16, 65, 32, 1, 41, 3, 0, 32, 12, 125, 33, 12, 32, 6, 45, 0, 0, 33, 4, 11, 2, 64, 2, 64, 32, 0, 2, 127, 32, 4, 65, 255, 1, 113, 65, 1, 70, 4, 64, 65, 22, 65, 1, 16, 149, 1, 34, 1, 69, 13, 2, 32, 1, 65, 14, 106, 65, 142, 132, 192, 0, 41, 0, 0, 55, 0, 0, 32, 1, 65, 8, 106, 65, 136, 132, 192, 0, 41, 0, 0, 55, 0, 0, 32, 1, 65, 128, 132, 192, 0, 41, 0, 0, 55, 0, 0, 65, 12, 65, 4, 16, 149, 1, 34, 2, 69, 13, 3, 32, 2, 66, 150, 128, 128, 128, 224, 2, 55, 2, 4, 32, 2, 32, 1, 54, 2, 0, 32, 0, 65, 11, 32, 2, 65, 200, 132, 192, 0, 16, 107, 55, 2, 4, 65, 1, 12, 1, 11, 32, 0, 32, 12, 62, 2, 4, 65, 0, 11, 54, 2, 0, 32, 6, 65, 16, 106, 36, 0, 15, 11, 65, 22, 65, 1, 16, 165, 1, 0, 11, 65, 12, 65, 4, 16, 165, 1, 0, 11, 201, 4, 1, 18, 127, 32, 0, 47, 1, 2, 33, 14, 32, 0, 47, 1, 0, 33, 15, 2, 64, 32, 2, 65, 124, 113, 34, 17, 32, 17, 65, 192, 173, 1, 112, 34, 18, 107, 34, 19, 65, 192, 173, 1, 73, 4, 64, 12, 1, 11, 32, 15, 65, 192, 173, 1, 108, 33, 20, 32, 1, 33, 12, 32, 19, 33, 16, 3, 64, 65, 192, 210, 126, 33, 13, 32, 16, 65, 192, 210, 126, 106, 33, 16, 32, 12, 33, 3, 3, 64, 32, 4, 32, 8, 32, 3, 45, 0, 3, 106, 34, 8, 106, 33, 4, 32, 5, 32, 9, 32, 3, 45, 0, 2, 106, 34, 9, 106, 33, 5, 32, 6, 32, 10, 32, 3, 45, 0, 1, 106, 34, 10, 106, 33, 6, 32, 7, 32, 11, 32, 3, 45, 0, 0, 106, 34, 11, 106, 33, 7, 32, 3, 65, 4, 106, 33, 3, 32, 13, 65, 4, 106, 34, 13, 13, 0, 11, 32, 4, 65, 241, 255, 3, 112, 33, 4, 32, 5, 65, 241, 255, 3, 112, 33, 5, 32, 6, 65, 241, 255, 3, 112, 33, 6, 32, 7, 65, 241, 255, 3, 112, 33, 7, 32, 8, 65, 241, 255, 3, 112, 33, 8, 32, 9, 65, 241, 255, 3, 112, 33, 9, 32, 10, 65, 241, 255, 3, 112, 33, 10, 32, 11, 65, 241, 255, 3, 112, 33, 11, 32, 12, 65, 192, 173, 1, 106, 33, 12, 32, 14, 32, 20, 106, 65, 241, 255, 3, 112, 33, 14, 32, 16, 65, 192, 173, 1, 79, 13, 0, 11, 11, 32, 2, 65, 3, 113, 33, 13, 32, 18, 65, 252, 255, 1, 113, 34, 2, 4, 64, 32, 1, 32, 19, 106, 33, 3, 65, 0, 32, 2, 107, 33, 12, 3, 64, 32, 7, 32, 11, 32, 3, 45, 0, 0, 106, 34, 11, 106, 33, 7, 32, 4, 32, 8, 32, 3, 65, 3, 106, 45, 0, 0, 106, 34, 8, 106, 33, 4, 32, 5, 32, 9, 32, 3, 65, 2, 106, 45, 0, 0, 106, 34, 9, 106, 33, 5, 32, 6, 32, 10, 32, 3, 65, 1, 106, 45, 0, 0, 106, 34, 10, 106, 33, 6, 32, 3, 65, 4, 106, 33, 3, 32, 12, 65, 4, 106, 34, 12, 13, 0, 11, 11, 32, 14, 32, 15, 32, 18, 108, 106, 65, 241, 255, 3, 112, 32, 7, 65, 241, 255, 3, 112, 65, 2, 116, 106, 32, 6, 65, 241, 255, 3, 112, 65, 2, 116, 32, 10, 65, 241, 255, 3, 112, 34, 2, 107, 106, 32, 5, 65, 241, 255, 3, 112, 65, 2, 116, 32, 9, 65, 241, 255, 3, 112, 34, 12, 65, 1, 116, 107, 106, 65, 0, 32, 8, 65, 241, 255, 3, 112, 34, 3, 107, 65, 3, 108, 32, 4, 65, 241, 255, 3, 112, 65, 2, 116, 106, 106, 65, 166, 255, 23, 106, 33, 4, 32, 3, 32, 12, 32, 2, 32, 11, 65, 241, 255, 3, 112, 32, 15, 106, 106, 106, 106, 33, 5, 32, 13, 4, 64, 32, 1, 32, 17, 106, 33, 3, 3, 64, 32, 5, 32, 3, 45, 0, 0, 106, 34, 5, 32, 4, 106, 33, 4, 32, 3, 65, 1, 106, 33, 3, 32, 13, 65, 127, 106, 34, 13, 13, 0, 11, 11, 32, 0, 32, 4, 65, 241, 255, 3, 112, 59, 1, 2, 32, 0, 32, 5, 65, 241, 255, 3, 112, 59, 1, 0, 11, 177, 5, 1, 9, 127, 35, 0, 65, 48, 107, 34, 3, 36, 0, 32, 3, 65, 36, 106, 32, 1, 54, 2, 0, 32, 3, 65, 3, 58, 0, 40, 32, 3, 66, 128, 128, 128, 128, 128, 4, 55, 3, 8, 32, 3, 32, 0, 54, 2, 32, 32, 3, 65, 0, 54, 2, 24, 32, 3, 65, 0, 54, 2, 16, 2, 127, 2, 64, 2, 64, 2, 64, 32, 2, 40, 2, 8, 34, 4, 4, 64, 32, 2, 40, 2, 0, 33, 6, 32, 2, 40, 2, 4, 34, 7, 32, 2, 65, 12, 106, 40, 2, 0, 34, 5, 32, 5, 32, 7, 75, 27, 34, 5, 69, 13, 1, 32, 0, 32, 6, 40, 2, 0, 32, 6, 40, 2, 4, 32, 1, 40, 2, 12, 17, 1, 0, 13, 3, 32, 6, 65, 12, 106, 33, 0, 32, 2, 40, 2, 16, 33, 9, 32, 5, 33, 8, 3, 64, 32, 3, 32, 4, 65, 28, 106, 45, 0, 0, 58, 0, 40, 32, 3, 32, 4, 65, 4, 106, 41, 2, 0, 66, 32, 137, 55, 3, 8, 32, 4, 65, 24, 106, 40, 2, 0, 33, 1, 65, 0, 33, 10, 65, 0, 33, 2, 2, 64, 2, 64, 2, 64, 32, 4, 65, 20, 106, 40, 2, 0, 65, 1, 107, 14, 2, 0, 2, 1, 11, 32, 1, 65, 3, 116, 32, 9, 106, 34, 11, 40, 2, 4, 65, 193, 0, 71, 13, 1, 32, 11, 40, 2, 0, 40, 2, 0, 33, 1, 11, 65, 1, 33, 2, 11, 32, 3, 32, 1, 54, 2, 20, 32, 3, 32, 2, 54, 2, 16, 32, 4, 65, 16, 106, 40, 2, 0, 33, 2, 2, 64, 2, 64, 2, 64, 32, 4, 65, 12, 106, 40, 2, 0, 65, 1, 107, 14, 2, 0, 2, 1, 11, 32, 2, 65, 3, 116, 32, 9, 106, 34, 1, 40, 2, 4, 65, 193, 0, 71, 13, 1, 32, 1, 40, 2, 0, 40, 2, 0, 33, 2, 11, 65, 1, 33, 10, 11, 32, 3, 32, 2, 54, 2, 28, 32, 3, 32, 10, 54, 2, 24, 32, 9, 32, 4, 40, 2, 0, 65, 3, 116, 106, 34, 1, 40, 2, 0, 32, 3, 65, 8, 106, 32, 1, 40, 2, 4, 17, 0, 0, 13, 4, 32, 8, 65, 127, 106, 34, 8, 69, 13, 3, 32, 4, 65, 32, 106, 33, 4, 32, 0, 65, 124, 106, 33, 1, 32, 0, 40, 2, 0, 33, 2, 32, 0, 65, 8, 106, 33, 0, 32, 3, 40, 2, 32, 32, 1, 40, 2, 0, 32, 2, 32, 3, 40, 2, 36, 40, 2, 12, 17, 1, 0, 69, 13, 0, 11, 12, 3, 11, 32, 2, 40, 2, 0, 33, 6, 32, 2, 40, 2, 4, 34, 7, 32, 2, 65, 20, 106, 40, 2, 0, 34, 5, 32, 5, 32, 7, 75, 27, 34, 5, 69, 13, 0, 32, 2, 40, 2, 16, 33, 4, 32, 0, 32, 6, 40, 2, 0, 32, 6, 40, 2, 4, 32, 1, 40, 2, 12, 17, 1, 0, 13, 2, 32, 6, 65, 12, 106, 33, 0, 32, 5, 33, 2, 3, 64, 32, 4, 40, 2, 0, 32, 3, 65, 8, 106, 32, 4, 65, 4, 106, 40, 2, 0, 17, 0, 0, 13, 3, 32, 2, 65, 127, 106, 34, 2, 69, 13, 2, 32, 4, 65, 8, 106, 33, 4, 32, 0, 65, 124, 106, 33, 1, 32, 0, 40, 2, 0, 33, 8, 32, 0, 65, 8, 106, 33, 0, 32, 3, 40, 2, 32, 32, 1, 40, 2, 0, 32, 8, 32, 3, 40, 2, 36, 40, 2, 12, 17, 1, 0, 69, 13, 0, 11, 12, 2, 11, 65, 0, 33, 5, 11, 32, 7, 32, 5, 75, 4, 64, 32, 3, 40, 2, 32, 32, 6, 32, 5, 65, 3, 116, 106, 34, 0, 40, 2, 0, 32, 0, 40, 2, 4, 32, 3, 40, 2, 36, 40, 2, 12, 17, 1, 0, 13, 1, 11, 65, 0, 12, 1, 11, 65, 1, 11, 32, 3, 65, 48, 106, 36, 0, 11, 177, 4, 1, 8, 127, 2, 64, 2, 64, 32, 2, 40, 2, 0, 34, 5, 4, 64, 32, 1, 65, 127, 106, 33, 10, 32, 0, 65, 2, 116, 33, 9, 65, 0, 32, 1, 107, 33, 11, 3, 64, 32, 5, 65, 8, 106, 33, 6, 32, 5, 40, 2, 8, 34, 7, 65, 1, 113, 4, 64, 3, 64, 32, 6, 32, 7, 65, 126, 113, 54, 2, 0, 2, 127, 65, 0, 32, 5, 40, 2, 4, 34, 7, 65, 124, 113, 34, 6, 69, 13, 0, 26, 65, 0, 32, 6, 32, 6, 45, 0, 0, 65, 1, 113, 27, 11, 33, 1, 2, 64, 32, 5, 40, 2, 0, 34, 8, 65, 124, 113, 34, 12, 69, 13, 0, 65, 0, 32, 12, 32, 8, 65, 2, 113, 27, 34, 8, 69, 13, 0, 32, 8, 32, 8, 40, 2, 4, 65, 3, 113, 32, 6, 114, 54, 2, 4, 32, 5, 40, 2, 4, 34, 7, 65, 124, 113, 33, 6, 11, 32, 5, 32, 6, 4, 127, 32, 6, 32, 6, 40, 2, 0, 65, 3, 113, 32, 5, 40, 2, 0, 65, 124, 113, 114, 54, 2, 0, 32, 5, 40, 2, 4, 5, 32, 7, 11, 65, 3, 113, 54, 2, 4, 32, 5, 32, 5, 40, 2, 0, 34, 5, 65, 3, 113, 54, 2, 0, 32, 5, 65, 2, 113, 4, 64, 32, 1, 32, 1, 40, 2, 0, 65, 2, 114, 54, 2, 0, 11, 32, 2, 32, 1, 54, 2, 0, 32, 1, 65, 8, 106, 33, 6, 32, 1, 34, 5, 40, 2, 8, 34, 7, 65, 1, 113, 13, 0, 11, 11, 32, 5, 40, 2, 0, 65, 124, 113, 34, 1, 32, 6, 107, 32, 9, 79, 4, 64, 32, 6, 32, 3, 32, 0, 32, 4, 40, 2, 16, 17, 0, 0, 65, 2, 116, 106, 65, 8, 106, 32, 1, 32, 9, 107, 32, 11, 113, 34, 1, 77, 4, 64, 32, 1, 65, 0, 54, 2, 0, 32, 1, 65, 120, 106, 34, 1, 66, 0, 55, 2, 0, 32, 1, 32, 5, 40, 2, 0, 65, 124, 113, 54, 2, 0, 2, 64, 32, 5, 40, 2, 0, 34, 0, 65, 124, 113, 34, 2, 69, 13, 0, 65, 0, 32, 2, 32, 0, 65, 2, 113, 27, 34, 0, 69, 13, 0, 32, 0, 32, 0, 40, 2, 4, 65, 3, 113, 32, 1, 114, 54, 2, 4, 11, 32, 1, 32, 1, 40, 2, 4, 65, 3, 113, 32, 5, 114, 54, 2, 4, 32, 5, 32, 5, 40, 2, 0, 65, 3, 113, 32, 1, 114, 54, 2, 0, 32, 6, 32, 6, 40, 2, 0, 65, 126, 113, 54, 2, 0, 32, 5, 40, 2, 0, 34, 0, 65, 2, 113, 69, 13, 5, 32, 5, 32, 0, 65, 125, 113, 54, 2, 0, 32, 1, 32, 1, 40, 2, 0, 65, 2, 114, 54, 2, 0, 12, 5, 11, 32, 6, 32, 10, 113, 69, 13, 3, 11, 32, 2, 32, 5, 40, 2, 8, 34, 5, 54, 2, 0, 32, 5, 13, 0, 11, 11, 65, 0, 15, 11, 32, 2, 32, 6, 40, 2, 0, 65, 124, 113, 54, 2, 0, 32, 5, 33, 1, 11, 32, 1, 32, 1, 40, 2, 0, 65, 1, 114, 54, 2, 0, 32, 1, 65, 8, 106, 11, 170, 5, 1, 3, 127, 35, 0, 65, 64, 106, 34, 2, 36, 0, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 32, 0, 45, 0, 0, 65, 1, 107, 14, 2, 0, 2, 1, 11, 65, 136, 189, 193, 0, 33, 3, 65, 22, 33, 4, 2, 64, 2, 127, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 32, 0, 45, 0, 1, 65, 1, 107, 14, 17, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 0, 11, 65, 161, 191, 193, 0, 33, 3, 65, 16, 33, 4, 12, 17, 11, 65, 144, 191, 193, 0, 33, 3, 65, 17, 33, 4, 12, 16, 11, 65, 254, 190, 193, 0, 33, 3, 65, 18, 33, 4, 12, 15, 11, 65, 238, 190, 193, 0, 33, 3, 65, 16, 33, 4, 12, 14, 11, 65, 220, 190, 193, 0, 33, 3, 65, 18, 33, 4, 12, 13, 11, 65, 207, 190, 193, 0, 33, 3, 65, 13, 33, 4, 12, 12, 11, 65, 193, 190, 193, 0, 12, 10, 11, 65, 172, 190, 193, 0, 33, 3, 65, 21, 33, 4, 12, 10, 11, 65, 161, 190, 193, 0, 33, 3, 65, 11, 33, 4, 12, 9, 11, 65, 140, 190, 193, 0, 33, 3, 65, 21, 33, 4, 12, 8, 11, 65, 247, 189, 193, 0, 33, 3, 65, 21, 33, 4, 12, 7, 11, 65, 224, 189, 193, 0, 33, 3, 65, 23, 33, 4, 12, 6, 11, 65, 212, 189, 193, 0, 33, 3, 65, 12, 33, 4, 12, 5, 11, 65, 203, 189, 193, 0, 33, 3, 65, 9, 33, 4, 12, 4, 11, 65, 193, 189, 193, 0, 33, 3, 65, 10, 33, 4, 12, 3, 11, 65, 172, 189, 193, 0, 33, 3, 65, 21, 33, 4, 12, 2, 11, 65, 158, 189, 193, 0, 11, 33, 3, 65, 14, 33, 4, 11, 32, 2, 65, 60, 106, 65, 1, 54, 2, 0, 32, 2, 32, 4, 54, 2, 28, 32, 2, 32, 3, 54, 2, 24, 32, 2, 65, 39, 54, 2, 12, 32, 2, 66, 1, 55, 2, 44, 32, 2, 65, 128, 189, 193, 0, 54, 2, 40, 32, 2, 32, 2, 65, 24, 106, 54, 2, 8, 32, 2, 32, 2, 65, 8, 106, 54, 2, 56, 32, 1, 32, 2, 65, 40, 106, 16, 102, 33, 0, 12, 2, 11, 32, 2, 32, 0, 65, 4, 106, 40, 2, 0, 54, 2, 4, 65, 20, 65, 1, 16, 149, 1, 34, 0, 69, 13, 2, 32, 0, 65, 16, 106, 65, 192, 194, 193, 0, 40, 0, 0, 54, 0, 0, 32, 0, 65, 8, 106, 65, 184, 194, 193, 0, 41, 0, 0, 55, 0, 0, 32, 0, 65, 176, 194, 193, 0, 41, 0, 0, 55, 0, 0, 32, 2, 66, 148, 128, 128, 128, 192, 2, 55, 2, 12, 32, 2, 32, 0, 54, 2, 8, 32, 2, 65, 60, 106, 65, 2, 54, 2, 0, 32, 2, 65, 36, 106, 65, 40, 54, 2, 0, 32, 2, 66, 3, 55, 2, 44, 32, 2, 65, 192, 191, 193, 0, 54, 2, 40, 32, 2, 65, 41, 54, 2, 28, 32, 2, 32, 2, 65, 24, 106, 54, 2, 56, 32, 2, 32, 2, 65, 4, 106, 54, 2, 32, 32, 2, 32, 2, 65, 8, 106, 54, 2, 24, 32, 1, 32, 2, 65, 40, 106, 16, 102, 33, 0, 32, 2, 40, 2, 8, 34, 1, 69, 13, 1, 32, 2, 40, 2, 12, 34, 3, 69, 13, 1, 32, 1, 32, 3, 65, 1, 16, 156, 1, 12, 1, 11, 32, 0, 65, 4, 106, 40, 2, 0, 34, 0, 40, 2, 0, 32, 1, 32, 0, 40, 2, 4, 40, 2, 32, 17, 0, 0, 33, 0, 11, 32, 2, 65, 64, 107, 36, 0, 32, 0, 15, 11, 65, 20, 65, 1, 16, 165, 1, 0, 11, 133, 4, 2, 7, 127, 2, 126, 35, 0, 65, 16, 107, 34, 4, 36, 0, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 32, 0, 65, 212, 0, 106, 40, 2, 0, 34, 2, 69, 13, 0, 32, 0, 40, 2, 24, 4, 64, 32, 0, 65, 24, 106, 33, 6, 32, 0, 65, 32, 106, 33, 3, 32, 0, 65, 212, 0, 106, 33, 5, 3, 64, 32, 0, 40, 2, 76, 33, 1, 32, 6, 32, 3, 40, 2, 0, 32, 2, 16, 75, 32, 0, 40, 2, 24, 32, 3, 40, 2, 0, 106, 32, 1, 32, 2, 16, 121, 26, 32, 3, 32, 3, 40, 2, 0, 32, 2, 106, 54, 2, 0, 32, 5, 40, 2, 0, 34, 1, 32, 2, 73, 13, 3, 32, 5, 65, 0, 54, 2, 0, 32, 1, 32, 2, 107, 34, 1, 69, 13, 2, 32, 0, 40, 2, 76, 34, 7, 32, 2, 32, 7, 106, 32, 1, 16, 96, 32, 5, 32, 1, 54, 2, 0, 32, 1, 33, 2, 32, 0, 40, 2, 24, 13, 0, 11, 11, 65, 236, 130, 192, 0, 65, 43, 65, 168, 132, 192, 0, 16, 114, 0, 11, 32, 0, 16, 57, 34, 8, 167, 65, 255, 1, 113, 65, 3, 71, 13, 1, 66, 3, 33, 9, 66, 0, 33, 8, 32, 0, 40, 2, 72, 65, 7, 75, 13, 4, 32, 0, 65, 24, 106, 33, 5, 32, 0, 65, 48, 106, 33, 6, 32, 0, 65, 32, 106, 33, 2, 3, 64, 32, 6, 16, 147, 1, 33, 1, 32, 4, 32, 6, 40, 2, 16, 34, 3, 65, 24, 118, 58, 0, 15, 32, 4, 32, 3, 65, 16, 118, 58, 0, 14, 32, 4, 32, 3, 65, 8, 118, 58, 0, 13, 32, 4, 32, 3, 58, 0, 12, 32, 4, 32, 1, 65, 24, 118, 58, 0, 11, 32, 4, 32, 1, 65, 16, 118, 58, 0, 10, 32, 4, 32, 1, 65, 8, 118, 58, 0, 9, 32, 4, 32, 1, 58, 0, 8, 32, 5, 40, 2, 0, 69, 13, 3, 32, 0, 40, 2, 72, 34, 1, 65, 9, 79, 13, 4, 32, 5, 32, 2, 40, 2, 0, 65, 8, 32, 1, 107, 34, 3, 16, 75, 32, 0, 40, 2, 24, 32, 2, 40, 2, 0, 106, 32, 4, 65, 8, 106, 32, 1, 106, 32, 3, 16, 121, 26, 32, 2, 32, 2, 40, 2, 0, 32, 3, 106, 54, 2, 0, 32, 0, 32, 0, 40, 2, 72, 32, 3, 106, 34, 1, 54, 2, 72, 32, 1, 65, 8, 73, 13, 0, 11, 12, 4, 11, 32, 2, 32, 1, 65, 208, 133, 192, 0, 16, 99, 0, 11, 32, 8, 66, 255, 1, 131, 33, 9, 32, 8, 66, 128, 126, 131, 33, 8, 12, 2, 11, 65, 236, 130, 192, 0, 65, 43, 65, 168, 132, 192, 0, 16, 114, 0, 11, 32, 1, 65, 8, 65, 212, 129, 192, 0, 16, 101, 0, 11, 32, 4, 65, 16, 106, 36, 0, 32, 8, 32, 9, 132, 11, 138, 4, 1, 2, 127, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 32, 2, 65, 2, 75, 4, 64, 32, 3, 69, 13, 1, 32, 3, 65, 129, 128, 2, 79, 13, 2, 32, 1, 32, 1, 40, 2, 8, 32, 2, 106, 54, 2, 8, 32, 1, 40, 2, 0, 34, 4, 65, 128, 128, 4, 79, 13, 5, 32, 1, 32, 4, 106, 65, 16, 106, 32, 2, 65, 125, 106, 34, 2, 58, 0, 0, 32, 1, 32, 1, 40, 2, 0, 65, 1, 106, 34, 4, 54, 2, 0, 32, 4, 65, 128, 128, 4, 79, 13, 5, 32, 1, 32, 4, 106, 65, 16, 106, 32, 3, 65, 127, 106, 34, 3, 58, 0, 0, 32, 1, 32, 1, 40, 2, 0, 65, 1, 106, 34, 4, 54, 2, 0, 32, 4, 65, 128, 128, 4, 79, 13, 5, 32, 1, 32, 4, 106, 65, 16, 106, 32, 3, 65, 8, 118, 34, 5, 58, 0, 0, 32, 1, 32, 1, 40, 2, 0, 65, 1, 106, 54, 2, 0, 32, 1, 40, 2, 4, 34, 4, 65, 128, 128, 4, 79, 13, 3, 32, 1, 32, 4, 106, 65, 16, 106, 34, 4, 32, 4, 45, 0, 0, 65, 1, 118, 58, 0, 0, 32, 1, 40, 2, 4, 34, 4, 65, 128, 128, 4, 79, 13, 4, 32, 1, 32, 4, 106, 65, 16, 106, 34, 4, 32, 4, 45, 0, 0, 65, 128, 1, 114, 58, 0, 0, 32, 1, 32, 1, 40, 2, 12, 65, 127, 106, 34, 4, 54, 2, 12, 32, 4, 69, 4, 64, 32, 1, 65, 8, 54, 2, 12, 32, 1, 32, 1, 40, 2, 0, 34, 4, 54, 2, 4, 32, 1, 32, 4, 65, 1, 106, 54, 2, 0, 11, 32, 0, 32, 3, 65, 136, 161, 192, 0, 106, 32, 5, 65, 136, 169, 192, 0, 106, 32, 3, 65, 128, 4, 73, 27, 45, 0, 0, 65, 1, 116, 106, 65, 192, 4, 106, 34, 1, 32, 1, 47, 1, 0, 65, 1, 106, 59, 1, 0, 2, 64, 32, 2, 65, 255, 1, 77, 4, 64, 32, 2, 65, 1, 116, 65, 164, 154, 192, 0, 106, 47, 1, 0, 34, 1, 65, 159, 2, 75, 13, 1, 32, 0, 32, 1, 65, 1, 116, 106, 34, 0, 32, 0, 47, 1, 0, 65, 1, 106, 59, 1, 0, 15, 11, 32, 2, 65, 128, 2, 65, 184, 173, 192, 0, 16, 98, 0, 11, 32, 1, 65, 160, 2, 65, 200, 173, 192, 0, 16, 98, 0, 11, 65, 248, 171, 192, 0, 65, 51, 65, 172, 172, 192, 0, 16, 114, 0, 11, 65, 188, 172, 192, 0, 65, 33, 65, 224, 172, 192, 0, 16, 114, 0, 11, 65, 240, 172, 192, 0, 65, 53, 65, 168, 173, 192, 0, 16, 114, 0, 11, 32, 4, 65, 128, 128, 4, 65, 244, 153, 192, 0, 16, 98, 0, 11, 32, 4, 65, 128, 128, 4, 65, 244, 153, 192, 0, 16, 98, 0, 11, 32, 4, 65, 128, 128, 4, 65, 228, 153, 192, 0, 16, 98, 0, 11, 219, 3, 1, 4, 127, 35, 0, 65, 32, 107, 34, 2, 36, 0, 32, 0, 40, 2, 0, 33, 4, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 32, 1, 65, 128, 1, 79, 4, 64, 32, 2, 65, 0, 54, 2, 16, 32, 1, 65, 128, 16, 73, 13, 1, 32, 2, 65, 16, 106, 33, 0, 32, 1, 65, 128, 128, 4, 73, 4, 64, 32, 2, 32, 1, 65, 63, 113, 65, 128, 1, 114, 58, 0, 18, 32, 2, 32, 1, 65, 12, 118, 65, 224, 1, 114, 58, 0, 16, 32, 2, 32, 1, 65, 6, 118, 65, 63, 113, 65, 128, 1, 114, 58, 0, 17, 65, 3, 33, 1, 12, 5, 11, 32, 2, 32, 1, 65, 63, 113, 65, 128, 1, 114, 58, 0, 19, 32, 2, 32, 1, 65, 18, 118, 65, 240, 1, 114, 58, 0, 16, 32, 2, 32, 1, 65, 6, 118, 65, 63, 113, 65, 128, 1, 114, 58, 0, 18, 32, 2, 32, 1, 65, 12, 118, 65, 63, 113, 65, 128, 1, 114, 58, 0, 17, 65, 4, 33, 1, 12, 4, 11, 32, 4, 40, 2, 8, 34, 0, 32, 4, 65, 4, 106, 40, 2, 0, 71, 4, 64, 32, 4, 40, 2, 0, 33, 3, 12, 3, 11, 32, 0, 65, 1, 106, 34, 3, 32, 0, 73, 13, 1, 32, 0, 65, 1, 116, 34, 5, 32, 3, 32, 5, 32, 3, 75, 27, 34, 3, 65, 8, 32, 3, 65, 8, 75, 27, 33, 3, 2, 64, 32, 0, 69, 4, 64, 32, 2, 65, 0, 54, 2, 16, 12, 1, 11, 32, 2, 65, 24, 106, 65, 1, 54, 2, 0, 32, 2, 32, 0, 54, 2, 20, 32, 2, 32, 4, 40, 2, 0, 54, 2, 16, 11, 32, 2, 32, 3, 32, 2, 65, 16, 106, 16, 80, 32, 2, 65, 8, 106, 40, 2, 0, 33, 0, 32, 2, 40, 2, 4, 33, 3, 32, 2, 40, 2, 0, 65, 1, 71, 4, 64, 32, 4, 32, 3, 54, 2, 0, 32, 4, 65, 4, 106, 32, 0, 54, 2, 0, 32, 4, 40, 2, 8, 33, 0, 12, 3, 11, 32, 0, 69, 13, 1, 32, 3, 32, 0, 16, 165, 1, 0, 11, 32, 2, 32, 1, 65, 63, 113, 65, 128, 1, 114, 58, 0, 17, 32, 2, 32, 1, 65, 6, 118, 65, 192, 1, 114, 58, 0, 16, 32, 2, 65, 16, 106, 33, 0, 65, 2, 33, 1, 12, 2, 11, 16, 158, 1, 0, 11, 32, 0, 32, 3, 106, 32, 1, 58, 0, 0, 32, 4, 32, 4, 40, 2, 8, 65, 1, 106, 54, 2, 8, 12, 1, 11, 32, 4, 32, 0, 32, 0, 32, 1, 106, 16, 66, 11, 32, 2, 65, 32, 106, 36, 0, 65, 0, 11, 202, 3, 1, 4, 127, 35, 0, 65, 32, 107, 34, 2, 36, 0, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 32, 1, 65, 128, 1, 79, 4, 64, 32, 2, 65, 0, 54, 2, 16, 32, 1, 65, 128, 16, 73, 13, 1, 32, 1, 65, 128, 128, 4, 73, 4, 64, 32, 2, 32, 1, 65, 63, 113, 65, 128, 1, 114, 58, 0, 18, 32, 2, 32, 1, 65, 12, 118, 65, 224, 1, 114, 58, 0, 16, 32, 2, 32, 1, 65, 6, 118, 65, 63, 113, 65, 128, 1, 114, 58, 0, 17, 65, 3, 33, 1, 12, 5, 11, 32, 2, 32, 1, 65, 63, 113, 65, 128, 1, 114, 58, 0, 19, 32, 2, 32, 1, 65, 18, 118, 65, 240, 1, 114, 58, 0, 16, 32, 2, 32, 1, 65, 6, 118, 65, 63, 113, 65, 128, 1, 114, 58, 0, 18, 32, 2, 32, 1, 65, 12, 118, 65, 63, 113, 65, 128, 1, 114, 58, 0, 17, 65, 4, 33, 1, 12, 4, 11, 32, 0, 40, 2, 8, 34, 3, 32, 0, 65, 4, 106, 40, 2, 0, 71, 4, 64, 32, 0, 40, 2, 0, 33, 4, 12, 3, 11, 32, 3, 65, 1, 106, 34, 4, 32, 3, 73, 13, 1, 32, 3, 65, 1, 116, 34, 5, 32, 4, 32, 5, 32, 4, 75, 27, 34, 4, 65, 8, 32, 4, 65, 8, 75, 27, 33, 4, 2, 64, 32, 3, 69, 4, 64, 32, 2, 65, 0, 54, 2, 16, 12, 1, 11, 32, 2, 65, 24, 106, 65, 1, 54, 2, 0, 32, 2, 32, 3, 54, 2, 20, 32, 2, 32, 0, 40, 2, 0, 54, 2, 16, 11, 32, 2, 32, 4, 32, 2, 65, 16, 106, 16, 80, 32, 2, 65, 8, 106, 40, 2, 0, 33, 3, 32, 2, 40, 2, 4, 33, 4, 32, 2, 40, 2, 0, 65, 1, 71, 4, 64, 32, 0, 32, 4, 54, 2, 0, 32, 0, 65, 4, 106, 32, 3, 54, 2, 0, 32, 0, 40, 2, 8, 33, 3, 12, 3, 11, 32, 3, 69, 13, 1, 32, 4, 32, 3, 16, 165, 1, 0, 11, 32, 2, 32, 1, 65, 63, 113, 65, 128, 1, 114, 58, 0, 17, 32, 2, 32, 1, 65, 6, 118, 65, 192, 1, 114, 58, 0, 16, 65, 2, 33, 1, 12, 2, 11, 16, 158, 1, 0, 11, 32, 3, 32, 4, 106, 32, 1, 58, 0, 0, 32, 0, 32, 0, 40, 2, 8, 65, 1, 106, 54, 2, 8, 12, 1, 11, 32, 0, 32, 2, 65, 16, 106, 32, 2, 65, 16, 106, 32, 1, 106, 16, 66, 11, 32, 2, 65, 32, 106, 36, 0, 11, 255, 3, 2, 4, 127, 1, 126, 65, 1, 32, 1, 40, 2, 24, 65, 39, 32, 1, 65, 28, 106, 40, 2, 0, 40, 2, 16, 17, 0, 0, 69, 4, 64, 65, 244, 0, 33, 3, 65, 2, 33, 2, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 32, 0, 40, 2, 0, 34, 0, 65, 119, 106, 14, 31, 5, 1, 3, 3, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 3, 3, 3, 3, 4, 2, 11, 65, 242, 0, 33, 3, 12, 4, 11, 65, 238, 0, 33, 3, 12, 3, 11, 32, 0, 65, 220, 0, 70, 13, 1, 11, 2, 127, 2, 126, 2, 64, 32, 0, 16, 40, 69, 4, 64, 32, 0, 16, 21, 69, 13, 1, 65, 1, 12, 3, 11, 32, 0, 65, 1, 114, 103, 65, 2, 118, 65, 7, 115, 173, 66, 128, 128, 128, 128, 208, 0, 132, 12, 1, 11, 32, 0, 65, 1, 114, 103, 65, 2, 118, 65, 7, 115, 173, 66, 128, 128, 128, 128, 208, 0, 132, 11, 33, 6, 65, 3, 11, 33, 2, 32, 0, 33, 3, 12, 1, 11, 32, 0, 33, 3, 11, 3, 64, 32, 2, 33, 4, 65, 220, 0, 33, 0, 65, 1, 33, 2, 2, 64, 2, 126, 2, 64, 2, 64, 2, 64, 2, 64, 32, 4, 65, 1, 107, 14, 3, 1, 5, 0, 2, 11, 2, 64, 2, 64, 2, 64, 2, 64, 32, 6, 66, 32, 136, 167, 65, 255, 1, 113, 65, 1, 107, 14, 5, 3, 2, 1, 0, 6, 5, 11, 65, 245, 0, 33, 0, 32, 6, 66, 255, 255, 255, 255, 143, 96, 131, 66, 128, 128, 128, 128, 48, 132, 12, 6, 11, 65, 251, 0, 33, 0, 32, 6, 66, 255, 255, 255, 255, 143, 96, 131, 66, 128, 128, 128, 128, 32, 132, 12, 5, 11, 65, 48, 65, 215, 0, 32, 3, 32, 6, 167, 34, 4, 65, 2, 116, 65, 28, 113, 118, 65, 15, 113, 34, 0, 65, 10, 73, 27, 32, 0, 106, 33, 0, 32, 6, 66, 255, 255, 255, 255, 143, 96, 131, 66, 128, 128, 128, 128, 16, 132, 32, 4, 69, 13, 4, 26, 32, 6, 66, 127, 124, 66, 255, 255, 255, 255, 15, 131, 32, 6, 66, 128, 128, 128, 128, 112, 131, 132, 12, 4, 11, 65, 253, 0, 33, 0, 32, 6, 66, 255, 255, 255, 255, 143, 96, 131, 12, 3, 11, 65, 0, 33, 2, 32, 3, 33, 0, 12, 3, 11, 32, 1, 40, 2, 24, 65, 39, 32, 1, 40, 2, 28, 40, 2, 16, 17, 0, 0, 15, 11, 32, 6, 66, 255, 255, 255, 255, 143, 96, 131, 66, 128, 128, 128, 128, 192, 0, 132, 11, 33, 6, 65, 3, 33, 2, 11, 32, 1, 40, 2, 24, 32, 0, 32, 1, 40, 2, 28, 40, 2, 16, 17, 0, 0, 69, 13, 0, 11, 11, 11, 156, 3, 1, 5, 127, 35, 0, 65, 16, 107, 34, 6, 36, 0, 2, 64, 2, 127, 32, 2, 4, 64, 3, 64, 2, 64, 32, 0, 40, 2, 8, 45, 0, 0, 69, 13, 0, 32, 0, 40, 2, 0, 65, 188, 198, 193, 0, 65, 4, 32, 0, 40, 2, 4, 40, 2, 12, 17, 1, 0, 69, 13, 0, 65, 1, 12, 3, 11, 65, 0, 33, 4, 32, 2, 33, 3, 2, 127, 3, 64, 2, 64, 32, 1, 32, 4, 106, 33, 5, 2, 64, 32, 3, 65, 7, 77, 4, 64, 32, 3, 69, 13, 2, 32, 2, 32, 4, 107, 33, 7, 65, 0, 33, 3, 3, 64, 32, 3, 32, 5, 106, 45, 0, 0, 65, 10, 70, 13, 2, 32, 7, 32, 3, 65, 1, 106, 34, 3, 71, 13, 0, 11, 12, 2, 11, 32, 6, 65, 8, 106, 32, 5, 32, 3, 16, 49, 32, 6, 40, 2, 8, 65, 1, 71, 13, 1, 32, 6, 40, 2, 12, 33, 3, 11, 32, 3, 32, 4, 106, 34, 3, 65, 1, 106, 33, 4, 2, 64, 32, 3, 32, 2, 79, 13, 0, 32, 1, 32, 3, 106, 45, 0, 0, 65, 10, 71, 13, 0, 65, 1, 12, 3, 11, 32, 2, 32, 4, 107, 33, 3, 32, 2, 32, 4, 79, 13, 1, 11, 11, 32, 2, 33, 4, 65, 0, 11, 33, 3, 32, 0, 40, 2, 8, 32, 3, 58, 0, 0, 32, 0, 40, 2, 4, 33, 3, 32, 0, 40, 2, 0, 33, 5, 2, 64, 2, 64, 32, 2, 32, 4, 71, 4, 64, 32, 2, 32, 4, 75, 4, 64, 32, 1, 32, 4, 106, 34, 7, 44, 0, 0, 65, 191, 127, 74, 13, 2, 11, 32, 1, 32, 2, 65, 0, 32, 4, 65, 192, 198, 193, 0, 16, 12, 0, 11, 32, 5, 32, 1, 32, 4, 32, 3, 40, 2, 12, 17, 1, 0, 69, 13, 1, 65, 1, 12, 4, 11, 65, 1, 32, 5, 32, 1, 32, 4, 32, 3, 40, 2, 12, 17, 1, 0, 13, 3, 26, 32, 7, 44, 0, 0, 65, 191, 127, 76, 13, 4, 11, 32, 1, 32, 4, 106, 33, 1, 32, 2, 32, 4, 107, 34, 2, 13, 0, 11, 11, 65, 0, 11, 32, 6, 65, 16, 106, 36, 0, 15, 11, 32, 1, 32, 2, 32, 4, 32, 2, 65, 208, 198, 193, 0, 16, 12, 0, 11, 160, 3, 1, 5, 127, 2, 64, 2, 64, 65, 0, 65, 15, 32, 0, 65, 164, 154, 4, 73, 27, 34, 1, 32, 1, 65, 8, 106, 34, 1, 32, 1, 65, 2, 116, 65, 216, 216, 193, 0, 106, 40, 2, 0, 65, 11, 116, 32, 0, 65, 11, 116, 34, 2, 75, 27, 34, 1, 32, 1, 65, 4, 106, 34, 1, 32, 1, 65, 2, 116, 65, 216, 216, 193, 0, 106, 40, 2, 0, 65, 11, 116, 32, 2, 75, 27, 34, 1, 32, 1, 65, 2, 106, 34, 1, 32, 1, 65, 2, 116, 65, 216, 216, 193, 0, 106, 40, 2, 0, 65, 11, 116, 32, 2, 75, 27, 34, 1, 32, 1, 65, 1, 106, 34, 1, 32, 1, 65, 2, 116, 65, 216, 216, 193, 0, 106, 40, 2, 0, 65, 11, 116, 32, 2, 75, 27, 34, 3, 65, 2, 116, 65, 216, 216, 193, 0, 106, 40, 2, 0, 65, 11, 116, 34, 1, 32, 2, 70, 32, 1, 32, 2, 73, 106, 32, 3, 106, 34, 2, 65, 30, 77, 4, 64, 65, 177, 5, 33, 4, 32, 2, 65, 30, 71, 4, 64, 32, 2, 65, 2, 116, 65, 220, 216, 193, 0, 106, 40, 2, 0, 65, 21, 118, 33, 4, 11, 65, 0, 33, 1, 32, 2, 65, 127, 106, 34, 3, 32, 2, 77, 4, 64, 32, 3, 65, 31, 79, 13, 3, 32, 3, 65, 2, 116, 65, 216, 216, 193, 0, 106, 40, 2, 0, 65, 255, 255, 255, 0, 113, 33, 1, 11, 2, 64, 32, 4, 32, 2, 65, 2, 116, 65, 216, 216, 193, 0, 106, 40, 2, 0, 65, 21, 118, 34, 3, 65, 1, 106, 70, 13, 0, 32, 0, 32, 1, 107, 33, 2, 32, 3, 65, 177, 5, 32, 3, 65, 177, 5, 75, 27, 33, 5, 32, 4, 65, 127, 106, 33, 1, 65, 0, 33, 0, 3, 64, 32, 3, 32, 5, 70, 13, 3, 32, 0, 32, 3, 65, 212, 217, 193, 0, 106, 45, 0, 0, 106, 34, 0, 32, 2, 75, 13, 1, 32, 1, 32, 3, 65, 1, 106, 34, 3, 71, 13, 0, 11, 32, 1, 33, 3, 11, 32, 3, 65, 1, 113, 15, 11, 32, 2, 65, 31, 65, 160, 216, 193, 0, 16, 98, 0, 11, 32, 5, 65, 177, 5, 65, 176, 216, 193, 0, 16, 98, 0, 11, 32, 3, 65, 31, 65, 192, 216, 193, 0, 16, 98, 0, 11, 182, 3, 2, 6, 127, 2, 126, 35, 0, 65, 32, 107, 34, 3, 36, 0, 65, 3, 33, 5, 2, 64, 32, 2, 69, 13, 0, 32, 3, 65, 16, 106, 65, 4, 114, 33, 6, 3, 64, 32, 3, 65, 16, 106, 32, 0, 32, 1, 32, 2, 16, 89, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 32, 3, 40, 2, 16, 65, 1, 71, 4, 64, 32, 3, 40, 2, 20, 34, 4, 69, 13, 1, 32, 2, 32, 4, 73, 13, 3, 32, 1, 32, 4, 106, 33, 1, 32, 2, 32, 4, 107, 33, 2, 12, 6, 11, 32, 6, 16, 133, 1, 65, 255, 1, 113, 65, 15, 70, 13, 1, 32, 3, 53, 0, 21, 32, 3, 65, 25, 106, 51, 0, 0, 32, 3, 65, 27, 106, 49, 0, 0, 66, 16, 134, 132, 66, 32, 134, 132, 33, 9, 32, 3, 45, 0, 20, 33, 5, 12, 7, 11, 32, 3, 65, 8, 106, 65, 27, 16, 103, 32, 3, 40, 2, 12, 33, 2, 32, 3, 40, 2, 8, 34, 0, 65, 172, 136, 192, 0, 41, 0, 0, 55, 0, 0, 32, 0, 65, 23, 106, 65, 195, 136, 192, 0, 40, 0, 0, 54, 0, 0, 32, 0, 65, 16, 106, 65, 188, 136, 192, 0, 41, 0, 0, 55, 0, 0, 32, 0, 65, 8, 106, 65, 180, 136, 192, 0, 41, 0, 0, 55, 0, 0, 65, 12, 65, 4, 16, 149, 1, 34, 1, 69, 13, 2, 32, 1, 65, 27, 54, 2, 8, 32, 1, 32, 0, 54, 2, 0, 32, 1, 32, 2, 54, 2, 4, 65, 17, 32, 1, 65, 200, 132, 192, 0, 16, 107, 34, 10, 66, 8, 136, 33, 9, 32, 10, 167, 33, 5, 12, 6, 11, 32, 3, 40, 2, 16, 65, 1, 71, 13, 3, 32, 3, 45, 0, 20, 65, 2, 79, 13, 2, 12, 3, 11, 32, 4, 32, 2, 65, 156, 136, 192, 0, 16, 101, 0, 11, 65, 12, 65, 4, 16, 165, 1, 0, 11, 32, 3, 40, 2, 24, 34, 4, 40, 2, 0, 32, 4, 40, 2, 4, 40, 2, 0, 17, 2, 0, 32, 4, 40, 2, 4, 34, 7, 40, 2, 4, 34, 8, 4, 64, 32, 4, 40, 2, 0, 32, 8, 32, 7, 40, 2, 8, 16, 156, 1, 11, 32, 3, 40, 2, 24, 65, 12, 65, 4, 16, 156, 1, 11, 32, 2, 13, 0, 11, 11, 32, 3, 65, 32, 106, 36, 0, 32, 5, 173, 66, 255, 1, 131, 32, 9, 66, 8, 134, 132, 11, 172, 3, 2, 6, 127, 2, 126, 35, 0, 65, 16, 107, 34, 3, 36, 0, 65, 3, 33, 5, 2, 64, 32, 2, 69, 13, 0, 32, 3, 65, 4, 114, 33, 6, 3, 64, 32, 3, 32, 0, 32, 1, 32, 2, 16, 29, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 32, 3, 40, 2, 0, 65, 1, 71, 4, 64, 32, 3, 40, 2, 4, 34, 4, 69, 4, 64, 65, 28, 65, 1, 16, 149, 1, 34, 0, 69, 13, 2, 32, 0, 65, 24, 106, 65, 212, 134, 192, 0, 40, 0, 0, 54, 0, 0, 32, 0, 65, 16, 106, 65, 204, 134, 192, 0, 41, 0, 0, 55, 0, 0, 32, 0, 65, 8, 106, 65, 196, 134, 192, 0, 41, 0, 0, 55, 0, 0, 32, 0, 65, 188, 134, 192, 0, 41, 0, 0, 55, 0, 0, 65, 12, 65, 4, 16, 149, 1, 34, 1, 69, 13, 3, 32, 1, 66, 156, 128, 128, 128, 192, 3, 55, 2, 4, 32, 1, 32, 0, 54, 2, 0, 65, 14, 32, 1, 65, 200, 132, 192, 0, 16, 107, 34, 10, 66, 8, 136, 33, 9, 32, 10, 167, 33, 5, 12, 8, 11, 32, 2, 32, 4, 73, 13, 3, 32, 1, 32, 4, 106, 33, 1, 32, 2, 32, 4, 107, 33, 2, 12, 5, 11, 32, 6, 16, 133, 1, 65, 255, 1, 113, 65, 15, 71, 4, 64, 32, 3, 53, 0, 5, 32, 3, 65, 9, 106, 51, 0, 0, 32, 3, 65, 11, 106, 49, 0, 0, 66, 16, 134, 132, 66, 32, 134, 132, 33, 9, 32, 3, 45, 0, 4, 33, 5, 12, 7, 11, 32, 3, 40, 2, 0, 65, 1, 71, 13, 4, 32, 3, 45, 0, 4, 65, 2, 79, 13, 3, 12, 4, 11, 65, 28, 65, 1, 16, 165, 1, 0, 11, 65, 12, 65, 4, 16, 165, 1, 0, 11, 32, 4, 32, 2, 65, 172, 134, 192, 0, 16, 101, 0, 11, 32, 3, 40, 2, 8, 34, 4, 40, 2, 0, 32, 4, 40, 2, 4, 40, 2, 0, 17, 2, 0, 32, 4, 40, 2, 4, 34, 7, 40, 2, 4, 34, 8, 4, 64, 32, 4, 40, 2, 0, 32, 8, 32, 7, 40, 2, 8, 16, 156, 1, 11, 32, 3, 40, 2, 8, 65, 12, 65, 4, 16, 156, 1, 11, 32, 2, 13, 0, 11, 11, 32, 3, 65, 16, 106, 36, 0, 32, 5, 173, 66, 255, 1, 131, 32, 9, 66, 8, 134, 132, 11, 172, 3, 2, 6, 127, 2, 126, 35, 0, 65, 16, 107, 34, 3, 36, 0, 65, 3, 33, 5, 2, 64, 32, 2, 69, 13, 0, 32, 3, 65, 4, 114, 33, 6, 3, 64, 32, 3, 32, 0, 32, 1, 32, 2, 16, 28, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 32, 3, 40, 2, 0, 65, 1, 71, 4, 64, 32, 3, 40, 2, 4, 34, 4, 69, 4, 64, 65, 28, 65, 1, 16, 149, 1, 34, 0, 69, 13, 2, 32, 0, 65, 24, 106, 65, 212, 134, 192, 0, 40, 0, 0, 54, 0, 0, 32, 0, 65, 16, 106, 65, 204, 134, 192, 0, 41, 0, 0, 55, 0, 0, 32, 0, 65, 8, 106, 65, 196, 134, 192, 0, 41, 0, 0, 55, 0, 0, 32, 0, 65, 188, 134, 192, 0, 41, 0, 0, 55, 0, 0, 65, 12, 65, 4, 16, 149, 1, 34, 1, 69, 13, 3, 32, 1, 66, 156, 128, 128, 128, 192, 3, 55, 2, 4, 32, 1, 32, 0, 54, 2, 0, 65, 14, 32, 1, 65, 200, 132, 192, 0, 16, 107, 34, 10, 66, 8, 136, 33, 9, 32, 10, 167, 33, 5, 12, 8, 11, 32, 2, 32, 4, 73, 13, 3, 32, 1, 32, 4, 106, 33, 1, 32, 2, 32, 4, 107, 33, 2, 12, 5, 11, 32, 6, 16, 133, 1, 65, 255, 1, 113, 65, 15, 71, 4, 64, 32, 3, 53, 0, 5, 32, 3, 65, 9, 106, 51, 0, 0, 32, 3, 65, 11, 106, 49, 0, 0, 66, 16, 134, 132, 66, 32, 134, 132, 33, 9, 32, 3, 45, 0, 4, 33, 5, 12, 7, 11, 32, 3, 40, 2, 0, 65, 1, 71, 13, 4, 32, 3, 45, 0, 4, 65, 2, 79, 13, 3, 12, 4, 11, 65, 28, 65, 1, 16, 165, 1, 0, 11, 65, 12, 65, 4, 16, 165, 1, 0, 11, 32, 4, 32, 2, 65, 172, 134, 192, 0, 16, 101, 0, 11, 32, 3, 40, 2, 8, 34, 4, 40, 2, 0, 32, 4, 40, 2, 4, 40, 2, 0, 17, 2, 0, 32, 4, 40, 2, 4, 34, 7, 40, 2, 4, 34, 8, 4, 64, 32, 4, 40, 2, 0, 32, 8, 32, 7, 40, 2, 8, 16, 156, 1, 11, 32, 3, 40, 2, 8, 65, 12, 65, 4, 16, 156, 1, 11, 32, 2, 13, 0, 11, 11, 32, 3, 65, 16, 106, 36, 0, 32, 5, 173, 66, 255, 1, 131, 32, 9, 66, 8, 134, 132, 11, 172, 3, 2, 6, 127, 2, 126, 35, 0, 65, 16, 107, 34, 3, 36, 0, 65, 3, 33, 5, 2, 64, 32, 2, 69, 13, 0, 32, 3, 65, 4, 114, 33, 6, 3, 64, 32, 3, 32, 0, 32, 1, 32, 2, 16, 28, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 32, 3, 40, 2, 0, 65, 1, 71, 4, 64, 32, 3, 40, 2, 4, 34, 4, 69, 4, 64, 65, 28, 65, 1, 16, 149, 1, 34, 0, 69, 13, 2, 32, 0, 65, 24, 106, 65, 204, 135, 192, 0, 40, 0, 0, 54, 0, 0, 32, 0, 65, 16, 106, 65, 196, 135, 192, 0, 41, 0, 0, 55, 0, 0, 32, 0, 65, 8, 106, 65, 188, 135, 192, 0, 41, 0, 0, 55, 0, 0, 32, 0, 65, 180, 135, 192, 0, 41, 0, 0, 55, 0, 0, 65, 12, 65, 4, 16, 149, 1, 34, 1, 69, 13, 3, 32, 1, 66, 156, 128, 128, 128, 192, 3, 55, 2, 4, 32, 1, 32, 0, 54, 2, 0, 65, 14, 32, 1, 65, 200, 132, 192, 0, 16, 107, 34, 10, 66, 8, 136, 33, 9, 32, 10, 167, 33, 5, 12, 8, 11, 32, 2, 32, 4, 73, 13, 3, 32, 1, 32, 4, 106, 33, 1, 32, 2, 32, 4, 107, 33, 2, 12, 5, 11, 32, 6, 16, 133, 1, 65, 255, 1, 113, 65, 15, 71, 4, 64, 32, 3, 53, 0, 5, 32, 3, 65, 9, 106, 51, 0, 0, 32, 3, 65, 11, 106, 49, 0, 0, 66, 16, 134, 132, 66, 32, 134, 132, 33, 9, 32, 3, 45, 0, 4, 33, 5, 12, 7, 11, 32, 3, 40, 2, 0, 65, 1, 71, 13, 4, 32, 3, 45, 0, 4, 65, 2, 79, 13, 3, 12, 4, 11, 65, 28, 65, 1, 16, 165, 1, 0, 11, 65, 12, 65, 4, 16, 165, 1, 0, 11, 32, 4, 32, 2, 65, 164, 135, 192, 0, 16, 101, 0, 11, 32, 3, 40, 2, 8, 34, 4, 40, 2, 0, 32, 4, 40, 2, 4, 40, 2, 0, 17, 2, 0, 32, 4, 40, 2, 4, 34, 7, 40, 2, 4, 34, 8, 4, 64, 32, 4, 40, 2, 0, 32, 8, 32, 7, 40, 2, 8, 16, 156, 1, 11, 32, 3, 40, 2, 8, 65, 12, 65, 4, 16, 156, 1, 11, 32, 2, 13, 0, 11, 11, 32, 3, 65, 16, 106, 36, 0, 32, 5, 173, 66, 255, 1, 131, 32, 9, 66, 8, 134, 132, 11, 172, 3, 2, 6, 127, 2, 126, 35, 0, 65, 16, 107, 34, 3, 36, 0, 65, 3, 33, 5, 2, 64, 32, 2, 69, 13, 0, 32, 3, 65, 4, 114, 33, 6, 3, 64, 32, 3, 32, 0, 32, 1, 32, 2, 16, 29, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 32, 3, 40, 2, 0, 65, 1, 71, 4, 64, 32, 3, 40, 2, 4, 34, 4, 69, 4, 64, 65, 28, 65, 1, 16, 149, 1, 34, 0, 69, 13, 2, 32, 0, 65, 24, 106, 65, 204, 135, 192, 0, 40, 0, 0, 54, 0, 0, 32, 0, 65, 16, 106, 65, 196, 135, 192, 0, 41, 0, 0, 55, 0, 0, 32, 0, 65, 8, 106, 65, 188, 135, 192, 0, 41, 0, 0, 55, 0, 0, 32, 0, 65, 180, 135, 192, 0, 41, 0, 0, 55, 0, 0, 65, 12, 65, 4, 16, 149, 1, 34, 1, 69, 13, 3, 32, 1, 66, 156, 128, 128, 128, 192, 3, 55, 2, 4, 32, 1, 32, 0, 54, 2, 0, 65, 14, 32, 1, 65, 200, 132, 192, 0, 16, 107, 34, 10, 66, 8, 136, 33, 9, 32, 10, 167, 33, 5, 12, 8, 11, 32, 2, 32, 4, 73, 13, 3, 32, 1, 32, 4, 106, 33, 1, 32, 2, 32, 4, 107, 33, 2, 12, 5, 11, 32, 6, 16, 133, 1, 65, 255, 1, 113, 65, 15, 71, 4, 64, 32, 3, 53, 0, 5, 32, 3, 65, 9, 106, 51, 0, 0, 32, 3, 65, 11, 106, 49, 0, 0, 66, 16, 134, 132, 66, 32, 134, 132, 33, 9, 32, 3, 45, 0, 4, 33, 5, 12, 7, 11, 32, 3, 40, 2, 0, 65, 1, 71, 13, 4, 32, 3, 45, 0, 4, 65, 2, 79, 13, 3, 12, 4, 11, 65, 28, 65, 1, 16, 165, 1, 0, 11, 65, 12, 65, 4, 16, 165, 1, 0, 11, 32, 4, 32, 2, 65, 164, 135, 192, 0, 16, 101, 0, 11, 32, 3, 40, 2, 8, 34, 4, 40, 2, 0, 32, 4, 40, 2, 4, 40, 2, 0, 17, 2, 0, 32, 4, 40, 2, 4, 34, 7, 40, 2, 4, 34, 8, 4, 64, 32, 4, 40, 2, 0, 32, 8, 32, 7, 40, 2, 8, 16, 156, 1, 11, 32, 3, 40, 2, 8, 65, 12, 65, 4, 16, 156, 1, 11, 32, 2, 13, 0, 11, 11, 32, 3, 65, 16, 106, 36, 0, 32, 5, 173, 66, 255, 1, 131, 32, 9, 66, 8, 134, 132, 11, 162, 3, 2, 4, 127, 2, 126, 35, 0, 65, 64, 106, 34, 2, 36, 0, 65, 1, 33, 4, 2, 64, 32, 0, 45, 0, 4, 13, 0, 32, 0, 45, 0, 5, 33, 5, 32, 0, 40, 2, 0, 34, 3, 45, 0, 0, 65, 4, 113, 4, 64, 32, 5, 69, 4, 64, 32, 3, 40, 2, 24, 65, 224, 198, 193, 0, 65, 3, 32, 3, 65, 28, 106, 40, 2, 0, 40, 2, 12, 17, 1, 0, 13, 2, 32, 0, 40, 2, 0, 33, 3, 11, 32, 2, 65, 1, 58, 0, 23, 32, 2, 65, 52, 106, 65, 164, 198, 193, 0, 54, 2, 0, 32, 2, 32, 3, 41, 2, 24, 55, 3, 8, 32, 2, 32, 2, 65, 23, 106, 54, 2, 16, 32, 3, 41, 2, 8, 33, 6, 32, 3, 41, 2, 16, 33, 7, 32, 2, 32, 3, 45, 0, 32, 58, 0, 56, 32, 2, 32, 7, 55, 3, 40, 32, 2, 32, 6, 55, 3, 32, 32, 2, 32, 3, 41, 2, 0, 55, 3, 24, 32, 2, 32, 2, 65, 8, 106, 54, 2, 48, 32, 2, 65, 8, 106, 65, 216, 140, 192, 0, 65, 16, 16, 39, 13, 1, 32, 2, 65, 8, 106, 65, 155, 197, 193, 0, 65, 2, 16, 39, 13, 1, 32, 1, 32, 2, 65, 24, 106, 65, 244, 140, 192, 0, 40, 2, 0, 17, 0, 0, 13, 1, 32, 2, 40, 2, 48, 65, 227, 198, 193, 0, 65, 2, 32, 2, 40, 2, 52, 40, 2, 12, 17, 1, 0, 33, 4, 12, 1, 11, 32, 3, 40, 2, 24, 65, 229, 198, 193, 0, 65, 231, 198, 193, 0, 32, 5, 27, 65, 2, 65, 3, 32, 5, 27, 32, 3, 65, 28, 106, 40, 2, 0, 40, 2, 12, 17, 1, 0, 13, 0, 32, 0, 40, 2, 0, 34, 3, 40, 2, 24, 65, 216, 140, 192, 0, 65, 16, 32, 3, 65, 28, 106, 40, 2, 0, 40, 2, 12, 17, 1, 0, 13, 0, 32, 0, 40, 2, 0, 34, 3, 40, 2, 24, 65, 155, 197, 193, 0, 65, 2, 32, 3, 65, 28, 106, 40, 2, 0, 40, 2, 12, 17, 1, 0, 13, 0, 32, 1, 32, 0, 40, 2, 0, 65, 244, 140, 192, 0, 40, 2, 0, 17, 0, 0, 33, 4, 11, 32, 0, 65, 1, 58, 0, 5, 32, 0, 32, 4, 58, 0, 4, 32, 2, 65, 64, 107, 36, 0, 11, 238, 2, 2, 5, 127, 1, 126, 35, 0, 65, 16, 107, 34, 4, 36, 0, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 32, 1, 16, 78, 34, 9, 167, 65, 255, 1, 113, 65, 3, 70, 4, 64, 32, 1, 65, 64, 107, 33, 6, 32, 1, 65, 40, 106, 33, 5, 32, 3, 69, 13, 1, 3, 64, 32, 5, 41, 3, 0, 33, 9, 32, 4, 32, 5, 32, 2, 32, 3, 32, 6, 65, 0, 16, 110, 32, 4, 45, 0, 0, 34, 7, 32, 5, 41, 3, 0, 32, 9, 125, 34, 9, 167, 114, 32, 4, 45, 0, 1, 34, 8, 65, 2, 70, 114, 13, 3, 32, 1, 16, 78, 34, 9, 167, 65, 255, 1, 113, 65, 3, 70, 13, 0, 11, 11, 32, 0, 65, 1, 54, 2, 0, 32, 0, 32, 9, 55, 2, 4, 12, 2, 11, 32, 5, 41, 3, 0, 33, 9, 32, 4, 32, 5, 32, 2, 65, 0, 32, 6, 65, 0, 16, 110, 32, 5, 41, 3, 0, 32, 9, 125, 33, 9, 32, 4, 45, 0, 1, 33, 8, 32, 4, 45, 0, 0, 33, 7, 11, 32, 0, 2, 127, 32, 7, 65, 1, 70, 4, 64, 65, 22, 65, 1, 16, 149, 1, 34, 1, 69, 13, 3, 32, 1, 65, 14, 106, 65, 142, 132, 192, 0, 41, 0, 0, 55, 0, 0, 32, 1, 65, 8, 106, 65, 136, 132, 192, 0, 41, 0, 0, 55, 0, 0, 32, 1, 65, 128, 132, 192, 0, 41, 0, 0, 55, 0, 0, 65, 12, 65, 4, 16, 149, 1, 34, 2, 69, 13, 4, 32, 2, 66, 150, 128, 128, 128, 224, 2, 55, 2, 4, 32, 2, 32, 1, 54, 2, 0, 32, 0, 65, 11, 32, 2, 65, 200, 132, 192, 0, 16, 107, 55, 2, 4, 65, 1, 12, 1, 11, 32, 0, 32, 9, 62, 2, 4, 32, 0, 65, 8, 106, 32, 8, 58, 0, 0, 65, 0, 11, 54, 2, 0, 11, 32, 4, 65, 16, 106, 36, 0, 15, 11, 65, 22, 65, 1, 16, 165, 1, 0, 11, 65, 12, 65, 4, 16, 165, 1, 0, 11, 131, 3, 1, 3, 127, 35, 0, 65, 16, 107, 34, 2, 36, 0, 2, 64, 32, 0, 69, 4, 64, 32, 1, 33, 0, 12, 1, 11, 32, 0, 65, 3, 106, 34, 3, 65, 2, 118, 33, 4, 2, 64, 32, 1, 65, 4, 75, 13, 0, 32, 4, 65, 127, 106, 34, 0, 65, 255, 1, 75, 13, 0, 32, 2, 65, 136, 223, 193, 0, 54, 2, 8, 32, 2, 32, 0, 65, 2, 116, 65, 140, 223, 193, 0, 106, 34, 3, 40, 2, 0, 54, 2, 12, 2, 64, 32, 4, 32, 1, 32, 2, 65, 12, 106, 32, 2, 65, 8, 106, 65, 164, 138, 192, 0, 16, 32, 34, 0, 13, 0, 32, 2, 32, 2, 65, 8, 106, 32, 4, 32, 1, 16, 74, 65, 0, 33, 0, 32, 2, 40, 2, 0, 13, 0, 32, 2, 40, 2, 4, 34, 0, 32, 2, 40, 2, 12, 54, 2, 8, 32, 2, 32, 0, 54, 2, 12, 32, 4, 32, 1, 32, 2, 65, 12, 106, 32, 2, 65, 8, 106, 65, 164, 138, 192, 0, 16, 32, 33, 0, 11, 32, 3, 32, 2, 40, 2, 12, 54, 2, 0, 12, 1, 11, 32, 2, 65, 136, 223, 193, 0, 40, 2, 0, 54, 2, 12, 2, 64, 32, 4, 32, 1, 32, 2, 65, 12, 106, 65, 140, 138, 192, 0, 65, 140, 138, 192, 0, 16, 32, 34, 0, 13, 0, 32, 3, 65, 124, 113, 34, 0, 32, 1, 65, 3, 116, 65, 128, 128, 1, 106, 34, 3, 32, 0, 32, 3, 75, 27, 65, 135, 128, 4, 106, 34, 3, 65, 16, 118, 64, 0, 34, 0, 65, 127, 70, 4, 64, 65, 0, 33, 0, 12, 1, 11, 32, 0, 65, 16, 116, 34, 0, 32, 0, 32, 3, 65, 128, 128, 124, 113, 106, 65, 2, 114, 54, 2, 0, 32, 0, 65, 0, 54, 2, 4, 32, 0, 32, 2, 40, 2, 12, 54, 2, 8, 32, 2, 32, 0, 54, 2, 12, 32, 4, 32, 1, 32, 2, 65, 12, 106, 65, 140, 138, 192, 0, 65, 140, 138, 192, 0, 16, 32, 33, 0, 11, 65, 136, 223, 193, 0, 32, 2, 40, 2, 12, 54, 2, 0, 11, 32, 2, 65, 16, 106, 36, 0, 32, 0, 11, 186, 2, 1, 4, 127, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 32, 1, 65, 3, 106, 65, 124, 113, 32, 1, 107, 34, 3, 69, 13, 0, 32, 2, 32, 3, 32, 3, 32, 2, 75, 27, 34, 4, 69, 13, 0, 65, 0, 33, 3, 2, 64, 3, 64, 32, 1, 32, 3, 106, 45, 0, 0, 65, 10, 70, 13, 1, 32, 4, 32, 3, 65, 1, 106, 34, 3, 71, 13, 0, 11, 32, 4, 32, 2, 65, 120, 106, 34, 3, 77, 13, 2, 12, 3, 11, 65, 1, 33, 1, 12, 3, 11, 32, 2, 65, 120, 106, 33, 3, 65, 0, 33, 4, 11, 3, 64, 32, 1, 32, 4, 106, 34, 5, 65, 4, 106, 40, 2, 0, 65, 138, 148, 168, 208, 0, 115, 34, 6, 65, 127, 115, 32, 6, 65, 255, 253, 251, 119, 106, 113, 32, 5, 40, 2, 0, 65, 138, 148, 168, 208, 0, 115, 34, 5, 65, 127, 115, 32, 5, 65, 255, 253, 251, 119, 106, 113, 114, 65, 128, 129, 130, 132, 120, 113, 69, 4, 64, 32, 4, 65, 8, 106, 34, 4, 32, 3, 77, 13, 1, 11, 11, 32, 4, 32, 2, 75, 13, 2, 11, 65, 0, 33, 3, 2, 127, 65, 0, 32, 2, 32, 4, 70, 13, 0, 26, 32, 1, 32, 4, 106, 33, 5, 32, 2, 32, 4, 107, 33, 1, 3, 64, 65, 1, 32, 3, 32, 5, 106, 45, 0, 0, 65, 10, 70, 13, 1, 26, 32, 1, 32, 3, 65, 1, 106, 34, 3, 71, 13, 0, 11, 32, 1, 33, 3, 65, 0, 11, 33, 1, 32, 3, 32, 4, 106, 33, 3, 11, 32, 0, 32, 3, 54, 2, 4, 32, 0, 32, 1, 54, 2, 0, 15, 11, 32, 4, 32, 2, 65, 224, 201, 193, 0, 16, 101, 0, 11, 228, 2, 2, 3, 127, 1, 126, 2, 64, 32, 0, 65, 24, 106, 40, 2, 0, 69, 13, 0, 32, 0, 16, 82, 34, 4, 167, 65, 3, 113, 65, 2, 70, 4, 64, 32, 4, 66, 32, 136, 167, 34, 1, 40, 2, 0, 32, 1, 40, 2, 4, 40, 2, 0, 17, 2, 0, 32, 1, 40, 2, 4, 34, 2, 40, 2, 4, 34, 3, 4, 64, 32, 1, 40, 2, 0, 32, 3, 32, 2, 40, 2, 8, 16, 156, 1, 11, 32, 1, 65, 12, 65, 4, 16, 156, 1, 11, 32, 0, 65, 24, 106, 40, 2, 0, 34, 1, 69, 13, 0, 32, 0, 65, 28, 106, 40, 2, 0, 34, 2, 69, 13, 0, 32, 1, 32, 2, 65, 1, 16, 156, 1, 11, 32, 0, 65, 56, 106, 40, 2, 0, 65, 244, 213, 2, 65, 4, 16, 156, 1, 32, 0, 65, 196, 0, 106, 40, 2, 0, 34, 1, 4, 64, 32, 0, 40, 2, 64, 32, 1, 65, 1, 16, 156, 1, 11, 32, 0, 65, 212, 0, 106, 40, 2, 0, 34, 1, 4, 64, 32, 0, 40, 2, 80, 32, 1, 65, 1, 16, 156, 1, 11, 2, 64, 32, 0, 40, 2, 92, 69, 13, 0, 2, 64, 32, 0, 65, 224, 0, 106, 40, 2, 0, 34, 1, 69, 13, 0, 32, 0, 65, 228, 0, 106, 40, 2, 0, 34, 2, 69, 13, 0, 32, 1, 32, 2, 65, 1, 16, 156, 1, 11, 2, 64, 32, 0, 65, 236, 0, 106, 40, 2, 0, 34, 1, 69, 13, 0, 32, 0, 65, 240, 0, 106, 40, 2, 0, 34, 2, 69, 13, 0, 32, 1, 32, 2, 65, 1, 16, 156, 1, 11, 32, 0, 65, 248, 0, 106, 40, 2, 0, 34, 1, 69, 13, 0, 32, 0, 65, 252, 0, 106, 40, 2, 0, 34, 2, 69, 13, 0, 32, 1, 32, 2, 65, 1, 16, 156, 1, 11, 32, 0, 65, 144, 1, 106, 40, 2, 0, 34, 1, 4, 64, 32, 0, 40, 2, 140, 1, 32, 1, 65, 1, 16, 156, 1, 11, 11, 206, 2, 1, 6, 127, 35, 0, 65, 32, 107, 34, 3, 36, 0, 32, 1, 40, 2, 0, 33, 7, 2, 64, 32, 1, 40, 2, 4, 34, 6, 65, 3, 116, 34, 5, 69, 4, 64, 12, 1, 11, 32, 7, 65, 4, 106, 33, 2, 3, 64, 32, 2, 40, 2, 0, 32, 4, 106, 33, 4, 32, 2, 65, 8, 106, 33, 2, 32, 5, 65, 120, 106, 34, 5, 13, 0, 11, 11, 2, 64, 2, 64, 32, 1, 65, 20, 106, 40, 2, 0, 69, 4, 64, 32, 4, 33, 2, 12, 1, 11, 32, 6, 4, 64, 65, 0, 33, 5, 65, 1, 33, 6, 32, 4, 65, 15, 77, 4, 64, 32, 7, 65, 4, 106, 40, 2, 0, 69, 13, 3, 11, 32, 4, 32, 4, 106, 34, 2, 32, 4, 79, 13, 1, 12, 2, 11, 65, 0, 65, 0, 65, 168, 195, 193, 0, 16, 98, 0, 11, 32, 2, 65, 127, 74, 4, 64, 32, 2, 69, 4, 64, 65, 0, 33, 5, 65, 1, 33, 6, 12, 2, 11, 32, 2, 33, 5, 32, 2, 65, 1, 16, 149, 1, 34, 6, 13, 1, 32, 2, 65, 1, 16, 165, 1, 0, 11, 16, 158, 1, 0, 11, 32, 0, 65, 0, 54, 2, 8, 32, 0, 32, 6, 54, 2, 0, 32, 0, 32, 5, 54, 2, 4, 32, 3, 32, 0, 54, 2, 4, 32, 3, 65, 24, 106, 32, 1, 65, 16, 106, 41, 2, 0, 55, 3, 0, 32, 3, 65, 16, 106, 32, 1, 65, 8, 106, 41, 2, 0, 55, 3, 0, 32, 3, 32, 1, 41, 2, 0, 55, 3, 8, 32, 3, 65, 4, 106, 65, 196, 194, 193, 0, 32, 3, 65, 8, 106, 16, 31, 69, 4, 64, 32, 3, 65, 32, 106, 36, 0, 15, 11, 65, 200, 195, 193, 0, 65, 51, 32, 3, 65, 8, 106, 65, 184, 195, 193, 0, 65, 148, 196, 193, 0, 16, 93, 0, 11, 192, 2, 2, 5, 127, 1, 126, 35, 0, 65, 48, 107, 34, 5, 36, 0, 65, 39, 33, 3, 2, 64, 32, 0, 66, 144, 206, 0, 84, 4, 64, 32, 0, 33, 8, 12, 1, 11, 3, 64, 32, 5, 65, 9, 106, 32, 3, 106, 34, 4, 65, 124, 106, 32, 0, 32, 0, 66, 144, 206, 0, 128, 34, 8, 66, 144, 206, 0, 126, 125, 167, 34, 6, 65, 255, 255, 3, 113, 65, 228, 0, 110, 34, 7, 65, 1, 116, 65, 162, 199, 193, 0, 106, 47, 0, 0, 59, 0, 0, 32, 4, 65, 126, 106, 32, 6, 32, 7, 65, 228, 0, 108, 107, 65, 255, 255, 3, 113, 65, 1, 116, 65, 162, 199, 193, 0, 106, 47, 0, 0, 59, 0, 0, 32, 3, 65, 124, 106, 33, 3, 32, 0, 66, 255, 193, 215, 47, 86, 32, 8, 33, 0, 13, 0, 11, 11, 32, 8, 167, 34, 4, 65, 227, 0, 74, 4, 64, 32, 3, 65, 126, 106, 34, 3, 32, 5, 65, 9, 106, 106, 32, 8, 167, 34, 4, 32, 4, 65, 255, 255, 3, 113, 65, 228, 0, 110, 34, 4, 65, 228, 0, 108, 107, 65, 255, 255, 3, 113, 65, 1, 116, 65, 162, 199, 193, 0, 106, 47, 0, 0, 59, 0, 0, 11, 2, 64, 32, 4, 65, 9, 76, 4, 64, 32, 3, 65, 127, 106, 34, 3, 32, 5, 65, 9, 106, 106, 32, 4, 65, 48, 106, 58, 0, 0, 12, 1, 11, 32, 3, 65, 126, 106, 34, 3, 32, 5, 65, 9, 106, 106, 32, 4, 65, 1, 116, 65, 162, 199, 193, 0, 106, 47, 0, 0, 59, 0, 0, 11, 32, 2, 32, 1, 65, 228, 196, 193, 0, 65, 0, 32, 5, 65, 9, 106, 32, 3, 106, 65, 39, 32, 3, 107, 16, 27, 32, 5, 65, 48, 106, 36, 0, 11, 206, 2, 2, 3, 127, 1, 126, 2, 64, 32, 0, 40, 2, 24, 69, 13, 0, 32, 0, 16, 34, 34, 4, 167, 65, 3, 113, 65, 2, 70, 4, 64, 32, 4, 66, 32, 136, 167, 34, 1, 40, 2, 0, 32, 1, 40, 2, 4, 40, 2, 0, 17, 2, 0, 32, 1, 40, 2, 4, 34, 2, 40, 2, 4, 34, 3, 4, 64, 32, 1, 40, 2, 0, 32, 3, 32, 2, 40, 2, 8, 16, 156, 1, 11, 32, 1, 65, 12, 65, 4, 16, 156, 1, 11, 32, 0, 40, 2, 24, 69, 13, 0, 32, 0, 16, 57, 34, 4, 167, 65, 3, 113, 65, 2, 70, 4, 64, 32, 4, 66, 32, 136, 167, 34, 1, 40, 2, 0, 32, 1, 40, 2, 4, 40, 2, 0, 17, 2, 0, 32, 1, 40, 2, 4, 34, 2, 40, 2, 4, 34, 3, 4, 64, 32, 1, 40, 2, 0, 32, 3, 32, 2, 40, 2, 8, 16, 156, 1, 11, 32, 1, 65, 12, 65, 4, 16, 156, 1, 11, 32, 0, 40, 2, 24, 34, 1, 69, 13, 0, 32, 0, 65, 28, 106, 40, 2, 0, 34, 2, 69, 13, 0, 32, 1, 32, 2, 65, 1, 16, 156, 1, 11, 32, 0, 40, 2, 16, 34, 1, 65, 192, 128, 4, 106, 40, 2, 0, 65, 204, 153, 5, 65, 1, 16, 156, 1, 32, 1, 40, 2, 200, 128, 4, 65, 224, 33, 65, 2, 16, 156, 1, 32, 1, 65, 212, 128, 4, 106, 40, 2, 0, 65, 130, 130, 10, 65, 2, 16, 156, 1, 32, 0, 40, 2, 16, 65, 232, 128, 4, 65, 4, 16, 156, 1, 32, 0, 65, 40, 106, 40, 2, 0, 34, 1, 4, 64, 32, 0, 40, 2, 36, 32, 1, 65, 1, 16, 156, 1, 11, 32, 0, 65, 208, 0, 106, 40, 2, 0, 34, 1, 4, 64, 32, 0, 40, 2, 76, 32, 1, 65, 1, 16, 156, 1, 11, 11, 220, 2, 2, 7, 127, 1, 126, 35, 0, 34, 2, 33, 5, 32, 2, 65, 32, 107, 65, 96, 113, 34, 2, 36, 0, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 32, 1, 16, 82, 34, 9, 167, 65, 255, 1, 113, 65, 3, 70, 4, 64, 2, 64, 32, 1, 65, 216, 0, 106, 40, 2, 0, 65, 8, 71, 13, 0, 32, 1, 40, 2, 24, 69, 13, 5, 32, 1, 40, 2, 80, 34, 3, 45, 0, 7, 33, 4, 32, 3, 45, 0, 6, 33, 6, 32, 3, 45, 0, 5, 33, 7, 32, 3, 45, 0, 4, 33, 8, 32, 3, 40, 0, 0, 32, 1, 16, 147, 1, 71, 13, 0, 32, 1, 40, 2, 24, 69, 13, 6, 32, 1, 40, 2, 16, 32, 7, 65, 8, 116, 32, 8, 114, 32, 6, 65, 16, 116, 114, 32, 4, 65, 24, 116, 114, 70, 13, 2, 11, 16, 79, 33, 9, 11, 32, 9, 167, 65, 255, 1, 113, 65, 3, 71, 13, 1, 11, 32, 1, 32, 2, 41, 3, 16, 55, 3, 16, 32, 1, 32, 2, 41, 3, 8, 55, 3, 8, 32, 1, 32, 2, 41, 3, 0, 55, 3, 0, 65, 0, 33, 3, 32, 2, 65, 0, 54, 2, 24, 32, 1, 65, 24, 106, 34, 4, 41, 3, 0, 33, 9, 32, 4, 32, 2, 41, 3, 24, 55, 3, 0, 32, 9, 167, 69, 13, 4, 32, 0, 65, 12, 106, 32, 1, 65, 32, 106, 41, 2, 0, 62, 2, 0, 32, 0, 32, 9, 55, 2, 4, 12, 1, 11, 32, 0, 32, 9, 55, 2, 4, 65, 1, 33, 3, 11, 32, 1, 16, 50, 32, 0, 32, 3, 54, 2, 0, 32, 5, 36, 0, 15, 11, 65, 236, 130, 192, 0, 65, 43, 65, 184, 132, 192, 0, 16, 114, 0, 11, 65, 236, 130, 192, 0, 65, 43, 65, 184, 132, 192, 0, 16, 114, 0, 11, 65, 236, 130, 192, 0, 65, 43, 65, 240, 131, 192, 0, 16, 114, 0, 11, 202, 2, 1, 1, 127, 35, 0, 65, 32, 107, 34, 7, 36, 0, 32, 7, 65, 8, 106, 32, 6, 65, 255, 1, 113, 16, 119, 32, 7, 40, 2, 12, 33, 6, 32, 7, 40, 2, 8, 69, 4, 64, 32, 7, 65, 16, 106, 32, 1, 40, 2, 16, 32, 2, 32, 3, 32, 4, 32, 5, 32, 6, 16, 7, 32, 1, 32, 1, 41, 3, 0, 32, 7, 53, 2, 16, 124, 55, 3, 0, 32, 1, 32, 1, 41, 3, 8, 32, 7, 53, 2, 20, 124, 55, 3, 8, 32, 7, 65, 28, 106, 40, 2, 0, 33, 2, 32, 0, 2, 127, 2, 64, 2, 64, 32, 7, 40, 2, 24, 65, 1, 70, 4, 64, 32, 2, 65, 123, 70, 13, 1, 32, 0, 65, 4, 106, 65, 0, 54, 2, 0, 65, 1, 12, 3, 11, 2, 64, 2, 64, 2, 64, 32, 2, 65, 1, 107, 14, 2, 2, 0, 1, 11, 2, 64, 2, 64, 32, 1, 40, 2, 16, 34, 2, 65, 152, 210, 0, 106, 45, 0, 0, 34, 3, 69, 13, 0, 32, 2, 65, 24, 106, 40, 2, 0, 33, 1, 32, 3, 65, 103, 106, 65, 255, 1, 113, 65, 9, 73, 32, 2, 65, 4, 106, 40, 2, 0, 69, 13, 0, 69, 13, 1, 11, 65, 0, 33, 1, 11, 32, 0, 65, 8, 106, 32, 1, 54, 2, 0, 32, 0, 65, 4, 106, 65, 1, 54, 2, 0, 65, 1, 12, 4, 11, 32, 0, 65, 0, 58, 0, 1, 65, 0, 12, 3, 11, 32, 0, 65, 2, 58, 0, 1, 12, 1, 11, 32, 0, 65, 1, 58, 0, 1, 11, 65, 0, 11, 58, 0, 0, 32, 7, 65, 32, 106, 36, 0, 15, 11, 32, 7, 32, 6, 54, 2, 16, 65, 244, 143, 192, 0, 65, 43, 32, 7, 65, 16, 106, 65, 160, 144, 192, 0, 65, 140, 145, 192, 0, 16, 93, 0, 11, 173, 2, 1, 3, 127, 35, 0, 65, 128, 1, 107, 34, 4, 36, 0, 2, 64, 2, 64, 2, 127, 32, 1, 40, 2, 0, 34, 3, 65, 16, 113, 4, 64, 32, 0, 40, 2, 0, 33, 2, 65, 0, 33, 0, 3, 64, 32, 0, 32, 4, 106, 65, 255, 0, 106, 32, 2, 65, 15, 113, 34, 3, 65, 48, 114, 32, 3, 65, 215, 0, 106, 32, 3, 65, 10, 73, 27, 58, 0, 0, 32, 0, 65, 127, 106, 33, 0, 32, 2, 65, 4, 118, 34, 2, 13, 0, 11, 32, 0, 65, 128, 1, 106, 34, 2, 65, 129, 1, 79, 13, 2, 32, 1, 65, 1, 65, 160, 199, 193, 0, 65, 2, 32, 0, 32, 4, 106, 65, 128, 1, 106, 65, 0, 32, 0, 107, 16, 27, 12, 1, 11, 32, 0, 40, 2, 0, 33, 2, 32, 3, 65, 32, 113, 4, 64, 65, 0, 33, 0, 3, 64, 32, 0, 32, 4, 106, 65, 255, 0, 106, 32, 2, 65, 15, 113, 34, 3, 65, 48, 114, 32, 3, 65, 55, 106, 32, 3, 65, 10, 73, 27, 58, 0, 0, 32, 0, 65, 127, 106, 33, 0, 32, 2, 65, 4, 118, 34, 2, 13, 0, 11, 32, 0, 65, 128, 1, 106, 34, 2, 65, 129, 1, 79, 13, 3, 32, 1, 65, 1, 65, 160, 199, 193, 0, 65, 2, 32, 0, 32, 4, 106, 65, 128, 1, 106, 65, 0, 32, 0, 107, 16, 27, 12, 1, 11, 32, 2, 173, 65, 1, 32, 1, 16, 52, 11, 32, 4, 65, 128, 1, 106, 36, 0, 15, 11, 32, 2, 65, 128, 1, 65, 144, 199, 193, 0, 16, 101, 0, 11, 32, 2, 65, 128, 1, 65, 144, 199, 193, 0, 16, 101, 0, 11, 180, 2, 2, 8, 127, 2, 126, 35, 0, 65, 16, 107, 34, 3, 36, 0, 32, 0, 65, 24, 106, 33, 6, 32, 0, 65, 36, 106, 33, 7, 32, 0, 65, 44, 106, 33, 4, 32, 0, 65, 32, 106, 33, 5, 2, 64, 2, 126, 2, 64, 3, 64, 2, 64, 32, 4, 40, 2, 0, 34, 1, 69, 13, 0, 32, 6, 40, 2, 0, 4, 64, 3, 64, 32, 0, 40, 2, 36, 33, 2, 32, 6, 32, 5, 40, 2, 0, 32, 1, 16, 75, 32, 0, 40, 2, 24, 32, 5, 40, 2, 0, 106, 32, 2, 32, 1, 16, 121, 26, 32, 5, 32, 5, 40, 2, 0, 32, 1, 106, 54, 2, 0, 32, 4, 40, 2, 0, 34, 2, 32, 1, 73, 13, 6, 32, 4, 65, 0, 54, 2, 0, 32, 2, 32, 1, 107, 34, 2, 69, 13, 2, 32, 0, 40, 2, 36, 34, 8, 32, 1, 32, 8, 106, 32, 2, 16, 96, 32, 4, 32, 2, 54, 2, 0, 32, 2, 33, 1, 32, 0, 40, 2, 24, 13, 0, 11, 11, 65, 236, 130, 192, 0, 65, 43, 65, 152, 132, 192, 0, 16, 114, 0, 11, 32, 0, 16, 163, 1, 33, 9, 32, 3, 32, 0, 65, 168, 132, 192, 0, 65, 0, 32, 7, 65, 4, 16, 65, 32, 3, 45, 0, 0, 65, 1, 70, 13, 1, 32, 0, 16, 163, 1, 32, 9, 82, 13, 0, 11, 66, 3, 33, 10, 66, 0, 12, 1, 11, 32, 3, 40, 2, 4, 32, 3, 40, 2, 8, 16, 128, 1, 34, 9, 66, 255, 1, 131, 33, 10, 32, 9, 66, 128, 126, 131, 11, 32, 3, 65, 16, 106, 36, 0, 32, 10, 132, 15, 11, 32, 1, 32, 2, 65, 208, 133, 192, 0, 16, 99, 0, 11, 180, 2, 2, 8, 127, 2, 126, 35, 0, 65, 16, 107, 34, 3, 36, 0, 32, 0, 65, 24, 106, 33, 6, 32, 0, 65, 36, 106, 33, 7, 32, 0, 65, 44, 106, 33, 4, 32, 0, 65, 32, 106, 33, 5, 2, 64, 2, 126, 2, 64, 3, 64, 2, 64, 32, 4, 40, 2, 0, 34, 1, 69, 13, 0, 32, 6, 40, 2, 0, 4, 64, 3, 64, 32, 0, 40, 2, 36, 33, 2, 32, 6, 32, 5, 40, 2, 0, 32, 1, 16, 75, 32, 0, 40, 2, 24, 32, 5, 40, 2, 0, 106, 32, 2, 32, 1, 16, 121, 26, 32, 5, 32, 5, 40, 2, 0, 32, 1, 106, 54, 2, 0, 32, 4, 40, 2, 0, 34, 2, 32, 1, 73, 13, 6, 32, 4, 65, 0, 54, 2, 0, 32, 2, 32, 1, 107, 34, 2, 69, 13, 2, 32, 0, 40, 2, 36, 34, 8, 32, 1, 32, 8, 106, 32, 2, 16, 96, 32, 4, 32, 2, 54, 2, 0, 32, 2, 33, 1, 32, 0, 40, 2, 24, 13, 0, 11, 11, 65, 236, 130, 192, 0, 65, 43, 65, 152, 132, 192, 0, 16, 114, 0, 11, 32, 0, 16, 163, 1, 33, 9, 32, 3, 32, 0, 65, 168, 132, 192, 0, 65, 0, 32, 7, 65, 4, 16, 110, 32, 3, 45, 0, 0, 65, 1, 70, 13, 1, 32, 0, 16, 163, 1, 32, 9, 82, 13, 0, 11, 66, 3, 33, 10, 66, 0, 12, 1, 11, 32, 3, 40, 2, 4, 32, 3, 40, 2, 8, 16, 128, 1, 34, 9, 66, 255, 1, 131, 33, 10, 32, 9, 66, 128, 126, 131, 11, 32, 3, 65, 16, 106, 36, 0, 32, 10, 132, 15, 11, 32, 1, 32, 2, 65, 208, 133, 192, 0, 16, 99, 0, 11, 246, 2, 1, 3, 127, 35, 0, 65, 240, 128, 4, 107, 34, 0, 36, 0, 2, 64, 65, 232, 128, 4, 65, 4, 16, 149, 1, 34, 1, 4, 64, 32, 0, 65, 8, 106, 34, 2, 65, 16, 106, 65, 0, 65, 128, 128, 4, 16, 131, 1, 26, 32, 2, 66, 128, 128, 128, 128, 128, 1, 55, 2, 8, 32, 2, 66, 1, 55, 2, 0, 32, 0, 65, 152, 128, 4, 106, 16, 91, 65, 224, 33, 65, 2, 16, 149, 1, 34, 2, 69, 13, 1, 32, 2, 65, 0, 65, 224, 33, 16, 131, 1, 26, 32, 0, 65, 208, 128, 4, 106, 16, 97, 32, 1, 32, 0, 65, 8, 106, 65, 144, 128, 4, 16, 121, 34, 1, 32, 2, 54, 2, 200, 128, 4, 32, 1, 65, 192, 128, 4, 106, 32, 0, 65, 200, 128, 4, 106, 41, 3, 0, 55, 2, 0, 32, 1, 65, 184, 128, 4, 106, 32, 0, 65, 192, 128, 4, 106, 41, 3, 0, 55, 2, 0, 32, 1, 65, 176, 128, 4, 106, 32, 0, 65, 184, 128, 4, 106, 41, 3, 0, 55, 2, 0, 32, 1, 65, 168, 128, 4, 106, 32, 0, 65, 176, 128, 4, 106, 41, 3, 0, 55, 2, 0, 32, 1, 65, 160, 128, 4, 106, 32, 0, 65, 168, 128, 4, 106, 41, 3, 0, 55, 2, 0, 32, 1, 65, 152, 128, 4, 106, 32, 0, 65, 160, 128, 4, 106, 41, 3, 0, 55, 2, 0, 32, 1, 32, 0, 41, 3, 152, 128, 4, 55, 2, 144, 128, 4, 32, 1, 32, 0, 41, 3, 208, 128, 4, 55, 2, 204, 128, 4, 32, 1, 65, 212, 128, 4, 106, 32, 0, 65, 216, 128, 4, 106, 41, 3, 0, 55, 2, 0, 32, 1, 65, 220, 128, 4, 106, 32, 0, 65, 224, 128, 4, 106, 41, 3, 0, 55, 2, 0, 32, 1, 65, 228, 128, 4, 106, 32, 0, 65, 232, 128, 4, 106, 40, 2, 0, 54, 2, 0, 32, 0, 65, 240, 128, 4, 106, 36, 0, 32, 1, 15, 11, 65, 232, 128, 4, 65, 4, 16, 165, 1, 0, 11, 65, 224, 33, 65, 2, 16, 165, 1, 0, 11, 186, 2, 1, 5, 127, 35, 0, 65, 64, 106, 34, 2, 36, 0, 32, 1, 40, 2, 4, 34, 3, 69, 4, 64, 32, 1, 65, 4, 106, 33, 3, 32, 1, 40, 2, 0, 33, 4, 32, 2, 65, 0, 54, 2, 32, 32, 2, 66, 1, 55, 3, 24, 32, 2, 32, 2, 65, 24, 106, 54, 2, 36, 32, 2, 65, 56, 106, 32, 4, 65, 16, 106, 41, 2, 0, 55, 3, 0, 32, 2, 65, 48, 106, 32, 4, 65, 8, 106, 41, 2, 0, 55, 3, 0, 32, 2, 32, 4, 41, 2, 0, 55, 3, 40, 32, 2, 65, 36, 106, 65, 172, 188, 193, 0, 32, 2, 65, 40, 106, 16, 31, 26, 32, 2, 65, 16, 106, 34, 4, 32, 2, 40, 2, 32, 54, 2, 0, 32, 2, 32, 2, 41, 3, 24, 55, 3, 8, 2, 64, 32, 1, 40, 2, 4, 34, 5, 69, 13, 0, 32, 1, 65, 8, 106, 40, 2, 0, 34, 6, 69, 13, 0, 32, 5, 32, 6, 65, 1, 16, 156, 1, 11, 32, 3, 32, 2, 41, 3, 8, 55, 2, 0, 32, 3, 65, 8, 106, 32, 4, 40, 2, 0, 54, 2, 0, 32, 3, 40, 2, 0, 33, 3, 11, 32, 1, 65, 1, 54, 2, 4, 32, 1, 65, 12, 106, 40, 2, 0, 33, 4, 32, 1, 65, 8, 106, 34, 1, 40, 2, 0, 33, 5, 32, 1, 66, 0, 55, 2, 0, 65, 12, 65, 4, 16, 149, 1, 34, 1, 69, 4, 64, 65, 12, 65, 4, 16, 165, 1, 0, 11, 32, 1, 32, 4, 54, 2, 8, 32, 1, 32, 5, 54, 2, 4, 32, 1, 32, 3, 54, 2, 0, 32, 0, 65, 188, 192, 193, 0, 54, 2, 4, 32, 0, 32, 1, 54, 2, 0, 32, 2, 65, 64, 107, 36, 0, 11, 183, 2, 2, 2, 127, 1, 126, 2, 64, 2, 64, 32, 1, 16, 58, 34, 4, 167, 65, 255, 1, 113, 65, 3, 70, 4, 64, 32, 1, 40, 2, 24, 33, 2, 32, 1, 65, 0, 54, 2, 24, 32, 2, 69, 13, 2, 32, 1, 65, 28, 106, 41, 2, 0, 33, 4, 32, 0, 32, 2, 54, 2, 4, 32, 0, 65, 0, 54, 2, 0, 32, 0, 65, 8, 106, 32, 4, 55, 2, 0, 32, 1, 40, 2, 16, 65, 244, 213, 2, 65, 4, 16, 156, 1, 32, 1, 65, 40, 106, 40, 2, 0, 34, 0, 69, 13, 1, 32, 1, 40, 2, 36, 32, 0, 65, 1, 16, 156, 1, 15, 11, 32, 0, 65, 1, 54, 2, 0, 32, 0, 32, 4, 55, 2, 4, 2, 64, 32, 1, 40, 2, 24, 69, 13, 0, 32, 1, 16, 58, 34, 4, 167, 65, 3, 113, 65, 2, 70, 4, 64, 32, 4, 66, 32, 136, 167, 34, 0, 40, 2, 0, 32, 0, 40, 2, 4, 40, 2, 0, 17, 2, 0, 32, 0, 40, 2, 4, 34, 2, 40, 2, 4, 34, 3, 4, 64, 32, 0, 40, 2, 0, 32, 3, 32, 2, 40, 2, 8, 16, 156, 1, 11, 32, 0, 65, 12, 65, 4, 16, 156, 1, 11, 32, 1, 40, 2, 24, 34, 0, 69, 13, 0, 32, 1, 65, 28, 106, 40, 2, 0, 34, 2, 69, 13, 0, 32, 0, 32, 2, 65, 1, 16, 156, 1, 11, 32, 1, 40, 2, 16, 65, 244, 213, 2, 65, 4, 16, 156, 1, 32, 1, 65, 40, 106, 40, 2, 0, 34, 0, 69, 13, 0, 32, 1, 40, 2, 36, 32, 0, 65, 1, 16, 156, 1, 11, 15, 11, 65, 236, 130, 192, 0, 65, 43, 65, 240, 131, 192, 0, 16, 114, 0, 11, 169, 2, 1, 3, 127, 35, 0, 65, 224, 0, 107, 34, 3, 36, 0, 32, 3, 16, 138, 1, 32, 3, 65, 216, 0, 106, 32, 3, 65, 32, 106, 40, 2, 0, 54, 2, 0, 32, 3, 65, 208, 0, 106, 32, 3, 65, 24, 106, 41, 3, 0, 55, 3, 0, 32, 3, 65, 200, 0, 106, 34, 5, 32, 3, 65, 16, 106, 41, 3, 0, 55, 3, 0, 32, 3, 65, 64, 107, 34, 4, 32, 3, 65, 8, 106, 41, 3, 0, 55, 3, 0, 32, 3, 32, 3, 41, 3, 0, 55, 3, 56, 32, 3, 65, 40, 106, 32, 3, 65, 56, 106, 32, 2, 16, 16, 32, 4, 32, 1, 65, 8, 106, 40, 2, 0, 54, 2, 0, 32, 3, 32, 1, 41, 2, 0, 55, 3, 56, 32, 0, 32, 2, 65, 0, 16, 126, 65, 128, 128, 2, 65, 1, 16, 149, 1, 34, 1, 69, 4, 64, 65, 128, 128, 2, 65, 1, 16, 165, 1, 0, 11, 32, 0, 32, 3, 41, 3, 56, 55, 2, 24, 32, 0, 32, 1, 54, 2, 36, 32, 0, 65, 40, 106, 66, 128, 128, 2, 55, 2, 0, 32, 0, 65, 32, 106, 32, 4, 40, 2, 0, 54, 2, 0, 32, 3, 65, 56, 106, 16, 124, 32, 0, 65, 0, 54, 2, 72, 32, 0, 65, 64, 107, 32, 5, 41, 3, 0, 55, 3, 0, 32, 0, 65, 56, 106, 32, 4, 41, 3, 0, 55, 3, 0, 32, 0, 32, 3, 41, 3, 56, 55, 3, 48, 32, 0, 32, 3, 41, 3, 40, 55, 2, 76, 32, 0, 65, 212, 0, 106, 32, 3, 65, 48, 106, 40, 2, 0, 54, 2, 0, 32, 3, 65, 224, 0, 106, 36, 0, 11, 194, 2, 2, 3, 127, 2, 126, 35, 0, 65, 64, 106, 34, 3, 36, 0, 32, 0, 2, 127, 65, 1, 32, 0, 45, 0, 8, 13, 0, 26, 32, 0, 40, 2, 4, 33, 5, 32, 0, 40, 2, 0, 34, 4, 45, 0, 0, 65, 4, 113, 4, 64, 32, 5, 69, 4, 64, 65, 1, 32, 4, 40, 2, 24, 65, 237, 198, 193, 0, 65, 2, 32, 4, 65, 28, 106, 40, 2, 0, 40, 2, 12, 17, 1, 0, 13, 2, 26, 32, 0, 40, 2, 0, 33, 4, 11, 32, 3, 65, 1, 58, 0, 23, 32, 3, 65, 52, 106, 65, 164, 198, 193, 0, 54, 2, 0, 32, 3, 32, 4, 41, 2, 24, 55, 3, 8, 32, 3, 32, 3, 65, 23, 106, 54, 2, 16, 32, 4, 41, 2, 8, 33, 6, 32, 4, 41, 2, 16, 33, 7, 32, 3, 32, 4, 45, 0, 32, 58, 0, 56, 32, 3, 32, 7, 55, 3, 40, 32, 3, 32, 6, 55, 3, 32, 32, 3, 32, 4, 41, 2, 0, 55, 3, 24, 32, 3, 32, 3, 65, 8, 106, 54, 2, 48, 65, 1, 32, 1, 32, 3, 65, 24, 106, 32, 2, 40, 2, 12, 17, 0, 0, 13, 1, 26, 32, 3, 40, 2, 48, 65, 227, 198, 193, 0, 65, 2, 32, 3, 40, 2, 52, 40, 2, 12, 17, 1, 0, 12, 1, 11, 65, 1, 32, 4, 40, 2, 24, 65, 229, 198, 193, 0, 65, 239, 198, 193, 0, 32, 5, 27, 65, 2, 65, 1, 32, 5, 27, 32, 4, 65, 28, 106, 40, 2, 0, 40, 2, 12, 17, 1, 0, 13, 0, 26, 32, 1, 32, 0, 40, 2, 0, 32, 2, 40, 2, 12, 17, 0, 0, 11, 58, 0, 8, 32, 0, 32, 0, 40, 2, 4, 65, 1, 106, 54, 2, 4, 32, 3, 65, 64, 107, 36, 0, 11, 249, 2, 1, 1, 127, 35, 0, 65, 16, 107, 34, 2, 36, 0, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 32, 0, 45, 0, 0, 65, 1, 107, 14, 17, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 0, 1, 11, 32, 2, 32, 1, 65, 220, 192, 193, 0, 65, 13, 16, 127, 12, 17, 11, 32, 2, 32, 1, 65, 168, 194, 193, 0, 65, 8, 16, 127, 12, 16, 11, 32, 2, 32, 1, 65, 152, 194, 193, 0, 65, 16, 16, 127, 12, 15, 11, 32, 2, 32, 1, 65, 135, 194, 193, 0, 65, 17, 16, 127, 12, 14, 11, 32, 2, 32, 1, 65, 248, 193, 193, 0, 65, 15, 16, 127, 12, 13, 11, 32, 2, 32, 1, 65, 231, 193, 193, 0, 65, 17, 16, 127, 12, 12, 11, 32, 2, 32, 1, 65, 219, 193, 193, 0, 65, 12, 16, 127, 12, 11, 11, 32, 2, 32, 1, 65, 210, 193, 193, 0, 65, 9, 16, 127, 12, 10, 11, 32, 2, 32, 1, 65, 194, 193, 193, 0, 65, 16, 16, 127, 12, 9, 11, 32, 2, 32, 1, 65, 184, 193, 193, 0, 65, 10, 16, 127, 12, 8, 11, 32, 2, 32, 1, 65, 171, 193, 193, 0, 65, 13, 16, 127, 12, 7, 11, 32, 2, 32, 1, 65, 161, 193, 193, 0, 65, 10, 16, 127, 12, 6, 11, 32, 2, 32, 1, 65, 149, 193, 193, 0, 65, 12, 16, 127, 12, 5, 11, 32, 2, 32, 1, 65, 138, 193, 193, 0, 65, 11, 16, 127, 12, 4, 11, 32, 2, 32, 1, 65, 130, 193, 193, 0, 65, 8, 16, 127, 12, 3, 11, 32, 2, 32, 1, 65, 249, 192, 193, 0, 65, 9, 16, 127, 12, 2, 11, 32, 2, 32, 1, 65, 238, 192, 193, 0, 65, 11, 16, 127, 12, 1, 11, 32, 2, 32, 1, 65, 233, 192, 193, 0, 65, 5, 16, 127, 11, 32, 2, 16, 86, 32, 2, 65, 16, 106, 36, 0, 11, 175, 2, 2, 5, 127, 2, 126, 35, 0, 65, 32, 107, 34, 6, 36, 0, 32, 1, 65, 8, 106, 34, 8, 41, 3, 0, 33, 11, 32, 4, 65, 8, 106, 34, 9, 40, 2, 0, 33, 7, 32, 4, 65, 4, 106, 40, 2, 0, 33, 10, 32, 4, 40, 2, 0, 33, 4, 32, 6, 65, 8, 106, 32, 5, 65, 255, 1, 113, 16, 119, 32, 6, 40, 2, 12, 33, 5, 2, 64, 32, 6, 40, 2, 8, 69, 4, 64, 32, 6, 65, 16, 106, 32, 1, 40, 2, 16, 32, 2, 32, 3, 32, 4, 32, 7, 106, 32, 10, 32, 7, 107, 32, 5, 16, 22, 32, 1, 32, 1, 41, 3, 0, 32, 6, 53, 2, 16, 124, 55, 3, 0, 32, 8, 32, 8, 41, 3, 0, 32, 6, 53, 2, 20, 124, 34, 12, 55, 3, 0, 32, 6, 65, 28, 106, 40, 2, 0, 33, 2, 32, 6, 40, 2, 24, 33, 1, 32, 9, 32, 7, 32, 12, 32, 11, 125, 167, 106, 54, 2, 0, 65, 1, 65, 3, 32, 2, 65, 123, 70, 27, 65, 128, 132, 12, 32, 2, 65, 3, 116, 65, 248, 255, 255, 7, 113, 118, 32, 1, 65, 1, 70, 27, 34, 1, 65, 255, 1, 113, 65, 3, 70, 13, 1, 32, 0, 65, 0, 58, 0, 0, 32, 0, 32, 1, 58, 0, 1, 32, 6, 65, 32, 106, 36, 0, 15, 11, 32, 6, 32, 5, 54, 2, 16, 65, 244, 143, 192, 0, 65, 43, 32, 6, 65, 16, 106, 65, 160, 144, 192, 0, 65, 156, 145, 192, 0, 16, 93, 0, 11, 65, 252, 138, 192, 0, 65, 43, 32, 6, 65, 16, 106, 65, 168, 139, 192, 0, 65, 180, 140, 192, 0, 16, 93, 0, 11, 138, 2, 1, 4, 127, 35, 0, 65, 32, 107, 34, 3, 36, 0, 2, 64, 32, 0, 65, 4, 106, 40, 2, 0, 34, 5, 32, 0, 65, 8, 106, 40, 2, 0, 34, 4, 107, 32, 2, 32, 1, 107, 34, 6, 79, 4, 64, 32, 0, 40, 2, 0, 33, 2, 12, 1, 11, 2, 64, 32, 4, 32, 6, 106, 34, 2, 32, 4, 73, 13, 0, 32, 5, 65, 1, 116, 34, 4, 32, 2, 32, 4, 32, 2, 75, 27, 34, 2, 65, 8, 32, 2, 65, 8, 75, 27, 33, 2, 2, 64, 32, 5, 69, 4, 64, 32, 3, 65, 0, 54, 2, 16, 12, 1, 11, 32, 3, 65, 24, 106, 65, 1, 54, 2, 0, 32, 3, 32, 5, 54, 2, 20, 32, 3, 32, 0, 40, 2, 0, 54, 2, 16, 11, 32, 3, 32, 2, 32, 3, 65, 16, 106, 16, 80, 32, 3, 65, 8, 106, 40, 2, 0, 33, 4, 32, 3, 40, 2, 4, 33, 2, 32, 3, 40, 2, 0, 65, 1, 71, 4, 64, 32, 0, 32, 2, 54, 2, 0, 32, 0, 65, 4, 106, 32, 4, 54, 2, 0, 32, 0, 65, 8, 106, 40, 2, 0, 33, 4, 12, 2, 11, 32, 4, 69, 13, 0, 32, 2, 32, 4, 16, 165, 1, 0, 11, 16, 158, 1, 0, 11, 32, 2, 32, 4, 106, 32, 1, 32, 6, 16, 121, 26, 32, 0, 65, 8, 106, 34, 0, 32, 0, 40, 2, 0, 32, 6, 106, 54, 2, 0, 32, 3, 65, 32, 106, 36, 0, 11, 161, 2, 1, 4, 127, 32, 0, 65, 0, 54, 2, 8, 32, 0, 65, 0, 54, 2, 0, 32, 0, 32, 2, 40, 2, 28, 54, 2, 4, 2, 64, 2, 64, 2, 64, 2, 64, 32, 1, 40, 2, 16, 65, 1, 70, 4, 64, 32, 2, 32, 2, 40, 2, 20, 34, 3, 32, 1, 65, 24, 106, 40, 2, 0, 34, 5, 32, 2, 40, 2, 32, 34, 6, 107, 34, 4, 32, 4, 32, 3, 75, 27, 34, 4, 4, 127, 32, 4, 32, 6, 106, 34, 3, 32, 4, 73, 13, 2, 32, 5, 32, 3, 73, 13, 3, 32, 2, 40, 2, 16, 34, 3, 32, 4, 106, 34, 5, 32, 3, 73, 13, 4, 32, 5, 65, 205, 153, 5, 79, 13, 5, 32, 1, 65, 20, 106, 40, 2, 0, 32, 6, 106, 32, 2, 40, 2, 48, 32, 3, 106, 32, 4, 16, 121, 26, 32, 2, 40, 2, 20, 33, 3, 32, 2, 40, 2, 32, 5, 32, 6, 11, 32, 4, 106, 34, 1, 54, 2, 32, 32, 2, 32, 3, 32, 4, 107, 54, 2, 20, 32, 0, 32, 1, 54, 2, 8, 32, 2, 32, 2, 40, 2, 16, 32, 4, 106, 54, 2, 16, 11, 2, 64, 32, 2, 45, 0, 55, 69, 13, 0, 32, 2, 40, 2, 20, 13, 0, 32, 0, 65, 1, 54, 2, 0, 11, 15, 11, 32, 6, 32, 3, 65, 184, 175, 192, 0, 16, 100, 0, 11, 32, 3, 32, 5, 65, 184, 175, 192, 0, 16, 99, 0, 11, 32, 3, 32, 5, 65, 200, 175, 192, 0, 16, 100, 0, 11, 32, 5, 65, 204, 153, 5, 65, 200, 175, 192, 0, 16, 99, 0, 11, 252, 1, 1, 2, 127, 35, 0, 65, 16, 107, 34, 2, 36, 0, 32, 0, 40, 2, 0, 32, 2, 65, 0, 54, 2, 12, 2, 127, 2, 64, 2, 64, 32, 1, 65, 128, 1, 79, 4, 64, 32, 1, 65, 128, 16, 73, 13, 1, 32, 2, 65, 12, 106, 33, 0, 32, 1, 65, 128, 128, 4, 79, 13, 2, 32, 2, 32, 1, 65, 63, 113, 65, 128, 1, 114, 58, 0, 14, 32, 2, 32, 1, 65, 12, 118, 65, 224, 1, 114, 58, 0, 12, 32, 2, 32, 1, 65, 6, 118, 65, 63, 113, 65, 128, 1, 114, 58, 0, 13, 65, 3, 12, 3, 11, 32, 2, 32, 1, 58, 0, 12, 32, 2, 65, 12, 106, 33, 0, 65, 1, 12, 2, 11, 32, 2, 32, 1, 65, 63, 113, 65, 128, 1, 114, 58, 0, 13, 32, 2, 32, 1, 65, 6, 118, 65, 192, 1, 114, 58, 0, 12, 32, 2, 65, 12, 106, 33, 0, 65, 2, 12, 1, 11, 32, 2, 32, 1, 65, 63, 113, 65, 128, 1, 114, 58, 0, 15, 32, 2, 32, 1, 65, 18, 118, 65, 240, 1, 114, 58, 0, 12, 32, 2, 32, 1, 65, 6, 118, 65, 63, 113, 65, 128, 1, 114, 58, 0, 14, 32, 2, 32, 1, 65, 12, 118, 65, 63, 113, 65, 128, 1, 114, 58, 0, 13, 65, 4, 11, 33, 1, 32, 0, 32, 1, 16, 39, 32, 2, 65, 16, 106, 36, 0, 11, 249, 1, 1, 2, 127, 35, 0, 65, 16, 107, 34, 2, 36, 0, 32, 2, 65, 0, 54, 2, 12, 2, 127, 2, 64, 2, 64, 32, 1, 65, 128, 1, 79, 4, 64, 32, 1, 65, 128, 16, 73, 13, 1, 32, 2, 65, 12, 106, 33, 3, 32, 1, 65, 128, 128, 4, 79, 13, 2, 32, 2, 32, 1, 65, 63, 113, 65, 128, 1, 114, 58, 0, 14, 32, 2, 32, 1, 65, 12, 118, 65, 224, 1, 114, 58, 0, 12, 32, 2, 32, 1, 65, 6, 118, 65, 63, 113, 65, 128, 1, 114, 58, 0, 13, 65, 3, 12, 3, 11, 32, 2, 32, 1, 58, 0, 12, 32, 2, 65, 12, 106, 33, 3, 65, 1, 12, 2, 11, 32, 2, 32, 1, 65, 63, 113, 65, 128, 1, 114, 58, 0, 13, 32, 2, 32, 1, 65, 6, 118, 65, 192, 1, 114, 58, 0, 12, 32, 2, 65, 12, 106, 33, 3, 65, 2, 12, 1, 11, 32, 2, 32, 1, 65, 63, 113, 65, 128, 1, 114, 58, 0, 15, 32, 2, 32, 1, 65, 18, 118, 65, 240, 1, 114, 58, 0, 12, 32, 2, 32, 1, 65, 6, 118, 65, 63, 113, 65, 128, 1, 114, 58, 0, 14, 32, 2, 32, 1, 65, 12, 118, 65, 63, 113, 65, 128, 1, 114, 58, 0, 13, 65, 4, 11, 33, 1, 32, 0, 32, 3, 32, 1, 16, 39, 32, 2, 65, 16, 106, 36, 0, 11, 132, 2, 1, 5, 127, 35, 0, 65, 32, 107, 34, 2, 36, 0, 32, 2, 65, 0, 58, 0, 15, 32, 2, 65, 16, 106, 32, 1, 40, 2, 0, 32, 2, 65, 15, 106, 65, 1, 16, 89, 2, 64, 2, 64, 32, 2, 40, 2, 16, 65, 1, 70, 4, 64, 32, 2, 65, 16, 106, 65, 4, 114, 33, 4, 3, 64, 32, 4, 16, 133, 1, 65, 255, 1, 113, 65, 15, 71, 13, 2, 2, 64, 32, 2, 40, 2, 16, 69, 13, 0, 32, 2, 45, 0, 20, 65, 2, 73, 13, 0, 32, 2, 40, 2, 24, 34, 3, 40, 2, 0, 32, 3, 40, 2, 4, 40, 2, 0, 17, 2, 0, 32, 3, 40, 2, 4, 34, 5, 40, 2, 4, 34, 6, 4, 64, 32, 3, 40, 2, 0, 32, 6, 32, 5, 40, 2, 8, 16, 156, 1, 11, 32, 2, 40, 2, 24, 65, 12, 65, 4, 16, 156, 1, 11, 32, 2, 65, 16, 106, 32, 1, 40, 2, 0, 32, 2, 65, 15, 106, 65, 1, 16, 89, 32, 2, 40, 2, 16, 65, 1, 70, 13, 0, 11, 11, 32, 2, 40, 2, 20, 69, 4, 64, 32, 0, 65, 2, 58, 0, 0, 12, 2, 11, 32, 0, 32, 2, 45, 0, 15, 58, 0, 1, 32, 0, 65, 0, 58, 0, 0, 12, 1, 11, 32, 0, 65, 1, 58, 0, 0, 32, 0, 65, 4, 106, 32, 2, 41, 2, 20, 55, 0, 0, 11, 32, 2, 65, 32, 106, 36, 0, 11, 241, 1, 1, 1, 127, 32, 2, 32, 3, 107, 32, 5, 113, 33, 3, 32, 4, 65, 3, 70, 4, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 32, 3, 32, 1, 73, 4, 64, 32, 2, 32, 1, 79, 13, 1, 32, 0, 32, 2, 106, 32, 0, 32, 3, 106, 45, 0, 0, 58, 0, 0, 32, 3, 65, 1, 106, 32, 5, 113, 34, 4, 32, 1, 79, 13, 2, 32, 2, 65, 1, 106, 34, 6, 32, 1, 79, 13, 3, 32, 0, 32, 6, 106, 32, 0, 32, 4, 106, 45, 0, 0, 58, 0, 0, 32, 3, 65, 2, 106, 32, 5, 113, 34, 3, 32, 1, 79, 13, 4, 32, 2, 65, 2, 106, 34, 2, 32, 1, 79, 13, 5, 32, 0, 32, 2, 106, 32, 0, 32, 3, 106, 45, 0, 0, 58, 0, 0, 15, 11, 32, 3, 32, 1, 65, 216, 180, 192, 0, 16, 98, 0, 11, 32, 2, 32, 1, 65, 232, 180, 192, 0, 16, 98, 0, 11, 32, 4, 32, 1, 65, 248, 180, 192, 0, 16, 98, 0, 11, 32, 6, 32, 1, 65, 136, 181, 192, 0, 16, 98, 0, 11, 32, 3, 32, 1, 65, 152, 181, 192, 0, 16, 98, 0, 11, 32, 2, 32, 1, 65, 168, 181, 192, 0, 16, 98, 0, 11, 32, 0, 32, 1, 32, 3, 32, 2, 32, 4, 32, 5, 16, 25, 11, 237, 1, 1, 3, 127, 2, 64, 2, 64, 2, 64, 32, 1, 45, 0, 16, 69, 4, 64, 32, 1, 40, 2, 0, 33, 5, 2, 64, 32, 1, 40, 2, 4, 34, 6, 32, 3, 32, 6, 32, 3, 73, 27, 34, 4, 65, 1, 71, 4, 64, 32, 2, 32, 5, 32, 4, 16, 121, 26, 12, 1, 11, 32, 3, 69, 13, 3, 32, 2, 32, 5, 45, 0, 0, 58, 0, 0, 11, 32, 1, 32, 6, 32, 4, 107, 54, 2, 4, 32, 1, 32, 4, 32, 5, 106, 54, 2, 0, 32, 3, 69, 32, 4, 114, 13, 1, 32, 1, 65, 1, 58, 0, 16, 11, 32, 1, 40, 2, 8, 33, 5, 2, 64, 32, 1, 65, 12, 106, 40, 2, 0, 34, 6, 32, 3, 32, 6, 32, 3, 73, 27, 34, 4, 65, 1, 71, 4, 64, 32, 2, 32, 5, 32, 4, 16, 121, 26, 12, 1, 11, 32, 3, 69, 13, 3, 32, 2, 32, 5, 45, 0, 0, 58, 0, 0, 11, 32, 1, 32, 6, 32, 4, 107, 54, 2, 12, 32, 1, 32, 4, 32, 5, 106, 54, 2, 8, 11, 32, 0, 65, 0, 54, 2, 0, 32, 0, 32, 4, 54, 2, 4, 15, 11, 65, 0, 65, 0, 65, 148, 137, 192, 0, 16, 98, 0, 11, 65, 0, 65, 0, 65, 148, 137, 192, 0, 16, 98, 0, 11, 227, 1, 1, 4, 127, 35, 0, 65, 64, 106, 34, 2, 36, 0, 32, 1, 65, 4, 106, 33, 4, 32, 1, 40, 2, 4, 69, 4, 64, 32, 1, 40, 2, 0, 33, 3, 32, 2, 65, 0, 54, 2, 32, 32, 2, 66, 1, 55, 3, 24, 32, 2, 32, 2, 65, 24, 106, 54, 2, 36, 32, 2, 65, 56, 106, 32, 3, 65, 16, 106, 41, 2, 0, 55, 3, 0, 32, 2, 65, 48, 106, 32, 3, 65, 8, 106, 41, 2, 0, 55, 3, 0, 32, 2, 32, 3, 41, 2, 0, 55, 3, 40, 32, 2, 65, 36, 106, 65, 172, 188, 193, 0, 32, 2, 65, 40, 106, 16, 31, 26, 32, 2, 65, 16, 106, 34, 3, 32, 2, 40, 2, 32, 54, 2, 0, 32, 2, 32, 2, 41, 3, 24, 55, 3, 8, 2, 64, 32, 1, 40, 2, 4, 34, 5, 69, 13, 0, 32, 1, 65, 8, 106, 40, 2, 0, 34, 1, 69, 13, 0, 32, 5, 32, 1, 65, 1, 16, 156, 1, 11, 32, 4, 32, 2, 41, 3, 8, 55, 2, 0, 32, 4, 65, 8, 106, 32, 3, 40, 2, 0, 54, 2, 0, 11, 32, 0, 65, 188, 192, 193, 0, 54, 2, 4, 32, 0, 32, 4, 54, 2, 0, 32, 2, 65, 64, 107, 36, 0, 11, 241, 1, 1, 1, 127, 35, 0, 65, 16, 107, 34, 3, 36, 0, 32, 3, 32, 1, 40, 2, 0, 34, 1, 40, 2, 0, 54, 2, 12, 2, 127, 2, 64, 32, 2, 65, 2, 106, 34, 2, 32, 2, 108, 34, 2, 65, 128, 16, 32, 2, 65, 128, 16, 75, 27, 34, 4, 65, 4, 32, 3, 65, 12, 106, 65, 188, 138, 192, 0, 65, 188, 138, 192, 0, 16, 32, 34, 2, 4, 64, 32, 1, 32, 3, 40, 2, 12, 54, 2, 0, 12, 1, 11, 32, 3, 65, 188, 138, 192, 0, 32, 4, 65, 4, 16, 92, 2, 64, 32, 3, 40, 2, 0, 4, 64, 32, 1, 32, 3, 40, 2, 12, 54, 2, 0, 12, 1, 11, 32, 3, 40, 2, 4, 34, 2, 32, 3, 40, 2, 12, 54, 2, 8, 32, 3, 32, 2, 54, 2, 12, 32, 4, 65, 4, 32, 3, 65, 12, 106, 65, 188, 138, 192, 0, 65, 188, 138, 192, 0, 16, 32, 33, 2, 32, 1, 32, 3, 40, 2, 12, 54, 2, 0, 32, 2, 13, 1, 11, 65, 1, 12, 1, 11, 32, 2, 66, 0, 55, 2, 4, 32, 2, 32, 2, 32, 4, 65, 2, 116, 106, 65, 2, 114, 54, 2, 0, 65, 0, 11, 33, 1, 32, 0, 32, 2, 54, 2, 4, 32, 0, 32, 1, 54, 2, 0, 32, 3, 65, 16, 106, 36, 0, 11, 202, 1, 1, 2, 127, 35, 0, 65, 32, 107, 34, 3, 36, 0, 2, 64, 2, 64, 32, 0, 65, 4, 106, 40, 2, 0, 34, 4, 32, 1, 107, 32, 2, 73, 4, 64, 32, 1, 32, 2, 106, 34, 2, 32, 1, 73, 13, 2, 32, 4, 65, 1, 116, 34, 1, 32, 2, 32, 1, 32, 2, 75, 27, 34, 1, 65, 8, 32, 1, 65, 8, 75, 27, 33, 1, 2, 64, 32, 4, 69, 4, 64, 32, 3, 65, 0, 54, 2, 16, 12, 1, 11, 32, 3, 65, 24, 106, 65, 1, 54, 2, 0, 32, 3, 32, 4, 54, 2, 20, 32, 3, 32, 0, 40, 2, 0, 54, 2, 16, 11, 32, 3, 32, 1, 32, 3, 65, 16, 106, 16, 81, 32, 3, 65, 8, 106, 40, 2, 0, 33, 1, 32, 3, 40, 2, 4, 33, 2, 32, 3, 40, 2, 0, 65, 1, 70, 13, 1, 32, 0, 32, 2, 54, 2, 0, 32, 0, 65, 4, 106, 32, 1, 54, 2, 0, 11, 32, 3, 65, 32, 106, 36, 0, 15, 11, 32, 1, 69, 13, 0, 32, 2, 32, 1, 16, 165, 1, 0, 11, 16, 158, 1, 0, 11, 149, 2, 1, 2, 127, 35, 0, 65, 32, 107, 34, 4, 36, 0, 65, 1, 33, 5, 65, 188, 231, 193, 0, 65, 188, 231, 193, 0, 40, 2, 0, 65, 1, 106, 54, 2, 0, 2, 64, 2, 64, 65, 192, 231, 193, 0, 40, 2, 0, 65, 1, 71, 4, 64, 65, 192, 231, 193, 0, 66, 129, 128, 128, 128, 16, 55, 3, 0, 12, 1, 11, 65, 196, 231, 193, 0, 65, 196, 231, 193, 0, 40, 2, 0, 65, 1, 106, 34, 5, 54, 2, 0, 32, 5, 65, 3, 79, 13, 1, 11, 32, 4, 32, 3, 54, 2, 28, 32, 4, 32, 2, 54, 2, 24, 32, 4, 65, 196, 188, 193, 0, 54, 2, 20, 32, 4, 65, 196, 188, 193, 0, 54, 2, 16, 65, 176, 231, 193, 0, 40, 2, 0, 34, 2, 65, 127, 76, 13, 0, 65, 176, 231, 193, 0, 32, 2, 65, 1, 106, 34, 2, 54, 2, 0, 65, 176, 231, 193, 0, 65, 184, 231, 193, 0, 40, 2, 0, 34, 3, 4, 127, 65, 180, 231, 193, 0, 40, 2, 0, 32, 4, 65, 8, 106, 32, 0, 32, 1, 40, 2, 16, 17, 4, 0, 32, 4, 32, 4, 41, 3, 8, 55, 3, 16, 32, 4, 65, 16, 106, 32, 3, 40, 2, 12, 17, 4, 0, 65, 176, 231, 193, 0, 40, 2, 0, 5, 32, 2, 11, 65, 127, 106, 54, 2, 0, 32, 5, 65, 2, 79, 13, 0, 35, 0, 65, 16, 107, 34, 2, 36, 0, 32, 2, 32, 1, 54, 2, 12, 32, 2, 32, 0, 54, 2, 8, 0, 11, 0, 11, 223, 1, 2, 3, 127, 1, 126, 2, 64, 32, 0, 40, 2, 24, 69, 13, 0, 32, 0, 16, 57, 34, 4, 167, 65, 3, 113, 65, 2, 70, 4, 64, 32, 4, 66, 32, 136, 167, 34, 1, 40, 2, 0, 32, 1, 40, 2, 4, 40, 2, 0, 17, 2, 0, 32, 1, 40, 2, 4, 34, 2, 40, 2, 4, 34, 3, 4, 64, 32, 1, 40, 2, 0, 32, 3, 32, 2, 40, 2, 8, 16, 156, 1, 11, 32, 1, 65, 12, 65, 4, 16, 156, 1, 11, 32, 0, 40, 2, 24, 34, 1, 69, 13, 0, 32, 0, 65, 28, 106, 40, 2, 0, 34, 2, 69, 13, 0, 32, 1, 32, 2, 65, 1, 16, 156, 1, 11, 32, 0, 40, 2, 16, 34, 1, 65, 192, 128, 4, 106, 40, 2, 0, 65, 204, 153, 5, 65, 1, 16, 156, 1, 32, 1, 40, 2, 200, 128, 4, 65, 224, 33, 65, 2, 16, 156, 1, 32, 1, 65, 212, 128, 4, 106, 40, 2, 0, 65, 130, 130, 10, 65, 2, 16, 156, 1, 32, 0, 40, 2, 16, 65, 232, 128, 4, 65, 4, 16, 156, 1, 32, 0, 65, 40, 106, 40, 2, 0, 34, 1, 4, 64, 32, 0, 40, 2, 36, 32, 1, 65, 1, 16, 156, 1, 11, 11, 208, 1, 1, 6, 127, 2, 64, 2, 64, 32, 0, 65, 200, 0, 106, 40, 2, 0, 34, 1, 69, 13, 0, 32, 0, 40, 2, 24, 4, 64, 32, 0, 65, 24, 106, 33, 5, 32, 0, 65, 32, 106, 33, 3, 32, 0, 65, 200, 0, 106, 33, 4, 3, 64, 32, 0, 40, 2, 64, 33, 2, 32, 5, 32, 3, 40, 2, 0, 32, 1, 16, 75, 32, 0, 40, 2, 24, 32, 3, 40, 2, 0, 106, 32, 2, 32, 1, 16, 121, 26, 32, 3, 32, 3, 40, 2, 0, 32, 1, 106, 54, 2, 0, 32, 0, 32, 2, 32, 1, 16, 141, 1, 32, 4, 40, 2, 0, 34, 2, 32, 1, 73, 13, 3, 32, 4, 65, 0, 54, 2, 0, 32, 2, 32, 1, 107, 34, 2, 69, 13, 2, 32, 0, 40, 2, 64, 34, 6, 32, 1, 32, 6, 106, 32, 2, 16, 96, 32, 4, 32, 2, 54, 2, 0, 32, 2, 33, 1, 32, 0, 40, 2, 24, 13, 0, 11, 11, 65, 236, 130, 192, 0, 65, 43, 65, 152, 132, 192, 0, 16, 114, 0, 11, 66, 3, 15, 11, 32, 1, 32, 2, 65, 208, 133, 192, 0, 16, 99, 0, 11, 205, 1, 2, 4, 127, 1, 126, 35, 0, 65, 16, 107, 34, 1, 36, 0, 32, 1, 65, 8, 106, 65, 53, 16, 103, 32, 1, 40, 2, 12, 33, 3, 32, 1, 40, 2, 8, 34, 0, 65, 172, 145, 192, 0, 41, 0, 0, 55, 0, 0, 32, 0, 65, 45, 106, 65, 217, 145, 192, 0, 41, 0, 0, 55, 0, 0, 32, 0, 65, 40, 106, 65, 212, 145, 192, 0, 41, 0, 0, 55, 0, 0, 32, 0, 65, 32, 106, 65, 204, 145, 192, 0, 41, 0, 0, 55, 0, 0, 32, 0, 65, 24, 106, 65, 196, 145, 192, 0, 41, 0, 0, 55, 0, 0, 32, 0, 65, 16, 106, 65, 188, 145, 192, 0, 41, 0, 0, 55, 0, 0, 32, 0, 65, 8, 106, 65, 180, 145, 192, 0, 41, 0, 0, 55, 0, 0, 65, 12, 65, 4, 16, 149, 1, 34, 2, 69, 4, 64, 65, 12, 65, 4, 16, 165, 1, 0, 11, 32, 2, 65, 53, 54, 2, 8, 32, 2, 32, 0, 54, 2, 0, 32, 2, 32, 3, 54, 2, 4, 65, 11, 32, 2, 65, 248, 145, 192, 0, 16, 107, 32, 1, 65, 16, 106, 36, 0, 11, 144, 1, 1, 3, 127, 65, 1, 33, 3, 65, 1, 33, 4, 2, 64, 32, 1, 65, 0, 72, 4, 64, 65, 0, 33, 3, 12, 1, 11, 2, 127, 32, 2, 40, 2, 0, 34, 5, 69, 4, 64, 65, 1, 32, 1, 69, 13, 1, 26, 32, 1, 65, 1, 16, 149, 1, 12, 1, 11, 32, 2, 40, 2, 4, 34, 2, 69, 4, 64, 65, 1, 32, 1, 69, 13, 1, 26, 32, 1, 65, 1, 16, 149, 1, 12, 1, 11, 32, 5, 32, 2, 32, 1, 16, 143, 1, 11, 34, 2, 69, 4, 64, 32, 0, 32, 1, 54, 2, 4, 12, 1, 11, 32, 0, 32, 2, 54, 2, 4, 65, 0, 33, 4, 32, 1, 33, 3, 11, 32, 0, 32, 4, 54, 2, 0, 32, 0, 65, 8, 106, 32, 3, 54, 2, 0, 11, 145, 1, 1, 2, 127, 65, 1, 33, 3, 2, 64, 32, 1, 65, 0, 72, 4, 64, 65, 0, 33, 1, 12, 1, 11, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 32, 2, 40, 2, 0, 34, 4, 69, 4, 64, 32, 1, 69, 13, 1, 12, 3, 11, 32, 2, 40, 2, 4, 34, 2, 13, 1, 32, 1, 13, 2, 11, 65, 1, 33, 2, 12, 3, 11, 32, 4, 32, 2, 32, 1, 16, 143, 1, 34, 2, 69, 13, 1, 12, 2, 11, 32, 1, 65, 1, 16, 149, 1, 34, 2, 13, 1, 11, 32, 0, 32, 1, 54, 2, 4, 65, 1, 33, 1, 12, 1, 11, 32, 0, 32, 2, 54, 2, 4, 65, 0, 33, 3, 11, 32, 0, 32, 3, 54, 2, 0, 32, 0, 65, 8, 106, 32, 1, 54, 2, 0, 11, 154, 1, 2, 3, 127, 2, 126, 35, 0, 65, 16, 107, 34, 1, 36, 0, 32, 0, 65, 64, 107, 33, 3, 32, 0, 65, 40, 106, 33, 2, 2, 126, 2, 64, 2, 64, 3, 64, 32, 0, 16, 78, 34, 4, 167, 65, 255, 1, 113, 65, 3, 71, 13, 2, 32, 2, 16, 163, 1, 33, 4, 32, 1, 32, 2, 65, 168, 132, 192, 0, 65, 0, 32, 3, 65, 4, 16, 110, 32, 1, 45, 0, 0, 65, 1, 70, 13, 1, 32, 2, 16, 163, 1, 32, 4, 82, 13, 0, 11, 66, 3, 33, 4, 66, 0, 12, 2, 11, 32, 1, 40, 2, 4, 32, 1, 40, 2, 8, 16, 128, 1, 34, 4, 66, 128, 126, 131, 12, 1, 11, 32, 4, 66, 128, 126, 131, 11, 33, 5, 32, 1, 65, 16, 106, 36, 0, 32, 4, 66, 255, 1, 131, 32, 5, 132, 11, 141, 1, 1, 3, 127, 35, 0, 65, 128, 1, 107, 34, 3, 36, 0, 32, 0, 40, 2, 0, 33, 2, 65, 0, 33, 0, 3, 64, 32, 0, 32, 3, 106, 65, 255, 0, 106, 32, 2, 65, 15, 113, 34, 4, 65, 48, 114, 32, 4, 65, 215, 0, 106, 32, 4, 65, 10, 73, 27, 58, 0, 0, 32, 0, 65, 127, 106, 33, 0, 32, 2, 65, 4, 118, 34, 2, 13, 0, 11, 32, 0, 65, 128, 1, 106, 34, 2, 65, 129, 1, 79, 4, 64, 32, 2, 65, 128, 1, 65, 144, 199, 193, 0, 16, 101, 0, 11, 32, 1, 65, 1, 65, 160, 199, 193, 0, 65, 2, 32, 0, 32, 3, 106, 65, 128, 1, 106, 65, 0, 32, 0, 107, 16, 27, 32, 3, 65, 128, 1, 106, 36, 0, 11, 140, 1, 1, 3, 127, 35, 0, 65, 128, 1, 107, 34, 3, 36, 0, 32, 0, 40, 2, 0, 33, 2, 65, 0, 33, 0, 3, 64, 32, 0, 32, 3, 106, 65, 255, 0, 106, 32, 2, 65, 15, 113, 34, 4, 65, 48, 114, 32, 4, 65, 55, 106, 32, 4, 65, 10, 73, 27, 58, 0, 0, 32, 0, 65, 127, 106, 33, 0, 32, 2, 65, 4, 118, 34, 2, 13, 0, 11, 32, 0, 65, 128, 1, 106, 34, 2, 65, 129, 1, 79, 4, 64, 32, 2, 65, 128, 1, 65, 144, 199, 193, 0, 16, 101, 0, 11, 32, 1, 65, 1, 65, 160, 199, 193, 0, 65, 2, 32, 0, 32, 3, 106, 65, 128, 1, 106, 65, 0, 32, 0, 107, 16, 27, 32, 3, 65, 128, 1, 106, 36, 0, 11, 135, 1, 1, 1, 127, 32, 0, 32, 2, 65, 255, 1, 113, 34, 2, 65, 10, 32, 2, 65, 10, 73, 27, 65, 2, 116, 65, 232, 175, 192, 0, 106, 40, 2, 0, 32, 2, 65, 4, 73, 65, 14, 116, 114, 34, 3, 32, 3, 65, 128, 32, 114, 32, 1, 27, 34, 1, 32, 1, 65, 128, 128, 32, 114, 32, 2, 27, 34, 1, 54, 2, 144, 128, 4, 32, 0, 65, 196, 128, 4, 106, 32, 1, 65, 14, 118, 65, 1, 113, 58, 0, 0, 32, 0, 32, 1, 65, 255, 31, 113, 34, 0, 65, 2, 118, 65, 2, 106, 65, 3, 110, 65, 1, 106, 173, 66, 32, 134, 32, 0, 65, 2, 106, 65, 3, 110, 65, 1, 106, 173, 132, 55, 2, 204, 128, 4, 11, 150, 1, 1, 2, 127, 32, 0, 45, 0, 8, 33, 1, 32, 0, 40, 2, 4, 34, 2, 4, 64, 32, 1, 65, 255, 1, 113, 33, 1, 32, 0, 2, 127, 65, 1, 32, 1, 13, 0, 26, 2, 64, 32, 2, 65, 1, 71, 13, 0, 32, 0, 45, 0, 9, 69, 13, 0, 32, 0, 40, 2, 0, 34, 2, 45, 0, 0, 65, 4, 113, 13, 0, 65, 1, 32, 2, 40, 2, 24, 65, 240, 198, 193, 0, 65, 1, 32, 2, 65, 28, 106, 40, 2, 0, 40, 2, 12, 17, 1, 0, 13, 1, 26, 11, 32, 0, 40, 2, 0, 34, 1, 40, 2, 24, 65, 241, 198, 193, 0, 65, 1, 32, 1, 65, 28, 106, 40, 2, 0, 40, 2, 12, 17, 1, 0, 11, 34, 1, 58, 0, 8, 11, 32, 1, 65, 255, 1, 113, 65, 0, 71, 11, 168, 1, 1, 1, 127, 35, 0, 65, 16, 107, 34, 2, 36, 0, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 2, 64, 32, 0, 40, 2, 0, 65, 6, 106, 14, 6, 6, 5, 4, 3, 2, 1, 0, 11, 32, 2, 32, 1, 65, 236, 186, 192, 0, 65, 5, 16, 127, 12, 6, 11, 32, 2, 32, 1, 65, 136, 187, 192, 0, 65, 5, 16, 127, 12, 5, 11, 32, 2, 32, 1, 65, 130, 187, 192, 0, 65, 6, 16, 127, 12, 4, 11, 32, 2, 32, 1, 65, 254, 186, 192, 0, 65, 4, 16, 127, 12, 3, 11, 32, 2, 32, 1, 65, 251, 186, 192, 0, 65, 3, 16, 127, 12, 2, 11, 32, 2, 32, 1, 65, 248, 186, 192, 0, 65, 3, 16, 127, 12, 1, 11, 32, 2, 32, 1, 65, 241, 186, 192, 0, 65, 7, 16, 127, 11, 32, 2, 16, 86, 32, 2, 65, 16, 106, 36, 0, 11, 162, 1, 1, 3, 127, 35, 0, 65, 16, 107, 34, 1, 36, 0, 32, 0, 40, 2, 0, 34, 2, 65, 20, 106, 40, 2, 0, 33, 3, 2, 64, 2, 127, 2, 64, 2, 64, 32, 2, 40, 2, 4, 14, 2, 0, 1, 3, 11, 32, 3, 13, 2, 65, 0, 33, 2, 65, 196, 188, 193, 0, 12, 1, 11, 32, 3, 13, 1, 32, 2, 40, 2, 0, 34, 3, 40, 2, 4, 33, 2, 32, 3, 40, 2, 0, 11, 33, 3, 32, 1, 32, 2, 54, 2, 4, 32, 1, 32, 3, 54, 2, 0, 32, 1, 65, 168, 192, 193, 0, 32, 0, 40, 2, 4, 40, 2, 8, 32, 0, 40, 2, 8, 16, 76, 0, 11, 32, 1, 65, 0, 54, 2, 4, 32, 1, 32, 2, 54, 2, 0, 32, 1, 65, 148, 192, 193, 0, 32, 0, 40, 2, 4, 40, 2, 8, 32, 0, 40, 2, 8, 16, 76, 0, 11, 137, 1, 2, 3, 127, 1, 126, 35, 0, 65, 16, 107, 34, 5, 36, 0, 32, 5, 32, 1, 40, 2, 24, 34, 6, 32, 2, 32, 3, 16, 72, 65, 1, 33, 4, 32, 5, 41, 2, 4, 33, 7, 2, 64, 2, 64, 32, 5, 40, 2, 0, 65, 1, 71, 4, 64, 32, 6, 32, 7, 167, 34, 4, 32, 6, 40, 2, 20, 106, 54, 2, 20, 32, 4, 32, 3, 75, 13, 2, 32, 1, 32, 2, 32, 4, 16, 141, 1, 32, 0, 32, 4, 54, 2, 4, 65, 0, 33, 4, 12, 1, 11, 32, 0, 32, 7, 55, 2, 4, 11, 32, 0, 32, 4, 54, 2, 0, 32, 5, 65, 16, 106, 36, 0, 15, 11, 32, 4, 32, 3, 65, 252, 137, 192, 0, 16, 99, 0, 11, 141, 1, 2, 4, 127, 1, 126, 35, 0, 65, 16, 107, 34, 0, 36, 0, 32, 0, 65, 8, 106, 65, 19, 16, 103, 32, 0, 40, 2, 12, 33, 3, 32, 0, 40, 2, 8, 34, 2, 65, 225, 145, 192, 0, 41, 0, 0, 55, 0, 0, 32, 2, 65, 15, 106, 65, 240, 145, 192, 0, 40, 0, 0, 54, 0, 0, 32, 2, 65, 8, 106, 65, 233, 145, 192, 0, 41, 0, 0, 55, 0, 0, 65, 12, 65, 4, 16, 149, 1, 34, 1, 69, 4, 64, 65, 12, 65, 4, 16, 165, 1, 0, 11, 32, 1, 65, 19, 54, 2, 8, 32, 1, 32, 2, 54, 2, 0, 32, 1, 32, 3, 54, 2, 4, 65, 11, 32, 1, 65, 248, 145, 192, 0, 16, 107, 32, 0, 65, 16, 106, 36, 0, 11, 136, 1, 1, 1, 127, 65, 204, 153, 5, 65, 1, 16, 149, 1, 34, 1, 69, 4, 64, 65, 204, 153, 5, 65, 1, 16, 165, 1, 0, 11, 32, 1, 65, 0, 65, 204, 153, 5, 16, 131, 1, 33, 1, 32, 0, 65, 0, 58, 0, 55, 32, 0, 65, 0, 59, 0, 53, 32, 0, 65, 144, 32, 54, 2, 0, 32, 0, 66, 0, 55, 2, 4, 32, 0, 65, 12, 106, 66, 0, 55, 2, 0, 32, 0, 66, 0, 55, 2, 28, 32, 0, 65, 20, 106, 66, 128, 128, 128, 128, 16, 55, 2, 0, 32, 0, 65, 36, 106, 66, 0, 55, 2, 0, 32, 0, 65, 44, 106, 65, 0, 54, 2, 0, 32, 0, 32, 1, 54, 2, 48, 32, 0, 65, 0, 58, 0, 52, 11, 113, 0, 2, 127, 32, 2, 65, 2, 116, 34, 1, 32, 3, 65, 3, 116, 65, 128, 128, 1, 106, 34, 2, 32, 1, 32, 2, 75, 27, 65, 135, 128, 4, 106, 34, 1, 65, 16, 118, 64, 0, 34, 2, 65, 127, 70, 4, 64, 65, 0, 33, 3, 65, 1, 12, 1, 11, 32, 2, 65, 16, 116, 34, 3, 66, 0, 55, 3, 0, 32, 3, 65, 0, 54, 2, 8, 32, 3, 32, 3, 32, 1, 65, 128, 128, 124, 113, 106, 65, 2, 114, 54, 2, 0, 65, 0, 11, 33, 2, 32, 0, 32, 3, 54, 2, 4, 32, 0, 32, 2, 54, 2, 0, 11, 127, 1, 1, 127, 35, 0, 65, 64, 106, 34, 5, 36, 0, 32, 5, 32, 1, 54, 2, 12, 32, 5, 32, 0, 54, 2, 8, 32, 5, 32, 3, 54, 2, 20, 32, 5, 32, 2, 54, 2, 16, 32, 5, 65, 44, 106, 65, 2, 54, 2, 0, 32, 5, 65, 60, 106, 65, 194, 0, 54, 2, 0, 32, 5, 66, 2, 55, 2, 28, 32, 5, 65, 160, 197, 193, 0, 54, 2, 24, 32, 5, 65, 62, 54, 2, 52, 32, 5, 32, 5, 65, 48, 106, 54, 2, 40, 32, 5, 32, 5, 65, 16, 106, 54, 2, 56, 32, 5, 32, 5, 65, 8, 106, 54, 2, 48, 32, 5, 65, 24, 106, 32, 4, 16, 130, 1, 0, 11, 113, 1, 3, 127, 35, 0, 65, 32, 107, 34, 2, 36, 0, 2, 64, 32, 0, 32, 1, 16, 56, 13, 0, 32, 1, 65, 28, 106, 40, 2, 0, 33, 3, 32, 1, 40, 2, 24, 32, 2, 65, 28, 106, 65, 0, 54, 2, 0, 32, 2, 65, 228, 196, 193, 0, 54, 2, 24, 32, 2, 66, 1, 55, 2, 12, 32, 2, 65, 232, 196, 193, 0, 54, 2, 8, 32, 3, 32, 2, 65, 8, 106, 16, 31, 13, 0, 32, 0, 65, 4, 106, 32, 1, 16, 56, 32, 2, 65, 32, 106, 36, 0, 15, 11, 32, 2, 65, 32, 106, 36, 0, 65, 1, 11, 119, 1, 2, 127, 32, 0, 45, 0, 4, 33, 1, 32, 0, 45, 0, 5, 4, 64, 32, 1, 65, 255, 1, 113, 33, 2, 32, 0, 2, 127, 65, 1, 32, 2, 13, 0, 26, 32, 0, 40, 2, 0, 34, 1, 65, 28, 106, 40, 2, 0, 40, 2, 12, 33, 2, 32, 1, 40, 2, 24, 33, 0, 32, 1, 45, 0, 0, 65, 4, 113, 4, 64, 32, 0, 65, 234, 198, 193, 0, 65, 1, 32, 2, 17, 1, 0, 12, 1, 11, 32, 0, 65, 235, 198, 193, 0, 65, 2, 32, 2, 17, 1, 0, 11, 34, 1, 58, 0, 4, 11, 32, 1, 65, 255, 1, 113, 65, 0, 71, 11, 101, 0, 2, 64, 32, 0, 32, 1, 107, 32, 2, 73, 4, 64, 32, 1, 65, 127, 106, 33, 1, 32, 0, 65, 127, 106, 33, 0, 3, 64, 32, 0, 32, 2, 106, 32, 1, 32, 2, 106, 45, 0, 0, 58, 0, 0, 32, 2, 65, 127, 106, 34, 2, 13, 0, 11, 12, 1, 11, 32, 2, 69, 13, 0, 3, 64, 32, 0, 32, 1, 45, 0, 0, 58, 0, 0, 32, 1, 65, 1, 106, 33, 1, 32, 0, 65, 1, 106, 33, 0, 32, 2, 65, 127, 106, 34, 2, 13, 0, 11, 11, 11, 77, 1, 1, 127, 65, 130, 130, 10, 65, 2, 16, 149, 1, 34, 1, 69, 4, 64, 65, 130, 130, 10, 65, 2, 16, 165, 1, 0, 11, 32, 1, 65, 0, 65, 130, 130, 10, 16, 131, 1, 33, 1, 32, 0, 66, 0, 55, 2, 12, 32, 0, 32, 1, 54, 2, 8, 32, 0, 65, 20, 106, 66, 0, 55, 2, 0, 32, 0, 66, 135, 128, 128, 128, 48, 55, 2, 0, 11, 109, 1, 1, 127, 35, 0, 65, 48, 107, 34, 3, 36, 0, 32, 3, 32, 1, 54, 2, 4, 32, 3, 32, 0, 54, 2, 0, 32, 3, 65, 28, 106, 65, 2, 54, 2, 0, 32, 3, 65, 44, 106, 65, 61, 54, 2, 0, 32, 3, 66, 2, 55, 2, 12, 32, 3, 65, 244, 197, 193, 0, 54, 2, 8, 32, 3, 65, 61, 54, 2, 36, 32, 3, 32, 3, 65, 32, 106, 54, 2, 24, 32, 3, 32, 3, 54, 2, 40, 32, 3, 32, 3, 65, 4, 106, 54, 2, 32, 32, 3, 65, 8, 106, 32, 2, 16, 130, 1, 0, 11, 109, 1, 1, 127, 35, 0, 65, 48, 107, 34, 3, 36, 0, 32, 3, 32, 1, 54, 2, 4, 32, 3, 32, 0, 54, 2, 0, 32, 3, 65, 28, 106, 65, 2, 54, 2, 0, 32, 3, 65, 44, 106, 65, 61, 54, 2, 0, 32, 3, 66, 2, 55, 2, 12, 32, 3, 65, 196, 202, 193, 0, 54, 2, 8, 32, 3, 65, 61, 54, 2, 36, 32, 3, 32, 3, 65, 32, 106, 54, 2, 24, 32, 3, 32, 3, 65, 4, 106, 54, 2, 40, 32, 3, 32, 3, 54, 2, 32, 32, 3, 65, 8, 106, 32, 2, 16, 130, 1, 0, 11, 109, 1, 1, 127, 35, 0, 65, 48, 107, 34, 3, 36, 0, 32, 3, 32, 1, 54, 2, 4, 32, 3, 32, 0, 54, 2, 0, 32, 3, 65, 28, 106, 65, 2, 54, 2, 0, 32, 3, 65, 44, 106, 65, 61, 54, 2, 0, 32, 3, 66, 2, 55, 2, 12, 32, 3, 65, 248, 202, 193, 0, 54, 2, 8, 32, 3, 65, 61, 54, 2, 36, 32, 3, 32, 3, 65, 32, 106, 54, 2, 24, 32, 3, 32, 3, 65, 4, 106, 54, 2, 40, 32, 3, 32, 3, 54, 2, 32, 32, 3, 65, 8, 106, 32, 2, 16, 130, 1, 0, 11, 109, 1, 1, 127, 35, 0, 65, 48, 107, 34, 3, 36, 0, 32, 3, 32, 1, 54, 2, 4, 32, 3, 32, 0, 54, 2, 0, 32, 3, 65, 28, 106, 65, 2, 54, 2, 0, 32, 3, 65, 44, 106, 65, 61, 54, 2, 0, 32, 3, 66, 2, 55, 2, 12, 32, 3, 65, 164, 202, 193, 0, 54, 2, 8, 32, 3, 65, 61, 54, 2, 36, 32, 3, 32, 3, 65, 32, 106, 54, 2, 24, 32, 3, 32, 3, 65, 4, 106, 54, 2, 40, 32, 3, 32, 3, 54, 2, 32, 32, 3, 65, 8, 106, 32, 2, 16, 130, 1, 0, 11, 86, 1, 2, 127, 35, 0, 65, 32, 107, 34, 2, 36, 0, 32, 0, 65, 28, 106, 40, 2, 0, 33, 3, 32, 0, 40, 2, 24, 32, 2, 65, 24, 106, 32, 1, 65, 16, 106, 41, 2, 0, 55, 3, 0, 32, 2, 65, 16, 106, 32, 1, 65, 8, 106, 41, 2, 0, 55, 3, 0, 32, 2, 32, 1, 41, 2, 0, 55, 3, 8, 32, 3, 32, 2, 65, 8, 106, 16, 31, 32, 2, 65, 32, 106, 36, 0, 11, 70, 1, 1, 127, 2, 64, 32, 1, 65, 127, 74, 4, 64, 2, 64, 32, 1, 69, 4, 64, 65, 1, 33, 2, 12, 1, 11, 32, 1, 65, 1, 16, 149, 1, 34, 2, 13, 0, 12, 2, 11, 32, 0, 32, 1, 54, 2, 4, 32, 0, 32, 2, 54, 2, 0, 15, 11, 16, 158, 1, 0, 11, 32, 1, 65, 1, 16, 165, 1, 0, 11, 89, 1, 1, 127, 35, 0, 65, 32, 107, 34, 2, 36, 0, 32, 2, 32, 0, 40, 2, 0, 54, 2, 4, 32, 2, 65, 24, 106, 32, 1, 65, 16, 106, 41, 2, 0, 55, 3, 0, 32, 2, 65, 16, 106, 32, 1, 65, 8, 106, 41, 2, 0, 55, 3, 0, 32, 2, 32, 1, 41, 2, 0, 55, 3, 8, 32, 2, 65, 4, 106, 65, 172, 188, 193, 0, 32, 2, 65, 8, 106, 16, 31, 32, 2, 65, 32, 106, 36, 0, 11, 89, 1, 1, 127, 35, 0, 65, 32, 107, 34, 2, 36, 0, 32, 2, 32, 0, 40, 2, 0, 54, 2, 4, 32, 2, 65, 24, 106, 32, 1, 65, 16, 106, 41, 2, 0, 55, 3, 0, 32, 2, 65, 16, 106, 32, 1, 65, 8, 106, 41, 2, 0, 55, 3, 0, 32, 2, 32, 1, 41, 2, 0, 55, 3, 8, 32, 2, 65, 4, 106, 65, 196, 194, 193, 0, 32, 2, 65, 8, 106, 16, 31, 32, 2, 65, 32, 106, 36, 0, 11, 89, 1, 1, 127, 35, 0, 65, 32, 107, 34, 2, 36, 0, 32, 2, 32, 0, 40, 2, 0, 54, 2, 4, 32, 2, 65, 24, 106, 32, 1, 65, 16, 106, 41, 2, 0, 55, 3, 0, 32, 2, 65, 16, 106, 32, 1, 65, 8, 106, 41, 2, 0, 55, 3, 0, 32, 2, 32, 1, 41, 2, 0, 55, 3, 8, 32, 2, 65, 4, 106, 65, 236, 200, 193, 0, 32, 2, 65, 8, 106, 16, 31, 32, 2, 65, 32, 106, 36, 0, 11, 97, 1, 2, 127, 35, 0, 65, 16, 107, 34, 4, 36, 0, 65, 12, 65, 4, 16, 149, 1, 34, 3, 69, 4, 64, 65, 12, 65, 4, 16, 165, 1, 0, 11, 32, 3, 32, 0, 58, 0, 8, 32, 3, 32, 2, 54, 2, 4, 32, 3, 32, 1, 54, 2, 0, 32, 3, 32, 4, 47, 0, 13, 59, 0, 9, 32, 3, 65, 11, 106, 32, 4, 65, 15, 106, 45, 0, 0, 58, 0, 0, 32, 4, 65, 16, 106, 36, 0, 32, 3, 173, 66, 32, 134, 66, 2, 132, 11, 86, 1, 1, 127, 35, 0, 65, 32, 107, 34, 2, 36, 0, 32, 2, 32, 0, 54, 2, 4, 32, 2, 65, 24, 106, 32, 1, 65, 16, 106, 41, 2, 0, 55, 3, 0, 32, 2, 65, 16, 106, 32, 1, 65, 8, 106, 41, 2, 0, 55, 3, 0, 32, 2, 32, 1, 41, 2, 0, 55, 3, 8, 32, 2, 65, 4, 106, 65, 236, 200, 193, 0, 32, 2, 65, 8, 106, 16, 31, 32, 2, 65, 32, 106, 36, 0, 11, 95, 1, 1, 127, 35, 0, 65, 16, 107, 34, 2, 36, 0, 2, 64, 32, 0, 40, 2, 0, 34, 0, 40, 2, 0, 65, 1, 70, 4, 64, 32, 2, 32, 1, 65, 220, 143, 192, 0, 65, 4, 16, 127, 32, 2, 32, 0, 65, 4, 106, 54, 2, 12, 32, 2, 32, 2, 65, 12, 106, 65, 228, 143, 192, 0, 16, 63, 12, 1, 11, 32, 2, 32, 1, 65, 224, 143, 192, 0, 65, 4, 16, 127, 11, 32, 2, 16, 86, 32, 2, 65, 16, 106, 36, 0, 11, 76, 2, 1, 127, 1, 126, 32, 1, 65, 8, 106, 34, 6, 41, 3, 0, 33, 7, 32, 0, 32, 1, 32, 2, 32, 3, 32, 4, 65, 8, 106, 34, 1, 40, 2, 0, 34, 0, 32, 4, 40, 2, 0, 106, 32, 4, 65, 4, 106, 40, 2, 0, 32, 0, 107, 32, 5, 16, 55, 32, 1, 32, 0, 32, 6, 41, 3, 0, 32, 7, 125, 167, 106, 54, 2, 0, 11, 74, 0, 2, 127, 32, 1, 65, 128, 128, 196, 0, 71, 4, 64, 65, 1, 32, 0, 40, 2, 24, 32, 1, 32, 0, 65, 28, 106, 40, 2, 0, 40, 2, 16, 17, 0, 0, 13, 1, 26, 11, 32, 2, 69, 4, 64, 65, 0, 15, 11, 32, 0, 40, 2, 24, 32, 2, 32, 3, 32, 0, 65, 28, 106, 40, 2, 0, 40, 2, 12, 17, 1, 0, 11, 11, 57, 1, 1, 127, 35, 0, 65, 16, 107, 34, 2, 36, 0, 32, 0, 40, 2, 0, 33, 0, 32, 2, 32, 1, 16, 137, 1, 55, 3, 0, 32, 2, 32, 0, 54, 2, 12, 32, 2, 32, 2, 65, 12, 106, 16, 46, 32, 2, 16, 95, 32, 2, 65, 16, 106, 36, 0, 11, 86, 1, 1, 127, 65, 244, 213, 2, 65, 4, 16, 149, 1, 34, 1, 69, 4, 64, 65, 244, 213, 2, 65, 4, 16, 165, 1, 0, 11, 32, 1, 65, 232, 213, 0, 106, 65, 0, 65, 136, 128, 2, 16, 131, 1, 26, 32, 1, 65, 0, 65, 230, 213, 0, 16, 131, 1, 34, 1, 65, 1, 58, 0, 243, 213, 2, 32, 1, 65, 1, 59, 1, 240, 213, 2, 32, 1, 32, 0, 58, 0, 242, 213, 2, 32, 1, 11, 72, 1, 1, 127, 35, 0, 65, 32, 107, 34, 3, 36, 0, 32, 3, 65, 20, 106, 65, 0, 54, 2, 0, 32, 3, 65, 228, 196, 193, 0, 54, 2, 16, 32, 3, 66, 1, 55, 2, 4, 32, 3, 32, 1, 54, 2, 28, 32, 3, 32, 0, 54, 2, 24, 32, 3, 32, 3, 65, 24, 106, 54, 2, 0, 32, 3, 32, 2, 16, 130, 1, 0, 11, 64, 0, 35, 0, 65, 32, 107, 34, 0, 36, 0, 32, 0, 65, 28, 106, 65, 0, 54, 2, 0, 32, 0, 65, 220, 139, 192, 0, 54, 2, 24, 32, 0, 66, 1, 55, 2, 12, 32, 0, 65, 212, 139, 192, 0, 54, 2, 8, 32, 1, 32, 0, 65, 8, 106, 16, 102, 32, 0, 65, 32, 106, 36, 0, 11, 58, 1, 1, 127, 35, 0, 65, 16, 107, 34, 2, 36, 0, 32, 2, 32, 1, 65, 248, 140, 192, 0, 65, 15, 16, 127, 32, 2, 32, 0, 54, 2, 12, 32, 2, 32, 2, 65, 12, 106, 65, 136, 141, 192, 0, 16, 63, 32, 2, 16, 86, 32, 2, 65, 16, 106, 36, 0, 11, 58, 1, 1, 127, 35, 0, 65, 16, 107, 34, 2, 36, 0, 32, 2, 32, 1, 65, 152, 141, 192, 0, 65, 13, 16, 127, 32, 2, 32, 0, 54, 2, 12, 32, 2, 32, 2, 65, 12, 106, 65, 168, 141, 192, 0, 16, 63, 32, 2, 16, 86, 32, 2, 65, 16, 106, 36, 0, 11, 70, 1, 2, 127, 32, 1, 40, 2, 4, 33, 2, 32, 1, 40, 2, 0, 33, 3, 65, 8, 65, 4, 16, 149, 1, 34, 1, 69, 4, 64, 65, 8, 65, 4, 16, 165, 1, 0, 11, 32, 1, 32, 2, 54, 2, 4, 32, 1, 32, 3, 54, 2, 0, 32, 0, 65, 204, 192, 193, 0, 54, 2, 4, 32, 0, 32, 1, 54, 2, 0, 11, 59, 1, 1, 127, 2, 127, 32, 1, 65, 4, 75, 4, 64, 65, 240, 177, 127, 33, 2, 65, 1, 12, 1, 11, 32, 1, 65, 2, 116, 65, 144, 187, 192, 0, 106, 40, 2, 0, 33, 2, 65, 0, 11, 33, 1, 32, 0, 32, 2, 54, 2, 4, 32, 0, 32, 1, 54, 2, 0, 11, 92, 1, 3, 127, 35, 0, 65, 16, 107, 34, 1, 36, 0, 32, 0, 40, 2, 12, 34, 2, 69, 4, 64, 65, 212, 188, 193, 0, 65, 43, 65, 244, 191, 193, 0, 16, 114, 0, 11, 32, 0, 40, 2, 8, 34, 3, 69, 4, 64, 65, 212, 188, 193, 0, 65, 43, 65, 132, 192, 193, 0, 16, 114, 0, 11, 32, 1, 32, 2, 54, 2, 8, 32, 1, 32, 0, 54, 2, 4, 32, 1, 32, 3, 54, 2, 0, 32, 1, 16, 129, 1, 0, 11, 51, 1, 1, 127, 32, 2, 4, 64, 32, 0, 33, 3, 3, 64, 32, 3, 32, 1, 45, 0, 0, 58, 0, 0, 32, 1, 65, 1, 106, 33, 1, 32, 3, 65, 1, 106, 33, 3, 32, 2, 65, 127, 106, 34, 2, 13, 0, 11, 11, 32, 0, 11, 58, 0, 32, 0, 40, 2, 0, 33, 0, 32, 1, 45, 0, 0, 65, 16, 113, 65, 4, 118, 4, 64, 32, 0, 32, 1, 16, 83, 15, 11, 32, 1, 45, 0, 0, 65, 32, 113, 65, 5, 118, 4, 64, 32, 0, 32, 1, 16, 84, 15, 11, 32, 0, 32, 1, 16, 160, 1, 11, 42, 1, 1, 127, 32, 2, 65, 1, 16, 48, 34, 3, 4, 64, 32, 3, 32, 0, 32, 2, 32, 1, 32, 1, 32, 2, 75, 27, 16, 121, 26, 32, 0, 32, 1, 65, 1, 16, 24, 11, 32, 3, 11, 67, 2, 1, 127, 1, 126, 35, 0, 65, 16, 107, 34, 1, 36, 0, 32, 1, 65, 0, 54, 2, 8, 32, 1, 66, 0, 55, 3, 0, 32, 1, 41, 3, 0, 33, 2, 32, 0, 32, 1, 40, 2, 8, 54, 2, 8, 32, 0, 32, 2, 55, 3, 0, 32, 0, 65, 0, 54, 2, 16, 32, 1, 65, 16, 106, 36, 0, 11, 45, 0, 2, 64, 32, 0, 65, 124, 77, 4, 64, 32, 0, 69, 4, 64, 65, 4, 33, 0, 12, 2, 11, 32, 0, 32, 0, 65, 125, 73, 65, 2, 116, 16, 149, 1, 34, 0, 13, 1, 11, 0, 11, 32, 0, 11, 50, 1, 1, 127, 16, 59, 34, 3, 32, 2, 65, 1, 115, 32, 1, 65, 1, 32, 1, 65, 128, 2, 73, 27, 16, 85, 32, 0, 66, 0, 55, 3, 0, 32, 0, 32, 3, 54, 2, 16, 32, 0, 65, 8, 106, 66, 0, 55, 3, 0, 11, 52, 0, 32, 0, 32, 1, 40, 2, 24, 32, 2, 32, 3, 32, 1, 65, 28, 106, 40, 2, 0, 40, 2, 12, 17, 1, 0, 58, 0, 8, 32, 0, 32, 1, 54, 2, 0, 32, 0, 32, 3, 69, 58, 0, 9, 32, 0, 65, 0, 54, 2, 4, 11, 50, 1, 1, 127, 65, 8, 65, 4, 16, 149, 1, 34, 2, 69, 4, 64, 65, 8, 65, 4, 16, 165, 1, 0, 11, 32, 2, 32, 1, 54, 2, 4, 32, 2, 32, 0, 54, 2, 0, 65, 16, 32, 2, 65, 180, 143, 192, 0, 16, 107, 11, 44, 1, 1, 127, 35, 0, 65, 16, 107, 34, 1, 36, 0, 32, 1, 65, 8, 106, 32, 0, 65, 8, 106, 40, 2, 0, 54, 2, 0, 32, 1, 32, 0, 41, 2, 0, 55, 3, 0, 32, 1, 16, 88, 0, 11, 52, 1, 1, 127, 35, 0, 65, 16, 107, 34, 2, 36, 0, 32, 2, 32, 1, 54, 2, 12, 32, 2, 32, 0, 54, 2, 8, 32, 2, 65, 176, 197, 193, 0, 54, 2, 4, 32, 2, 65, 228, 196, 193, 0, 54, 2, 0, 32, 2, 16, 120, 0, 11, 41, 1, 1, 127, 32, 2, 4, 64, 32, 0, 33, 3, 3, 64, 32, 3, 32, 1, 58, 0, 0, 32, 3, 65, 1, 106, 33, 3, 32, 2, 65, 127, 106, 34, 2, 13, 0, 11, 11, 32, 0, 11, 37, 1, 1, 126, 32, 0, 40, 2, 0, 34, 0, 172, 34, 2, 32, 2, 66, 63, 135, 34, 2, 124, 32, 2, 133, 32, 0, 65, 127, 115, 65, 31, 118, 32, 1, 16, 52, 11, 51, 1, 1, 127, 65, 16, 33, 1, 2, 64, 2, 64, 2, 64, 32, 0, 45, 0, 0, 65, 1, 107, 14, 2, 0, 1, 2, 11, 32, 0, 45, 0, 1, 15, 11, 32, 0, 65, 4, 106, 40, 2, 0, 45, 0, 8, 33, 1, 11, 32, 1, 11, 39, 1, 1, 127, 2, 64, 32, 0, 40, 2, 0, 34, 1, 69, 13, 0, 32, 0, 65, 4, 106, 40, 2, 0, 34, 0, 69, 13, 0, 32, 1, 32, 0, 65, 1, 16, 156, 1, 11, 11, 39, 1, 1, 127, 2, 64, 32, 0, 40, 2, 4, 34, 1, 69, 13, 0, 32, 0, 65, 8, 106, 40, 2, 0, 34, 0, 69, 13, 0, 32, 1, 32, 0, 65, 1, 16, 156, 1, 11, 11, 35, 0, 32, 1, 65, 1, 115, 16, 113, 33, 1, 32, 0, 66, 0, 55, 3, 0, 32, 0, 32, 1, 54, 2, 16, 32, 0, 65, 8, 106, 66, 0, 55, 3, 0, 11, 41, 0, 32, 0, 173, 66, 128, 128, 128, 128, 16, 66, 0, 32, 0, 40, 2, 24, 65, 196, 140, 192, 0, 65, 20, 32, 0, 65, 28, 106, 40, 2, 0, 40, 2, 12, 17, 1, 0, 27, 132, 11, 37, 0, 32, 0, 65, 0, 58, 0, 32, 32, 0, 65, 0, 54, 2, 20, 32, 0, 65, 0, 54, 2, 12, 32, 0, 65, 0, 54, 2, 0, 32, 0, 65, 0, 54, 2, 28, 11, 27, 1, 1, 127, 32, 0, 65, 1, 16, 48, 34, 1, 4, 64, 32, 1, 65, 0, 32, 0, 16, 131, 1, 26, 11, 32, 1, 11, 29, 1, 1, 127, 32, 0, 65, 4, 106, 40, 2, 0, 34, 1, 4, 64, 32, 0, 40, 2, 0, 32, 1, 65, 1, 16, 156, 1, 11, 11, 40, 0, 32, 0, 32, 0, 40, 2, 16, 32, 2, 106, 54, 2, 16, 32, 0, 32, 0, 41, 3, 0, 32, 2, 173, 124, 55, 3, 0, 32, 0, 65, 8, 106, 32, 1, 32, 2, 16, 8, 11, 28, 0, 32, 1, 40, 2, 24, 65, 208, 216, 193, 0, 65, 5, 32, 1, 65, 28, 106, 40, 2, 0, 40, 2, 12, 17, 1, 0, 11, 10, 0, 32, 0, 32, 1, 32, 2, 16, 123, 11, 16, 0, 32, 1, 4, 64, 32, 0, 32, 1, 65, 4, 16, 156, 1, 11, 11, 18, 0, 32, 0, 40, 2, 0, 32, 1, 32, 1, 32, 2, 106, 16, 66, 65, 0, 11, 22, 0, 32, 0, 32, 1, 40, 2, 8, 54, 2, 4, 32, 0, 32, 1, 40, 2, 0, 54, 2, 0, 11, 16, 0, 32, 0, 41, 3, 0, 26, 32, 0, 65, 8, 106, 40, 2, 0, 11, 20, 0, 32, 0, 40, 2, 0, 32, 1, 32, 0, 40, 2, 4, 40, 2, 12, 17, 0, 0, 11, 8, 0, 32, 0, 32, 1, 16, 48, 11, 19, 0, 32, 0, 65, 40, 54, 2, 4, 32, 0, 65, 212, 138, 192, 0, 54, 2, 0, 11, 17, 0, 32, 0, 40, 2, 0, 32, 0, 40, 2, 4, 32, 1, 16, 166, 1, 11, 17, 0, 32, 0, 40, 2, 0, 32, 0, 40, 2, 8, 32, 1, 16, 166, 1, 11, 16, 0, 32, 0, 40, 2, 0, 32, 0, 40, 2, 8, 32, 1, 16, 15, 11, 19, 0, 32, 0, 65, 204, 192, 193, 0, 54, 2, 4, 32, 0, 32, 1, 54, 2, 0, 11, 16, 0, 32, 1, 32, 0, 40, 2, 0, 32, 0, 40, 2, 4, 16, 14, 11, 10, 0, 32, 0, 32, 1, 32, 2, 16, 24, 11, 13, 0, 32, 0, 40, 2, 0, 32, 1, 16, 37, 65, 0, 11, 17, 0, 65, 192, 196, 193, 0, 65, 17, 65, 212, 196, 193, 0, 16, 114, 0, 11, 14, 0, 32, 0, 40, 2, 0, 26, 3, 64, 12, 0, 11, 0, 11, 13, 0, 32, 0, 53, 2, 0, 65, 1, 32, 1, 16, 52, 11, 13, 0, 32, 0, 40, 2, 0, 32, 1, 32, 2, 16, 39, 11, 11, 0, 32, 0, 35, 0, 106, 36, 0, 35, 0, 11, 10, 0, 32, 0, 65, 8, 106, 41, 3, 0, 11, 13, 0, 32, 1, 65, 244, 145, 192, 0, 65, 2, 16, 14, 11, 25, 0, 32, 0, 32, 1, 65, 172, 231, 193, 0, 40, 2, 0, 34, 0, 65, 42, 32, 0, 27, 17, 4, 0, 0, 11, 10, 0, 32, 2, 32, 0, 32, 1, 16, 14, 11, 9, 0, 32, 0, 65, 0, 54, 2, 0, 11, 7, 0, 32, 0, 16, 1, 0, 11, 13, 0, 66, 250, 227, 222, 178, 168, 237, 139, 221, 137, 127, 11, 4, 0, 65, 0, 11, 5, 0, 65, 128, 4, 11, 4, 0, 65, 1, 11, 4, 0, 32, 1, 11, 13, 0, 66, 149, 151, 213, 166, 240, 201, 145, 211, 198, 0, 11, 13, 0, 66, 244, 249, 158, 230, 238, 163, 170, 249, 254, 0, 11, 13, 0, 66, 225, 246, 196, 237, 133, 189, 222, 249, 138, 127, 11, 12, 0, 66, 161, 180, 233, 183, 247, 251, 205, 222, 8, 11, 3, 0, 1, 11, 3, 0, 1, 11, 11, 140, 223, 1, 3, 0, 65, 128, 128, 192, 0, 11, 246, 30, 47, 114, 117, 115, 116, 99, 47, 50, 102, 100, 55, 51, 102, 97, 98, 101, 52, 54, 57, 51, 53, 55, 97, 49, 50, 99, 50, 99, 57, 55, 52, 99, 49, 52, 48, 102, 54, 55, 101, 55, 99, 100, 100, 55, 54, 100, 48, 47, 108, 105, 98, 114, 97, 114, 121, 47, 115, 116, 100, 47, 115, 114, 99, 47, 105, 111, 47, 109, 111, 100, 46, 114, 115, 0, 0, 0, 0, 0, 16, 0, 73, 0, 0, 0, 158, 5, 0, 0, 33, 0, 0, 0, 102, 97, 105, 108, 101, 100, 32, 116, 111, 32, 119, 114, 105, 116, 101, 32, 119, 104, 111, 108, 101, 32, 98, 117, 102, 102, 101, 114, 67, 58, 92, 85, 115, 101, 114, 115, 92, 104, 117, 103, 111, 103, 92, 46, 99, 97, 114, 103, 111, 92, 114, 101, 103, 105, 115, 116, 114, 121, 92, 115, 114, 99, 92, 103, 105, 116, 104, 117, 98, 46, 99, 111, 109, 45, 49, 101, 99, 99, 54, 50, 57, 57, 100, 98, 57, 101, 99, 56, 50, 51, 92, 102, 108, 97, 116, 101, 50, 45, 49, 46, 48, 46, 50, 48, 92, 115, 114, 99, 92, 103, 122, 92, 119, 114, 105, 116, 101, 46, 114, 115, 120, 0, 16, 0, 92, 0, 0, 0, 112, 0, 0, 0, 34, 0, 0, 0, 120, 0, 16, 0, 92, 0, 0, 0, 119, 1, 0, 0, 44, 0, 0, 0, 0, 0, 0, 0, 97, 115, 115, 101, 114, 116, 105, 111, 110, 32, 102, 97, 105, 108, 101, 100, 58, 32, 96, 40, 108, 101, 102, 116, 32, 61, 61, 32, 114, 105, 103, 104, 116, 41, 96, 10, 32, 32, 108, 101, 102, 116, 58, 32, 96, 96, 44, 10, 32, 114, 105, 103, 104, 116, 58, 32, 96, 96, 0, 0, 248, 0, 16, 0, 45, 0, 0, 0, 37, 1, 16, 0, 12, 0, 0, 0, 49, 1, 16, 0, 1, 0, 0, 0, 120, 0, 16, 0, 92, 0, 0, 0, 147, 0, 0, 0, 9, 0, 0, 0, 120, 0, 16, 0, 92, 0, 0, 0, 150, 0, 0, 0, 26, 0, 0, 0, 99, 97, 108, 108, 101, 100, 32, 96, 79, 112, 116, 105, 111, 110, 58, 58, 117, 110, 119, 114, 97, 112, 40, 41, 96, 32, 111, 110, 32, 97, 32, 96, 78, 111, 110, 101, 96, 32, 118, 97, 108, 117, 101, 67, 58, 92, 85, 115, 101, 114, 115, 92, 104, 117, 103, 111, 103, 92, 46, 99, 97, 114, 103, 111, 92, 114, 101, 103, 105, 115, 116, 114, 121, 92, 115, 114, 99, 92, 103, 105, 116, 104, 117, 98, 46, 99, 111, 109, 45, 49, 101, 99, 99, 54, 50, 57, 57, 100, 98, 57, 101, 99, 56, 50, 51, 92, 102, 108, 97, 116, 101, 50, 45, 49, 46, 48, 46, 50, 48, 92, 115, 114, 99, 92, 122, 105, 111, 46, 114, 115, 0, 0, 151, 1, 16, 0, 87, 0, 0, 0, 198, 0, 0, 0, 25, 0, 0, 0, 99, 111, 114, 114, 117, 112, 116, 32, 100, 101, 102, 108, 97, 116, 101, 32, 115, 116, 114, 101, 97, 109, 0, 0, 151, 1, 16, 0, 87, 0, 0, 0, 244, 0, 0, 0, 39, 0, 0, 0, 151, 1, 16, 0, 87, 0, 0, 0, 190, 0, 0, 0, 27, 0, 0, 0, 151, 1, 16, 0, 87, 0, 0, 0, 186, 0, 0, 0, 27, 0, 0, 0, 2, 0, 0, 0, 12, 0, 0, 0, 4, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 0, 5, 0, 0, 0, 6, 0, 0, 0, 3, 0, 0, 0, 7, 0, 0, 0, 8, 0, 0, 0, 58, 32, 0, 0, 112, 2, 16, 0, 0, 0, 0, 0, 112, 2, 16, 0, 2, 0, 0, 0, 47, 114, 117, 115, 116, 99, 47, 50, 102, 100, 55, 51, 102, 97, 98, 101, 52, 54, 57, 51, 53, 55, 97, 49, 50, 99, 50, 99, 57, 55, 52, 99, 49, 52, 48, 102, 54, 55, 101, 55, 99, 100, 100, 55, 54, 100, 48, 47, 108, 105, 98, 114, 97, 114, 121, 47, 97, 108, 108, 111, 99, 47, 115, 114, 99, 47, 118, 101, 99, 47, 109, 111, 100, 46, 114, 115, 132, 2, 16, 0, 76, 0, 0, 0, 64, 6, 0, 0, 42, 0, 0, 0, 47, 114, 117, 115, 116, 99, 47, 50, 102, 100, 55, 51, 102, 97, 98, 101, 52, 54, 57, 51, 53, 55, 97, 49, 50, 99, 50, 99, 57, 55, 52, 99, 49, 52, 48, 102, 54, 55, 101, 55, 99, 100, 100, 55, 54, 100, 48, 47, 108, 105, 98, 114, 97, 114, 121, 47, 115, 116, 100, 47, 115, 114, 99, 47, 105, 111, 47, 109, 111, 100, 46, 114, 115, 0, 0, 0, 224, 2, 16, 0, 73, 0, 0, 0, 158, 5, 0, 0, 33, 0, 0, 0, 102, 97, 105, 108, 101, 100, 32, 116, 111, 32, 119, 114, 105, 116, 101, 32, 119, 104, 111, 108, 101, 32, 98, 117, 102, 102, 101, 114, 47, 114, 117, 115, 116, 99, 47, 50, 102, 100, 55, 51, 102, 97, 98, 101, 52, 54, 57, 51, 53, 55, 97, 49, 50, 99, 50, 99, 57, 55, 52, 99, 49, 52, 48, 102, 54, 55, 101, 55, 99, 100, 100, 55, 54, 100, 48, 47, 108, 105, 98, 114, 97, 114, 121, 47, 115, 116, 100, 47, 115, 114, 99, 47, 105, 111, 47, 109, 111, 100, 46, 114, 115, 0, 0, 0, 88, 3, 16, 0, 73, 0, 0, 0, 158, 5, 0, 0, 33, 0, 0, 0, 102, 97, 105, 108, 101, 100, 32, 116, 111, 32, 119, 114, 105, 116, 101, 32, 119, 104, 111, 108, 101, 32, 98, 117, 102, 102, 101, 114, 47, 114, 117, 115, 116, 99, 47, 50, 102, 100, 55, 51, 102, 97, 98, 101, 52, 54, 57, 51, 53, 55, 97, 49, 50, 99, 50, 99, 57, 55, 52, 99, 49, 52, 48, 102, 54, 55, 101, 55, 99, 100, 100, 55, 54, 100, 48, 47, 108, 105, 98, 114, 97, 114, 121, 47, 115, 116, 100, 47, 115, 114, 99, 47, 105, 111, 47, 109, 111, 100, 46, 114, 115, 0, 0, 0, 208, 3, 16, 0, 73, 0, 0, 0, 169, 1, 0, 0, 28, 0, 0, 0, 102, 97, 105, 108, 101, 100, 32, 116, 111, 32, 102, 105, 108, 108, 32, 119, 104, 111, 108, 101, 32, 98, 117, 102, 102, 101, 114, 47, 114, 117, 115, 116, 99, 47, 50, 102, 100, 55, 51, 102, 97, 98, 101, 52, 54, 57, 51, 53, 55, 97, 49, 50, 99, 50, 99, 57, 55, 52, 99, 49, 52, 48, 102, 54, 55, 101, 55, 99, 100, 100, 55, 54, 100, 48, 47, 108, 105, 98, 114, 97, 114, 121, 47, 115, 116, 100, 47, 115, 114, 99, 47, 105, 111, 47, 105, 109, 112, 108, 115, 46, 114, 115, 0, 0, 71, 4, 16, 0, 75, 0, 0, 0, 230, 0, 0, 0, 13, 0, 0, 0, 67, 58, 92, 85, 115, 101, 114, 115, 92, 104, 117, 103, 111, 103, 92, 46, 99, 97, 114, 103, 111, 92, 114, 101, 103, 105, 115, 116, 114, 121, 92, 115, 114, 99, 92, 103, 105, 116, 104, 117, 98, 46, 99, 111, 109, 45, 49, 101, 99, 99, 54, 50, 57, 57, 100, 98, 57, 101, 99, 56, 50, 51, 92, 102, 108, 97, 116, 101, 50, 45, 49, 46, 48, 46, 50, 48, 92, 115, 114, 99, 92, 99, 114, 99, 46, 114, 115, 0, 164, 4, 16, 0, 87, 0, 0, 0, 105, 0, 0, 0, 26, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 12, 0, 0, 0, 13, 0, 0, 0, 14, 0, 0, 0, 11, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 15, 0, 0, 0, 16, 0, 0, 0, 17, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 12, 0, 0, 0, 13, 0, 0, 0, 14, 0, 0, 0, 100, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 40, 41, 32, 105, 115, 32, 100, 101, 112, 114, 101, 99, 97, 116, 101, 100, 59, 32, 117, 115, 101, 32, 68, 105, 115, 112, 108, 97, 121, 99, 97, 108, 108, 101, 100, 32, 96, 82, 101, 115, 117, 108, 116, 58, 58, 117, 110, 119, 114, 97, 112, 40, 41, 96, 32, 111, 110, 32, 97, 110, 32, 96, 69, 114, 114, 96, 32, 118, 97, 108, 117, 101, 0, 19, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 20, 0, 0, 0, 100, 101, 102, 108, 97, 116, 101, 32, 100, 101, 99, 111, 109, 112, 114, 101, 115, 115, 105, 111, 110, 32, 101, 114, 114, 111, 114, 0, 184, 5, 16, 0, 27, 0, 0, 0, 67, 58, 92, 85, 115, 101, 114, 115, 92, 104, 117, 103, 111, 103, 92, 46, 99, 97, 114, 103, 111, 92, 114, 101, 103, 105, 115, 116, 114, 121, 92, 115, 114, 99, 92, 103, 105, 116, 104, 117, 98, 46, 99, 111, 109, 45, 49, 101, 99, 99, 54, 50, 57, 57, 100, 98, 57, 101, 99, 56, 50, 51, 92, 102, 108, 97, 116, 101, 50, 45, 49, 46, 48, 46, 50, 48, 92, 115, 114, 99, 92, 122, 105, 111, 46, 114, 115, 0, 220, 5, 16, 0, 87, 0, 0, 0, 54, 0, 0, 0, 52, 0, 0, 0, 68, 101, 99, 111, 109, 112, 114, 101, 115, 115, 69, 114, 114, 111, 114, 73, 110, 110, 101, 114, 110, 101, 101, 100, 115, 95, 100, 105, 99, 116, 105, 111, 110, 97, 114, 121, 19, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 21, 0, 0, 0, 68, 101, 99, 111, 109, 112, 114, 101, 115, 115, 69, 114, 114, 111, 114, 0, 19, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 22, 0, 0, 0, 67, 111, 109, 112, 114, 101, 115, 115, 69, 114, 114, 111, 114, 0, 0, 0, 19, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 23, 0, 0, 0, 67, 58, 92, 85, 115, 101, 114, 115, 92, 104, 117, 103, 111, 103, 92, 46, 99, 97, 114, 103, 111, 92, 114, 101, 103, 105, 115, 116, 114, 121, 92, 115, 114, 99, 92, 103, 105, 116, 104, 117, 98, 46, 99, 111, 109, 45, 49, 101, 99, 99, 54, 50, 57, 57, 100, 98, 57, 101, 99, 56, 50, 51, 92, 102, 108, 97, 116, 101, 50, 45, 49, 46, 48, 46, 50, 48, 92, 115, 114, 99, 92, 103, 122, 92, 109, 111, 100, 46, 114, 115, 0, 0, 184, 6, 16, 0, 90, 0, 0, 0, 230, 0, 0, 0, 9, 0, 0, 0, 184, 6, 16, 0, 90, 0, 0, 0, 231, 0, 0, 0, 9, 0, 0, 0, 184, 6, 16, 0, 90, 0, 0, 0, 232, 0, 0, 0, 9, 0, 0, 0, 184, 6, 16, 0, 90, 0, 0, 0, 233, 0, 0, 0, 9, 0, 0, 0, 184, 6, 16, 0, 90, 0, 0, 0, 234, 0, 0, 0, 9, 0, 0, 0, 184, 6, 16, 0, 90, 0, 0, 0, 235, 0, 0, 0, 9, 0, 0, 0, 184, 6, 16, 0, 90, 0, 0, 0, 236, 0, 0, 0, 9, 0, 0, 0, 184, 6, 16, 0, 90, 0, 0, 0, 237, 0, 0, 0, 9, 0, 0, 0, 184, 6, 16, 0, 90, 0, 0, 0, 238, 0, 0, 0, 9, 0, 0, 0, 184, 6, 16, 0, 90, 0, 0, 0, 250, 0, 0, 0, 9, 0, 0, 0, 24, 0, 0, 0, 8, 0, 0, 0, 4, 0, 0, 0, 25, 0, 0, 0, 26, 0, 0, 0, 27, 0, 0, 0, 28, 0, 0, 0, 25, 0, 0, 0, 29, 0, 0, 0, 30, 0, 0, 0, 83, 111, 109, 101, 78, 111, 110, 101, 31, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 32, 0, 0, 0, 99, 97, 108, 108, 101, 100, 32, 96, 82, 101, 115, 117, 108, 116, 58, 58, 117, 110, 119, 114, 97, 112, 40, 41, 96, 32, 111, 110, 32, 97, 110, 32, 96, 69, 114, 114, 96, 32, 118, 97, 108, 117, 101, 0, 33, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 34, 0, 0, 0, 67, 58, 92, 85, 115, 101, 114, 115, 92, 104, 117, 103, 111, 103, 92, 46, 99, 97, 114, 103, 111, 92, 114, 101, 103, 105, 115, 116, 114, 121, 92, 115, 114, 99, 92, 103, 105, 116, 104, 117, 98, 46, 99, 111, 109, 45, 49, 101, 99, 99, 54, 50, 57, 57, 100, 98, 57, 101, 99, 56, 50, 51, 92, 102, 108, 97, 116, 101, 50, 45, 49, 46, 48, 46, 50, 48, 92, 115, 114, 99, 92, 102, 102, 105, 92, 114, 117, 115, 116, 46, 114, 115, 48, 8, 16, 0, 92, 0, 0, 0, 60, 0, 0, 0, 48, 0, 0, 0, 48, 8, 16, 0, 92, 0, 0, 0, 138, 0, 0, 0, 48, 0, 0, 0, 99, 111, 114, 114, 117, 112, 116, 32, 103, 122, 105, 112, 32, 115, 116, 114, 101, 97, 109, 32, 100, 111, 101, 115, 32, 110, 111, 116, 32, 104, 97, 118, 101, 32, 97, 32, 109, 97, 116, 99, 104, 105, 110, 103, 32, 99, 104, 101, 99, 107, 115, 117, 109, 105, 110, 118, 97, 108, 105, 100, 32, 103, 122, 105, 112, 32, 104, 101, 97, 100, 101, 114, 40, 41, 0, 0, 35, 0, 0, 0, 12, 0, 0, 0, 4, 0, 0, 0, 36, 0, 0, 0, 37, 0, 0, 0, 38, 0, 0, 0, 6, 0, 0, 0, 36, 0, 0, 0, 7, 0, 0, 0, 8, 0, 0, 0, 67, 58, 92, 85, 115, 101, 114, 115, 92, 104, 117, 103, 111, 103, 92, 46, 99, 97, 114, 103, 111, 92, 114, 101, 103, 105, 115, 116, 114, 121, 92, 115, 114, 99, 92, 103, 105, 116, 104, 117, 98, 46, 99, 111, 109, 45, 49, 101, 99, 99, 54, 50, 57, 57, 100, 98, 57, 101, 99, 56, 50, 51, 92, 109, 105, 110, 105, 122, 95, 111, 120, 105, 100, 101, 45, 48, 46, 52, 46, 52, 92, 115, 114, 99, 92, 100, 101, 102, 108, 97, 116, 101, 92, 99, 111, 114, 101, 46, 114, 115, 32, 9, 16, 0, 100, 0, 0, 0, 134, 1, 0, 0, 5, 0, 0, 0, 32, 9, 16, 0, 100, 0, 0, 0, 134, 1, 0, 0, 27, 0, 0, 0, 32, 9, 16, 0, 100, 0, 0, 0, 15, 2, 0, 0, 49, 0, 0, 0, 32, 9, 16, 0, 100, 0, 0, 0, 41, 2, 0, 0, 19, 0, 0, 0, 32, 9, 16, 0, 100, 0, 0, 0, 42, 2, 0, 0, 35, 0, 0, 0, 32, 9, 16, 0, 100, 0, 0, 0, 73, 2, 0, 0, 22, 0, 0, 0, 97, 115, 115, 101, 114, 116, 105, 111, 110, 32, 102, 97, 105, 108, 101, 100, 58, 32, 98, 105, 116, 115, 32, 60, 61, 32, 40, 40, 49, 117, 51, 50, 32, 60, 60, 32, 108, 101, 110, 41, 32, 45, 32, 49, 117, 51, 50, 41, 32, 9, 16, 0, 100, 0, 0, 0, 155, 2, 0, 0, 9, 0, 0, 0, 32, 9, 16, 0, 100, 0, 0, 0, 159, 2, 0, 0, 13, 0, 0, 0, 32, 9, 16, 0, 100, 0, 0, 0, 212, 2, 0, 0, 30, 0, 0, 0, 32, 9, 16, 0, 100, 0, 0, 0, 93, 3, 0, 0, 27, 0, 0, 0, 32, 9, 16, 0, 100, 0, 0, 0, 98, 3, 0, 0, 17, 0, 0, 0, 32, 9, 16, 0, 100, 0, 0, 0, 117, 3, 0, 0, 40, 0, 0, 0, 32, 9, 16, 0, 100, 0, 0, 0, 118, 3, 0, 0, 45, 0, 0, 0, 32, 9, 16, 0, 100, 0, 0, 0, 118, 3, 0, 0, 25, 0, 0, 0, 32, 9, 16, 0, 100, 0, 0, 0, 122, 3, 0, 0, 25, 0, 0, 0, 32, 9, 16, 0, 100, 0, 0, 0, 126, 3, 0, 0, 55, 0, 0, 0, 32, 9, 16, 0, 100, 0, 0, 0, 127, 3, 0, 0, 45, 0, 0, 0, 32, 9, 16, 0, 100, 0, 0, 0, 127, 3, 0, 0, 76, 0, 0, 0, 32, 9, 16, 0, 100, 0, 0, 0, 131, 3, 0, 0, 45, 0, 0, 0, 32, 9, 16, 0, 100, 0, 0, 0, 136, 3, 0, 0, 17, 0, 0, 0, 32, 9, 16, 0, 100, 0, 0, 0, 138, 3, 0, 0, 49, 0, 0, 0, 32, 9, 16, 0, 100, 0, 0, 0, 138, 3, 0, 0, 41, 0, 0, 0, 32, 9, 16, 0, 100, 0, 0, 0, 147, 3, 0, 0, 43, 0, 0, 0, 32, 9, 16, 0, 100, 0, 0, 0, 152, 3, 0, 0, 25, 0, 0, 0, 32, 9, 16, 0, 100, 0, 0, 0, 179, 3, 0, 0, 20, 0, 0, 0, 32, 9, 16, 0, 100, 0, 0, 0, 181, 3, 0, 0, 21, 0, 0, 0, 32, 9, 16, 0, 100, 0, 0, 0, 200, 3, 0, 0, 17, 0, 0, 0, 32, 9, 16, 0, 100, 0, 0, 0, 214, 3, 0, 0, 20, 0, 0, 0, 32, 9, 16, 0, 100, 0, 0, 0, 215, 3, 0, 0, 21, 0, 0, 0, 32, 9, 16, 0, 100, 0, 0, 0, 224, 3, 0, 0, 22, 0, 0, 0, 32, 9, 16, 0, 100, 0, 0, 0, 230, 3, 0, 0, 17, 0, 0, 0, 32, 9, 16, 0, 100, 0, 0, 0, 240, 3, 0, 0, 36, 0, 0, 0, 32, 9, 16, 0, 100, 0, 0, 0, 241, 3, 0, 0, 32, 0, 0, 0, 32, 9, 16, 0, 100, 0, 0, 0, 242, 3, 0, 0, 21, 0, 0, 0, 32, 9, 16, 0, 100, 0, 0, 0, 251, 3, 0, 0, 22, 0, 0, 0, 32, 9, 16, 0, 100, 0, 0, 0, 252, 3, 0, 0, 13, 0, 0, 0, 32, 9, 16, 0, 100, 0, 0, 0, 8, 4, 0, 0, 28, 0, 0, 0, 32, 9, 16, 0, 100, 0, 0, 0, 60, 4, 0, 0, 9, 0, 0, 0, 32, 9, 16, 0, 100, 0, 0, 0, 60, 4, 0, 0, 62, 0, 0, 0, 32, 9, 16, 0, 100, 0, 0, 0, 62, 4, 0, 0, 9, 0, 0, 0, 32, 9, 16, 0, 100, 0, 0, 0, 63, 4, 0, 0, 31, 0, 0, 0, 16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15, 0, 32, 9, 16, 0, 100, 0, 0, 0, 120, 4, 0, 0, 26, 0, 0, 0, 32, 9, 16, 0, 100, 0, 0, 0, 129, 4, 0, 0, 24, 0, 0, 0, 97, 115, 115, 101, 114, 116, 105, 111, 110, 32, 102, 97, 105, 108, 101, 100, 58, 32, 99, 111, 100, 101, 32, 60, 32, 77, 65, 88, 95, 72, 85, 70, 70, 95, 83, 89, 77, 66, 79, 76, 83, 95, 50, 0, 32, 9, 16, 0, 100, 0, 0, 0, 131, 4, 0, 0, 13, 0, 0, 0, 32, 9, 16, 0, 100, 0, 0, 0, 138, 4, 0, 0, 31, 0, 0, 0, 32, 9, 16, 0, 100, 0, 0, 0, 139, 4, 0, 0, 21, 0, 0, 0, 32, 9, 16, 0, 100, 0, 0, 0, 213, 4, 0, 0, 30, 0, 0, 0, 32, 9, 16, 0, 100, 0, 0, 0, 180, 5, 0, 0, 9, 0, 0, 0, 32, 9, 16, 0, 100, 0, 0, 0, 194, 5, 0, 0, 14, 0, 0, 0, 32, 9, 16, 0, 100, 0, 0, 0, 17, 6, 0, 0, 27, 0, 0, 0, 32, 9, 16, 0, 100, 0, 0, 0, 236, 5, 0, 0, 29, 0, 0, 0, 1, 1, 2, 1, 3, 1, 4, 1, 5, 1, 6, 1, 7, 1, 8, 1, 9, 1, 9, 1, 10, 1, 10, 1, 11, 1, 11, 1, 12, 1, 12, 1, 13, 1, 13, 1, 13, 1, 13, 1, 14, 1, 14, 1, 14, 1, 14, 1, 15, 1, 15, 1, 15, 1, 15, 1, 16, 1, 16, 1, 16, 1, 16, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 19, 1, 20, 1, 20, 1, 20, 1, 20, 1, 20, 1, 20, 1, 20, 1, 20, 1, 21, 1, 21, 1, 21, 1, 21, 1, 21, 1, 21, 1, 21, 1, 21, 1, 21, 1, 21, 1, 21, 1, 21, 1, 21, 1, 21, 1, 21, 1, 21, 1, 22, 1, 22, 1, 22, 1, 22, 1, 22, 1, 22, 1, 22, 1, 22, 1, 22, 1, 22, 1, 22, 1, 22, 1, 22, 1, 22, 1, 22, 1, 22, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 28, 1, 28, 1, 28, 1, 28, 1, 28, 1, 28, 1, 28, 1, 28, 1, 28, 1, 28, 1, 28, 1, 28, 1, 28, 1, 28, 1, 28, 1, 28, 1, 28, 1, 28, 1, 28, 1, 28, 1, 28, 1, 28, 1, 28, 1, 28, 1, 28, 1, 28, 1, 28, 1, 28, 1, 28, 1, 28, 1, 28, 1, 29, 1, 32, 9, 16, 0, 100, 0, 0, 0, 244, 5, 0, 0, 27, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 7, 0, 0, 0, 15, 0, 0, 0, 31, 0, 0, 0, 63, 0, 0, 0, 127, 0, 0, 0, 255, 0, 0, 0, 255, 1, 0, 0, 255, 3, 0, 0, 255, 7, 0, 0, 255, 15, 0, 0, 255, 31, 0, 0, 255, 63, 0, 0, 255, 127, 0, 0, 255, 255, 0, 65, 128, 159, 192, 0, 11, 181, 22, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 32, 9, 16, 0, 100, 0, 0, 0, 248, 5, 0, 0, 46, 0, 0, 0, 0, 1, 2, 3, 4, 4, 5, 5, 6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 0, 0, 18, 19, 20, 20, 21, 21, 22, 22, 22, 22, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 32, 9, 16, 0, 100, 0, 0, 0, 0, 6, 0, 0, 23, 0, 0, 0, 0, 0, 8, 8, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 32, 9, 16, 0, 100, 0, 0, 0, 10, 6, 0, 0, 51, 0, 0, 0, 32, 9, 16, 0, 100, 0, 0, 0, 65, 6, 0, 0, 38, 0, 0, 0, 97, 115, 115, 101, 114, 116, 105, 111, 110, 32, 102, 97, 105, 108, 101, 100, 58, 32, 100, 46, 112, 97, 114, 97, 109, 115, 46, 102, 108, 117, 115, 104, 95, 114, 101, 109, 97, 105, 110, 105, 110, 103, 32, 61, 61, 32, 48, 0, 32, 9, 16, 0, 100, 0, 0, 0, 84, 6, 0, 0, 9, 0, 0, 0, 97, 115, 115, 101, 114, 116, 105, 111, 110, 32, 102, 97, 105, 108, 101, 100, 58, 32, 109, 97, 116, 99, 104, 95, 108, 101, 110, 32, 62, 61, 32, 77, 73, 78, 95, 77, 65, 84, 67, 72, 95, 76, 69, 78, 46, 105, 110, 116, 111, 40, 41, 0, 32, 9, 16, 0, 100, 0, 0, 0, 196, 6, 0, 0, 5, 0, 0, 0, 97, 115, 115, 101, 114, 116, 105, 111, 110, 32, 102, 97, 105, 108, 101, 100, 58, 32, 109, 97, 116, 99, 104, 95, 100, 105, 115, 116, 32, 62, 61, 32, 49, 0, 0, 0, 32, 9, 16, 0, 100, 0, 0, 0, 197, 6, 0, 0, 5, 0, 0, 0, 97, 115, 115, 101, 114, 116, 105, 111, 110, 32, 102, 97, 105, 108, 101, 100, 58, 32, 109, 97, 116, 99, 104, 95, 100, 105, 115, 116, 32, 97, 115, 32, 117, 115, 105, 122, 101, 32, 60, 61, 32, 76, 90, 95, 68, 73, 67, 84, 95, 83, 73, 90, 69, 0, 0, 0, 32, 9, 16, 0, 100, 0, 0, 0, 198, 6, 0, 0, 5, 0, 0, 0, 32, 9, 16, 0, 100, 0, 0, 0, 217, 6, 0, 0, 16, 0, 0, 0, 32, 9, 16, 0, 100, 0, 0, 0, 217, 6, 0, 0, 5, 0, 0, 0, 32, 9, 16, 0, 100, 0, 0, 0, 252, 6, 0, 0, 24, 0, 0, 0, 32, 9, 16, 0, 100, 0, 0, 0, 14, 7, 0, 0, 24, 0, 0, 0, 32, 9, 16, 0, 100, 0, 0, 0, 56, 7, 0, 0, 33, 0, 0, 0, 97, 115, 115, 101, 114, 116, 105, 111, 110, 32, 102, 97, 105, 108, 101, 100, 58, 32, 108, 111, 111, 107, 97, 104, 101, 97, 100, 95, 115, 105, 122, 101, 32, 62, 61, 32, 108, 101, 110, 95, 116, 111, 95, 109, 111, 118, 101, 0, 32, 9, 16, 0, 100, 0, 0, 0, 124, 7, 0, 0, 9, 0, 0, 0, 32, 9, 16, 0, 100, 0, 0, 0, 184, 7, 0, 0, 13, 0, 0, 0, 32, 9, 16, 0, 100, 0, 0, 0, 184, 7, 0, 0, 66, 0, 0, 0, 32, 9, 16, 0, 100, 0, 0, 0, 188, 7, 0, 0, 17, 0, 0, 0, 32, 9, 16, 0, 100, 0, 0, 0, 189, 7, 0, 0, 39, 0, 0, 0, 32, 9, 16, 0, 100, 0, 0, 0, 15, 8, 0, 0, 34, 0, 0, 0, 32, 9, 16, 0, 100, 0, 0, 0, 18, 8, 0, 0, 41, 0, 0, 0, 32, 9, 16, 0, 100, 0, 0, 0, 18, 8, 0, 0, 25, 0, 0, 0, 32, 9, 16, 0, 100, 0, 0, 0, 107, 8, 0, 0, 19, 0, 0, 0, 32, 9, 16, 0, 100, 0, 0, 0, 108, 8, 0, 0, 35, 0, 0, 0, 32, 9, 16, 0, 100, 0, 0, 0, 218, 8, 0, 0, 66, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 6, 0, 0, 0, 32, 0, 0, 0, 16, 0, 0, 0, 32, 0, 0, 0, 128, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 220, 5, 0, 0, 67, 58, 92, 85, 115, 101, 114, 115, 92, 104, 117, 103, 111, 103, 92, 46, 99, 97, 114, 103, 111, 92, 114, 101, 103, 105, 115, 116, 114, 121, 92, 115, 114, 99, 92, 103, 105, 116, 104, 117, 98, 46, 99, 111, 109, 45, 49, 101, 99, 99, 54, 50, 57, 57, 100, 98, 57, 101, 99, 56, 50, 51, 92, 109, 105, 110, 105, 122, 95, 111, 120, 105, 100, 101, 45, 48, 46, 52, 46, 52, 92, 115, 114, 99, 92, 105, 110, 102, 108, 97, 116, 101, 92, 99, 111, 114, 101, 46, 114, 115, 20, 24, 16, 0, 100, 0, 0, 0, 55, 0, 0, 0, 32, 0, 0, 0, 20, 24, 16, 0, 100, 0, 0, 0, 83, 1, 0, 0, 25, 0, 0, 0, 20, 24, 16, 0, 100, 0, 0, 0, 215, 1, 0, 0, 29, 0, 0, 0, 20, 24, 16, 0, 100, 0, 0, 0, 116, 2, 0, 0, 26, 0, 0, 0, 20, 24, 16, 0, 100, 0, 0, 0, 123, 2, 0, 0, 28, 0, 0, 0, 20, 24, 16, 0, 100, 0, 0, 0, 124, 2, 0, 0, 13, 0, 0, 0, 20, 24, 16, 0, 100, 0, 0, 0, 143, 2, 0, 0, 29, 0, 0, 0, 20, 24, 16, 0, 100, 0, 0, 0, 148, 2, 0, 0, 32, 0, 0, 0, 20, 24, 16, 0, 100, 0, 0, 0, 176, 2, 0, 0, 20, 0, 0, 0, 20, 24, 16, 0, 100, 0, 0, 0, 187, 2, 0, 0, 13, 0, 0, 0, 20, 24, 16, 0, 100, 0, 0, 0, 242, 2, 0, 0, 30, 0, 0, 0, 20, 24, 16, 0, 100, 0, 0, 0, 242, 2, 0, 0, 9, 0, 0, 0, 20, 24, 16, 0, 100, 0, 0, 0, 243, 2, 0, 0, 34, 0, 0, 0, 20, 24, 16, 0, 100, 0, 0, 0, 243, 2, 0, 0, 9, 0, 0, 0, 20, 24, 16, 0, 100, 0, 0, 0, 244, 2, 0, 0, 34, 0, 0, 0, 20, 24, 16, 0, 100, 0, 0, 0, 244, 2, 0, 0, 9, 0, 0, 0, 20, 24, 16, 0, 100, 0, 0, 0, 245, 2, 0, 0, 34, 0, 0, 0, 20, 24, 16, 0, 100, 0, 0, 0, 245, 2, 0, 0, 9, 0, 0, 0, 20, 24, 16, 0, 100, 0, 0, 0, 2, 3, 0, 0, 34, 0, 0, 0, 20, 24, 16, 0, 100, 0, 0, 0, 2, 3, 0, 0, 13, 0, 0, 0, 20, 24, 16, 0, 100, 0, 0, 0, 3, 3, 0, 0, 38, 0, 0, 0, 20, 24, 16, 0, 100, 0, 0, 0, 3, 3, 0, 0, 13, 0, 0, 0, 20, 24, 16, 0, 100, 0, 0, 0, 4, 3, 0, 0, 38, 0, 0, 0, 20, 24, 16, 0, 100, 0, 0, 0, 4, 3, 0, 0, 13, 0, 0, 0, 20, 24, 16, 0, 100, 0, 0, 0, 254, 2, 0, 0, 34, 0, 0, 0, 20, 24, 16, 0, 100, 0, 0, 0, 254, 2, 0, 0, 13, 0, 0, 0, 20, 24, 16, 0, 100, 0, 0, 0, 255, 2, 0, 0, 38, 0, 0, 0, 20, 24, 16, 0, 100, 0, 0, 0, 255, 2, 0, 0, 13, 0, 0, 0, 20, 24, 16, 0, 100, 0, 0, 0, 252, 2, 0, 0, 35, 0, 0, 0, 20, 24, 16, 0, 100, 0, 0, 0, 252, 2, 0, 0, 14, 0, 0, 0, 20, 24, 16, 0, 100, 0, 0, 0, 25, 3, 0, 0, 30, 0, 0, 0, 20, 24, 16, 0, 100, 0, 0, 0, 25, 3, 0, 0, 9, 0, 0, 0, 20, 24, 16, 0, 100, 0, 0, 0, 26, 3, 0, 0, 34, 0, 0, 0, 20, 24, 16, 0, 100, 0, 0, 0, 26, 3, 0, 0, 9, 0, 0, 0, 20, 24, 16, 0, 100, 0, 0, 0, 27, 3, 0, 0, 34, 0, 0, 0, 20, 24, 16, 0, 100, 0, 0, 0, 27, 3, 0, 0, 9, 0, 65, 192, 181, 192, 0, 11, 196, 169, 1, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, 0, 0, 0, 3, 0, 4, 0, 5, 0, 6, 0, 7, 0, 8, 0, 9, 0, 10, 0, 11, 0, 13, 0, 15, 0, 17, 0, 19, 0, 23, 0, 27, 0, 31, 0, 35, 0, 43, 0, 51, 0, 59, 0, 67, 0, 83, 0, 99, 0, 115, 0, 131, 0, 163, 0, 195, 0, 227, 0, 2, 1, 0, 2, 0, 2, 0, 2, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 13, 13, 1, 0, 2, 0, 3, 0, 4, 0, 5, 0, 7, 0, 9, 0, 13, 0, 17, 0, 25, 0, 33, 0, 49, 0, 65, 0, 97, 0, 129, 0, 193, 0, 1, 1, 129, 1, 1, 2, 1, 3, 1, 4, 1, 6, 1, 8, 1, 12, 1, 16, 1, 24, 1, 32, 1, 48, 1, 64, 1, 96, 0, 128, 0, 128, 20, 24, 16, 0, 100, 0, 0, 0, 11, 6, 0, 0, 31, 0, 0, 0, 20, 24, 16, 0, 100, 0, 0, 0, 0, 5, 0, 0, 21, 0, 0, 0, 20, 24, 16, 0, 100, 0, 0, 0, 6, 5, 0, 0, 21, 0, 0, 0, 20, 24, 16, 0, 100, 0, 0, 0, 7, 5, 0, 0, 43, 0, 0, 0, 20, 24, 16, 0, 100, 0, 0, 0, 188, 4, 0, 0, 42, 0, 0, 0, 20, 24, 16, 0, 100, 0, 0, 0, 86, 6, 0, 0, 60, 0, 0, 0, 1, 1, 1, 0, 4, 0, 16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15, 0, 0, 0, 20, 24, 16, 0, 100, 0, 0, 0, 224, 4, 0, 0, 40, 0, 0, 0, 20, 24, 16, 0, 100, 0, 0, 0, 242, 4, 0, 0, 33, 0, 0, 0, 20, 24, 16, 0, 100, 0, 0, 0, 248, 4, 0, 0, 47, 0, 0, 0, 20, 24, 16, 0, 100, 0, 0, 0, 18, 5, 0, 0, 35, 0, 0, 0, 20, 24, 16, 0, 100, 0, 0, 0, 20, 5, 0, 0, 25, 0, 0, 0, 20, 24, 16, 0, 100, 0, 0, 0, 26, 5, 0, 0, 30, 0, 0, 0, 67, 58, 92, 85, 115, 101, 114, 115, 92, 104, 117, 103, 111, 103, 92, 46, 99, 97, 114, 103, 111, 92, 114, 101, 103, 105, 115, 116, 114, 121, 92, 115, 114, 99, 92, 103, 105, 116, 104, 117, 98, 46, 99, 111, 109, 45, 49, 101, 99, 99, 54, 50, 57, 57, 100, 98, 57, 101, 99, 56, 50, 51, 92, 109, 105, 110, 105, 122, 95, 111, 120, 105, 100, 101, 45, 48, 46, 52, 46, 52, 92, 115, 114, 99, 92, 105, 110, 102, 108, 97, 116, 101, 92, 111, 117, 116, 112, 117, 116, 95, 98, 117, 102, 102, 101, 114, 46, 114, 115, 0, 0, 0, 84, 28, 16, 0, 109, 0, 0, 0, 32, 0, 0, 0, 9, 0, 0, 0, 84, 28, 16, 0, 109, 0, 0, 0, 42, 0, 0, 0, 9, 0, 0, 0, 67, 58, 92, 85, 115, 101, 114, 115, 92, 104, 117, 103, 111, 103, 92, 46, 99, 97, 114, 103, 111, 92, 114, 101, 103, 105, 115, 116, 114, 121, 92, 115, 114, 99, 92, 103, 105, 116, 104, 117, 98, 46, 99, 111, 109, 45, 49, 101, 99, 99, 54, 50, 57, 57, 100, 98, 57, 101, 99, 56, 50, 51, 92, 109, 105, 110, 105, 122, 95, 111, 120, 105, 100, 101, 45, 48, 46, 52, 46, 52, 92, 115, 114, 99, 92, 105, 110, 102, 108, 97, 116, 101, 92, 115, 116, 114, 101, 97, 109, 46, 114, 115, 0, 0, 228, 28, 16, 0, 102, 0, 0, 0, 32, 1, 0, 0, 21, 0, 0, 0, 228, 28, 16, 0, 102, 0, 0, 0, 80, 1, 0, 0, 38, 0, 0, 0, 80, 97, 114, 97, 109, 86, 101, 114, 115, 105, 111, 110, 66, 117, 102, 77, 101, 109, 68, 97, 116, 97, 83, 116, 114, 101, 97, 109, 69, 114, 114, 78, 111, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 0, 67, 58, 92, 85, 115, 101, 114, 115, 92, 104, 117, 103, 111, 103, 92, 46, 99, 97, 114, 103, 111, 92, 114, 101, 103, 105, 115, 116, 114, 121, 92, 115, 114, 99, 92, 103, 105, 116, 104, 117, 98, 46, 99, 111, 109, 45, 49, 101, 99, 99, 54, 50, 57, 57, 100, 98, 57, 101, 99, 56, 50, 51, 92, 109, 105, 110, 105, 122, 95, 111, 120, 105, 100, 101, 45, 48, 46, 52, 46, 52, 92, 115, 114, 99, 92, 100, 101, 102, 108, 97, 116, 101, 92, 115, 116, 114, 101, 97, 109, 46, 114, 115, 0, 0, 164, 29, 16, 0, 102, 0, 0, 0, 58, 0, 0, 0, 20, 0, 0, 0, 164, 29, 16, 0, 102, 0, 0, 0, 59, 0, 0, 0, 25, 0, 0, 0, 0, 0, 0, 0, 150, 48, 7, 119, 44, 97, 14, 238, 186, 81, 9, 153, 25, 196, 109, 7, 143, 244, 106, 112, 53, 165, 99, 233, 163, 149, 100, 158, 50, 136, 219, 14, 164, 184, 220, 121, 30, 233, 213, 224, 136, 217, 210, 151, 43, 76, 182, 9, 189, 124, 177, 126, 7, 45, 184, 231, 145, 29, 191, 144, 100, 16, 183, 29, 242, 32, 176, 106, 72, 113, 185, 243, 222, 65, 190, 132, 125, 212, 218, 26, 235, 228, 221, 109, 81, 181, 212, 244, 199, 133, 211, 131, 86, 152, 108, 19, 192, 168, 107, 100, 122, 249, 98, 253, 236, 201, 101, 138, 79, 92, 1, 20, 217, 108, 6, 99, 99, 61, 15, 250, 245, 13, 8, 141, 200, 32, 110, 59, 94, 16, 105, 76, 228, 65, 96, 213, 114, 113, 103, 162, 209, 228, 3, 60, 71, 212, 4, 75, 253, 133, 13, 210, 107, 181, 10, 165, 250, 168, 181, 53, 108, 152, 178, 66, 214, 201, 187, 219, 64, 249, 188, 172, 227, 108, 216, 50, 117, 92, 223, 69, 207, 13, 214, 220, 89, 61, 209, 171, 172, 48, 217, 38, 58, 0, 222, 81, 128, 81, 215, 200, 22, 97, 208, 191, 181, 244, 180, 33, 35, 196, 179, 86, 153, 149, 186, 207, 15, 165, 189, 184, 158, 184, 2, 40, 8, 136, 5, 95, 178, 217, 12, 198, 36, 233, 11, 177, 135, 124, 111, 47, 17, 76, 104, 88, 171, 29, 97, 193, 61, 45, 102, 182, 144, 65, 220, 118, 6, 113, 219, 1, 188, 32, 210, 152, 42, 16, 213, 239, 137, 133, 177, 113, 31, 181, 182, 6, 165, 228, 191, 159, 51, 212, 184, 232, 162, 201, 7, 120, 52, 249, 0, 15, 142, 168, 9, 150, 24, 152, 14, 225, 187, 13, 106, 127, 45, 61, 109, 8, 151, 108, 100, 145, 1, 92, 99, 230, 244, 81, 107, 107, 98, 97, 108, 28, 216, 48, 101, 133, 78, 0, 98, 242, 237, 149, 6, 108, 123, 165, 1, 27, 193, 244, 8, 130, 87, 196, 15, 245, 198, 217, 176, 101, 80, 233, 183, 18, 234, 184, 190, 139, 124, 136, 185, 252, 223, 29, 221, 98, 73, 45, 218, 21, 243, 124, 211, 140, 101, 76, 212, 251, 88, 97, 178, 77, 206, 81, 181, 58, 116, 0, 188, 163, 226, 48, 187, 212, 65, 165, 223, 74, 215, 149, 216, 61, 109, 196, 209, 164, 251, 244, 214, 211, 106, 233, 105, 67, 252, 217, 110, 52, 70, 136, 103, 173, 208, 184, 96, 218, 115, 45, 4, 68, 229, 29, 3, 51, 95, 76, 10, 170, 201, 124, 13, 221, 60, 113, 5, 80, 170, 65, 2, 39, 16, 16, 11, 190, 134, 32, 12, 201, 37, 181, 104, 87, 179, 133, 111, 32, 9, 212, 102, 185, 159, 228, 97, 206, 14, 249, 222, 94, 152, 201, 217, 41, 34, 152, 208, 176, 180, 168, 215, 199, 23, 61, 179, 89, 129, 13, 180, 46, 59, 92, 189, 183, 173, 108, 186, 192, 32, 131, 184, 237, 182, 179, 191, 154, 12, 226, 182, 3, 154, 210, 177, 116, 57, 71, 213, 234, 175, 119, 210, 157, 21, 38, 219, 4, 131, 22, 220, 115, 18, 11, 99, 227, 132, 59, 100, 148, 62, 106, 109, 13, 168, 90, 106, 122, 11, 207, 14, 228, 157, 255, 9, 147, 39, 174, 0, 10, 177, 158, 7, 125, 68, 147, 15, 240, 210, 163, 8, 135, 104, 242, 1, 30, 254, 194, 6, 105, 93, 87, 98, 247, 203, 103, 101, 128, 113, 54, 108, 25, 231, 6, 107, 110, 118, 27, 212, 254, 224, 43, 211, 137, 90, 122, 218, 16, 204, 74, 221, 103, 111, 223, 185, 249, 249, 239, 190, 142, 67, 190, 183, 23, 213, 142, 176, 96, 232, 163, 214, 214, 126, 147, 209, 161, 196, 194, 216, 56, 82, 242, 223, 79, 241, 103, 187, 209, 103, 87, 188, 166, 221, 6, 181, 63, 75, 54, 178, 72, 218, 43, 13, 216, 76, 27, 10, 175, 246, 74, 3, 54, 96, 122, 4, 65, 195, 239, 96, 223, 85, 223, 103, 168, 239, 142, 110, 49, 121, 190, 105, 70, 140, 179, 97, 203, 26, 131, 102, 188, 160, 210, 111, 37, 54, 226, 104, 82, 149, 119, 12, 204, 3, 71, 11, 187, 185, 22, 2, 34, 47, 38, 5, 85, 190, 59, 186, 197, 40, 11, 189, 178, 146, 90, 180, 43, 4, 106, 179, 92, 167, 255, 215, 194, 49, 207, 208, 181, 139, 158, 217, 44, 29, 174, 222, 91, 176, 194, 100, 155, 38, 242, 99, 236, 156, 163, 106, 117, 10, 147, 109, 2, 169, 6, 9, 156, 63, 54, 14, 235, 133, 103, 7, 114, 19, 87, 0, 5, 130, 74, 191, 149, 20, 122, 184, 226, 174, 43, 177, 123, 56, 27, 182, 12, 155, 142, 210, 146, 13, 190, 213, 229, 183, 239, 220, 124, 33, 223, 219, 11, 212, 210, 211, 134, 66, 226, 212, 241, 248, 179, 221, 104, 110, 131, 218, 31, 205, 22, 190, 129, 91, 38, 185, 246, 225, 119, 176, 111, 119, 71, 183, 24, 230, 90, 8, 136, 112, 106, 15, 255, 202, 59, 6, 102, 92, 11, 1, 17, 255, 158, 101, 143, 105, 174, 98, 248, 211, 255, 107, 97, 69, 207, 108, 22, 120, 226, 10, 160, 238, 210, 13, 215, 84, 131, 4, 78, 194, 179, 3, 57, 97, 38, 103, 167, 247, 22, 96, 208, 77, 71, 105, 73, 219, 119, 110, 62, 74, 106, 209, 174, 220, 90, 214, 217, 102, 11, 223, 64, 240, 59, 216, 55, 83, 174, 188, 169, 197, 158, 187, 222, 127, 207, 178, 71, 233, 255, 181, 48, 28, 242, 189, 189, 138, 194, 186, 202, 48, 147, 179, 83, 166, 163, 180, 36, 5, 54, 208, 186, 147, 6, 215, 205, 41, 87, 222, 84, 191, 103, 217, 35, 46, 122, 102, 179, 184, 74, 97, 196, 2, 27, 104, 93, 148, 43, 111, 42, 55, 190, 11, 180, 161, 142, 12, 195, 27, 223, 5, 90, 141, 239, 2, 45, 0, 0, 0, 0, 65, 49, 27, 25, 130, 98, 54, 50, 195, 83, 45, 43, 4, 197, 108, 100, 69, 244, 119, 125, 134, 167, 90, 86, 199, 150, 65, 79, 8, 138, 217, 200, 73, 187, 194, 209, 138, 232, 239, 250, 203, 217, 244, 227, 12, 79, 181, 172, 77, 126, 174, 181, 142, 45, 131, 158, 207, 28, 152, 135, 81, 18, 194, 74, 16, 35, 217, 83, 211, 112, 244, 120, 146, 65, 239, 97, 85, 215, 174, 46, 20, 230, 181, 55, 215, 181, 152, 28, 150, 132, 131, 5, 89, 152, 27, 130, 24, 169, 0, 155, 219, 250, 45, 176, 154, 203, 54, 169, 93, 93, 119, 230, 28, 108, 108, 255, 223, 63, 65, 212, 158, 14, 90, 205, 162, 36, 132, 149, 227, 21, 159, 140, 32, 70, 178, 167, 97, 119, 169, 190, 166, 225, 232, 241, 231, 208, 243, 232, 36, 131, 222, 195, 101, 178, 197, 218, 170, 174, 93, 93, 235, 159, 70, 68, 40, 204, 107, 111, 105, 253, 112, 118, 174, 107, 49, 57, 239, 90, 42, 32, 44, 9, 7, 11, 109, 56, 28, 18, 243, 54, 70, 223, 178, 7, 93, 198, 113, 84, 112, 237, 48, 101, 107, 244, 247, 243, 42, 187, 182, 194, 49, 162, 117, 145, 28, 137, 52, 160, 7, 144, 251, 188, 159, 23, 186, 141, 132, 14, 121, 222, 169, 37, 56, 239, 178, 60, 255, 121, 243, 115, 190, 72, 232, 106, 125, 27, 197, 65, 60, 42, 222, 88, 5, 79, 121, 240, 68, 126, 98, 233, 135, 45, 79, 194, 198, 28, 84, 219, 1, 138, 21, 148, 64, 187, 14, 141, 131, 232, 35, 166, 194, 217, 56, 191, 13, 197, 160, 56, 76, 244, 187, 33, 143, 167, 150, 10, 206, 150, 141, 19, 9, 0, 204, 92, 72, 49, 215, 69, 139, 98, 250, 110, 202, 83, 225, 119, 84, 93, 187, 186, 21, 108, 160, 163, 214, 63, 141, 136, 151, 14, 150, 145, 80, 152, 215, 222, 17, 169, 204, 199, 210, 250, 225, 236, 147, 203, 250, 245, 92, 215, 98, 114, 29, 230, 121, 107, 222, 181, 84, 64, 159, 132, 79, 89, 88, 18, 14, 22, 25, 35, 21, 15, 218, 112, 56, 36, 155, 65, 35, 61, 167, 107, 253, 101, 230, 90, 230, 124, 37, 9, 203, 87, 100, 56, 208, 78, 163, 174, 145, 1, 226, 159, 138, 24, 33, 204, 167, 51, 96, 253, 188, 42, 175, 225, 36, 173, 238, 208, 63, 180, 45, 131, 18, 159, 108, 178, 9, 134, 171, 36, 72, 201, 234, 21, 83, 208, 41, 70, 126, 251, 104, 119, 101, 226, 246, 121, 63, 47, 183, 72, 36, 54, 116, 27, 9, 29, 53, 42, 18, 4, 242, 188, 83, 75, 179, 141, 72, 82, 112, 222, 101, 121, 49, 239, 126, 96, 254, 243, 230, 231, 191, 194, 253, 254, 124, 145, 208, 213, 61, 160, 203, 204, 250, 54, 138, 131, 187, 7, 145, 154, 120, 84, 188, 177, 57, 101, 167, 168, 75, 152, 131, 59, 10, 169, 152, 34, 201, 250, 181, 9, 136, 203, 174, 16, 79, 93, 239, 95, 14, 108, 244, 70, 205, 63, 217, 109, 140, 14, 194, 116, 67, 18, 90, 243, 2, 35, 65, 234, 193, 112, 108, 193, 128, 65, 119, 216, 71, 215, 54, 151, 6, 230, 45, 142, 197, 181, 0, 165, 132, 132, 27, 188, 26, 138, 65, 113, 91, 187, 90, 104, 152, 232, 119, 67, 217, 217, 108, 90, 30, 79, 45, 21, 95, 126, 54, 12, 156, 45, 27, 39, 221, 28, 0, 62, 18, 0, 152, 185, 83, 49, 131, 160, 144, 98, 174, 139, 209, 83, 181, 146, 22, 197, 244, 221, 87, 244, 239, 196, 148, 167, 194, 239, 213, 150, 217, 246, 233, 188, 7, 174, 168, 141, 28, 183, 107, 222, 49, 156, 42, 239, 42, 133, 237, 121, 107, 202, 172, 72, 112, 211, 111, 27, 93, 248, 46, 42, 70, 225, 225, 54, 222, 102, 160, 7, 197, 127, 99, 84, 232, 84, 34, 101, 243, 77, 229, 243, 178, 2, 164, 194, 169, 27, 103, 145, 132, 48, 38, 160, 159, 41, 184, 174, 197, 228, 249, 159, 222, 253, 58, 204, 243, 214, 123, 253, 232, 207, 188, 107, 169, 128, 253, 90, 178, 153, 62, 9, 159, 178, 127, 56, 132, 171, 176, 36, 28, 44, 241, 21, 7, 53, 50, 70, 42, 30, 115, 119, 49, 7, 180, 225, 112, 72, 245, 208, 107, 81, 54, 131, 70, 122, 119, 178, 93, 99, 78, 215, 250, 203, 15, 230, 225, 210, 204, 181, 204, 249, 141, 132, 215, 224, 74, 18, 150, 175, 11, 35, 141, 182, 200, 112, 160, 157, 137, 65, 187, 132, 70, 93, 35, 3, 7, 108, 56, 26, 196, 63, 21, 49, 133, 14, 14, 40, 66, 152, 79, 103, 3, 169, 84, 126, 192, 250, 121, 85, 129, 203, 98, 76, 31, 197, 56, 129, 94, 244, 35, 152, 157, 167, 14, 179, 220, 150, 21, 170, 27, 0, 84, 229, 90, 49, 79, 252, 153, 98, 98, 215, 216, 83, 121, 206, 23, 79, 225, 73, 86, 126, 250, 80, 149, 45, 215, 123, 212, 28, 204, 98, 19, 138, 141, 45, 82, 187, 150, 52, 145, 232, 187, 31, 208, 217, 160, 6, 236, 243, 126, 94, 173, 194, 101, 71, 110, 145, 72, 108, 47, 160, 83, 117, 232, 54, 18, 58, 169, 7, 9, 35, 106, 84, 36, 8, 43, 101, 63, 17, 228, 121, 167, 150, 165, 72, 188, 143, 102, 27, 145, 164, 39, 42, 138, 189, 224, 188, 203, 242, 161, 141, 208, 235, 98, 222, 253, 192, 35, 239, 230, 217, 189, 225, 188, 20, 252, 208, 167, 13, 63, 131, 138, 38, 126, 178, 145, 63, 185, 36, 208, 112, 248, 21, 203, 105, 59, 70, 230, 66, 122, 119, 253, 91, 181, 107, 101, 220, 244, 90, 126, 197, 55, 9, 83, 238, 118, 56, 72, 247, 177, 174, 9, 184, 240, 159, 18, 161, 51, 204, 63, 138, 114, 253, 36, 147, 0, 0, 0, 0, 55, 106, 194, 1, 110, 212, 132, 3, 89, 190, 70, 2, 220, 168, 9, 7, 235, 194, 203, 6, 178, 124, 141, 4, 133, 22, 79, 5, 184, 81, 19, 14, 143, 59, 209, 15, 214, 133, 151, 13, 225, 239, 85, 12, 100, 249, 26, 9, 83, 147, 216, 8, 10, 45, 158, 10, 61, 71, 92, 11, 112, 163, 38, 28, 71, 201, 228, 29, 30, 119, 162, 31, 41, 29, 96, 30, 172, 11, 47, 27, 155, 97, 237, 26, 194, 223, 171, 24, 245, 181, 105, 25, 200, 242, 53, 18, 255, 152, 247, 19, 166, 38, 177, 17, 145, 76, 115, 16, 20, 90, 60, 21, 35, 48, 254, 20, 122, 142, 184, 22, 77, 228, 122, 23, 224, 70, 77, 56, 215, 44, 143, 57, 142, 146, 201, 59, 185, 248, 11, 58, 60, 238, 68, 63, 11, 132, 134, 62, 82, 58, 192, 60, 101, 80, 2, 61, 88, 23, 94, 54, 111, 125, 156, 55, 54, 195, 218, 53, 1, 169, 24, 52, 132, 191, 87, 49, 179, 213, 149, 48, 234, 107, 211, 50, 221, 1, 17, 51, 144, 229, 107, 36, 167, 143, 169, 37, 254, 49, 239, 39, 201, 91, 45, 38, 76, 77, 98, 35, 123, 39, 160, 34, 34, 153, 230, 32, 21, 243, 36, 33, 40, 180, 120, 42, 31, 222, 186, 43, 70, 96, 252, 41, 113, 10, 62, 40, 244, 28, 113, 45, 195, 118, 179, 44, 154, 200, 245, 46, 173, 162, 55, 47, 192, 141, 154, 112, 247, 231, 88, 113, 174, 89, 30, 115, 153, 51, 220, 114, 28, 37, 147, 119, 43, 79, 81, 118, 114, 241, 23, 116, 69, 155, 213, 117, 120, 220, 137, 126, 79, 182, 75, 127, 22, 8, 13, 125, 33, 98, 207, 124, 164, 116, 128, 121, 147, 30, 66, 120, 202, 160, 4, 122, 253, 202, 198, 123, 176, 46, 188, 108, 135, 68, 126, 109, 222, 250, 56, 111, 233, 144, 250, 110, 108, 134, 181, 107, 91, 236, 119, 106, 2, 82, 49, 104, 53, 56, 243, 105, 8, 127, 175, 98, 63, 21, 109, 99, 102, 171, 43, 97, 81, 193, 233, 96, 212, 215, 166, 101, 227, 189, 100, 100, 186, 3, 34, 102, 141, 105, 224, 103, 32, 203, 215, 72, 23, 161, 21, 73, 78, 31, 83, 75, 121, 117, 145, 74, 252, 99, 222, 79, 203, 9, 28, 78, 146, 183, 90, 76, 165, 221, 152, 77, 152, 154, 196, 70, 175, 240, 6, 71, 246, 78, 64, 69, 193, 36, 130, 68, 68, 50, 205, 65, 115, 88, 15, 64, 42, 230, 73, 66, 29, 140, 139, 67, 80, 104, 241, 84, 103, 2, 51, 85, 62, 188, 117, 87, 9, 214, 183, 86, 140, 192, 248, 83, 187, 170, 58, 82, 226, 20, 124, 80, 213, 126, 190, 81, 232, 57, 226, 90, 223, 83, 32, 91, 134, 237, 102, 89, 177, 135, 164, 88, 52, 145, 235, 93, 3, 251, 41, 92, 90, 69, 111, 94, 109, 47, 173, 95, 128, 27, 53, 225, 183, 113, 247, 224, 238, 207, 177, 226, 217, 165, 115, 227, 92, 179, 60, 230, 107, 217, 254, 231, 50, 103, 184, 229, 5, 13, 122, 228, 56, 74, 38, 239, 15, 32, 228, 238, 86, 158, 162, 236, 97, 244, 96, 237, 228, 226, 47, 232, 211, 136, 237, 233, 138, 54, 171, 235, 189, 92, 105, 234, 240, 184, 19, 253, 199, 210, 209, 252, 158, 108, 151, 254, 169, 6, 85, 255, 44, 16, 26, 250, 27, 122, 216, 251, 66, 196, 158, 249, 117, 174, 92, 248, 72, 233, 0, 243, 127, 131, 194, 242, 38, 61, 132, 240, 17, 87, 70, 241, 148, 65, 9, 244, 163, 43, 203, 245, 250, 149, 141, 247, 205, 255, 79, 246, 96, 93, 120, 217, 87, 55, 186, 216, 14, 137, 252, 218, 57, 227, 62, 219, 188, 245, 113, 222, 139, 159, 179, 223, 210, 33, 245, 221, 229, 75, 55, 220, 216, 12, 107, 215, 239, 102, 169, 214, 182, 216, 239, 212, 129, 178, 45, 213, 4, 164, 98, 208, 51, 206, 160, 209, 106, 112, 230, 211, 93, 26, 36, 210, 16, 254, 94, 197, 39, 148, 156, 196, 126, 42, 218, 198, 73, 64, 24, 199, 204, 86, 87, 194, 251, 60, 149, 195, 162, 130, 211, 193, 149, 232, 17, 192, 168, 175, 77, 203, 159, 197, 143, 202, 198, 123, 201, 200, 241, 17, 11, 201, 116, 7, 68, 204, 67, 109, 134, 205, 26, 211, 192, 207, 45, 185, 2, 206, 64, 150, 175, 145, 119, 252, 109, 144, 46, 66, 43, 146, 25, 40, 233, 147, 156, 62, 166, 150, 171, 84, 100, 151, 242, 234, 34, 149, 197, 128, 224, 148, 248, 199, 188, 159, 207, 173, 126, 158, 150, 19, 56, 156, 161, 121, 250, 157, 36, 111, 181, 152, 19, 5, 119, 153, 74, 187, 49, 155, 125, 209, 243, 154, 48, 53, 137, 141, 7, 95, 75, 140, 94, 225, 13, 142, 105, 139, 207, 143, 236, 157, 128, 138, 219, 247, 66, 139, 130, 73, 4, 137, 181, 35, 198, 136, 136, 100, 154, 131, 191, 14, 88, 130, 230, 176, 30, 128, 209, 218, 220, 129, 84, 204, 147, 132, 99, 166, 81, 133, 58, 24, 23, 135, 13, 114, 213, 134, 160, 208, 226, 169, 151, 186, 32, 168, 206, 4, 102, 170, 249, 110, 164, 171, 124, 120, 235, 174, 75, 18, 41, 175, 18, 172, 111, 173, 37, 198, 173, 172, 24, 129, 241, 167, 47, 235, 51, 166, 118, 85, 117, 164, 65, 63, 183, 165, 196, 41, 248, 160, 243, 67, 58, 161, 170, 253, 124, 163, 157, 151, 190, 162, 208, 115, 196, 181, 231, 25, 6, 180, 190, 167, 64, 182, 137, 205, 130, 183, 12, 219, 205, 178, 59, 177, 15, 179, 98, 15, 73, 177, 85, 101, 139, 176, 104, 34, 215, 187, 95, 72, 21, 186, 6, 246, 83, 184, 49, 156, 145, 185, 180, 138, 222, 188, 131, 224, 28, 189, 218, 94, 90, 191, 237, 52, 152, 190, 0, 0, 0, 0, 101, 103, 188, 184, 139, 200, 9, 170, 238, 175, 181, 18, 87, 151, 98, 143, 50, 240, 222, 55, 220, 95, 107, 37, 185, 56, 215, 157, 239, 40, 180, 197, 138, 79, 8, 125, 100, 224, 189, 111, 1, 135, 1, 215, 184, 191, 214, 74, 221, 216, 106, 242, 51, 119, 223, 224, 86, 16, 99, 88, 159, 87, 25, 80, 250, 48, 165, 232, 20, 159, 16, 250, 113, 248, 172, 66, 200, 192, 123, 223, 173, 167, 199, 103, 67, 8, 114, 117, 38, 111, 206, 205, 112, 127, 173, 149, 21, 24, 17, 45, 251, 183, 164, 63, 158, 208, 24, 135, 39, 232, 207, 26, 66, 143, 115, 162, 172, 32, 198, 176, 201, 71, 122, 8, 62, 175, 50, 160, 91, 200, 142, 24, 181, 103, 59, 10, 208, 0, 135, 178, 105, 56, 80, 47, 12, 95, 236, 151, 226, 240, 89, 133, 135, 151, 229, 61, 209, 135, 134, 101, 180, 224, 58, 221, 90, 79, 143, 207, 63, 40, 51, 119, 134, 16, 228, 234, 227, 119, 88, 82, 13, 216, 237, 64, 104, 191, 81, 248, 161, 248, 43, 240, 196, 159, 151, 72, 42, 48, 34, 90, 79, 87, 158, 226, 246, 111, 73, 127, 147, 8, 245, 199, 125, 167, 64, 213, 24, 192, 252, 109, 78, 208, 159, 53, 43, 183, 35, 141, 197, 24, 150, 159, 160, 127, 42, 39, 25, 71, 253, 186, 124, 32, 65, 2, 146, 143, 244, 16, 247, 232, 72, 168, 61, 88, 20, 155, 88, 63, 168, 35, 182, 144, 29, 49, 211, 247, 161, 137, 106, 207, 118, 20, 15, 168, 202, 172, 225, 7, 127, 190, 132, 96, 195, 6, 210, 112, 160, 94, 183, 23, 28, 230, 89, 184, 169, 244, 60, 223, 21, 76, 133, 231, 194, 209, 224, 128, 126, 105, 14, 47, 203, 123, 107, 72, 119, 195, 162, 15, 13, 203, 199, 104, 177, 115, 41, 199, 4, 97, 76, 160, 184, 217, 245, 152, 111, 68, 144, 255, 211, 252, 126, 80, 102, 238, 27, 55, 218, 86, 77, 39, 185, 14, 40, 64, 5, 182, 198, 239, 176, 164, 163, 136, 12, 28, 26, 176, 219, 129, 127, 215, 103, 57, 145, 120, 210, 43, 244, 31, 110, 147, 3, 247, 38, 59, 102, 144, 154, 131, 136, 63, 47, 145, 237, 88, 147, 41, 84, 96, 68, 180, 49, 7, 248, 12, 223, 168, 77, 30, 186, 207, 241, 166, 236, 223, 146, 254, 137, 184, 46, 70, 103, 23, 155, 84, 2, 112, 39, 236, 187, 72, 240, 113, 222, 47, 76, 201, 48, 128, 249, 219, 85, 231, 69, 99, 156, 160, 63, 107, 249, 199, 131, 211, 23, 104, 54, 193, 114, 15, 138, 121, 203, 55, 93, 228, 174, 80, 225, 92, 64, 255, 84, 78, 37, 152, 232, 246, 115, 136, 139, 174, 22, 239, 55, 22, 248, 64, 130, 4, 157, 39, 62, 188, 36, 31, 233, 33, 65, 120, 85, 153, 175, 215, 224, 139, 202, 176, 92, 51, 59, 182, 89, 237, 94, 209, 229, 85, 176, 126, 80, 71, 213, 25, 236, 255, 108, 33, 59, 98, 9, 70, 135, 218, 231, 233, 50, 200, 130, 142, 142, 112, 212, 158, 237, 40, 177, 249, 81, 144, 95, 86, 228, 130, 58, 49, 88, 58, 131, 9, 143, 167, 230, 110, 51, 31, 8, 193, 134, 13, 109, 166, 58, 181, 164, 225, 64, 189, 193, 134, 252, 5, 47, 41, 73, 23, 74, 78, 245, 175, 243, 118, 34, 50, 150, 17, 158, 138, 120, 190, 43, 152, 29, 217, 151, 32, 75, 201, 244, 120, 46, 174, 72, 192, 192, 1, 253, 210, 165, 102, 65, 106, 28, 94, 150, 247, 121, 57, 42, 79, 151, 150, 159, 93, 242, 241, 35, 229, 5, 25, 107, 77, 96, 126, 215, 245, 142, 209, 98, 231, 235, 182, 222, 95, 82, 142, 9, 194, 55, 233, 181, 122, 217, 70, 0, 104, 188, 33, 188, 208, 234, 49, 223, 136, 143, 86, 99, 48, 97, 249, 214, 34, 4, 158, 106, 154, 189, 166, 189, 7, 216, 193, 1, 191, 54, 110, 180, 173, 83, 9, 8, 21, 154, 78, 114, 29, 255, 41, 206, 165, 17, 134, 123, 183, 116, 225, 199, 15, 205, 217, 16, 146, 168, 190, 172, 42, 70, 17, 25, 56, 35, 118, 165, 128, 117, 102, 198, 216, 16, 1, 122, 96, 254, 174, 207, 114, 155, 201, 115, 202, 34, 241, 164, 87, 71, 150, 24, 239, 169, 57, 173, 253, 204, 94, 17, 69, 6, 238, 77, 118, 99, 137, 241, 206, 141, 38, 68, 220, 232, 65, 248, 100, 81, 121, 47, 249, 52, 30, 147, 65, 218, 177, 38, 83, 191, 214, 154, 235, 233, 198, 249, 179, 140, 161, 69, 11, 98, 14, 240, 25, 7, 105, 76, 161, 190, 81, 155, 60, 219, 54, 39, 132, 53, 153, 146, 150, 80, 254, 46, 46, 153, 185, 84, 38, 252, 222, 232, 158, 18, 113, 93, 140, 119, 22, 225, 52, 206, 46, 54, 169, 171, 73, 138, 17, 69, 230, 63, 3, 32, 129, 131, 187, 118, 145, 224, 227, 19, 246, 92, 91, 253, 89, 233, 73, 152, 62, 85, 241, 33, 6, 130, 108, 68, 97, 62, 212, 170, 206, 139, 198, 207, 169, 55, 126, 56, 65, 127, 214, 93, 38, 195, 110, 179, 137, 118, 124, 214, 238, 202, 196, 111, 214, 29, 89, 10, 177, 161, 225, 228, 30, 20, 243, 129, 121, 168, 75, 215, 105, 203, 19, 178, 14, 119, 171, 92, 161, 194, 185, 57, 198, 126, 1, 128, 254, 169, 156, 229, 153, 21, 36, 11, 54, 160, 54, 110, 81, 28, 142, 167, 22, 102, 134, 194, 113, 218, 62, 44, 222, 111, 44, 73, 185, 211, 148, 240, 129, 4, 9, 149, 230, 184, 177, 123, 73, 13, 163, 30, 46, 177, 27, 72, 62, 210, 67, 45, 89, 110, 251, 195, 246, 219, 233, 166, 145, 103, 81, 31, 169, 176, 204, 122, 206, 12, 116, 148, 97, 185, 102, 241, 6, 5, 222, 0, 0, 0, 0, 176, 41, 96, 61, 96, 83, 192, 122, 208, 122, 160, 71, 192, 166, 128, 245, 112, 143, 224, 200, 160, 245, 64, 143, 16, 220, 32, 178, 193, 75, 112, 48, 113, 98, 16, 13, 161, 24, 176, 74, 17, 49, 208, 119, 1, 237, 240, 197, 177, 196, 144, 248, 97, 190, 48, 191, 209, 151, 80, 130, 130, 151, 224, 96, 50, 190, 128, 93, 226, 196, 32, 26, 82, 237, 64, 39, 66, 49, 96, 149, 242, 24, 0, 168, 34, 98, 160, 239, 146, 75, 192, 210, 67, 220, 144, 80, 243, 245, 240, 109, 35, 143, 80, 42, 147, 166, 48, 23, 131, 122, 16, 165, 51, 83, 112, 152, 227, 41, 208, 223, 83, 0, 176, 226, 4, 47, 193, 193, 180, 6, 161, 252, 100, 124, 1, 187, 212, 85, 97, 134, 196, 137, 65, 52, 116, 160, 33, 9, 164, 218, 129, 78, 20, 243, 225, 115, 197, 100, 177, 241, 117, 77, 209, 204, 165, 55, 113, 139, 21, 30, 17, 182, 5, 194, 49, 4, 181, 235, 81, 57, 101, 145, 241, 126, 213, 184, 145, 67, 134, 184, 33, 161, 54, 145, 65, 156, 230, 235, 225, 219, 86, 194, 129, 230, 70, 30, 161, 84, 246, 55, 193, 105, 38, 77, 97, 46, 150, 100, 1, 19, 71, 243, 81, 145, 247, 218, 49, 172, 39, 160, 145, 235, 151, 137, 241, 214, 135, 85, 209, 100, 55, 124, 177, 89, 231, 6, 17, 30, 87, 47, 113, 35, 73, 88, 243, 88, 249, 113, 147, 101, 41, 11, 51, 34, 153, 34, 83, 31, 137, 254, 115, 173, 57, 215, 19, 144, 233, 173, 179, 215, 89, 132, 211, 234, 136, 19, 131, 104, 56, 58, 227, 85, 232, 64, 67, 18, 88, 105, 35, 47, 72, 181, 3, 157, 248, 156, 99, 160, 40, 230, 195, 231, 152, 207, 163, 218, 203, 207, 19, 56, 123, 230, 115, 5, 171, 156, 211, 66, 27, 181, 179, 127, 11, 105, 147, 205, 187, 64, 243, 240, 107, 58, 83, 183, 219, 19, 51, 138, 10, 132, 99, 8, 186, 173, 3, 53, 106, 215, 163, 114, 218, 254, 195, 79, 202, 34, 227, 253, 122, 11, 131, 192, 170, 113, 35, 135, 26, 88, 67, 186, 77, 119, 50, 153, 253, 94, 82, 164, 45, 36, 242, 227, 157, 13, 146, 222, 141, 209, 178, 108, 61, 248, 210, 81, 237, 130, 114, 22, 93, 171, 18, 43, 140, 60, 66, 169, 60, 21, 34, 148, 236, 111, 130, 211, 92, 70, 226, 238, 76, 154, 194, 92, 252, 179, 162, 97, 44, 201, 2, 38, 156, 224, 98, 27, 207, 224, 210, 249, 127, 201, 178, 196, 175, 179, 18, 131, 31, 154, 114, 190, 15, 70, 82, 12, 191, 111, 50, 49, 111, 21, 146, 118, 223, 60, 242, 75, 14, 171, 162, 201, 190, 130, 194, 244, 110, 248, 98, 179, 222, 209, 2, 142, 206, 13, 34, 60, 126, 36, 66, 1, 174, 94, 226, 70, 30, 119, 130, 123, 146, 176, 230, 177, 34, 153, 134, 140, 242, 227, 38, 203, 66, 202, 70, 246, 82, 22, 102, 68, 226, 63, 6, 121, 50, 69, 166, 62, 130, 108, 198, 3, 83, 251, 150, 129, 227, 210, 246, 188, 51, 168, 86, 251, 131, 129, 54, 198, 147, 93, 22, 116, 35, 116, 118, 73, 243, 14, 214, 14, 67, 39, 182, 51, 16, 39, 6, 209, 160, 14, 102, 236, 112, 116, 198, 171, 192, 93, 166, 150, 208, 129, 134, 36, 96, 168, 230, 25, 176, 210, 70, 94, 0, 251, 38, 99, 209, 108, 118, 225, 97, 69, 22, 220, 177, 63, 182, 155, 1, 22, 214, 166, 17, 202, 246, 20, 161, 227, 150, 41, 113, 153, 54, 110, 193, 176, 86, 83, 150, 159, 39, 112, 38, 182, 71, 77, 246, 204, 231, 10, 70, 229, 135, 55, 86, 57, 167, 133, 230, 16, 199, 184, 54, 106, 103, 255, 134, 67, 7, 194, 87, 212, 87, 64, 231, 253, 55, 125, 55, 135, 151, 58, 135, 174, 247, 7, 151, 114, 215, 181, 39, 91, 183, 136, 247, 33, 23, 207, 71, 8, 119, 242, 20, 8, 199, 16, 164, 33, 167, 45, 116, 91, 7, 106, 196, 114, 103, 87, 212, 174, 71, 229, 100, 135, 39, 216, 180, 253, 135, 159, 4, 212, 231, 162, 213, 67, 183, 32, 101, 106, 215, 29, 181, 16, 119, 90, 5, 57, 23, 103, 21, 229, 55, 213, 165, 204, 87, 232, 117, 182, 247, 175, 197, 159, 151, 146, 219, 232, 21, 233, 107, 193, 117, 212, 187, 187, 213, 147, 11, 146, 181, 174, 27, 78, 149, 28, 171, 103, 245, 33, 123, 29, 85, 102, 203, 52, 53, 91, 26, 163, 101, 217, 170, 138, 5, 228, 122, 240, 165, 163, 202, 217, 197, 158, 218, 5, 229, 44, 106, 44, 133, 17, 186, 86, 37, 86, 10, 127, 69, 107, 89, 127, 245, 137, 233, 86, 149, 180, 57, 44, 53, 243, 137, 5, 85, 206, 153, 217, 117, 124, 41, 240, 21, 65, 249, 138, 181, 6, 73, 163, 213, 59, 152, 52, 133, 185, 40, 29, 229, 132, 248, 103, 69, 195, 72, 78, 37, 254, 88, 146, 5, 76, 232, 187, 101, 113, 56, 193, 197, 54, 136, 232, 165, 11, 223, 199, 212, 40, 111, 238, 180, 21, 191, 148, 20, 82, 15, 189, 116, 111, 31, 97, 84, 221, 175, 72, 52, 224, 127, 50, 148, 167, 207, 27, 244, 154, 30, 140, 164, 24, 174, 165, 196, 37, 126, 223, 100, 98, 206, 246, 4, 95, 222, 42, 36, 237, 110, 3, 68, 208, 190, 121, 228, 151, 14, 80, 132, 170, 93, 80, 52, 72, 237, 121, 84, 117, 61, 3, 244, 50, 141, 42, 148, 15, 157, 246, 180, 189, 45, 223, 212, 128, 253, 165, 116, 199, 77, 140, 20, 250, 156, 27, 68, 120, 44, 50, 36, 69, 252, 72, 132, 2, 76, 97, 228, 63, 92, 189, 196, 141, 236, 148, 164, 176, 60, 238, 4, 247, 140, 199, 100, 202, 0, 0, 0, 0, 165, 211, 92, 203, 11, 161, 200, 77, 174, 114, 148, 134, 22, 66, 145, 155, 179, 145, 205, 80, 29, 227, 89, 214, 184, 48, 5, 29, 109, 130, 83, 236, 200, 81, 15, 39, 102, 35, 155, 161, 195, 240, 199, 106, 123, 192, 194, 119, 222, 19, 158, 188, 112, 97, 10, 58, 213, 178, 86, 241, 155, 2, 214, 3, 62, 209, 138, 200, 144, 163, 30, 78, 53, 112, 66, 133, 141, 64, 71, 152, 40, 147, 27, 83, 134, 225, 143, 213, 35, 50, 211, 30, 246, 128, 133, 239, 83, 83, 217, 36, 253, 33, 77, 162, 88, 242, 17, 105, 224, 194, 20, 116, 69, 17, 72, 191, 235, 99, 220, 57, 78, 176, 128, 242, 54, 5, 172, 7, 147, 214, 240, 204, 61, 164, 100, 74, 152, 119, 56, 129, 32, 71, 61, 156, 133, 148, 97, 87, 43, 230, 245, 209, 142, 53, 169, 26, 91, 135, 255, 235, 254, 84, 163, 32, 80, 38, 55, 166, 245, 245, 107, 109, 77, 197, 110, 112, 232, 22, 50, 187, 70, 100, 166, 61, 227, 183, 250, 246, 173, 7, 122, 4, 8, 212, 38, 207, 166, 166, 178, 73, 3, 117, 238, 130, 187, 69, 235, 159, 30, 150, 183, 84, 176, 228, 35, 210, 21, 55, 127, 25, 192, 133, 41, 232, 101, 86, 117, 35, 203, 36, 225, 165, 110, 247, 189, 110, 214, 199, 184, 115, 115, 20, 228, 184, 221, 102, 112, 62, 120, 181, 44, 245, 108, 10, 88, 15, 201, 217, 4, 196, 103, 171, 144, 66, 194, 120, 204, 137, 122, 72, 201, 148, 223, 155, 149, 95, 113, 233, 1, 217, 212, 58, 93, 18, 1, 136, 11, 227, 164, 91, 87, 40, 10, 41, 195, 174, 175, 250, 159, 101, 23, 202, 154, 120, 178, 25, 198, 179, 28, 107, 82, 53, 185, 184, 14, 254, 247, 8, 142, 12, 82, 219, 210, 199, 252, 169, 70, 65, 89, 122, 26, 138, 225, 74, 31, 151, 68, 153, 67, 92, 234, 235, 215, 218, 79, 56, 139, 17, 154, 138, 221, 224, 63, 89, 129, 43, 145, 43, 21, 173, 52, 248, 73, 102, 140, 200, 76, 123, 41, 27, 16, 176, 135, 105, 132, 54, 34, 186, 216, 253, 90, 15, 244, 8, 255, 220, 168, 195, 81, 174, 60, 69, 244, 125, 96, 142, 76, 77, 101, 147, 233, 158, 57, 88, 71, 236, 173, 222, 226, 63, 241, 21, 55, 141, 167, 228, 146, 94, 251, 47, 60, 44, 111, 169, 153, 255, 51, 98, 33, 207, 54, 127, 132, 28, 106, 180, 42, 110, 254, 50, 143, 189, 162, 249, 193, 13, 34, 11, 100, 222, 126, 192, 202, 172, 234, 70, 111, 127, 182, 141, 215, 79, 179, 144, 114, 156, 239, 91, 220, 238, 123, 221, 121, 61, 39, 22, 172, 143, 113, 231, 9, 92, 45, 44, 167, 46, 185, 170, 2, 253, 229, 97, 186, 205, 224, 124, 31, 30, 188, 183, 177, 108, 40, 49, 20, 191, 116, 250, 216, 20, 176, 30, 125, 199, 236, 213, 211, 181, 120, 83, 118, 102, 36, 152, 206, 86, 33, 133, 107, 133, 125, 78, 197, 247, 233, 200, 96, 36, 181, 3, 181, 150, 227, 242, 16, 69, 191, 57, 190, 55, 43, 191, 27, 228, 119, 116, 163, 212, 114, 105, 6, 7, 46, 162, 168, 117, 186, 36, 13, 166, 230, 239, 67, 22, 102, 29, 230, 197, 58, 214, 72, 183, 174, 80, 237, 100, 242, 155, 85, 84, 247, 134, 240, 135, 171, 77, 94, 245, 63, 203, 251, 38, 99, 0, 46, 148, 53, 241, 139, 71, 105, 58, 37, 53, 253, 188, 128, 230, 161, 119, 56, 214, 164, 106, 157, 5, 248, 161, 51, 119, 108, 39, 150, 164, 48, 236, 238, 17, 28, 25, 75, 194, 64, 210, 229, 176, 212, 84, 64, 99, 136, 159, 248, 83, 141, 130, 93, 128, 209, 73, 243, 242, 69, 207, 86, 33, 25, 4, 131, 147, 79, 245, 38, 64, 19, 62, 136, 50, 135, 184, 45, 225, 219, 115, 149, 209, 222, 110, 48, 2, 130, 165, 158, 112, 22, 35, 59, 163, 74, 232, 117, 19, 202, 26, 208, 192, 150, 209, 126, 178, 2, 87, 219, 97, 94, 156, 99, 81, 91, 129, 198, 130, 7, 74, 104, 240, 147, 204, 205, 35, 207, 7, 24, 145, 153, 246, 189, 66, 197, 61, 19, 48, 81, 187, 182, 227, 13, 112, 14, 211, 8, 109, 171, 0, 84, 166, 5, 114, 192, 32, 160, 161, 156, 235, 180, 30, 232, 17, 17, 205, 180, 218, 191, 191, 32, 92, 26, 108, 124, 151, 162, 92, 121, 138, 7, 143, 37, 65, 169, 253, 177, 199, 12, 46, 237, 12, 217, 156, 187, 253, 124, 79, 231, 54, 210, 61, 115, 176, 119, 238, 47, 123, 207, 222, 42, 102, 106, 13, 118, 173, 196, 127, 226, 43, 97, 172, 190, 224, 47, 28, 62, 18, 138, 207, 98, 217, 36, 189, 246, 95, 129, 110, 170, 148, 57, 94, 175, 137, 156, 141, 243, 66, 50, 255, 103, 196, 151, 44, 59, 15, 66, 158, 109, 254, 231, 77, 49, 53, 73, 63, 165, 179, 236, 236, 249, 120, 84, 220, 252, 101, 241, 15, 160, 174, 95, 125, 52, 40, 250, 174, 104, 227, 130, 27, 68, 22, 39, 200, 24, 221, 137, 186, 140, 91, 44, 105, 208, 144, 148, 89, 213, 141, 49, 138, 137, 70, 159, 248, 29, 192, 58, 43, 65, 11, 239, 153, 23, 250, 74, 74, 75, 49, 228, 56, 223, 183, 65, 235, 131, 124, 249, 219, 134, 97, 92, 8, 218, 170, 242, 122, 78, 44, 87, 169, 18, 231, 25, 25, 146, 21, 188, 202, 206, 222, 18, 184, 90, 88, 183, 107, 6, 147, 15, 91, 3, 142, 170, 136, 95, 69, 4, 250, 203, 195, 161, 41, 151, 8, 116, 155, 193, 249, 209, 72, 157, 50, 127, 58, 9, 180, 218, 233, 85, 127, 98, 217, 80, 98, 199, 10, 12, 169, 105, 120, 152, 47, 204, 171, 196, 228, 0, 0, 0, 0, 180, 11, 119, 166, 41, 17, 159, 151, 157, 26, 232, 49, 19, 36, 79, 244, 167, 47, 56, 82, 58, 53, 208, 99, 142, 62, 167, 197, 103, 78, 239, 51, 211, 69, 152, 149, 78, 95, 112, 164, 250, 84, 7, 2, 116, 106, 160, 199, 192, 97, 215, 97, 93, 123, 63, 80, 233, 112, 72, 246, 206, 156, 222, 103, 122, 151, 169, 193, 231, 141, 65, 240, 83, 134, 54, 86, 221, 184, 145, 147, 105, 179, 230, 53, 244, 169, 14, 4, 64, 162, 121, 162, 169, 210, 49, 84, 29, 217, 70, 242, 128, 195, 174, 195, 52, 200, 217, 101, 186, 246, 126, 160, 14, 253, 9, 6, 147, 231, 225, 55, 39, 236, 150, 145, 156, 57, 189, 207, 40, 50, 202, 105, 181, 40, 34, 88, 1, 35, 85, 254, 143, 29, 242, 59, 59, 22, 133, 157, 166, 12, 109, 172, 18, 7, 26, 10, 251, 119, 82, 252, 79, 124, 37, 90, 210, 102, 205, 107, 102, 109, 186, 205, 232, 83, 29, 8, 92, 88, 106, 174, 193, 66, 130, 159, 117, 73, 245, 57, 82, 165, 99, 168, 230, 174, 20, 14, 123, 180, 252, 63, 207, 191, 139, 153, 65, 129, 44, 92, 245, 138, 91, 250, 104, 144, 179, 203, 220, 155, 196, 109, 53, 235, 140, 155, 129, 224, 251, 61, 28, 250, 19, 12, 168, 241, 100, 170, 38, 207, 195, 111, 146, 196, 180, 201, 15, 222, 92, 248, 187, 213, 43, 94, 121, 117, 11, 68, 205, 126, 124, 226, 80, 100, 148, 211, 228, 111, 227, 117, 106, 81, 68, 176, 222, 90, 51, 22, 67, 64, 219, 39, 247, 75, 172, 129, 30, 59, 228, 119, 170, 48, 147, 209, 55, 42, 123, 224, 131, 33, 12, 70, 13, 31, 171, 131, 185, 20, 220, 37, 36, 14, 52, 20, 144, 5, 67, 178, 183, 233, 213, 35, 3, 226, 162, 133, 158, 248, 74, 180, 42, 243, 61, 18, 164, 205, 154, 215, 16, 198, 237, 113, 141, 220, 5, 64, 57, 215, 114, 230, 208, 167, 58, 16, 100, 172, 77, 182, 249, 182, 165, 135, 77, 189, 210, 33, 195, 131, 117, 228, 119, 136, 2, 66, 234, 146, 234, 115, 94, 153, 157, 213, 229, 76, 182, 139, 81, 71, 193, 45, 204, 93, 41, 28, 120, 86, 94, 186, 246, 104, 249, 127, 66, 99, 142, 217, 223, 121, 102, 232, 107, 114, 17, 78, 130, 2, 89, 184, 54, 9, 46, 30, 171, 19, 198, 47, 31, 24, 177, 137, 145, 38, 22, 76, 37, 45, 97, 234, 184, 55, 137, 219, 12, 60, 254, 125, 43, 208, 104, 236, 159, 219, 31, 74, 2, 193, 247, 123, 182, 202, 128, 221, 56, 244, 39, 24, 140, 255, 80, 190, 17, 229, 184, 143, 165, 238, 207, 41, 76, 158, 135, 223, 248, 149, 240, 121, 101, 143, 24, 72, 209, 132, 111, 238, 95, 186, 200, 43, 235, 177, 191, 141, 118, 171, 87, 188, 194, 160, 32, 26, 242, 234, 22, 136, 70, 225, 97, 46, 219, 251, 137, 31, 111, 240, 254, 185, 225, 206, 89, 124, 85, 197, 46, 218, 200, 223, 198, 235, 124, 212, 177, 77, 149, 164, 249, 187, 33, 175, 142, 29, 188, 181, 102, 44, 8, 190, 17, 138, 134, 128, 182, 79, 50, 139, 193, 233, 175, 145, 41, 216, 27, 154, 94, 126, 60, 118, 200, 239, 136, 125, 191, 73, 21, 103, 87, 120, 161, 108, 32, 222, 47, 82, 135, 27, 155, 89, 240, 189, 6, 67, 24, 140, 178, 72, 111, 42, 91, 56, 39, 220, 239, 51, 80, 122, 114, 41, 184, 75, 198, 34, 207, 237, 72, 28, 104, 40, 252, 23, 31, 142, 97, 13, 247, 191, 213, 6, 128, 25, 110, 211, 171, 71, 218, 216, 220, 225, 71, 194, 52, 208, 243, 201, 67, 118, 125, 247, 228, 179, 201, 252, 147, 21, 84, 230, 123, 36, 224, 237, 12, 130, 9, 157, 68, 116, 189, 150, 51, 210, 32, 140, 219, 227, 148, 135, 172, 69, 26, 185, 11, 128, 174, 178, 124, 38, 51, 168, 148, 23, 135, 163, 227, 177, 160, 79, 117, 32, 20, 68, 2, 134, 137, 94, 234, 183, 61, 85, 157, 17, 179, 107, 58, 212, 7, 96, 77, 114, 154, 122, 165, 67, 46, 113, 210, 229, 199, 1, 154, 19, 115, 10, 237, 181, 238, 16, 5, 132, 90, 27, 114, 34, 212, 37, 213, 231, 96, 46, 162, 65, 253, 52, 74, 112, 73, 63, 61, 214, 139, 159, 29, 204, 63, 148, 106, 106, 162, 142, 130, 91, 22, 133, 245, 253, 152, 187, 82, 56, 44, 176, 37, 158, 177, 170, 205, 175, 5, 161, 186, 9, 236, 209, 242, 255, 88, 218, 133, 89, 197, 192, 109, 104, 113, 203, 26, 206, 255, 245, 189, 11, 75, 254, 202, 173, 214, 228, 34, 156, 98, 239, 85, 58, 69, 3, 195, 171, 241, 8, 180, 13, 108, 18, 92, 60, 216, 25, 43, 154, 86, 39, 140, 95, 226, 44, 251, 249, 127, 54, 19, 200, 203, 61, 100, 110, 34, 77, 44, 152, 150, 70, 91, 62, 11, 92, 179, 15, 191, 87, 196, 169, 49, 105, 99, 108, 133, 98, 20, 202, 24, 120, 252, 251, 172, 115, 139, 93, 23, 166, 160, 3, 163, 173, 215, 165, 62, 183, 63, 148, 138, 188, 72, 50, 4, 130, 239, 247, 176, 137, 152, 81, 45, 147, 112, 96, 153, 152, 7, 198, 112, 232, 79, 48, 196, 227, 56, 150, 89, 249, 208, 167, 237, 242, 167, 1, 99, 204, 0, 196, 215, 199, 119, 98, 74, 221, 159, 83, 254, 214, 232, 245, 217, 58, 126, 100, 109, 49, 9, 194, 240, 43, 225, 243, 68, 32, 150, 85, 202, 30, 49, 144, 126, 21, 70, 54, 227, 15, 174, 7, 87, 4, 217, 161, 190, 116, 145, 87, 10, 127, 230, 241, 151, 101, 14, 192, 35, 110, 121, 102, 173, 80, 222, 163, 25, 91, 169, 5, 132, 65, 65, 52, 48, 74, 54, 146, 0, 0, 0, 0, 158, 0, 170, 204, 125, 7, 37, 66, 227, 7, 143, 142, 250, 14, 74, 132, 100, 14, 224, 72, 135, 9, 111, 198, 25, 9, 197, 10, 181, 27, 229, 211, 43, 27, 79, 31, 200, 28, 192, 145, 86, 28, 106, 93, 79, 21, 175, 87, 209, 21, 5, 155, 50, 18, 138, 21, 172, 18, 32, 217, 43, 49, 187, 124, 181, 49, 17, 176, 86, 54, 158, 62, 200, 54, 52, 242, 209, 63, 241, 248, 79, 63, 91, 52, 172, 56, 212, 186, 50, 56, 126, 118, 158, 42, 94, 175, 0, 42, 244, 99, 227, 45, 123, 237, 125, 45, 209, 33, 100, 36, 20, 43, 250, 36, 190, 231, 25, 35, 49, 105, 135, 35, 155, 165, 86, 98, 118, 249, 200, 98, 220, 53, 43, 101, 83, 187, 181, 101, 249, 119, 172, 108, 60, 125, 50, 108, 150, 177, 209, 107, 25, 63, 79, 107, 179, 243, 227, 121, 147, 42, 125, 121, 57, 230, 158, 126, 182, 104, 0, 126, 28, 164, 25, 119, 217, 174, 135, 119, 115, 98, 100, 112, 252, 236, 250, 112, 86, 32, 125, 83, 205, 133, 227, 83, 103, 73, 0, 84, 232, 199, 158, 84, 66, 11, 135, 93, 135, 1, 25, 93, 45, 205, 250, 90, 162, 67, 100, 90, 8, 143, 200, 72, 40, 86, 86, 72, 130, 154, 181, 79, 13, 20, 43, 79, 167, 216, 50, 70, 98, 210, 172, 70, 200, 30, 79, 65, 71, 144, 209, 65, 237, 92, 237, 194, 157, 41, 115, 194, 55, 229, 144, 197, 184, 107, 14, 197, 18, 167, 23, 204, 215, 173, 137, 204, 125, 97, 106, 203, 242, 239, 244, 203, 88, 35, 88, 217, 120, 250, 198, 217, 210, 54, 37, 222, 93, 184, 187, 222, 247, 116, 162, 215, 50, 126, 60, 215, 152, 178, 223, 208, 23, 60, 65, 208, 189, 240, 198, 243, 38, 85, 88, 243, 140, 153, 187, 244, 3, 23, 37, 244, 169, 219, 60, 253, 108, 209, 162, 253, 198, 29, 65, 250, 73, 147, 223, 250, 227, 95, 115, 232, 195, 134, 237, 232, 105, 74, 14, 239, 230, 196, 144, 239, 76, 8, 137, 230, 137, 2, 23, 230, 35, 206, 244, 225, 172, 64, 106, 225, 6, 140, 187, 160, 235, 208, 37, 160, 65, 28, 198, 167, 206, 146, 88, 167, 100, 94, 65, 174, 161, 84, 223, 174, 11, 152, 60, 169, 132, 22, 162, 169, 46, 218, 14, 187, 14, 3, 144, 187, 164, 207, 115, 188, 43, 65, 237, 188, 129, 141, 244, 181, 68, 135, 106, 181, 238, 75, 137, 178, 97, 197, 23, 178, 203, 9, 144, 145, 80, 172, 14, 145, 250, 96, 237, 150, 117, 238, 115, 150, 223, 34, 106, 159, 26, 40, 244, 159, 176, 228, 23, 152, 63, 106, 137, 152, 149, 166, 37, 138, 181, 127, 187, 138, 31, 179, 88, 141, 144, 61, 198, 141, 58, 241, 223, 132, 255, 251, 65, 132, 85, 55, 162, 131, 218, 185, 60, 131, 112, 117, 218, 133, 59, 83, 68, 133, 145, 159, 167, 130, 30, 17, 57, 130, 180, 221, 32, 139, 113, 215, 190, 139, 219, 27, 93, 140, 84, 149, 195, 140, 254, 89, 111, 158, 222, 128, 241, 158, 116, 76, 18, 153, 251, 194, 140, 153, 81, 14, 149, 144, 148, 4, 11, 144, 62, 200, 232, 151, 177, 70, 118, 151, 27, 138, 241, 180, 128, 47, 111, 180, 42, 227, 140, 179, 165, 109, 18, 179, 15, 161, 11, 186, 202, 171, 149, 186, 96, 103, 118, 189, 239, 233, 232, 189, 69, 37, 68, 175, 101, 252, 218, 175, 207, 48, 57, 168, 64, 190, 167, 168, 234, 114, 190, 161, 47, 120, 32, 161, 133, 180, 195, 166, 10, 58, 93, 166, 160, 246, 140, 231, 77, 170, 18, 231, 231, 102, 241, 224, 104, 232, 111, 224, 194, 36, 118, 233, 7, 46, 232, 233, 173, 226, 11, 238, 34, 108, 149, 238, 136, 160, 57, 252, 168, 121, 167, 252, 2, 181, 68, 251, 141, 59, 218, 251, 39, 247, 195, 242, 226, 253, 93, 242, 72, 49, 190, 245, 199, 191, 32, 245, 109, 115, 167, 214, 246, 214, 57, 214, 92, 26, 218, 209, 211, 148, 68, 209, 121, 88, 93, 216, 188, 82, 195, 216, 22, 158, 32, 223, 153, 16, 190, 223, 51, 220, 18, 205, 19, 5, 140, 205, 185, 201, 111, 202, 54, 71, 241, 202, 156, 139, 232, 195, 89, 129, 118, 195, 243, 77, 149, 196, 124, 195, 11, 196, 214, 15, 55, 71, 166, 122, 169, 71, 12, 182, 74, 64, 131, 56, 212, 64, 41, 244, 205, 73, 236, 254, 83, 73, 70, 50, 176, 78, 201, 188, 46, 78, 99, 112, 130, 92, 67, 169, 28, 92, 233, 101, 255, 91, 102, 235, 97, 91, 204, 39, 120, 82, 9, 45, 230, 82, 163, 225, 5, 85, 44, 111, 155, 85, 134, 163, 28, 118, 29, 6, 130, 118, 183, 202, 97, 113, 56, 68, 255, 113, 146, 136, 230, 120, 87, 130, 120, 120, 253, 78, 155, 127, 114, 192, 5, 127, 216, 12, 169, 109, 248, 213, 55, 109, 82, 25, 212, 106, 221, 151, 74, 106, 119, 91, 83, 99, 178, 81, 205, 99, 24, 157, 46, 100, 151, 19, 176, 100, 61, 223, 97, 37, 208, 131, 255, 37, 122, 79, 28, 34, 245, 193, 130, 34, 95, 13, 155, 43, 154, 7, 5, 43, 48, 203, 230, 44, 191, 69, 120, 44, 21, 137, 212, 62, 53, 80, 74, 62, 159, 156, 169, 57, 16, 18, 55, 57, 186, 222, 46, 48, 127, 212, 176, 48, 213, 24, 83, 55, 90, 150, 205, 55, 240, 90, 74, 20, 107, 255, 212, 20, 193, 51, 55, 19, 78, 189, 169, 19, 228, 113, 176, 26, 33, 123, 46, 26, 139, 183, 205, 29, 4, 57, 83, 29, 174, 245, 255, 15, 142, 44, 97, 15, 36, 224, 130, 8, 171, 110, 28, 8, 1, 162, 5, 1, 196, 168, 155, 1, 110, 100, 120, 6, 225, 234, 230, 6, 75, 38, 0, 0, 0, 0, 67, 20, 123, 23, 134, 40, 246, 46, 197, 60, 141, 57, 12, 81, 236, 93, 79, 69, 151, 74, 138, 121, 26, 115, 201, 109, 97, 100, 24, 162, 216, 187, 91, 182, 163, 172, 158, 138, 46, 149, 221, 158, 85, 130, 20, 243, 52, 230, 87, 231, 79, 241, 146, 219, 194, 200, 209, 207, 185, 223, 113, 66, 192, 172, 50, 86, 187, 187, 247, 106, 54, 130, 180, 126, 77, 149, 125, 19, 44, 241, 62, 7, 87, 230, 251, 59, 218, 223, 184, 47, 161, 200, 105, 224, 24, 23, 42, 244, 99, 0, 239, 200, 238, 57, 172, 220, 149, 46, 101, 177, 244, 74, 38, 165, 143, 93, 227, 153, 2, 100, 160, 141, 121, 115, 163, 130, 241, 130, 224, 150, 138, 149, 37, 170, 7, 172, 102, 190, 124, 187, 175, 211, 29, 223, 236, 199, 102, 200, 41, 251, 235, 241, 106, 239, 144, 230, 187, 32, 41, 57, 248, 52, 82, 46, 61, 8, 223, 23, 126, 28, 164, 0, 183, 113, 197, 100, 244, 101, 190, 115, 49, 89, 51, 74, 114, 77, 72, 93, 210, 192, 49, 46, 145, 212, 74, 57, 84, 232, 199, 0, 23, 252, 188, 23, 222, 145, 221, 115, 157, 133, 166, 100, 88, 185, 43, 93, 27, 173, 80, 74, 202, 98, 233, 149, 137, 118, 146, 130, 76, 74, 31, 187, 15, 94, 100, 172, 198, 51, 5, 200, 133, 39, 126, 223, 64, 27, 243, 230, 3, 15, 136, 241, 7, 3, 146, 222, 68, 23, 233, 201, 129, 43, 100, 240, 194, 63, 31, 231, 11, 82, 126, 131, 72, 70, 5, 148, 141, 122, 136, 173, 206, 110, 243, 186, 31, 161, 74, 101, 92, 181, 49, 114, 153, 137, 188, 75, 218, 157, 199, 92, 19, 240, 166, 56, 80, 228, 221, 47, 149, 216, 80, 22, 214, 204, 43, 1, 118, 65, 82, 114, 53, 85, 41, 101, 240, 105, 164, 92, 179, 125, 223, 75, 122, 16, 190, 47, 57, 4, 197, 56, 252, 56, 72, 1, 191, 44, 51, 22, 110, 227, 138, 201, 45, 247, 241, 222, 232, 203, 124, 231, 171, 223, 7, 240, 98, 178, 102, 148, 33, 166, 29, 131, 228, 154, 144, 186, 167, 142, 235, 173, 164, 129, 99, 92, 231, 149, 24, 75, 34, 169, 149, 114, 97, 189, 238, 101, 168, 208, 143, 1, 235, 196, 244, 22, 46, 248, 121, 47, 109, 236, 2, 56, 188, 35, 187, 231, 255, 55, 192, 240, 58, 11, 77, 201, 121, 31, 54, 222, 176, 114, 87, 186, 243, 102, 44, 173, 54, 90, 161, 148, 117, 78, 218, 131, 213, 195, 163, 240, 150, 215, 216, 231, 83, 235, 85, 222, 16, 255, 46, 201, 217, 146, 79, 173, 154, 134, 52, 186, 95, 186, 185, 131, 28, 174, 194, 148, 205, 97, 123, 75, 142, 117, 0, 92, 75, 73, 141, 101, 8, 93, 246, 114, 193, 48, 151, 22, 130, 36, 236, 1, 71, 24, 97, 56, 4, 12, 26, 47, 79, 0, 85, 102, 12, 20, 46, 113, 201, 40, 163, 72, 138, 60, 216, 95, 67, 81, 185, 59, 0, 69, 194, 44, 197, 121, 79, 21, 134, 109, 52, 2, 87, 162, 141, 221, 20, 182, 246, 202, 209, 138, 123, 243, 146, 158, 0, 228, 91, 243, 97, 128, 24, 231, 26, 151, 221, 219, 151, 174, 158, 207, 236, 185, 62, 66, 149, 202, 125, 86, 238, 221, 184, 106, 99, 228, 251, 126, 24, 243, 50, 19, 121, 151, 113, 7, 2, 128, 180, 59, 143, 185, 247, 47, 244, 174, 38, 224, 77, 113, 101, 244, 54, 102, 160, 200, 187, 95, 227, 220, 192, 72, 42, 177, 161, 44, 105, 165, 218, 59, 172, 153, 87, 2, 239, 141, 44, 21, 236, 130, 164, 228, 175, 150, 223, 243, 106, 170, 82, 202, 41, 190, 41, 221, 224, 211, 72, 185, 163, 199, 51, 174, 102, 251, 190, 151, 37, 239, 197, 128, 244, 32, 124, 95, 183, 52, 7, 72, 114, 8, 138, 113, 49, 28, 241, 102, 248, 113, 144, 2, 187, 101, 235, 21, 126, 89, 102, 44, 61, 77, 29, 59, 157, 192, 100, 72, 222, 212, 31, 95, 27, 232, 146, 102, 88, 252, 233, 113, 145, 145, 136, 21, 210, 133, 243, 2, 23, 185, 126, 59, 84, 173, 5, 44, 133, 98, 188, 243, 198, 118, 199, 228, 3, 74, 74, 221, 64, 94, 49, 202, 137, 51, 80, 174, 202, 39, 43, 185, 15, 27, 166, 128, 76, 15, 221, 151, 72, 3, 199, 184, 11, 23, 188, 175, 206, 43, 49, 150, 141, 63, 74, 129, 68, 82, 43, 229, 7, 70, 80, 242, 194, 122, 221, 203, 129, 110, 166, 220, 80, 161, 31, 3, 19, 181, 100, 20, 214, 137, 233, 45, 149, 157, 146, 58, 92, 240, 243, 94, 31, 228, 136, 73, 218, 216, 5, 112, 153, 204, 126, 103, 57, 65, 7, 20, 122, 85, 124, 3, 191, 105, 241, 58, 252, 125, 138, 45, 53, 16, 235, 73, 118, 4, 144, 94, 179, 56, 29, 103, 240, 44, 102, 112, 33, 227, 223, 175, 98, 247, 164, 184, 167, 203, 41, 129, 228, 223, 82, 150, 45, 178, 51, 242, 110, 166, 72, 229, 171, 154, 197, 220, 232, 142, 190, 203, 235, 129, 54, 58, 168, 149, 77, 45, 109, 169, 192, 20, 46, 189, 187, 3, 231, 208, 218, 103, 164, 196, 161, 112, 97, 248, 44, 73, 34, 236, 87, 94, 243, 35, 238, 129, 176, 55, 149, 150, 117, 11, 24, 175, 54, 31, 99, 184, 255, 114, 2, 220, 188, 102, 121, 203, 121, 90, 244, 242, 58, 78, 143, 229, 154, 195, 246, 150, 217, 215, 141, 129, 28, 235, 0, 184, 95, 255, 123, 175, 150, 146, 26, 203, 213, 134, 97, 220, 16, 186, 236, 229, 83, 174, 151, 242, 130, 97, 46, 45, 193, 117, 85, 58, 4, 73, 216, 3, 71, 93, 163, 20, 142, 48, 194, 112, 205, 36, 185, 103, 8, 24, 52, 94, 75, 12, 79, 73, 0, 0, 0, 0, 62, 107, 194, 239, 61, 208, 245, 4, 3, 187, 55, 235, 122, 160, 235, 9, 68, 203, 41, 230, 71, 112, 30, 13, 121, 27, 220, 226, 244, 64, 215, 19, 202, 43, 21, 252, 201, 144, 34, 23, 247, 251, 224, 248, 142, 224, 60, 26, 176, 139, 254, 245, 179, 48, 201, 30, 141, 91, 11, 241, 232, 129, 174, 39, 214, 234, 108, 200, 213, 81, 91, 35, 235, 58, 153, 204, 146, 33, 69, 46, 172, 74, 135, 193, 175, 241, 176, 42, 145, 154, 114, 197, 28, 193, 121, 52, 34, 170, 187, 219, 33, 17, 140, 48, 31, 122, 78, 223, 102, 97, 146, 61, 88, 10, 80, 210, 91, 177, 103, 57, 101, 218, 165, 214, 208, 3, 93, 79, 238, 104, 159, 160, 237, 211, 168, 75, 211, 184, 106, 164, 170, 163, 182, 70, 148, 200, 116, 169, 151, 115, 67, 66, 169, 24, 129, 173, 36, 67, 138, 92, 26, 40, 72, 179, 25, 147, 127, 88, 39, 248, 189, 183, 94, 227, 97, 85, 96, 136, 163, 186, 99, 51, 148, 81, 93, 88, 86, 190, 56, 130, 243, 104, 6, 233, 49, 135, 5, 82, 6, 108, 59, 57, 196, 131, 66, 34, 24, 97, 124, 73, 218, 142, 127, 242, 237, 101, 65, 153, 47, 138, 204, 194, 36, 123, 242, 169, 230, 148, 241, 18, 209, 127, 207, 121, 19, 144, 182, 98, 207, 114, 136, 9, 13, 157, 139, 178, 58, 118, 181, 217, 248, 153, 160, 7, 186, 158, 158, 108, 120, 113, 157, 215, 79, 154, 163, 188, 141, 117, 218, 167, 81, 151, 228, 204, 147, 120, 231, 119, 164, 147, 217, 28, 102, 124, 84, 71, 109, 141, 106, 44, 175, 98, 105, 151, 152, 137, 87, 252, 90, 102, 46, 231, 134, 132, 16, 140, 68, 107, 19, 55, 115, 128, 45, 92, 177, 111, 72, 134, 20, 185, 118, 237, 214, 86, 117, 86, 225, 189, 75, 61, 35, 82, 50, 38, 255, 176, 12, 77, 61, 95, 15, 246, 10, 180, 49, 157, 200, 91, 188, 198, 195, 170, 130, 173, 1, 69, 129, 22, 54, 174, 191, 125, 244, 65, 198, 102, 40, 163, 248, 13, 234, 76, 251, 182, 221, 167, 197, 221, 31, 72, 112, 4, 231, 209, 78, 111, 37, 62, 77, 212, 18, 213, 115, 191, 208, 58, 10, 164, 12, 216, 52, 207, 206, 55, 55, 116, 249, 220, 9, 31, 59, 51, 132, 68, 48, 194, 186, 47, 242, 45, 185, 148, 197, 198, 135, 255, 7, 41, 254, 228, 219, 203, 192, 143, 25, 36, 195, 52, 46, 207, 253, 95, 236, 32, 152, 133, 73, 246, 166, 238, 139, 25, 165, 85, 188, 242, 155, 62, 126, 29, 226, 37, 162, 255, 220, 78, 96, 16, 223, 245, 87, 251, 225, 158, 149, 20, 108, 197, 158, 229, 82, 174, 92, 10, 81, 21, 107, 225, 111, 126, 169, 14, 22, 101, 117, 236, 40, 14, 183, 3, 43, 181, 128, 232, 21, 222, 66, 7, 1, 9, 5, 230, 63, 98, 199, 9, 60, 217, 240, 226, 2, 178, 50, 13, 123, 169, 238, 239, 69, 194, 44, 0, 70, 121, 27, 235, 120, 18, 217, 4, 245, 73, 210, 245, 203, 34, 16, 26, 200, 153, 39, 241, 246, 242, 229, 30, 143, 233, 57, 252, 177, 130, 251, 19, 178, 57, 204, 248, 140, 82, 14, 23, 233, 136, 171, 193, 215, 227, 105, 46, 212, 88, 94, 197, 234, 51, 156, 42, 147, 40, 64, 200, 173, 67, 130, 39, 174, 248, 181, 204, 144, 147, 119, 35, 29, 200, 124, 210, 35, 163, 190, 61, 32, 24, 137, 214, 30, 115, 75, 57, 103, 104, 151, 219, 89, 3, 85, 52, 90, 184, 98, 223, 100, 211, 160, 48, 209, 10, 88, 169, 239, 97, 154, 70, 236, 218, 173, 173, 210, 177, 111, 66, 171, 170, 179, 160, 149, 193, 113, 79, 150, 122, 70, 164, 168, 17, 132, 75, 37, 74, 143, 186, 27, 33, 77, 85, 24, 154, 122, 190, 38, 241, 184, 81, 95, 234, 100, 179, 97, 129, 166, 92, 98, 58, 145, 183, 92, 81, 83, 88, 57, 139, 246, 142, 7, 224, 52, 97, 4, 91, 3, 138, 58, 48, 193, 101, 67, 43, 29, 135, 125, 64, 223, 104, 126, 251, 232, 131, 64, 144, 42, 108, 205, 203, 33, 157, 243, 160, 227, 114, 240, 27, 212, 153, 206, 112, 22, 118, 183, 107, 202, 148, 137, 0, 8, 123, 138, 187, 63, 144, 180, 208, 253, 127, 161, 14, 191, 120, 159, 101, 125, 151, 156, 222, 74, 124, 162, 181, 136, 147, 219, 174, 84, 113, 229, 197, 150, 158, 230, 126, 161, 117, 216, 21, 99, 154, 85, 78, 104, 107, 107, 37, 170, 132, 104, 158, 157, 111, 86, 245, 95, 128, 47, 238, 131, 98, 17, 133, 65, 141, 18, 62, 118, 102, 44, 85, 180, 137, 73, 143, 17, 95, 119, 228, 211, 176, 116, 95, 228, 91, 74, 52, 38, 180, 51, 47, 250, 86, 13, 68, 56, 185, 14, 255, 15, 82, 48, 148, 205, 189, 189, 207, 198, 76, 131, 164, 4, 163, 128, 31, 51, 72, 190, 116, 241, 167, 199, 111, 45, 69, 249, 4, 239, 170, 250, 191, 216, 65, 196, 212, 26, 174, 113, 13, 226, 55, 79, 102, 32, 216, 76, 221, 23, 51, 114, 182, 213, 220, 11, 173, 9, 62, 53, 198, 203, 209, 54, 125, 252, 58, 8, 22, 62, 213, 133, 77, 53, 36, 187, 38, 247, 203, 184, 157, 192, 32, 134, 246, 2, 207, 255, 237, 222, 45, 193, 134, 28, 194, 194, 61, 43, 41, 252, 86, 233, 198, 153, 140, 76, 16, 167, 231, 142, 255, 164, 92, 185, 20, 154, 55, 123, 251, 227, 44, 167, 25, 221, 71, 101, 246, 222, 252, 82, 29, 224, 151, 144, 242, 109, 204, 155, 3, 83, 167, 89, 236, 80, 28, 110, 7, 110, 119, 172, 232, 23, 108, 112, 10, 41, 7, 178, 229, 42, 188, 133, 14, 20, 215, 71, 225, 0, 0, 0, 0, 192, 223, 142, 193, 193, 185, 108, 88, 1, 102, 226, 153, 130, 115, 217, 176, 66, 172, 87, 113, 67, 202, 181, 232, 131, 21, 59, 41, 69, 225, 195, 186, 133, 62, 77, 123, 132, 88, 175, 226, 68, 135, 33, 35, 199, 146, 26, 10, 7, 77, 148, 203, 6, 43, 118, 82, 198, 244, 248, 147, 203, 196, 246, 174, 11, 27, 120, 111, 10, 125, 154, 246, 202, 162, 20, 55, 73, 183, 47, 30, 137, 104, 161, 223, 136, 14, 67, 70, 72, 209, 205, 135, 142, 37, 53, 20, 78, 250, 187, 213, 79, 156, 89, 76, 143, 67, 215, 141, 12, 86, 236, 164, 204, 137, 98, 101, 205, 239, 128, 252, 13, 48, 14, 61, 215, 143, 156, 134, 23, 80, 18, 71, 22, 54, 240, 222, 214, 233, 126, 31, 85, 252, 69, 54, 149, 35, 203, 247, 148, 69, 41, 110, 84, 154, 167, 175, 146, 110, 95, 60, 82, 177, 209, 253, 83, 215, 51, 100, 147, 8, 189, 165, 16, 29, 134, 140, 208, 194, 8, 77, 209, 164, 234, 212, 17, 123, 100, 21, 28, 75, 106, 40, 220, 148, 228, 233, 221, 242, 6, 112, 29, 45, 136, 177, 158, 56, 179, 152, 94, 231, 61, 89, 95, 129, 223, 192, 159, 94, 81, 1, 89, 170, 169, 146, 153, 117, 39, 83, 152, 19, 197, 202, 88, 204, 75, 11, 219, 217, 112, 34, 27, 6, 254, 227, 26, 96, 28, 122, 218, 191, 146, 187, 239, 25, 72, 214, 47, 198, 198, 23, 46, 160, 36, 142, 238, 127, 170, 79, 109, 106, 145, 102, 173, 181, 31, 167, 172, 211, 253, 62, 108, 12, 115, 255, 170, 248, 139, 108, 106, 39, 5, 173, 107, 65, 231, 52, 171, 158, 105, 245, 40, 139, 82, 220, 232, 84, 220, 29, 233, 50, 62, 132, 41, 237, 176, 69, 36, 221, 190, 120, 228, 2, 48, 185, 229, 100, 210, 32, 37, 187, 92, 225, 166, 174, 103, 200, 102, 113, 233, 9, 103, 23, 11, 144, 167, 200, 133, 81, 97, 60, 125, 194, 161, 227, 243, 3, 160, 133, 17, 154, 96, 90, 159, 91, 227, 79, 164, 114, 35, 144, 42, 179, 34, 246, 200, 42, 226, 41, 70, 235, 56, 150, 212, 80, 248, 73, 90, 145, 249, 47, 184, 8, 57, 240, 54, 201, 186, 229, 13, 224, 122, 58, 131, 33, 123, 92, 97, 184, 187, 131, 239, 121, 125, 119, 23, 234, 189, 168, 153, 43, 188, 206, 123, 178, 124, 17, 245, 115, 255, 4, 206, 90, 63, 219, 64, 155, 62, 189, 162, 2, 254, 98, 44, 195, 243, 82, 34, 254, 51, 141, 172, 63, 50, 235, 78, 166, 242, 52, 192, 103, 113, 33, 251, 78, 177, 254, 117, 143, 176, 152, 151, 22, 112, 71, 25, 215, 182, 179, 225, 68, 118, 108, 111, 133, 119, 10, 141, 28, 183, 213, 3, 221, 52, 192, 56, 244, 244, 31, 182, 53, 245, 121, 84, 172, 53, 166, 218, 109, 159, 53, 225, 119, 95, 234, 111, 182, 94, 140, 141, 47, 158, 83, 3, 238, 29, 70, 56, 199, 221, 153, 182, 6, 220, 255, 84, 159, 28, 32, 218, 94, 218, 212, 34, 205, 26, 11, 172, 12, 27, 109, 78, 149, 219, 178, 192, 84, 88, 167, 251, 125, 152, 120, 117, 188, 153, 30, 151, 37, 89, 193, 25, 228, 84, 241, 23, 217, 148, 46, 153, 24, 149, 72, 123, 129, 85, 151, 245, 64, 214, 130, 206, 105, 22, 93, 64, 168, 23, 59, 162, 49, 215, 228, 44, 240, 17, 16, 212, 99, 209, 207, 90, 162, 208, 169, 184, 59, 16, 118, 54, 250, 147, 99, 13, 211, 83, 188, 131, 18, 82, 218, 97, 139, 146, 5, 239, 74, 72, 186, 125, 241, 136, 101, 243, 48, 137, 3, 17, 169, 73, 220, 159, 104, 202, 201, 164, 65, 10, 22, 42, 128, 11, 112, 200, 25, 203, 175, 70, 216, 13, 91, 190, 75, 205, 132, 48, 138, 204, 226, 210, 19, 12, 61, 92, 210, 143, 40, 103, 251, 79, 247, 233, 58, 78, 145, 11, 163, 142, 78, 133, 98, 131, 126, 139, 95, 67, 161, 5, 158, 66, 199, 231, 7, 130, 24, 105, 198, 1, 13, 82, 239, 193, 210, 220, 46, 192, 180, 62, 183, 0, 107, 176, 118, 198, 159, 72, 229, 6, 64, 198, 36, 7, 38, 36, 189, 199, 249, 170, 124, 68, 236, 145, 85, 132, 51, 31, 148, 133, 85, 253, 13, 69, 138, 115, 204, 112, 44, 169, 161, 176, 243, 39, 96, 177, 149, 197, 249, 113, 74, 75, 56, 242, 95, 112, 17, 50, 128, 254, 208, 51, 230, 28, 73, 243, 57, 146, 136, 53, 205, 106, 27, 245, 18, 228, 218, 244, 116, 6, 67, 52, 171, 136, 130, 183, 190, 179, 171, 119, 97, 61, 106, 118, 7, 223, 243, 182, 216, 81, 50, 187, 232, 95, 15, 123, 55, 209, 206, 122, 81, 51, 87, 186, 142, 189, 150, 57, 155, 134, 191, 249, 68, 8, 126, 248, 34, 234, 231, 56, 253, 100, 38, 254, 9, 156, 181, 62, 214, 18, 116, 63, 176, 240, 237, 255, 111, 126, 44, 124, 122, 69, 5, 188, 165, 203, 196, 189, 195, 41, 93, 125, 28, 167, 156, 167, 163, 53, 39, 103, 124, 187, 230, 102, 26, 89, 127, 166, 197, 215, 190, 37, 208, 236, 151, 229, 15, 98, 86, 228, 105, 128, 207, 36, 182, 14, 14, 226, 66, 246, 157, 34, 157, 120, 92, 35, 251, 154, 197, 227, 36, 20, 4, 96, 49, 47, 45, 160, 238, 161, 236, 161, 136, 67, 117, 97, 87, 205, 180, 108, 103, 195, 137, 172, 184, 77, 72, 173, 222, 175, 209, 109, 1, 33, 16, 238, 20, 26, 57, 46, 203, 148, 248, 47, 173, 118, 97, 239, 114, 248, 160, 41, 134, 0, 51, 233, 89, 142, 242, 232, 63, 108, 107, 40, 224, 226, 170, 171, 245, 217, 131, 107, 42, 87, 66, 106, 76, 181, 219, 170, 147, 59, 26, 0, 0, 0, 0, 111, 76, 165, 155, 159, 158, 59, 236, 240, 210, 158, 119, 127, 59, 6, 3, 16, 119, 163, 152, 224, 165, 61, 239, 143, 233, 152, 116, 254, 118, 12, 6, 145, 58, 169, 157, 97, 232, 55, 234, 14, 164, 146, 113, 129, 77, 10, 5, 238, 1, 175, 158, 30, 211, 49, 233, 113, 159, 148, 114, 252, 237, 24, 12, 147, 161, 189, 151, 99, 115, 35, 224, 12, 63, 134, 123, 131, 214, 30, 15, 236, 154, 187, 148, 28, 72, 37, 227, 115, 4, 128, 120, 2, 155, 20, 10, 109, 215, 177, 145, 157, 5, 47, 230, 242, 73, 138, 125, 125, 160, 18, 9, 18, 236, 183, 146, 226, 62, 41, 229, 141, 114, 140, 126, 248, 219, 49, 24, 151, 151, 148, 131, 103, 69, 10, 244, 8, 9, 175, 111, 135, 224, 55, 27, 232, 172, 146, 128, 24, 126, 12, 247, 119, 50, 169, 108, 6, 173, 61, 30, 105, 225, 152, 133, 153, 51, 6, 242, 246, 127, 163, 105, 121, 150, 59, 29, 22, 218, 158, 134, 230, 8, 0, 241, 137, 68, 165, 106, 4, 54, 41, 20, 107, 122, 140, 143, 155, 168, 18, 248, 244, 228, 183, 99, 123, 13, 47, 23, 20, 65, 138, 140, 228, 147, 20, 251, 139, 223, 177, 96, 250, 64, 37, 18, 149, 12, 128, 137, 101, 222, 30, 254, 10, 146, 187, 101, 133, 123, 35, 17, 234, 55, 134, 138, 26, 229, 24, 253, 117, 169, 189, 102, 240, 183, 99, 48, 159, 251, 198, 171, 111, 41, 88, 220, 0, 101, 253, 71, 143, 140, 101, 51, 224, 192, 192, 168, 16, 18, 94, 223, 127, 94, 251, 68, 14, 193, 111, 54, 97, 141, 202, 173, 145, 95, 84, 218, 254, 19, 241, 65, 113, 250, 105, 53, 30, 182, 204, 174, 238, 100, 82, 217, 129, 40, 247, 66, 12, 90, 123, 60, 99, 22, 222, 167, 147, 196, 64, 208, 252, 136, 229, 75, 115, 97, 125, 63, 28, 45, 216, 164, 236, 255, 70, 211, 131, 179, 227, 72, 242, 44, 119, 58, 157, 96, 210, 161, 109, 178, 76, 214, 2, 254, 233, 77, 141, 23, 113, 57, 226, 91, 212, 162, 18, 137, 74, 213, 125, 197, 239, 78, 8, 108, 82, 40, 103, 32, 247, 179, 151, 242, 105, 196, 248, 190, 204, 95, 119, 87, 84, 43, 24, 27, 241, 176, 232, 201, 111, 199, 135, 133, 202, 92, 246, 26, 94, 46, 153, 86, 251, 181, 105, 132, 101, 194, 6, 200, 192, 89, 137, 33, 88, 45, 230, 109, 253, 182, 22, 191, 99, 193, 121, 243, 198, 90, 244, 129, 74, 36, 155, 205, 239, 191, 107, 31, 113, 200, 4, 83, 212, 83, 139, 186, 76, 39, 228, 246, 233, 188, 20, 36, 119, 203, 123, 104, 210, 80, 10, 247, 70, 34, 101, 187, 227, 185, 149, 105, 125, 206, 250, 37, 216, 85, 117, 204, 64, 33, 26, 128, 229, 186, 234, 82, 123, 205, 133, 30, 222, 86, 224, 111, 199, 96, 143, 35, 98, 251, 127, 241, 252, 140, 16, 189, 89, 23, 159, 84, 193, 99, 240, 24, 100, 248, 0, 202, 250, 143, 111, 134, 95, 20, 30, 25, 203, 102, 113, 85, 110, 253, 129, 135, 240, 138, 238, 203, 85, 17, 97, 34, 205, 101, 14, 110, 104, 254, 254, 188, 246, 137, 145, 240, 83, 18, 28, 130, 223, 108, 115, 206, 122, 247, 131, 28, 228, 128, 236, 80, 65, 27, 99, 185, 217, 111, 12, 245, 124, 244, 252, 39, 226, 131, 147, 107, 71, 24, 226, 244, 211, 106, 141, 184, 118, 241, 125, 106, 232, 134, 18, 38, 77, 29, 157, 207, 213, 105, 242, 131, 112, 242, 2, 81, 238, 133, 109, 29, 75, 30, 24, 180, 246, 120, 119, 248, 83, 227, 135, 42, 205, 148, 232, 102, 104, 15, 103, 143, 240, 123, 8, 195, 85, 224, 248, 17, 203, 151, 151, 93, 110, 12, 230, 194, 250, 126, 137, 142, 95, 229, 121, 92, 193, 146, 22, 16, 100, 9, 153, 249, 252, 125, 246, 181, 89, 230, 6, 103, 199, 145, 105, 43, 98, 10, 228, 89, 238, 116, 139, 21, 75, 239, 123, 199, 213, 152, 20, 139, 112, 3, 155, 98, 232, 119, 244, 46, 77, 236, 4, 252, 211, 155, 107, 176, 118, 0, 26, 47, 226, 114, 117, 99, 71, 233, 133, 177, 217, 158, 234, 253, 124, 5, 101, 20, 228, 113, 10, 88, 65, 234, 250, 138, 223, 157, 149, 198, 122, 6, 16, 216, 164, 80, 127, 148, 1, 203, 143, 70, 159, 188, 224, 10, 58, 39, 111, 227, 162, 83, 0, 175, 7, 200, 240, 125, 153, 191, 159, 49, 60, 36, 238, 174, 168, 86, 129, 226, 13, 205, 113, 48, 147, 186, 30, 124, 54, 33, 145, 149, 174, 85, 254, 217, 11, 206, 14, 11, 149, 185, 97, 71, 48, 34, 236, 53, 188, 92, 131, 121, 25, 199, 115, 171, 135, 176, 28, 231, 34, 43, 147, 14, 186, 95, 252, 66, 31, 196, 12, 144, 129, 179, 99, 220, 36, 40, 18, 67, 176, 90, 125, 15, 21, 193, 141, 221, 139, 182, 226, 145, 46, 45, 109, 120, 182, 89, 2, 52, 19, 194, 242, 230, 141, 181, 157, 170, 40, 46, 232, 3, 149, 72, 135, 79, 48, 211, 119, 157, 174, 164, 24, 209, 11, 63, 151, 56, 147, 75, 248, 116, 54, 208, 8, 166, 168, 167, 103, 234, 13, 60, 22, 117, 153, 78, 121, 57, 60, 213, 137, 235, 162, 162, 230, 167, 7, 57, 105, 78, 159, 77, 6, 2, 58, 214, 246, 208, 164, 161, 153, 156, 1, 58, 20, 238, 141, 68, 123, 162, 40, 223, 139, 112, 182, 168, 228, 60, 19, 51, 107, 213, 139, 71, 4, 153, 46, 220, 244, 75, 176, 171, 155, 7, 21, 48, 234, 152, 129, 66, 133, 212, 36, 217, 117, 6, 186, 174, 26, 74, 31, 53, 149, 163, 135, 65, 250, 239, 34, 218, 10, 61, 188, 173, 101, 113, 25, 54, 0, 0, 0, 0, 133, 217, 150, 221, 75, 181, 92, 96, 206, 108, 202, 189, 150, 106, 185, 192, 19, 179, 47, 29, 221, 223, 229, 160, 88, 6, 115, 125, 109, 211, 3, 90, 232, 10, 149, 135, 38, 102, 95, 58, 163, 191, 201, 231, 251, 185, 186, 154, 126, 96, 44, 71, 176, 12, 230, 250, 53, 213, 112, 39, 218, 166, 7, 180, 95, 127, 145, 105, 145, 19, 91, 212, 20, 202, 205, 9, 76, 204, 190, 116, 201, 21, 40, 169, 7, 121, 226, 20, 130, 160, 116, 201, 183, 117, 4, 238, 50, 172, 146, 51, 252, 192, 88, 142, 121, 25, 206, 83, 33, 31, 189, 46, 164, 198, 43, 243, 106, 170, 225, 78, 239, 115, 119, 147, 245, 75, 126, 179, 112, 146, 232, 110, 190, 254, 34, 211, 59, 39, 180, 14, 99, 33, 199, 115, 230, 248, 81, 174, 40, 148, 155, 19, 173, 77, 13, 206, 152, 152, 125, 233, 29, 65, 235, 52, 211, 45, 33, 137, 86, 244, 183, 84, 14, 242, 196, 41, 139, 43, 82, 244, 69, 71, 152, 73, 192, 158, 14, 148, 47, 237, 121, 7, 170, 52, 239, 218, 100, 88, 37, 103, 225, 129, 179, 186, 185, 135, 192, 199, 60, 94, 86, 26, 242, 50, 156, 167, 119, 235, 10, 122, 66, 62, 122, 93, 199, 231, 236, 128, 9, 139, 38, 61, 140, 82, 176, 224, 212, 84, 195, 157, 81, 141, 85, 64, 159, 225, 159, 253, 26, 56, 9, 32, 171, 145, 141, 189, 46, 72, 27, 96, 224, 36, 209, 221, 101, 253, 71, 0, 61, 251, 52, 125, 184, 34, 162, 160, 118, 78, 104, 29, 243, 151, 254, 192, 198, 66, 142, 231, 67, 155, 24, 58, 141, 247, 210, 135, 8, 46, 68, 90, 80, 40, 55, 39, 213, 241, 161, 250, 27, 157, 107, 71, 158, 68, 253, 154, 113, 55, 138, 9, 244, 238, 28, 212, 58, 130, 214, 105, 191, 91, 64, 180, 231, 93, 51, 201, 98, 132, 165, 20, 172, 232, 111, 169, 41, 49, 249, 116, 28, 228, 137, 83, 153, 61, 31, 142, 87, 81, 213, 51, 210, 136, 67, 238, 138, 142, 48, 147, 15, 87, 166, 78, 193, 59, 108, 243, 68, 226, 250, 46, 94, 218, 243, 14, 219, 3, 101, 211, 21, 111, 175, 110, 144, 182, 57, 179, 200, 176, 74, 206, 77, 105, 220, 19, 131, 5, 22, 174, 6, 220, 128, 115, 51, 9, 240, 84, 182, 208, 102, 137, 120, 188, 172, 52, 253, 101, 58, 233, 165, 99, 73, 148, 32, 186, 223, 73, 238, 214, 21, 244, 107, 15, 131, 41, 132, 124, 244, 186, 1, 165, 98, 103, 207, 201, 168, 218, 74, 16, 62, 7, 18, 22, 77, 122, 151, 207, 219, 167, 89, 163, 17, 26, 220, 122, 135, 199, 233, 175, 247, 224, 108, 118, 97, 61, 162, 26, 171, 128, 39, 195, 61, 93, 127, 197, 78, 32, 250, 28, 216, 253, 52, 112, 18, 64, 177, 169, 132, 157, 23, 37, 106, 160, 146, 252, 252, 125, 92, 144, 54, 192, 217, 73, 160, 29, 129, 79, 211, 96, 4, 150, 69, 189, 202, 250, 143, 0, 79, 35, 25, 221, 122, 246, 105, 250, 255, 47, 255, 39, 49, 67, 53, 154, 180, 154, 163, 71, 236, 156, 208, 58, 105, 69, 70, 231, 167, 41, 140, 90, 34, 240, 26, 135, 205, 131, 109, 20, 72, 90, 251, 201, 134, 54, 49, 116, 3, 239, 167, 169, 91, 233, 212, 212, 222, 48, 66, 9, 16, 92, 136, 180, 149, 133, 30, 105, 160, 80, 110, 78, 37, 137, 248, 147, 235, 229, 50, 46, 110, 60, 164, 243, 54, 58, 215, 142, 179, 227, 65, 83, 125, 143, 139, 238, 248, 86, 29, 51, 226, 110, 20, 19, 103, 183, 130, 206, 169, 219, 72, 115, 44, 2, 222, 174, 116, 4, 173, 211, 241, 221, 59, 14, 63, 177, 241, 179, 186, 104, 103, 110, 143, 189, 23, 73, 10, 100, 129, 148, 196, 8, 75, 41, 65, 209, 221, 244, 25, 215, 174, 137, 156, 14, 56, 84, 82, 98, 242, 233, 215, 187, 100, 52, 56, 200, 19, 167, 189, 17, 133, 122, 115, 125, 79, 199, 246, 164, 217, 26, 174, 162, 170, 103, 43, 123, 60, 186, 229, 23, 246, 7, 96, 206, 96, 218, 85, 27, 16, 253, 208, 194, 134, 32, 30, 174, 76, 157, 155, 119, 218, 64, 195, 113, 169, 61, 70, 168, 63, 224, 136, 196, 245, 93, 13, 29, 99, 128, 188, 180, 231, 29, 57, 109, 113, 192, 247, 1, 187, 125, 114, 216, 45, 160, 42, 222, 94, 221, 175, 7, 200, 0, 97, 107, 2, 189, 228, 178, 148, 96, 209, 103, 228, 71, 84, 190, 114, 154, 154, 210, 184, 39, 31, 11, 46, 250, 71, 13, 93, 135, 194, 212, 203, 90, 12, 184, 1, 231, 137, 97, 151, 58, 102, 18, 224, 169, 227, 203, 118, 116, 45, 167, 188, 201, 168, 126, 42, 20, 240, 120, 89, 105, 117, 161, 207, 180, 187, 205, 5, 9, 62, 20, 147, 212, 11, 193, 227, 243, 142, 24, 117, 46, 64, 116, 191, 147, 197, 173, 41, 78, 157, 171, 90, 51, 24, 114, 204, 238, 214, 30, 6, 83, 83, 199, 144, 142, 73, 255, 153, 174, 204, 38, 15, 115, 2, 74, 197, 206, 135, 147, 83, 19, 223, 149, 32, 110, 90, 76, 182, 179, 148, 32, 124, 14, 17, 249, 234, 211, 36, 44, 154, 244, 161, 245, 12, 41, 111, 153, 198, 148, 234, 64, 80, 73, 178, 70, 35, 52, 55, 159, 181, 233, 249, 243, 127, 84, 124, 42, 233, 137, 147, 89, 158, 26, 22, 128, 8, 199, 216, 236, 194, 122, 93, 53, 84, 167, 5, 51, 39, 218, 128, 234, 177, 7, 78, 134, 123, 186, 203, 95, 237, 103, 254, 138, 157, 64, 123, 83, 11, 157, 181, 63, 193, 32, 48, 230, 87, 253, 104, 224, 36, 128, 237, 57, 178, 93, 35, 85, 120, 224, 166, 140, 238, 61, 0, 0, 0, 0, 118, 225, 15, 157, 173, 196, 110, 225, 219, 37, 97, 124, 27, 143, 172, 25, 109, 110, 163, 132, 182, 75, 194, 248, 192, 170, 205, 101, 54, 30, 89, 51, 64, 255, 86, 174, 155, 218, 55, 210, 237, 59, 56, 79, 45, 145, 245, 42, 91, 112, 250, 183, 128, 85, 155, 203, 246, 180, 148, 86, 108, 60, 178, 102, 26, 221, 189, 251, 193, 248, 220, 135, 183, 25, 211, 26, 119, 179, 30, 127, 1, 82, 17, 226, 218, 119, 112, 158, 172, 150, 127, 3, 90, 34, 235, 85, 44, 195, 228, 200, 247, 230, 133, 180, 129, 7, 138, 41, 65, 173, 71, 76, 55, 76, 72, 209, 236, 105, 41, 173, 154, 136, 38, 48, 216, 120, 100, 205, 174, 153, 107, 80, 117, 188, 10, 44, 3, 93, 5, 177, 195, 247, 200, 212, 181, 22, 199, 73, 110, 51, 166, 53, 24, 210, 169, 168, 238, 102, 61, 254, 152, 135, 50, 99, 67, 162, 83, 31, 53, 67, 92, 130, 245, 233, 145, 231, 131, 8, 158, 122, 88, 45, 255, 6, 46, 204, 240, 155, 180, 68, 214, 171, 194, 165, 217, 54, 25, 128, 184, 74, 111, 97, 183, 215, 175, 203, 122, 178, 217, 42, 117, 47, 2, 15, 20, 83, 116, 238, 27, 206, 130, 90, 143, 152, 244, 187, 128, 5, 47, 158, 225, 121, 89, 127, 238, 228, 153, 213, 35, 129, 239, 52, 44, 28, 52, 17, 77, 96, 66, 240, 66, 253, 241, 247, 185, 65, 135, 22, 182, 220, 92, 51, 215, 160, 42, 210, 216, 61, 234, 120, 21, 88, 156, 153, 26, 197, 71, 188, 123, 185, 49, 93, 116, 36, 199, 233, 224, 114, 177, 8, 239, 239, 106, 45, 142, 147, 28, 204, 129, 14, 220, 102, 76, 107, 170, 135, 67, 246, 113, 162, 34, 138, 7, 67, 45, 23, 157, 203, 11, 39, 235, 42, 4, 186, 48, 15, 101, 198, 70, 238, 106, 91, 134, 68, 167, 62, 240, 165, 168, 163, 43, 128, 201, 223, 93, 97, 198, 66, 171, 213, 82, 20, 221, 52, 93, 137, 6, 17, 60, 245, 112, 240, 51, 104, 176, 90, 254, 13, 198, 187, 241, 144, 29, 158, 144, 236, 107, 127, 159, 113, 41, 143, 221, 140, 95, 110, 210, 17, 132, 75, 179, 109, 242, 170, 188, 240, 50, 0, 113, 149, 68, 225, 126, 8, 159, 196, 31, 116, 233, 37, 16, 233, 31, 145, 132, 191, 105, 112, 139, 34, 178, 85, 234, 94, 196, 180, 229, 195, 4, 30, 40, 166, 114, 255, 39, 59, 169, 218, 70, 71, 223, 59, 73, 218, 69, 179, 111, 234, 51, 82, 96, 119, 232, 119, 1, 11, 158, 150, 14, 150, 94, 60, 195, 243, 40, 221, 204, 110, 243, 248, 173, 18, 133, 25, 162, 143, 115, 173, 54, 217, 5, 76, 57, 68, 222, 105, 88, 56, 168, 136, 87, 165, 104, 34, 154, 192, 30, 195, 149, 93, 197, 230, 244, 33, 179, 7, 251, 188, 226, 239, 115, 131, 148, 14, 124, 30, 79, 43, 29, 98, 57, 202, 18, 255, 249, 96, 223, 154, 143, 129, 208, 7, 84, 164, 177, 123, 34, 69, 190, 230, 212, 241, 42, 176, 162, 16, 37, 45, 121, 53, 68, 81, 15, 212, 75, 204, 207, 126, 134, 169, 185, 159, 137, 52, 98, 186, 232, 72, 20, 91, 231, 213, 142, 211, 193, 229, 248, 50, 206, 120, 35, 23, 175, 4, 85, 246, 160, 153, 149, 92, 109, 252, 227, 189, 98, 97, 56, 152, 3, 29, 78, 121, 12, 128, 184, 205, 152, 214, 206, 44, 151, 75, 21, 9, 246, 55, 99, 232, 249, 170, 163, 66, 52, 207, 213, 163, 59, 82, 14, 134, 90, 46, 120, 103, 85, 179, 58, 151, 23, 78, 76, 118, 24, 211, 151, 83, 121, 175, 225, 178, 118, 50, 33, 24, 187, 87, 87, 249, 180, 202, 140, 220, 213, 182, 250, 61, 218, 43, 12, 137, 78, 125, 122, 104, 65, 224, 161, 77, 32, 156, 215, 172, 47, 1, 23, 6, 226, 100, 97, 231, 237, 249, 186, 194, 140, 133, 204, 35, 131, 24, 86, 171, 165, 40, 32, 74, 170, 181, 251, 111, 203, 201, 141, 142, 196, 84, 77, 36, 9, 49, 59, 197, 6, 172, 224, 224, 103, 208, 150, 1, 104, 77, 96, 181, 252, 27, 22, 84, 243, 134, 205, 113, 146, 250, 187, 144, 157, 103, 123, 58, 80, 2, 13, 219, 95, 159, 214, 254, 62, 227, 160, 31, 49, 126, 19, 24, 202, 194, 101, 249, 197, 95, 190, 220, 164, 35, 200, 61, 171, 190, 8, 151, 102, 219, 126, 118, 105, 70, 165, 83, 8, 58, 211, 178, 7, 167, 37, 6, 147, 241, 83, 231, 156, 108, 136, 194, 253, 16, 254, 35, 242, 141, 62, 137, 63, 232, 72, 104, 48, 117, 147, 77, 81, 9, 229, 172, 94, 148, 127, 36, 120, 164, 9, 197, 119, 57, 210, 224, 22, 69, 164, 1, 25, 216, 100, 171, 212, 189, 18, 74, 219, 32, 201, 111, 186, 92, 191, 142, 181, 193, 73, 58, 33, 151, 63, 219, 46, 10, 228, 254, 79, 118, 146, 31, 64, 235, 82, 181, 141, 142, 36, 84, 130, 19, 255, 113, 227, 111, 137, 144, 236, 242, 203, 96, 174, 15, 189, 129, 161, 146, 102, 164, 192, 238, 16, 69, 207, 115, 208, 239, 2, 22, 166, 14, 13, 139, 125, 43, 108, 247, 11, 202, 99, 106, 253, 126, 247, 60, 139, 159, 248, 161, 80, 186, 153, 221, 38, 91, 150, 64, 230, 241, 91, 37, 144, 16, 84, 184, 75, 53, 53, 196, 61, 212, 58, 89, 167, 92, 28, 105, 209, 189, 19, 244, 10, 152, 114, 136, 124, 121, 125, 21, 188, 211, 176, 112, 202, 50, 191, 237, 17, 23, 222, 145, 103, 246, 209, 12, 145, 66, 69, 90, 231, 163, 74, 199, 60, 134, 43, 187, 74, 103, 36, 38, 138, 205, 233, 67, 252, 44, 230, 222, 39, 9, 135, 162, 81, 232, 136, 63, 0, 0, 0, 0, 232, 219, 251, 185, 145, 177, 134, 168, 121, 106, 125, 17, 99, 101, 124, 138, 139, 190, 135, 51, 242, 212, 250, 34, 26, 15, 1, 155, 135, 204, 137, 207, 111, 23, 114, 118, 22, 125, 15, 103, 254, 166, 244, 222, 228, 169, 245, 69, 12, 114, 14, 252, 117, 24, 115, 237, 157, 195, 136, 84, 79, 159, 98, 68, 167, 68, 153, 253, 222, 46, 228, 236, 54, 245, 31, 85, 44, 250, 30, 206, 196, 33, 229, 119, 189, 75, 152, 102, 85, 144, 99, 223, 200, 83, 235, 139, 32, 136, 16, 50, 89, 226, 109, 35, 177, 57, 150, 154, 171, 54, 151, 1, 67, 237, 108, 184, 58, 135, 17, 169, 210, 92, 234, 16, 158, 62, 197, 136, 118, 229, 62, 49, 15, 143, 67, 32, 231, 84, 184, 153, 253, 91, 185, 2, 21, 128, 66, 187, 108, 234, 63, 170, 132, 49, 196, 19, 25, 242, 76, 71, 241, 41, 183, 254, 136, 67, 202, 239, 96, 152, 49, 86, 122, 151, 48, 205, 146, 76, 203, 116, 235, 38, 182, 101, 3, 253, 77, 220, 209, 161, 167, 204, 57, 122, 92, 117, 64, 16, 33, 100, 168, 203, 218, 221, 178, 196, 219, 70, 90, 31, 32, 255, 35, 117, 93, 238, 203, 174, 166, 87, 86, 109, 46, 3, 190, 182, 213, 186, 199, 220, 168, 171, 47, 7, 83, 18, 53, 8, 82, 137, 221, 211, 169, 48, 164, 185, 212, 33, 76, 98, 47, 152, 125, 123, 251, 202, 149, 160, 0, 115, 236, 202, 125, 98, 4, 17, 134, 219, 30, 30, 135, 64, 246, 197, 124, 249, 143, 175, 1, 232, 103, 116, 250, 81, 250, 183, 114, 5, 18, 108, 137, 188, 107, 6, 244, 173, 131, 221, 15, 20, 153, 210, 14, 143, 113, 9, 245, 54, 8, 99, 136, 39, 224, 184, 115, 158, 50, 228, 153, 142, 218, 63, 98, 55, 163, 85, 31, 38, 75, 142, 228, 159, 81, 129, 229, 4, 185, 90, 30, 189, 192, 48, 99, 172, 40, 235, 152, 21, 181, 40, 16, 65, 93, 243, 235, 248, 36, 153, 150, 233, 204, 66, 109, 80, 214, 77, 108, 203, 62, 150, 151, 114, 71, 252, 234, 99, 175, 39, 17, 218, 227, 69, 62, 66, 11, 158, 197, 251, 114, 244, 184, 234, 154, 47, 67, 83, 128, 32, 66, 200, 104, 251, 185, 113, 17, 145, 196, 96, 249, 74, 63, 217, 100, 137, 183, 141, 140, 82, 76, 52, 245, 56, 49, 37, 29, 227, 202, 156, 7, 236, 203, 7, 239, 55, 48, 190, 150, 93, 77, 175, 126, 134, 182, 22, 172, 218, 92, 6, 68, 1, 167, 191, 61, 107, 218, 174, 213, 176, 33, 23, 207, 191, 32, 140, 39, 100, 219, 53, 94, 14, 166, 36, 182, 213, 93, 157, 43, 22, 213, 201, 195, 205, 46, 112, 186, 167, 83, 97, 82, 124, 168, 216, 72, 115, 169, 67, 160, 168, 82, 250, 217, 194, 47, 235, 49, 25, 212, 82, 187, 240, 135, 78, 83, 43, 124, 247, 42, 65, 1, 230, 194, 154, 250, 95, 216, 149, 251, 196, 48, 78, 0, 125, 73, 36, 125, 108, 161, 255, 134, 213, 60, 60, 14, 129, 212, 231, 245, 56, 173, 141, 136, 41, 69, 86, 115, 144, 95, 89, 114, 11, 183, 130, 137, 178, 206, 232, 244, 163, 38, 51, 15, 26, 244, 111, 229, 10, 28, 180, 30, 179, 101, 222, 99, 162, 141, 5, 152, 27, 151, 10, 153, 128, 127, 209, 98, 57, 6, 187, 31, 40, 238, 96, 228, 145, 115, 163, 108, 197, 155, 120, 151, 124, 226, 18, 234, 109, 10, 201, 17, 212, 16, 198, 16, 79, 248, 29, 235, 246, 129, 119, 150, 231, 105, 172, 109, 94, 37, 206, 66, 198, 205, 21, 185, 127, 180, 127, 196, 110, 92, 164, 63, 215, 70, 171, 62, 76, 174, 112, 197, 245, 215, 26, 184, 228, 63, 193, 67, 93, 162, 2, 203, 9, 74, 217, 48, 176, 51, 179, 77, 161, 219, 104, 182, 24, 193, 103, 183, 131, 41, 188, 76, 58, 80, 214, 49, 43, 184, 13, 202, 146, 106, 81, 32, 130, 130, 138, 219, 59, 251, 224, 166, 42, 19, 59, 93, 147, 9, 52, 92, 8, 225, 239, 167, 177, 152, 133, 218, 160, 112, 94, 33, 25, 237, 157, 169, 77, 5, 70, 82, 244, 124, 44, 47, 229, 148, 247, 212, 92, 142, 248, 213, 199, 102, 35, 46, 126, 31, 73, 83, 111, 247, 146, 168, 214, 198, 139, 124, 132, 46, 80, 135, 61, 87, 58, 250, 44, 191, 225, 1, 149, 165, 238, 0, 14, 77, 53, 251, 183, 52, 95, 134, 166, 220, 132, 125, 31, 65, 71, 245, 75, 169, 156, 14, 242, 208, 246, 115, 227, 56, 45, 136, 90, 34, 34, 137, 193, 202, 249, 114, 120, 179, 147, 15, 105, 91, 72, 244, 208, 137, 20, 30, 192, 97, 207, 229, 121, 24, 165, 152, 104, 240, 126, 99, 209, 234, 113, 98, 74, 2, 170, 153, 243, 123, 192, 228, 226, 147, 27, 31, 91, 14, 216, 151, 15, 230, 3, 108, 182, 159, 105, 17, 167, 119, 178, 234, 30, 109, 189, 235, 133, 133, 102, 16, 60, 252, 12, 109, 45, 20, 215, 150, 148, 88, 181, 185, 12, 176, 110, 66, 181, 201, 4, 63, 164, 33, 223, 196, 29, 59, 208, 197, 134, 211, 11, 62, 63, 170, 97, 67, 46, 66, 186, 184, 151, 223, 121, 48, 195, 55, 162, 203, 122, 78, 200, 182, 107, 166, 19, 77, 210, 188, 28, 76, 73, 84, 199, 183, 240, 45, 173, 202, 225, 197, 118, 49, 88, 23, 42, 219, 72, 255, 241, 32, 241, 134, 155, 93, 224, 110, 64, 166, 89, 116, 79, 167, 194, 156, 148, 92, 123, 229, 254, 33, 106, 13, 37, 218, 211, 144, 230, 82, 135, 120, 61, 169, 62, 1, 87, 212, 47, 233, 140, 47, 150, 243, 131, 46, 13, 27, 88, 213, 180, 98, 50, 168, 165, 138, 233, 83, 28, 0, 0, 0, 0, 145, 145, 104, 174, 99, 37, 160, 135, 242, 180, 200, 41, 135, 76, 49, 212, 22, 221, 89, 122, 228, 105, 145, 83, 117, 248, 249, 253, 79, 159, 19, 115, 222, 14, 123, 221, 44, 186, 179, 244, 189, 43, 219, 90, 200, 211, 34, 167, 89, 66, 74, 9, 171, 246, 130, 32, 58, 103, 234, 142, 158, 62, 39, 230, 15, 175, 79, 72, 253, 27, 135, 97, 108, 138, 239, 207, 25, 114, 22, 50, 136, 227, 126, 156, 122, 87, 182, 181, 235, 198, 222, 27, 209, 161, 52, 149, 64, 48, 92, 59, 178, 132, 148, 18, 35, 21, 252, 188, 86, 237, 5, 65, 199, 124, 109, 239, 53, 200, 165, 198, 164, 89, 205, 104, 125, 123, 63, 23, 236, 234, 87, 185, 30, 94, 159, 144, 143, 207, 247, 62, 250, 55, 14, 195, 107, 166, 102, 109, 153, 18, 174, 68, 8, 131, 198, 234, 50, 228, 44, 100, 163, 117, 68, 202, 81, 193, 140, 227, 192, 80, 228, 77, 181, 168, 29, 176, 36, 57, 117, 30, 214, 141, 189, 55, 71, 28, 213, 153, 227, 69, 24, 241, 114, 212, 112, 95, 128, 96, 184, 118, 17, 241, 208, 216, 100, 9, 41, 37, 245, 152, 65, 139, 7, 44, 137, 162, 150, 189, 225, 12, 172, 218, 11, 130, 61, 75, 99, 44, 207, 255, 171, 5, 94, 110, 195, 171, 43, 150, 58, 86, 186, 7, 82, 248, 72, 179, 154, 209, 217, 34, 242, 127, 250, 246, 126, 46, 107, 103, 22, 128, 153, 211, 222, 169, 8, 66, 182, 7, 125, 186, 79, 250, 236, 43, 39, 84, 30, 159, 239, 125, 143, 14, 135, 211, 181, 105, 109, 93, 36, 248, 5, 243, 214, 76, 205, 218, 71, 221, 165, 116, 50, 37, 92, 137, 163, 180, 52, 39, 81, 0, 252, 14, 192, 145, 148, 160, 100, 200, 89, 200, 245, 89, 49, 102, 7, 237, 249, 79, 150, 124, 145, 225, 227, 132, 104, 28, 114, 21, 0, 178, 128, 161, 200, 155, 17, 48, 160, 53, 43, 87, 74, 187, 186, 198, 34, 21, 72, 114, 234, 60, 217, 227, 130, 146, 172, 27, 123, 111, 61, 138, 19, 193, 207, 62, 219, 232, 94, 175, 179, 70, 135, 141, 65, 57, 22, 28, 41, 151, 228, 168, 225, 190, 117, 57, 137, 16, 0, 193, 112, 237, 145, 80, 24, 67, 99, 228, 208, 106, 242, 117, 184, 196, 200, 18, 82, 74, 89, 131, 58, 228, 171, 55, 242, 205, 58, 166, 154, 99, 79, 94, 99, 158, 222, 207, 11, 48, 44, 123, 195, 25, 189, 234, 171, 183, 25, 179, 102, 223, 136, 34, 14, 113, 122, 150, 198, 88, 235, 7, 174, 246, 158, 255, 87, 11, 15, 110, 63, 165, 253, 218, 247, 140, 108, 75, 159, 34, 86, 44, 117, 172, 199, 189, 29, 2, 53, 9, 213, 43, 164, 152, 189, 133, 209, 96, 68, 120, 64, 241, 44, 214, 178, 69, 228, 255, 35, 212, 140, 81, 244, 237, 253, 92, 101, 124, 149, 242, 151, 200, 93, 219, 6, 89, 53, 117, 115, 161, 204, 136, 226, 48, 164, 38, 16, 132, 108, 15, 129, 21, 4, 161, 187, 114, 238, 47, 42, 227, 134, 129, 216, 87, 78, 168, 73, 198, 38, 6, 60, 62, 223, 251, 173, 175, 183, 85, 95, 27, 127, 124, 206, 138, 23, 210, 106, 211, 218, 186, 251, 66, 178, 20, 9, 246, 122, 61, 152, 103, 18, 147, 237, 159, 235, 110, 124, 14, 131, 192, 142, 186, 75, 233, 31, 43, 35, 71, 37, 76, 201, 201, 180, 221, 161, 103, 70, 105, 105, 78, 215, 248, 1, 224, 162, 0, 248, 29, 51, 145, 144, 179, 193, 37, 88, 154, 80, 180, 48, 52, 137, 150, 194, 75, 24, 7, 170, 229, 234, 179, 98, 204, 123, 34, 10, 98, 14, 218, 243, 159, 159, 75, 155, 49, 109, 255, 83, 24, 252, 110, 59, 182, 198, 9, 209, 56, 87, 152, 185, 150, 165, 44, 113, 191, 52, 189, 25, 17, 65, 69, 224, 236, 208, 212, 136, 66, 34, 96, 64, 107, 179, 241, 40, 197, 23, 168, 229, 173, 134, 57, 141, 3, 116, 141, 69, 42, 229, 28, 45, 132, 144, 228, 212, 121, 1, 117, 188, 215, 243, 193, 116, 254, 98, 80, 28, 80, 88, 55, 246, 222, 201, 166, 158, 112, 59, 18, 86, 89, 170, 131, 62, 247, 223, 123, 199, 10, 78, 234, 175, 164, 188, 94, 103, 141, 45, 207, 15, 35, 14, 27, 131, 114, 159, 138, 235, 220, 109, 62, 35, 245, 252, 175, 75, 91, 137, 87, 178, 166, 24, 198, 218, 8, 234, 114, 18, 33, 123, 227, 122, 143, 65, 132, 144, 1, 208, 21, 248, 175, 34, 161, 48, 134, 179, 48, 88, 40, 198, 200, 161, 213, 87, 89, 201, 123, 165, 237, 1, 82, 52, 124, 105, 252, 144, 37, 164, 148, 1, 180, 204, 58, 243, 0, 4, 19, 98, 145, 108, 189, 23, 105, 149, 64, 134, 248, 253, 238, 116, 76, 53, 199, 229, 221, 93, 105, 223, 186, 183, 231, 78, 43, 223, 73, 188, 159, 23, 96, 45, 14, 127, 206, 88, 246, 134, 51, 201, 103, 238, 157, 59, 211, 38, 180, 170, 66, 78, 26, 115, 96, 188, 101, 226, 241, 212, 203, 16, 69, 28, 226, 129, 212, 116, 76, 244, 44, 141, 177, 101, 189, 229, 31, 151, 9, 45, 54, 6, 152, 69, 152, 60, 255, 175, 22, 173, 110, 199, 184, 95, 218, 15, 145, 206, 75, 103, 63, 187, 179, 158, 194, 42, 34, 246, 108, 216, 150, 62, 69, 73, 7, 86, 235, 237, 94, 155, 131, 124, 207, 243, 45, 142, 123, 59, 4, 31, 234, 83, 170, 106, 18, 170, 87, 251, 131, 194, 249, 9, 55, 10, 208, 152, 166, 98, 126, 162, 193, 136, 240, 51, 80, 224, 94, 193, 228, 40, 119, 80, 117, 64, 217, 37, 141, 185, 36, 180, 28, 209, 138, 70, 168, 25, 163, 215, 57, 113, 13, 43, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 44, 0, 0, 0, 45, 0, 0, 0, 46, 0, 0, 0, 43, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 47, 0, 0, 0, 99, 97, 108, 108, 101, 100, 32, 96, 79, 112, 116, 105, 111, 110, 58, 58, 117, 110, 119, 114, 97, 112, 40, 41, 96, 32, 111, 110, 32, 97, 32, 96, 78, 111, 110, 101, 96, 32, 118, 97, 108, 117, 101, 0, 68, 94, 16, 0, 0, 0, 0, 0, 117, 110, 101, 120, 112, 101, 99, 116, 101, 100, 32, 101, 110, 100, 32, 111, 102, 32, 102, 105, 108, 101, 111, 116, 104, 101, 114, 32, 111, 115, 32, 101, 114, 114, 111, 114, 111, 112, 101, 114, 97, 116, 105, 111, 110, 32, 105, 110, 116, 101, 114, 114, 117, 112, 116, 101, 100, 119, 114, 105, 116, 101, 32, 122, 101, 114, 111, 116, 105, 109, 101, 100, 32, 111, 117, 116, 105, 110, 118, 97, 108, 105, 100, 32, 100, 97, 116, 97, 105, 110, 118, 97, 108, 105, 100, 32, 105, 110, 112, 117, 116, 32, 112, 97, 114, 97, 109, 101, 116, 101, 114, 111, 112, 101, 114, 97, 116, 105, 111, 110, 32, 119, 111, 117, 108, 100, 32, 98, 108, 111, 99, 107, 101, 110, 116, 105, 116, 121, 32, 97, 108, 114, 101, 97, 100, 121, 32, 101, 120, 105, 115, 116, 115, 98, 114, 111, 107, 101, 110, 32, 112, 105, 112, 101, 97, 100, 100, 114, 101, 115, 115, 32, 110, 111, 116, 32, 97, 118, 97, 105, 108, 97, 98, 108, 101, 97, 100, 100, 114, 101, 115, 115, 32, 105, 110, 32, 117, 115, 101, 110, 111, 116, 32, 99, 111, 110, 110, 101, 99, 116, 101, 100, 99, 111, 110, 110, 101, 99, 116, 105, 111, 110, 32, 97, 98, 111, 114, 116, 101, 100, 99, 111, 110, 110, 101, 99, 116, 105, 111, 110, 32, 114, 101, 115, 101, 116, 99, 111, 110, 110, 101, 99, 116, 105, 111, 110, 32, 114, 101, 102, 117, 115, 101, 100, 112, 101, 114, 109, 105, 115, 115, 105, 111, 110, 32, 100, 101, 110, 105, 101, 100, 101, 110, 116, 105, 116, 121, 32, 110, 111, 116, 32, 102, 111, 117, 110, 100, 32, 40, 111, 115, 32, 101, 114, 114, 111, 114, 32, 41, 0, 0, 0, 68, 94, 16, 0, 0, 0, 0, 0, 177, 95, 16, 0, 11, 0, 0, 0, 188, 95, 16, 0, 1, 0, 0, 0, 108, 105, 98, 114, 97, 114, 121, 47, 115, 116, 100, 47, 115, 114, 99, 47, 112, 97, 110, 105, 99, 107, 105, 110, 103, 46, 114, 115, 216, 95, 16, 0, 28, 0, 0, 0, 235, 1, 0, 0, 31, 0, 0, 0, 216, 95, 16, 0, 28, 0, 0, 0, 236, 1, 0, 0, 30, 0, 0, 0, 48, 0, 0, 0, 16, 0, 0, 0, 4, 0, 0, 0, 49, 0, 0, 0, 50, 0, 0, 0, 43, 0, 0, 0, 8, 0, 0, 0, 4, 0, 0, 0, 51, 0, 0, 0, 52, 0, 0, 0, 53, 0, 0, 0, 12, 0, 0, 0, 4, 0, 0, 0, 54, 0, 0, 0, 43, 0, 0, 0, 8, 0, 0, 0, 4, 0, 0, 0, 55, 0, 0, 0, 85, 110, 101, 120, 112, 101, 99, 116, 101, 100, 69, 111, 102, 79, 116, 104, 101, 114, 73, 110, 116, 101, 114, 114, 117, 112, 116, 101, 100, 87, 114, 105, 116, 101, 90, 101, 114, 111, 84, 105, 109, 101, 100, 79, 117, 116, 73, 110, 118, 97, 108, 105, 100, 68, 97, 116, 97, 73, 110, 118, 97, 108, 105, 100, 73, 110, 112, 117, 116, 87, 111, 117, 108, 100, 66, 108, 111, 99, 107, 65, 108, 114, 101, 97, 100, 121, 69, 120, 105, 115, 116, 115, 66, 114, 111, 107, 101, 110, 80, 105, 112, 101, 65, 100, 100, 114, 78, 111, 116, 65, 118, 97, 105, 108, 97, 98, 108, 101, 65, 100, 100, 114, 73, 110, 85, 115, 101, 78, 111, 116, 67, 111, 110, 110, 101, 99, 116, 101, 100, 67, 111, 110, 110, 101, 99, 116, 105, 111, 110, 65, 98, 111, 114, 116, 101, 100, 67, 111, 110, 110, 101, 99, 116, 105, 111, 110, 82, 101, 115, 101, 116, 67, 111, 110, 110, 101, 99, 116, 105, 111, 110, 82, 101, 102, 117, 115, 101, 100, 80, 101, 114, 109, 105, 115, 115, 105, 111, 110, 68, 101, 110, 105, 101, 100, 78, 111, 116, 70, 111, 117, 110, 100, 111, 112, 101, 114, 97, 116, 105, 111, 110, 32, 115, 117, 99, 99, 101, 115, 115, 102, 117, 108, 56, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 57, 0, 0, 0, 58, 0, 0, 0, 59, 0, 0, 0, 47, 114, 117, 115, 116, 99, 47, 50, 102, 100, 55, 51, 102, 97, 98, 101, 52, 54, 57, 51, 53, 55, 97, 49, 50, 99, 50, 99, 57, 55, 52, 99, 49, 52, 48, 102, 54, 55, 101, 55, 99, 100, 100, 55, 54, 100, 48, 47, 108, 105, 98, 114, 97, 114, 121, 47, 99, 111, 114, 101, 47, 115, 114, 99, 47, 102, 109, 116, 47, 109, 111, 100, 46, 114, 115, 0, 92, 97, 16, 0, 75, 0, 0, 0, 90, 1, 0, 0, 19, 0, 0, 0, 56, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 60, 0, 0, 0, 97, 32, 102, 111, 114, 109, 97, 116, 116, 105, 110, 103, 32, 116, 114, 97, 105, 116, 32, 105, 109, 112, 108, 101, 109, 101, 110, 116, 97, 116, 105, 111, 110, 32, 114, 101, 116, 117, 114, 110, 101, 100, 32, 97, 110, 32, 101, 114, 114, 111, 114, 108, 105, 98, 114, 97, 114, 121, 47, 97, 108, 108, 111, 99, 47, 115, 114, 99, 47, 102, 109, 116, 46, 114, 115, 0, 251, 97, 16, 0, 24, 0, 0, 0, 66, 2, 0, 0, 28, 0, 0, 0, 108, 105, 98, 114, 97, 114, 121, 47, 97, 108, 108, 111, 99, 47, 115, 114, 99, 47, 114, 97, 119, 95, 118, 101, 99, 46, 114, 115, 99, 97, 112, 97, 99, 105, 116, 121, 32, 111, 118, 101, 114, 102, 108, 111, 119, 0, 0, 0, 36, 98, 16, 0, 28, 0, 0, 0, 24, 2, 0, 0, 5, 0, 0, 0, 96, 46, 46, 0, 101, 98, 16, 0, 2, 0, 0, 0, 99, 97, 108, 108, 101, 100, 32, 96, 79, 112, 116, 105, 111, 110, 58, 58, 117, 110, 119, 114, 97, 112, 40, 41, 96, 32, 111, 110, 32, 97, 32, 96, 78, 111, 110, 101, 96, 32, 118, 97, 108, 117, 101, 58, 32, 0, 0, 0, 100, 98, 16, 0, 0, 0, 0, 0, 155, 98, 16, 0, 2, 0, 0, 0, 67, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 68, 0, 0, 0, 105, 110, 100, 101, 120, 32, 111, 117, 116, 32, 111, 102, 32, 98, 111, 117, 110, 100, 115, 58, 32, 116, 104, 101, 32, 108, 101, 110, 32, 105, 115, 32, 32, 98, 117, 116, 32, 116, 104, 101, 32, 105, 110, 100, 101, 120, 32, 105, 115, 32, 0, 0, 192, 98, 16, 0, 32, 0, 0, 0, 224, 98, 16, 0, 18, 0, 0, 0, 108, 105, 98, 114, 97, 114, 121, 47, 99, 111, 114, 101, 47, 115, 114, 99, 47, 102, 109, 116, 47, 98, 117, 105, 108, 100, 101, 114, 115, 46, 114, 115, 67, 0, 0, 0, 12, 0, 0, 0, 4, 0, 0, 0, 69, 0, 0, 0, 70, 0, 0, 0, 71, 0, 0, 0, 32, 32, 32, 32, 4, 99, 16, 0, 32, 0, 0, 0, 50, 0, 0, 0, 33, 0, 0, 0, 4, 99, 16, 0, 32, 0, 0, 0, 51, 0, 0, 0, 18, 0, 0, 0, 32, 123, 10, 44, 10, 44, 32, 32, 123, 32, 125, 32, 125, 40, 10, 40, 44, 41, 108, 105, 98, 114, 97, 114, 121, 47, 99, 111, 114, 101, 47, 115, 114, 99, 47, 102, 109, 116, 47, 110, 117, 109, 46, 114, 115, 0, 0, 0, 114, 99, 16, 0, 27, 0, 0, 0, 101, 0, 0, 0, 20, 0, 0, 0, 48, 120, 48, 48, 48, 49, 48, 50, 48, 51, 48, 52, 48, 53, 48, 54, 48, 55, 48, 56, 48, 57, 49, 48, 49, 49, 49, 50, 49, 51, 49, 52, 49, 53, 49, 54, 49, 55, 49, 56, 49, 57, 50, 48, 50, 49, 50, 50, 50, 51, 50, 52, 50, 53, 50, 54, 50, 55, 50, 56, 50, 57, 51, 48, 51, 49, 51, 50, 51, 51, 51, 52, 51, 53, 51, 54, 51, 55, 51, 56, 51, 57, 52, 48, 52, 49, 52, 50, 52, 51, 52, 52, 52, 53, 52, 54, 52, 55, 52, 56, 52, 57, 53, 48, 53, 49, 53, 50, 53, 51, 53, 52, 53, 53, 53, 54, 53, 55, 53, 56, 53, 57, 54, 48, 54, 49, 54, 50, 54, 51, 54, 52, 54, 53, 54, 54, 54, 55, 54, 56, 54, 57, 55, 48, 55, 49, 55, 50, 55, 51, 55, 52, 55, 53, 55, 54, 55, 55, 55, 56, 55, 57, 56, 48, 56, 49, 56, 50, 56, 51, 56, 52, 56, 53, 56, 54, 56, 55, 56, 56, 56, 57, 57, 48, 57, 49, 57, 50, 57, 51, 57, 52, 57, 53, 57, 54, 57, 55, 57, 56, 57, 57, 0, 0, 67, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 72, 0, 0, 0, 73, 0, 0, 0, 74, 0, 0, 0, 108, 105, 98, 114, 97, 114, 121, 47, 99, 111, 114, 101, 47, 115, 114, 99, 47, 102, 109, 116, 47, 109, 111, 100, 46, 114, 115, 0, 132, 100, 16, 0, 27, 0, 0, 0, 16, 8, 0, 0, 30, 0, 0, 0, 132, 100, 16, 0, 27, 0, 0, 0, 23, 8, 0, 0, 22, 0, 0, 0, 108, 105, 98, 114, 97, 114, 121, 47, 99, 111, 114, 101, 47, 115, 114, 99, 47, 115, 108, 105, 99, 101, 47, 109, 101, 109, 99, 104, 114, 46, 114, 115, 192, 100, 16, 0, 32, 0, 0, 0, 90, 0, 0, 0, 5, 0, 0, 0, 114, 97, 110, 103, 101, 32, 115, 116, 97, 114, 116, 32, 105, 110, 100, 101, 120, 32, 32, 111, 117, 116, 32, 111, 102, 32, 114, 97, 110, 103, 101, 32, 102, 111, 114, 32, 115, 108, 105, 99, 101, 32, 111, 102, 32, 108, 101, 110, 103, 116, 104, 32, 240, 100, 16, 0, 18, 0, 0, 0, 2, 101, 16, 0, 34, 0, 0, 0, 114, 97, 110, 103, 101, 32, 101, 110, 100, 32, 105, 110, 100, 101, 120, 32, 52, 101, 16, 0, 16, 0, 0, 0, 2, 101, 16, 0, 34, 0, 0, 0, 115, 108, 105, 99, 101, 32, 105, 110, 100, 101, 120, 32, 115, 116, 97, 114, 116, 115, 32, 97, 116, 32, 32, 98, 117, 116, 32, 101, 110, 100, 115, 32, 97, 116, 32, 0, 84, 101, 16, 0, 22, 0, 0, 0, 106, 101, 16, 0, 13, 0, 0, 0, 91, 46, 46, 46, 93, 98, 121, 116, 101, 32, 105, 110, 100, 101, 120, 32, 32, 105, 115, 32, 111, 117, 116, 32, 111, 102, 32, 98, 111, 117, 110, 100, 115, 32, 111, 102, 32, 96, 0, 0, 141, 101, 16, 0, 11, 0, 0, 0, 152, 101, 16, 0, 22, 0, 0, 0, 100, 98, 16, 0, 1, 0, 0, 0, 98, 101, 103, 105, 110, 32, 60, 61, 32, 101, 110, 100, 32, 40, 32, 60, 61, 32, 41, 32, 119, 104, 101, 110, 32, 115, 108, 105, 99, 105, 110, 103, 32, 96, 0, 0, 200, 101, 16, 0, 14, 0, 0, 0, 214, 101, 16, 0, 4, 0, 0, 0, 218, 101, 16, 0, 16, 0, 0, 0, 100, 98, 16, 0, 1, 0, 0, 0, 32, 105, 115, 32, 110, 111, 116, 32, 97, 32, 99, 104, 97, 114, 32, 98, 111, 117, 110, 100, 97, 114, 121, 59, 32, 105, 116, 32, 105, 115, 32, 105, 110, 115, 105, 100, 101, 32, 32, 40, 98, 121, 116, 101, 115, 32, 41, 32, 111, 102, 32, 96, 141, 101, 16, 0, 11, 0, 0, 0, 12, 102, 16, 0, 38, 0, 0, 0, 50, 102, 16, 0, 8, 0, 0, 0, 58, 102, 16, 0, 6, 0, 0, 0, 100, 98, 16, 0, 1, 0, 0, 0, 108, 105, 98, 114, 97, 114, 121, 47, 99, 111, 114, 101, 47, 115, 114, 99, 47, 117, 110, 105, 99, 111, 100, 101, 47, 112, 114, 105, 110, 116, 97, 98, 108, 101, 46, 114, 115, 0, 0, 0, 104, 102, 16, 0, 37, 0, 0, 0, 10, 0, 0, 0, 28, 0, 0, 0, 104, 102, 16, 0, 37, 0, 0, 0, 26, 0, 0, 0, 54, 0, 0, 0, 0, 1, 3, 5, 5, 6, 6, 3, 7, 6, 8, 8, 9, 17, 10, 28, 11, 25, 12, 20, 13, 16, 14, 13, 15, 4, 16, 3, 18, 18, 19, 9, 22, 1, 23, 5, 24, 2, 25, 3, 26, 7, 28, 2, 29, 1, 31, 22, 32, 3, 43, 3, 44, 2, 45, 11, 46, 1, 48, 3, 49, 2, 50, 1, 167, 2, 169, 2, 170, 4, 171, 8, 250, 2, 251, 5, 253, 4, 254, 3, 255, 9, 173, 120, 121, 139, 141, 162, 48, 87, 88, 139, 140, 144, 28, 29, 221, 14, 15, 75, 76, 251, 252, 46, 47, 63, 92, 93, 95, 181, 226, 132, 141, 142, 145, 146, 169, 177, 186, 187, 197, 198, 201, 202, 222, 228, 229, 255, 0, 4, 17, 18, 41, 49, 52, 55, 58, 59, 61, 73, 74, 93, 132, 142, 146, 169, 177, 180, 186, 187, 198, 202, 206, 207, 228, 229, 0, 4, 13, 14, 17, 18, 41, 49, 52, 58, 59, 69, 70, 73, 74, 94, 100, 101, 132, 145, 155, 157, 201, 206, 207, 13, 17, 41, 69, 73, 87, 100, 101, 141, 145, 169, 180, 186, 187, 197, 201, 223, 228, 229, 240, 13, 17, 69, 73, 100, 101, 128, 132, 178, 188, 190, 191, 213, 215, 240, 241, 131, 133, 139, 164, 166, 190, 191, 197, 199, 206, 207, 218, 219, 72, 152, 189, 205, 198, 206, 207, 73, 78, 79, 87, 89, 94, 95, 137, 142, 143, 177, 182, 183, 191, 193, 198, 199, 215, 17, 22, 23, 91, 92, 246, 247, 254, 255, 128, 13, 109, 113, 222, 223, 14, 15, 31, 110, 111, 28, 29, 95, 125, 126, 174, 175, 187, 188, 250, 22, 23, 30, 31, 70, 71, 78, 79, 88, 90, 92, 94, 126, 127, 181, 197, 212, 213, 220, 240, 241, 245, 114, 115, 143, 116, 117, 150, 47, 95, 38, 46, 47, 167, 175, 183, 191, 199, 207, 215, 223, 154, 64, 151, 152, 48, 143, 31, 192, 193, 206, 255, 78, 79, 90, 91, 7, 8, 15, 16, 39, 47, 238, 239, 110, 111, 55, 61, 63, 66, 69, 144, 145, 254, 255, 83, 103, 117, 200, 201, 208, 209, 216, 217, 231, 254, 255, 0, 32, 95, 34, 130, 223, 4, 130, 68, 8, 27, 4, 6, 17, 129, 172, 14, 128, 171, 53, 40, 11, 128, 224, 3, 25, 8, 1, 4, 47, 4, 52, 4, 7, 3, 1, 7, 6, 7, 17, 10, 80, 15, 18, 7, 85, 7, 3, 4, 28, 10, 9, 3, 8, 3, 7, 3, 2, 3, 3, 3, 12, 4, 5, 3, 11, 6, 1, 14, 21, 5, 58, 3, 17, 7, 6, 5, 16, 7, 87, 7, 2, 7, 21, 13, 80, 4, 67, 3, 45, 3, 1, 4, 17, 6, 15, 12, 58, 4, 29, 37, 95, 32, 109, 4, 106, 37, 128, 200, 5, 130, 176, 3, 26, 6, 130, 253, 3, 89, 7, 21, 11, 23, 9, 20, 12, 20, 12, 106, 6, 10, 6, 26, 6, 89, 7, 43, 5, 70, 10, 44, 4, 12, 4, 1, 3, 49, 11, 44, 4, 26, 6, 11, 3, 128, 172, 6, 10, 6, 33, 63, 76, 4, 45, 3, 116, 8, 60, 3, 15, 3, 60, 7, 56, 8, 43, 5, 130, 255, 17, 24, 8, 47, 17, 45, 3, 32, 16, 33, 15, 128, 140, 4, 130, 151, 25, 11, 21, 136, 148, 5, 47, 5, 59, 7, 2, 14, 24, 9, 128, 179, 45, 116, 12, 128, 214, 26, 12, 5, 128, 255, 5, 128, 223, 12, 238, 13, 3, 132, 141, 3, 55, 9, 129, 92, 20, 128, 184, 8, 128, 203, 42, 56, 3, 10, 6, 56, 8, 70, 8, 12, 6, 116, 11, 30, 3, 90, 4, 89, 9, 128, 131, 24, 28, 10, 22, 9, 76, 4, 128, 138, 6, 171, 164, 12, 23, 4, 49, 161, 4, 129, 218, 38, 7, 12, 5, 5, 128, 165, 17, 129, 109, 16, 120, 40, 42, 6, 76, 4, 128, 141, 4, 128, 190, 3, 27, 3, 15, 13, 0, 6, 1, 1, 3, 1, 4, 2, 8, 8, 9, 2, 10, 5, 11, 2, 14, 4, 16, 1, 17, 2, 18, 5, 19, 17, 20, 1, 21, 2, 23, 2, 25, 13, 28, 5, 29, 8, 36, 1, 106, 3, 107, 2, 188, 2, 209, 2, 212, 12, 213, 9, 214, 2, 215, 2, 218, 1, 224, 5, 225, 2, 232, 2, 238, 32, 240, 4, 248, 2, 249, 2, 250, 2, 251, 1, 12, 39, 59, 62, 78, 79, 143, 158, 158, 159, 6, 7, 9, 54, 61, 62, 86, 243, 208, 209, 4, 20, 24, 54, 55, 86, 87, 127, 170, 174, 175, 189, 53, 224, 18, 135, 137, 142, 158, 4, 13, 14, 17, 18, 41, 49, 52, 58, 69, 70, 73, 74, 78, 79, 100, 101, 92, 182, 183, 27, 28, 7, 8, 10, 11, 20, 23, 54, 57, 58, 168, 169, 216, 217, 9, 55, 144, 145, 168, 7, 10, 59, 62, 102, 105, 143, 146, 111, 95, 238, 239, 90, 98, 154, 155, 39, 40, 85, 157, 160, 161, 163, 164, 167, 168, 173, 186, 188, 196, 6, 11, 12, 21, 29, 58, 63, 69, 81, 166, 167, 204, 205, 160, 7, 25, 26, 34, 37, 62, 63, 197, 198, 4, 32, 35, 37, 38, 40, 51, 56, 58, 72, 74, 76, 80, 83, 85, 86, 88, 90, 92, 94, 96, 99, 101, 102, 107, 115, 120, 125, 127, 138, 164, 170, 175, 176, 192, 208, 174, 175, 121, 204, 110, 111, 147, 94, 34, 123, 5, 3, 4, 45, 3, 102, 3, 1, 47, 46, 128, 130, 29, 3, 49, 15, 28, 4, 36, 9, 30, 5, 43, 5, 68, 4, 14, 42, 128, 170, 6, 36, 4, 36, 4, 40, 8, 52, 11, 1, 128, 144, 129, 55, 9, 22, 10, 8, 128, 152, 57, 3, 99, 8, 9, 48, 22, 5, 33, 3, 27, 5, 1, 64, 56, 4, 75, 5, 47, 4, 10, 7, 9, 7, 64, 32, 39, 4, 12, 9, 54, 3, 58, 5, 26, 7, 4, 12, 7, 80, 73, 55, 51, 13, 51, 7, 46, 8, 10, 129, 38, 82, 78, 40, 8, 42, 86, 28, 20, 23, 9, 78, 4, 30, 15, 67, 14, 25, 7, 10, 6, 72, 8, 39, 9, 117, 11, 63, 65, 42, 6, 59, 5, 10, 6, 81, 6, 1, 5, 16, 3, 5, 128, 139, 98, 30, 72, 8, 10, 128, 166, 94, 34, 69, 11, 10, 6, 13, 19, 57, 7, 10, 54, 44, 4, 16, 128, 192, 60, 100, 83, 12, 72, 9, 10, 70, 69, 27, 72, 8, 83, 29, 57, 129, 7, 70, 10, 29, 3, 71, 73, 55, 3, 14, 8, 10, 6, 57, 7, 10, 129, 54, 25, 128, 183, 1, 15, 50, 13, 131, 155, 102, 117, 11, 128, 196, 138, 188, 132, 47, 143, 209, 130, 71, 161, 185, 130, 57, 7, 42, 4, 2, 96, 38, 10, 70, 10, 40, 5, 19, 130, 176, 91, 101, 75, 4, 57, 7, 17, 64, 5, 11, 2, 14, 151, 248, 8, 132, 214, 42, 9, 162, 247, 129, 31, 49, 3, 17, 4, 8, 129, 140, 137, 4, 107, 5, 13, 3, 9, 7, 16, 147, 96, 128, 246, 10, 115, 8, 110, 23, 70, 128, 154, 20, 12, 87, 9, 25, 128, 135, 129, 71, 3, 133, 66, 15, 21, 133, 80, 43, 128, 213, 45, 3, 26, 4, 2, 129, 112, 58, 5, 1, 133, 0, 128, 215, 41, 76, 4, 10, 4, 2, 131, 17, 68, 76, 61, 128, 194, 60, 6, 1, 4, 85, 5, 27, 52, 2, 129, 14, 44, 4, 100, 12, 86, 10, 128, 174, 56, 29, 13, 44, 4, 9, 7, 2, 14, 6, 128, 154, 131, 216, 8, 13, 3, 13, 3, 116, 12, 89, 7, 12, 20, 12, 4, 56, 8, 10, 6, 40, 8, 34, 78, 129, 84, 12, 21, 3, 3, 5, 7, 9, 25, 7, 7, 9, 3, 13, 7, 41, 128, 203, 37, 10, 132, 6, 108, 105, 98, 114, 97, 114, 121, 47, 99, 111, 114, 101, 47, 115, 114, 99, 47, 117, 110, 105, 99, 111, 100, 101, 47, 117, 110, 105, 99, 111, 100, 101, 95, 100, 97, 116, 97, 46, 114, 115, 0, 247, 107, 16, 0, 40, 0, 0, 0, 75, 0, 0, 0, 40, 0, 0, 0, 247, 107, 16, 0, 40, 0, 0, 0, 87, 0, 0, 0, 22, 0, 0, 0, 247, 107, 16, 0, 40, 0, 0, 0, 82, 0, 0, 0, 62, 0, 0, 0, 69, 114, 114, 111, 114, 0, 0, 0, 0, 3, 0, 0, 131, 4, 32, 0, 145, 5, 96, 0, 93, 19, 160, 0, 18, 23, 160, 30, 12, 32, 224, 30, 239, 44, 32, 43, 42, 48, 160, 43, 111, 166, 96, 44, 2, 168, 224, 44, 30, 251, 224, 45, 0, 254, 160, 53, 158, 255, 224, 53, 253, 1, 97, 54, 1, 10, 161, 54, 36, 13, 97, 55, 171, 14, 225, 56, 47, 24, 33, 57, 48, 28, 97, 70, 243, 30, 161, 74, 240, 106, 97, 78, 79, 111, 161, 78, 157, 188, 33, 79, 101, 209, 225, 79, 0, 218, 33, 80, 0, 224, 225, 81, 48, 225, 97, 83, 236, 226, 161, 84, 208, 232, 225, 84, 32, 0, 46, 85, 240, 1, 191, 85, 0, 112, 0, 7, 0, 45, 1, 1, 1, 2, 1, 2, 1, 1, 72, 11, 48, 21, 16, 1, 101, 7, 2, 6, 2, 2, 1, 4, 35, 1, 30, 27, 91, 11, 58, 9, 9, 1, 24, 4, 1, 9, 1, 3, 1, 5, 43, 3, 119, 15, 1, 32, 55, 1, 1, 1, 4, 8, 4, 1, 3, 7, 10, 2, 29, 1, 58, 1, 1, 1, 2, 4, 8, 1, 9, 1, 10, 2, 26, 1, 2, 2, 57, 1, 4, 2, 4, 2, 2, 3, 3, 1, 30, 2, 3, 1, 11, 2, 57, 1, 4, 5, 1, 2, 4, 1, 20, 2, 22, 6, 1, 1, 58, 1, 1, 2, 1, 4, 8, 1, 7, 3, 10, 2, 30, 1, 59, 1, 1, 1, 12, 1, 9, 1, 40, 1, 3, 1, 57, 3, 5, 3, 1, 4, 7, 2, 11, 2, 29, 1, 58, 1, 2, 1, 2, 1, 3, 1, 5, 2, 7, 2, 11, 2, 28, 2, 57, 2, 1, 1, 2, 4, 8, 1, 9, 1, 10, 2, 29, 1, 72, 1, 4, 1, 2, 3, 1, 1, 8, 1, 81, 1, 2, 7, 12, 8, 98, 1, 2, 9, 11, 6, 74, 2, 27, 1, 1, 1, 1, 1, 55, 14, 1, 5, 1, 2, 5, 11, 1, 36, 9, 1, 102, 4, 1, 6, 1, 2, 2, 2, 25, 2, 4, 3, 16, 4, 13, 1, 2, 2, 6, 1, 15, 1, 0, 3, 0, 3, 29, 3, 29, 2, 30, 2, 64, 2, 1, 7, 8, 1, 2, 11, 9, 1, 45, 3, 119, 2, 34, 1, 118, 3, 4, 2, 9, 1, 6, 3, 219, 2, 2, 1, 58, 1, 1, 7, 1, 1, 1, 1, 2, 8, 6, 10, 2, 1, 48, 17, 63, 4, 48, 7, 1, 1, 5, 1, 40, 9, 12, 2, 32, 4, 2, 2, 1, 3, 56, 1, 1, 2, 3, 1, 1, 3, 58, 8, 2, 2, 152, 3, 1, 13, 1, 7, 4, 1, 6, 1, 3, 2, 198, 58, 1, 5, 0, 1, 195, 33, 0, 3, 141, 1, 96, 32, 0, 6, 105, 2, 0, 4, 1, 10, 32, 2, 80, 2, 0, 1, 3, 1, 4, 1, 25, 2, 5, 1, 151, 2, 26, 18, 13, 1, 38, 8, 25, 11, 46, 3, 48, 1, 2, 4, 2, 2, 39, 1, 67, 6, 2, 2, 2, 2, 12, 1, 8, 1, 47, 1, 51, 1, 1, 3, 2, 2, 5, 2, 1, 1, 42, 2, 8, 1, 238, 1, 2, 1, 4, 1, 0, 1, 0, 16, 16, 16, 0, 2, 0, 1, 226, 1, 149, 5, 0, 3, 1, 2, 5, 4, 40, 3, 4, 1, 165, 2, 0, 4, 0, 2, 153, 11, 176, 1, 54, 15, 56, 3, 49, 4, 2, 2, 69, 3, 36, 5, 1, 8, 62, 1, 12, 2, 52, 9, 10, 4, 2, 1, 95, 3, 2, 1, 1, 2, 6, 1, 160, 1, 3, 8, 21, 2, 57, 2, 1, 1, 1, 1, 22, 1, 14, 7, 3, 5, 195, 8, 2, 3, 1, 1, 23, 1, 81, 1, 2, 6, 1, 1, 2, 1, 1, 2, 1, 2, 235, 1, 2, 4, 6, 2, 1, 2, 27, 2, 85, 8, 2, 1, 1, 2, 106, 1, 1, 1, 2, 6, 1, 1, 101, 3, 2, 4, 1, 5, 0, 9, 1, 2, 245, 1, 10, 2, 1, 1, 4, 1, 144, 4, 2, 2, 4, 1, 32, 10, 40, 6, 2, 4, 8, 1, 9, 6, 2, 3, 46, 13, 1, 2, 0, 7, 1, 6, 1, 1, 82, 22, 2, 7, 1, 2, 1, 2, 122, 6, 3, 1, 1, 2, 1, 7, 1, 1, 72, 2, 3, 1, 1, 1, 0, 2, 0, 5, 59, 7, 0, 1, 63, 4, 81, 1, 0, 2, 0, 1, 1, 3, 4, 5, 8, 8, 2, 7, 30, 4, 148, 3, 0, 55, 4, 50, 8, 1, 14, 1, 22, 5, 1, 15, 0, 7, 1, 17, 2, 7, 1, 2, 1, 5, 0, 7, 0, 4, 0, 7, 109, 7, 0, 96, 128, 240, 0, 123, 9, 112, 114, 111, 100, 117, 99, 101, 114, 115, 2, 8, 108, 97, 110, 103, 117, 97, 103, 101, 1, 4, 82, 117, 115, 116, 0, 12, 112, 114, 111, 99, 101, 115, 115, 101, 100, 45, 98, 121, 3, 5, 114, 117, 115, 116, 99, 29, 49, 46, 53, 49, 46, 48, 32, 40, 50, 102, 100, 55, 51, 102, 97, 98, 101, 32, 50, 48, 50, 49, 45, 48, 51, 45, 50, 51, 41, 6, 119, 97, 108, 114, 117, 115, 6, 48, 46, 49, 56, 46, 48, 12, 119, 97, 115, 109, 45, 98, 105, 110, 100, 103, 101, 110, 18, 48, 46, 50, 46, 55, 51, 32, 40, 51, 99, 101, 102, 101, 50, 99, 56, 50, 41]);
let wasm;
const getWASM = async () => {
  if (wasm)
    return wasm;
  return wasm = await init(wasm$2);
};
var wasm$1 = wasm;
var mod = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  get wasm() {
    return wasm;
  },
  getWASM,
  "default": wasm$1,
  deflate,
  inflate,
  gzip,
  gunzip,
  zlib,
  unzlib
}, Symbol.toStringTag, { value: "Module" }));
export { ALIAS, ALIAS_NAMESPACE, ALIAS_RESOLVE, AnsiBuffer, CACHE, CACHE_NAME, CDN, CDN_NAMESPACE, CDN_RESOLVE, DEFAULT_CDN_HOST, DefaultConfig, DeprecatedAPIs, EMPTY_EXPORT, ESCAPE_TO_COLOR, EXTERNAL, EXTERNALS_NAMESPACE, EasyDefaultConfig, ExternalPackages, FileSystem, HTTP, HTTP_NAMESPACE, HTTP_RESOLVE, PolyfillKeys, PolyfillMap, RESOLVE_EXTENSIONS, SEARCH_EXTENSIONS, SEP, SEP_PATTERN, bail$1 as bail, basename, mod$1 as brotli, debounce, decode, deepAssign, deepDiff, deepEqual, delimiter, mod as denoflate, dirname, encode, extname, fetchAssets, fetchPkg, format, fromFileUrl, getCDNOrigin, getCDNStyle, getCDNUrl, getFile, getPackage, getPackages, getPureImportPath, getRegistryURL, getRequest, getResolvedPath, globToRegExp, htmlEscape, inferLoader, isAbsolute, isAlias, isBareImport, isExternal, isFileSchema, isGlob, isObject, isPrimitive, isRelativePath, isValidKey, join, joinGlobs, loop$1 as loop, mod$2 as lz4, newRequest, normalize, normalizeGlob, parse$1 as parse, parseConfig, parseShareQuery, parseTreeshakeExports, mod$3 as path, posix, relative, render, resolve$1 as resolve, resolveImports, searchFile, sep, setFile, stripSchema, toFileUrl, toName$1 as toName, toNamespacedPath, treeshake, urlJoin, virtualfs };
//# sourceMappingURL=index.mjs.map
