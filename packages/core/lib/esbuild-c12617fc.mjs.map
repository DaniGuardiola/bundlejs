{"version":3,"file":"esbuild-c12617fc.mjs","sources":["../../../node_modules/.pnpm/esbuild-wasm@0.14.49/node_modules/esbuild-wasm/lib/browser.js"],"sourcesContent":["\"use strict\";\n(module=>{\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar __async = (__this, __arguments, generator) => {\n  return new Promise((resolve, reject) => {\n    var fulfilled = (value) => {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var rejected = (value) => {\n      try {\n        step(generator.throw(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);\n    step((generator = generator.apply(__this, __arguments)).next());\n  });\n};\n\n// lib/npm/browser.ts\nvar browser_exports = {};\n__export(browser_exports, {\n  analyzeMetafile: () => analyzeMetafile,\n  analyzeMetafileSync: () => analyzeMetafileSync,\n  build: () => build,\n  buildSync: () => buildSync,\n  default: () => browser_default,\n  formatMessages: () => formatMessages,\n  formatMessagesSync: () => formatMessagesSync,\n  initialize: () => initialize,\n  serve: () => serve,\n  transform: () => transform,\n  transformSync: () => transformSync,\n  version: () => version\n});\nmodule.exports = __toCommonJS(browser_exports);\n\n// lib/shared/stdio_protocol.ts\nfunction encodePacket(packet) {\n  let visit = (value) => {\n    if (value === null) {\n      bb.write8(0);\n    } else if (typeof value === \"boolean\") {\n      bb.write8(1);\n      bb.write8(+value);\n    } else if (typeof value === \"number\") {\n      bb.write8(2);\n      bb.write32(value | 0);\n    } else if (typeof value === \"string\") {\n      bb.write8(3);\n      bb.write(encodeUTF8(value));\n    } else if (value instanceof Uint8Array) {\n      bb.write8(4);\n      bb.write(value);\n    } else if (value instanceof Array) {\n      bb.write8(5);\n      bb.write32(value.length);\n      for (let item of value) {\n        visit(item);\n      }\n    } else {\n      let keys = Object.keys(value);\n      bb.write8(6);\n      bb.write32(keys.length);\n      for (let key of keys) {\n        bb.write(encodeUTF8(key));\n        visit(value[key]);\n      }\n    }\n  };\n  let bb = new ByteBuffer();\n  bb.write32(0);\n  bb.write32(packet.id << 1 | +!packet.isRequest);\n  visit(packet.value);\n  writeUInt32LE(bb.buf, bb.len - 4, 0);\n  return bb.buf.subarray(0, bb.len);\n}\nfunction decodePacket(bytes) {\n  let visit = () => {\n    switch (bb.read8()) {\n      case 0:\n        return null;\n      case 1:\n        return !!bb.read8();\n      case 2:\n        return bb.read32();\n      case 3:\n        return decodeUTF8(bb.read());\n      case 4:\n        return bb.read();\n      case 5: {\n        let count = bb.read32();\n        let value2 = [];\n        for (let i = 0; i < count; i++) {\n          value2.push(visit());\n        }\n        return value2;\n      }\n      case 6: {\n        let count = bb.read32();\n        let value2 = {};\n        for (let i = 0; i < count; i++) {\n          value2[decodeUTF8(bb.read())] = visit();\n        }\n        return value2;\n      }\n      default:\n        throw new Error(\"Invalid packet\");\n    }\n  };\n  let bb = new ByteBuffer(bytes);\n  let id = bb.read32();\n  let isRequest = (id & 1) === 0;\n  id >>>= 1;\n  let value = visit();\n  if (bb.ptr !== bytes.length) {\n    throw new Error(\"Invalid packet\");\n  }\n  return { id, isRequest, value };\n}\nvar ByteBuffer = class {\n  constructor(buf = new Uint8Array(1024)) {\n    this.buf = buf;\n    this.len = 0;\n    this.ptr = 0;\n  }\n  _write(delta) {\n    if (this.len + delta > this.buf.length) {\n      let clone = new Uint8Array((this.len + delta) * 2);\n      clone.set(this.buf);\n      this.buf = clone;\n    }\n    this.len += delta;\n    return this.len - delta;\n  }\n  write8(value) {\n    let offset = this._write(1);\n    this.buf[offset] = value;\n  }\n  write32(value) {\n    let offset = this._write(4);\n    writeUInt32LE(this.buf, value, offset);\n  }\n  write(bytes) {\n    let offset = this._write(4 + bytes.length);\n    writeUInt32LE(this.buf, bytes.length, offset);\n    this.buf.set(bytes, offset + 4);\n  }\n  _read(delta) {\n    if (this.ptr + delta > this.buf.length) {\n      throw new Error(\"Invalid packet\");\n    }\n    this.ptr += delta;\n    return this.ptr - delta;\n  }\n  read8() {\n    return this.buf[this._read(1)];\n  }\n  read32() {\n    return readUInt32LE(this.buf, this._read(4));\n  }\n  read() {\n    let length = this.read32();\n    let bytes = new Uint8Array(length);\n    let ptr = this._read(bytes.length);\n    bytes.set(this.buf.subarray(ptr, ptr + length));\n    return bytes;\n  }\n};\nvar encodeUTF8;\nvar decodeUTF8;\nif (typeof TextEncoder !== \"undefined\" && typeof TextDecoder !== \"undefined\") {\n  let encoder = new TextEncoder();\n  let decoder = new TextDecoder();\n  encodeUTF8 = (text) => encoder.encode(text);\n  decodeUTF8 = (bytes) => decoder.decode(bytes);\n} else if (typeof Buffer !== \"undefined\") {\n  encodeUTF8 = (text) => {\n    let buffer = Buffer.from(text);\n    if (!(buffer instanceof Uint8Array)) {\n      buffer = new Uint8Array(buffer);\n    }\n    return buffer;\n  };\n  decodeUTF8 = (bytes) => {\n    let { buffer, byteOffset, byteLength } = bytes;\n    return Buffer.from(buffer, byteOffset, byteLength).toString();\n  };\n} else {\n  throw new Error(\"No UTF-8 codec found\");\n}\nfunction readUInt32LE(buffer, offset) {\n  return buffer[offset++] | buffer[offset++] << 8 | buffer[offset++] << 16 | buffer[offset++] << 24;\n}\nfunction writeUInt32LE(buffer, value, offset) {\n  buffer[offset++] = value;\n  buffer[offset++] = value >> 8;\n  buffer[offset++] = value >> 16;\n  buffer[offset++] = value >> 24;\n}\n\n// lib/shared/common.ts\nfunction validateTarget(target) {\n  target += \"\";\n  if (target.indexOf(\",\") >= 0)\n    throw new Error(`Invalid target: ${target}`);\n  return target;\n}\nvar canBeAnything = () => null;\nvar mustBeBoolean = (value) => typeof value === \"boolean\" ? null : \"a boolean\";\nvar mustBeBooleanOrObject = (value) => typeof value === \"boolean\" || typeof value === \"object\" && !Array.isArray(value) ? null : \"a boolean or an object\";\nvar mustBeString = (value) => typeof value === \"string\" ? null : \"a string\";\nvar mustBeRegExp = (value) => value instanceof RegExp ? null : \"a RegExp object\";\nvar mustBeInteger = (value) => typeof value === \"number\" && value === (value | 0) ? null : \"an integer\";\nvar mustBeFunction = (value) => typeof value === \"function\" ? null : \"a function\";\nvar mustBeArray = (value) => Array.isArray(value) ? null : \"an array\";\nvar mustBeObject = (value) => typeof value === \"object\" && value !== null && !Array.isArray(value) ? null : \"an object\";\nvar mustBeWebAssemblyModule = (value) => value instanceof WebAssembly.Module ? null : \"a WebAssembly.Module\";\nvar mustBeArrayOrRecord = (value) => typeof value === \"object\" && value !== null ? null : \"an array or an object\";\nvar mustBeObjectOrNull = (value) => typeof value === \"object\" && !Array.isArray(value) ? null : \"an object or null\";\nvar mustBeStringOrBoolean = (value) => typeof value === \"string\" || typeof value === \"boolean\" ? null : \"a string or a boolean\";\nvar mustBeStringOrObject = (value) => typeof value === \"string\" || typeof value === \"object\" && value !== null && !Array.isArray(value) ? null : \"a string or an object\";\nvar mustBeStringOrArray = (value) => typeof value === \"string\" || Array.isArray(value) ? null : \"a string or an array\";\nvar mustBeStringOrUint8Array = (value) => typeof value === \"string\" || value instanceof Uint8Array ? null : \"a string or a Uint8Array\";\nfunction getFlag(object, keys, key, mustBeFn) {\n  let value = object[key];\n  keys[key + \"\"] = true;\n  if (value === void 0)\n    return void 0;\n  let mustBe = mustBeFn(value);\n  if (mustBe !== null)\n    throw new Error(`\"${key}\" must be ${mustBe}`);\n  return value;\n}\nfunction checkForInvalidFlags(object, keys, where) {\n  for (let key in object) {\n    if (!(key in keys)) {\n      throw new Error(`Invalid option ${where}: \"${key}\"`);\n    }\n  }\n}\nfunction validateInitializeOptions(options) {\n  let keys = /* @__PURE__ */ Object.create(null);\n  let wasmURL = getFlag(options, keys, \"wasmURL\", mustBeString);\n  let wasmModule = getFlag(options, keys, \"wasmModule\", mustBeWebAssemblyModule);\n  let worker = getFlag(options, keys, \"worker\", mustBeBoolean);\n  checkForInvalidFlags(options, keys, \"in initialize() call\");\n  return {\n    wasmURL,\n    wasmModule,\n    worker\n  };\n}\nfunction validateMangleCache(mangleCache) {\n  let validated;\n  if (mangleCache !== void 0) {\n    validated = /* @__PURE__ */ Object.create(null);\n    for (let key of Object.keys(mangleCache)) {\n      let value = mangleCache[key];\n      if (typeof value === \"string\" || value === false) {\n        validated[key] = value;\n      } else {\n        throw new Error(`Expected ${JSON.stringify(key)} in mangle cache to map to either a string or false`);\n      }\n    }\n  }\n  return validated;\n}\nfunction pushLogFlags(flags, options, keys, isTTY, logLevelDefault) {\n  let color = getFlag(options, keys, \"color\", mustBeBoolean);\n  let logLevel = getFlag(options, keys, \"logLevel\", mustBeString);\n  let logLimit = getFlag(options, keys, \"logLimit\", mustBeInteger);\n  if (color !== void 0)\n    flags.push(`--color=${color}`);\n  else if (isTTY)\n    flags.push(`--color=true`);\n  flags.push(`--log-level=${logLevel || logLevelDefault}`);\n  flags.push(`--log-limit=${logLimit || 0}`);\n}\nfunction pushCommonFlags(flags, options, keys) {\n  let legalComments = getFlag(options, keys, \"legalComments\", mustBeString);\n  let sourceRoot = getFlag(options, keys, \"sourceRoot\", mustBeString);\n  let sourcesContent = getFlag(options, keys, \"sourcesContent\", mustBeBoolean);\n  let target = getFlag(options, keys, \"target\", mustBeStringOrArray);\n  let format = getFlag(options, keys, \"format\", mustBeString);\n  let globalName = getFlag(options, keys, \"globalName\", mustBeString);\n  let mangleProps = getFlag(options, keys, \"mangleProps\", mustBeRegExp);\n  let reserveProps = getFlag(options, keys, \"reserveProps\", mustBeRegExp);\n  let mangleQuoted = getFlag(options, keys, \"mangleQuoted\", mustBeBoolean);\n  let minify = getFlag(options, keys, \"minify\", mustBeBoolean);\n  let minifySyntax = getFlag(options, keys, \"minifySyntax\", mustBeBoolean);\n  let minifyWhitespace = getFlag(options, keys, \"minifyWhitespace\", mustBeBoolean);\n  let minifyIdentifiers = getFlag(options, keys, \"minifyIdentifiers\", mustBeBoolean);\n  let drop = getFlag(options, keys, \"drop\", mustBeArray);\n  let charset = getFlag(options, keys, \"charset\", mustBeString);\n  let treeShaking = getFlag(options, keys, \"treeShaking\", mustBeBoolean);\n  let ignoreAnnotations = getFlag(options, keys, \"ignoreAnnotations\", mustBeBoolean);\n  let jsx = getFlag(options, keys, \"jsx\", mustBeString);\n  let jsxFactory = getFlag(options, keys, \"jsxFactory\", mustBeString);\n  let jsxFragment = getFlag(options, keys, \"jsxFragment\", mustBeString);\n  let define = getFlag(options, keys, \"define\", mustBeObject);\n  let logOverride = getFlag(options, keys, \"logOverride\", mustBeObject);\n  let supported = getFlag(options, keys, \"supported\", mustBeObject);\n  let pure = getFlag(options, keys, \"pure\", mustBeArray);\n  let keepNames = getFlag(options, keys, \"keepNames\", mustBeBoolean);\n  if (legalComments)\n    flags.push(`--legal-comments=${legalComments}`);\n  if (sourceRoot !== void 0)\n    flags.push(`--source-root=${sourceRoot}`);\n  if (sourcesContent !== void 0)\n    flags.push(`--sources-content=${sourcesContent}`);\n  if (target) {\n    if (Array.isArray(target))\n      flags.push(`--target=${Array.from(target).map(validateTarget).join(\",\")}`);\n    else\n      flags.push(`--target=${validateTarget(target)}`);\n  }\n  if (format)\n    flags.push(`--format=${format}`);\n  if (globalName)\n    flags.push(`--global-name=${globalName}`);\n  if (minify)\n    flags.push(\"--minify\");\n  if (minifySyntax)\n    flags.push(\"--minify-syntax\");\n  if (minifyWhitespace)\n    flags.push(\"--minify-whitespace\");\n  if (minifyIdentifiers)\n    flags.push(\"--minify-identifiers\");\n  if (charset)\n    flags.push(`--charset=${charset}`);\n  if (treeShaking !== void 0)\n    flags.push(`--tree-shaking=${treeShaking}`);\n  if (ignoreAnnotations)\n    flags.push(`--ignore-annotations`);\n  if (drop)\n    for (let what of drop)\n      flags.push(`--drop:${what}`);\n  if (mangleProps)\n    flags.push(`--mangle-props=${mangleProps.source}`);\n  if (reserveProps)\n    flags.push(`--reserve-props=${reserveProps.source}`);\n  if (mangleQuoted !== void 0)\n    flags.push(`--mangle-quoted=${mangleQuoted}`);\n  if (jsx)\n    flags.push(`--jsx=${jsx}`);\n  if (jsxFactory)\n    flags.push(`--jsx-factory=${jsxFactory}`);\n  if (jsxFragment)\n    flags.push(`--jsx-fragment=${jsxFragment}`);\n  if (define) {\n    for (let key in define) {\n      if (key.indexOf(\"=\") >= 0)\n        throw new Error(`Invalid define: ${key}`);\n      flags.push(`--define:${key}=${define[key]}`);\n    }\n  }\n  if (logOverride) {\n    for (let key in logOverride) {\n      if (key.indexOf(\"=\") >= 0)\n        throw new Error(`Invalid log override: ${key}`);\n      flags.push(`--log-override:${key}=${logOverride[key]}`);\n    }\n  }\n  if (supported) {\n    for (let key in supported) {\n      if (key.indexOf(\"=\") >= 0)\n        throw new Error(`Invalid supported: ${key}`);\n      flags.push(`--supported:${key}=${supported[key]}`);\n    }\n  }\n  if (pure)\n    for (let fn of pure)\n      flags.push(`--pure:${fn}`);\n  if (keepNames)\n    flags.push(`--keep-names`);\n}\nfunction flagsForBuildOptions(callName, options, isTTY, logLevelDefault, writeDefault) {\n  var _a;\n  let flags = [];\n  let entries = [];\n  let keys = /* @__PURE__ */ Object.create(null);\n  let stdinContents = null;\n  let stdinResolveDir = null;\n  let watchMode = null;\n  pushLogFlags(flags, options, keys, isTTY, logLevelDefault);\n  pushCommonFlags(flags, options, keys);\n  let sourcemap = getFlag(options, keys, \"sourcemap\", mustBeStringOrBoolean);\n  let bundle = getFlag(options, keys, \"bundle\", mustBeBoolean);\n  let watch = getFlag(options, keys, \"watch\", mustBeBooleanOrObject);\n  let splitting = getFlag(options, keys, \"splitting\", mustBeBoolean);\n  let preserveSymlinks = getFlag(options, keys, \"preserveSymlinks\", mustBeBoolean);\n  let metafile = getFlag(options, keys, \"metafile\", mustBeBoolean);\n  let outfile = getFlag(options, keys, \"outfile\", mustBeString);\n  let outdir = getFlag(options, keys, \"outdir\", mustBeString);\n  let outbase = getFlag(options, keys, \"outbase\", mustBeString);\n  let platform = getFlag(options, keys, \"platform\", mustBeString);\n  let tsconfig = getFlag(options, keys, \"tsconfig\", mustBeString);\n  let resolveExtensions = getFlag(options, keys, \"resolveExtensions\", mustBeArray);\n  let nodePathsInput = getFlag(options, keys, \"nodePaths\", mustBeArray);\n  let mainFields = getFlag(options, keys, \"mainFields\", mustBeArray);\n  let conditions = getFlag(options, keys, \"conditions\", mustBeArray);\n  let external = getFlag(options, keys, \"external\", mustBeArray);\n  let loader = getFlag(options, keys, \"loader\", mustBeObject);\n  let outExtension = getFlag(options, keys, \"outExtension\", mustBeObject);\n  let publicPath = getFlag(options, keys, \"publicPath\", mustBeString);\n  let entryNames = getFlag(options, keys, \"entryNames\", mustBeString);\n  let chunkNames = getFlag(options, keys, \"chunkNames\", mustBeString);\n  let assetNames = getFlag(options, keys, \"assetNames\", mustBeString);\n  let inject = getFlag(options, keys, \"inject\", mustBeArray);\n  let banner = getFlag(options, keys, \"banner\", mustBeObject);\n  let footer = getFlag(options, keys, \"footer\", mustBeObject);\n  let entryPoints = getFlag(options, keys, \"entryPoints\", mustBeArrayOrRecord);\n  let absWorkingDir = getFlag(options, keys, \"absWorkingDir\", mustBeString);\n  let stdin = getFlag(options, keys, \"stdin\", mustBeObject);\n  let write = (_a = getFlag(options, keys, \"write\", mustBeBoolean)) != null ? _a : writeDefault;\n  let allowOverwrite = getFlag(options, keys, \"allowOverwrite\", mustBeBoolean);\n  let incremental = getFlag(options, keys, \"incremental\", mustBeBoolean) === true;\n  let mangleCache = getFlag(options, keys, \"mangleCache\", mustBeObject);\n  keys.plugins = true;\n  checkForInvalidFlags(options, keys, `in ${callName}() call`);\n  if (sourcemap)\n    flags.push(`--sourcemap${sourcemap === true ? \"\" : `=${sourcemap}`}`);\n  if (bundle)\n    flags.push(\"--bundle\");\n  if (allowOverwrite)\n    flags.push(\"--allow-overwrite\");\n  if (watch) {\n    flags.push(\"--watch\");\n    if (typeof watch === \"boolean\") {\n      watchMode = {};\n    } else {\n      let watchKeys = /* @__PURE__ */ Object.create(null);\n      let onRebuild = getFlag(watch, watchKeys, \"onRebuild\", mustBeFunction);\n      checkForInvalidFlags(watch, watchKeys, `on \"watch\" in ${callName}() call`);\n      watchMode = { onRebuild };\n    }\n  }\n  if (splitting)\n    flags.push(\"--splitting\");\n  if (preserveSymlinks)\n    flags.push(\"--preserve-symlinks\");\n  if (metafile)\n    flags.push(`--metafile`);\n  if (outfile)\n    flags.push(`--outfile=${outfile}`);\n  if (outdir)\n    flags.push(`--outdir=${outdir}`);\n  if (outbase)\n    flags.push(`--outbase=${outbase}`);\n  if (platform)\n    flags.push(`--platform=${platform}`);\n  if (tsconfig)\n    flags.push(`--tsconfig=${tsconfig}`);\n  if (resolveExtensions) {\n    let values = [];\n    for (let value of resolveExtensions) {\n      value += \"\";\n      if (value.indexOf(\",\") >= 0)\n        throw new Error(`Invalid resolve extension: ${value}`);\n      values.push(value);\n    }\n    flags.push(`--resolve-extensions=${values.join(\",\")}`);\n  }\n  if (publicPath)\n    flags.push(`--public-path=${publicPath}`);\n  if (entryNames)\n    flags.push(`--entry-names=${entryNames}`);\n  if (chunkNames)\n    flags.push(`--chunk-names=${chunkNames}`);\n  if (assetNames)\n    flags.push(`--asset-names=${assetNames}`);\n  if (mainFields) {\n    let values = [];\n    for (let value of mainFields) {\n      value += \"\";\n      if (value.indexOf(\",\") >= 0)\n        throw new Error(`Invalid main field: ${value}`);\n      values.push(value);\n    }\n    flags.push(`--main-fields=${values.join(\",\")}`);\n  }\n  if (conditions) {\n    let values = [];\n    for (let value of conditions) {\n      value += \"\";\n      if (value.indexOf(\",\") >= 0)\n        throw new Error(`Invalid condition: ${value}`);\n      values.push(value);\n    }\n    flags.push(`--conditions=${values.join(\",\")}`);\n  }\n  if (external)\n    for (let name of external)\n      flags.push(`--external:${name}`);\n  if (banner) {\n    for (let type in banner) {\n      if (type.indexOf(\"=\") >= 0)\n        throw new Error(`Invalid banner file type: ${type}`);\n      flags.push(`--banner:${type}=${banner[type]}`);\n    }\n  }\n  if (footer) {\n    for (let type in footer) {\n      if (type.indexOf(\"=\") >= 0)\n        throw new Error(`Invalid footer file type: ${type}`);\n      flags.push(`--footer:${type}=${footer[type]}`);\n    }\n  }\n  if (inject)\n    for (let path of inject)\n      flags.push(`--inject:${path}`);\n  if (loader) {\n    for (let ext in loader) {\n      if (ext.indexOf(\"=\") >= 0)\n        throw new Error(`Invalid loader extension: ${ext}`);\n      flags.push(`--loader:${ext}=${loader[ext]}`);\n    }\n  }\n  if (outExtension) {\n    for (let ext in outExtension) {\n      if (ext.indexOf(\"=\") >= 0)\n        throw new Error(`Invalid out extension: ${ext}`);\n      flags.push(`--out-extension:${ext}=${outExtension[ext]}`);\n    }\n  }\n  if (entryPoints) {\n    if (Array.isArray(entryPoints)) {\n      for (let entryPoint of entryPoints) {\n        entries.push([\"\", entryPoint + \"\"]);\n      }\n    } else {\n      for (let [key, value] of Object.entries(entryPoints)) {\n        entries.push([key + \"\", value + \"\"]);\n      }\n    }\n  }\n  if (stdin) {\n    let stdinKeys = /* @__PURE__ */ Object.create(null);\n    let contents = getFlag(stdin, stdinKeys, \"contents\", mustBeString);\n    let resolveDir = getFlag(stdin, stdinKeys, \"resolveDir\", mustBeString);\n    let sourcefile = getFlag(stdin, stdinKeys, \"sourcefile\", mustBeString);\n    let loader2 = getFlag(stdin, stdinKeys, \"loader\", mustBeString);\n    checkForInvalidFlags(stdin, stdinKeys, 'in \"stdin\" object');\n    if (sourcefile)\n      flags.push(`--sourcefile=${sourcefile}`);\n    if (loader2)\n      flags.push(`--loader=${loader2}`);\n    if (resolveDir)\n      stdinResolveDir = resolveDir + \"\";\n    stdinContents = contents ? contents + \"\" : \"\";\n  }\n  let nodePaths = [];\n  if (nodePathsInput) {\n    for (let value of nodePathsInput) {\n      value += \"\";\n      nodePaths.push(value);\n    }\n  }\n  return {\n    entries,\n    flags,\n    write,\n    stdinContents,\n    stdinResolveDir,\n    absWorkingDir,\n    incremental,\n    nodePaths,\n    watch: watchMode,\n    mangleCache: validateMangleCache(mangleCache)\n  };\n}\nfunction flagsForTransformOptions(callName, options, isTTY, logLevelDefault) {\n  let flags = [];\n  let keys = /* @__PURE__ */ Object.create(null);\n  pushLogFlags(flags, options, keys, isTTY, logLevelDefault);\n  pushCommonFlags(flags, options, keys);\n  let sourcemap = getFlag(options, keys, \"sourcemap\", mustBeStringOrBoolean);\n  let tsconfigRaw = getFlag(options, keys, \"tsconfigRaw\", mustBeStringOrObject);\n  let sourcefile = getFlag(options, keys, \"sourcefile\", mustBeString);\n  let loader = getFlag(options, keys, \"loader\", mustBeString);\n  let banner = getFlag(options, keys, \"banner\", mustBeString);\n  let footer = getFlag(options, keys, \"footer\", mustBeString);\n  let mangleCache = getFlag(options, keys, \"mangleCache\", mustBeObject);\n  checkForInvalidFlags(options, keys, `in ${callName}() call`);\n  if (sourcemap)\n    flags.push(`--sourcemap=${sourcemap === true ? \"external\" : sourcemap}`);\n  if (tsconfigRaw)\n    flags.push(`--tsconfig-raw=${typeof tsconfigRaw === \"string\" ? tsconfigRaw : JSON.stringify(tsconfigRaw)}`);\n  if (sourcefile)\n    flags.push(`--sourcefile=${sourcefile}`);\n  if (loader)\n    flags.push(`--loader=${loader}`);\n  if (banner)\n    flags.push(`--banner=${banner}`);\n  if (footer)\n    flags.push(`--footer=${footer}`);\n  return {\n    flags,\n    mangleCache: validateMangleCache(mangleCache)\n  };\n}\nfunction createChannel(streamIn) {\n  let responseCallbacks = /* @__PURE__ */ new Map();\n  let pluginCallbacks = /* @__PURE__ */ new Map();\n  let watchCallbacks = /* @__PURE__ */ new Map();\n  let serveCallbacks = /* @__PURE__ */ new Map();\n  let closeData = null;\n  let nextRequestID = 0;\n  let nextBuildKey = 0;\n  let stdout = new Uint8Array(16 * 1024);\n  let stdoutUsed = 0;\n  let readFromStdout = (chunk) => {\n    let limit = stdoutUsed + chunk.length;\n    if (limit > stdout.length) {\n      let swap = new Uint8Array(limit * 2);\n      swap.set(stdout);\n      stdout = swap;\n    }\n    stdout.set(chunk, stdoutUsed);\n    stdoutUsed += chunk.length;\n    let offset = 0;\n    while (offset + 4 <= stdoutUsed) {\n      let length = readUInt32LE(stdout, offset);\n      if (offset + 4 + length > stdoutUsed) {\n        break;\n      }\n      offset += 4;\n      handleIncomingPacket(stdout.subarray(offset, offset + length));\n      offset += length;\n    }\n    if (offset > 0) {\n      stdout.copyWithin(0, offset, stdoutUsed);\n      stdoutUsed -= offset;\n    }\n  };\n  let afterClose = (error) => {\n    closeData = { reason: error ? \": \" + (error.message || error) : \"\" };\n    const text = \"The service was stopped\" + closeData.reason;\n    for (let callback of responseCallbacks.values()) {\n      callback(text, null);\n    }\n    responseCallbacks.clear();\n    for (let callbacks of serveCallbacks.values()) {\n      callbacks.onWait(text);\n    }\n    serveCallbacks.clear();\n    for (let callback of watchCallbacks.values()) {\n      try {\n        callback(new Error(text), null);\n      } catch (e) {\n        console.error(e);\n      }\n    }\n    watchCallbacks.clear();\n  };\n  let sendRequest = (refs, value, callback) => {\n    if (closeData)\n      return callback(\"The service is no longer running\" + closeData.reason, null);\n    let id = nextRequestID++;\n    responseCallbacks.set(id, (error, response) => {\n      try {\n        callback(error, response);\n      } finally {\n        if (refs)\n          refs.unref();\n      }\n    });\n    if (refs)\n      refs.ref();\n    streamIn.writeToStdin(encodePacket({ id, isRequest: true, value }));\n  };\n  let sendResponse = (id, value) => {\n    if (closeData)\n      throw new Error(\"The service is no longer running\" + closeData.reason);\n    streamIn.writeToStdin(encodePacket({ id, isRequest: false, value }));\n  };\n  let handleRequest = (id, request) => __async(this, null, function* () {\n    try {\n      switch (request.command) {\n        case \"ping\": {\n          sendResponse(id, {});\n          break;\n        }\n        case \"on-start\": {\n          let callback = pluginCallbacks.get(request.key);\n          if (!callback)\n            sendResponse(id, {});\n          else\n            sendResponse(id, yield callback(request));\n          break;\n        }\n        case \"on-resolve\": {\n          let callback = pluginCallbacks.get(request.key);\n          if (!callback)\n            sendResponse(id, {});\n          else\n            sendResponse(id, yield callback(request));\n          break;\n        }\n        case \"on-load\": {\n          let callback = pluginCallbacks.get(request.key);\n          if (!callback)\n            sendResponse(id, {});\n          else\n            sendResponse(id, yield callback(request));\n          break;\n        }\n        case \"serve-request\": {\n          let callbacks = serveCallbacks.get(request.key);\n          if (callbacks && callbacks.onRequest)\n            callbacks.onRequest(request.args);\n          sendResponse(id, {});\n          break;\n        }\n        case \"serve-wait\": {\n          let callbacks = serveCallbacks.get(request.key);\n          if (callbacks)\n            callbacks.onWait(request.error);\n          sendResponse(id, {});\n          break;\n        }\n        case \"watch-rebuild\": {\n          let callback = watchCallbacks.get(request.key);\n          try {\n            if (callback)\n              callback(null, request.args);\n          } catch (err) {\n            console.error(err);\n          }\n          sendResponse(id, {});\n          break;\n        }\n        default:\n          throw new Error(`Invalid command: ` + request.command);\n      }\n    } catch (e) {\n      sendResponse(id, { errors: [extractErrorMessageV8(e, streamIn, null, void 0, \"\")] });\n    }\n  });\n  let isFirstPacket = true;\n  let handleIncomingPacket = (bytes) => {\n    if (isFirstPacket) {\n      isFirstPacket = false;\n      let binaryVersion = String.fromCharCode(...bytes);\n      if (binaryVersion !== \"0.14.49\") {\n        throw new Error(`Cannot start service: Host version \"${\"0.14.49\"}\" does not match binary version ${JSON.stringify(binaryVersion)}`);\n      }\n      return;\n    }\n    let packet = decodePacket(bytes);\n    if (packet.isRequest) {\n      handleRequest(packet.id, packet.value);\n    } else {\n      let callback = responseCallbacks.get(packet.id);\n      responseCallbacks.delete(packet.id);\n      if (packet.value.error)\n        callback(packet.value.error, {});\n      else\n        callback(null, packet.value);\n    }\n  };\n  let handlePlugins = (initialOptions, plugins, buildKey, stash, refs) => __async(this, null, function* () {\n    let onStartCallbacks = [];\n    let onEndCallbacks = [];\n    let onResolveCallbacks = {};\n    let onLoadCallbacks = {};\n    let nextCallbackID = 0;\n    let i = 0;\n    let requestPlugins = [];\n    let isSetupDone = false;\n    plugins = [...plugins];\n    for (let item of plugins) {\n      let keys = {};\n      if (typeof item !== \"object\")\n        throw new Error(`Plugin at index ${i} must be an object`);\n      const name = getFlag(item, keys, \"name\", mustBeString);\n      if (typeof name !== \"string\" || name === \"\")\n        throw new Error(`Plugin at index ${i} is missing a name`);\n      try {\n        let setup = getFlag(item, keys, \"setup\", mustBeFunction);\n        if (typeof setup !== \"function\")\n          throw new Error(`Plugin is missing a setup function`);\n        checkForInvalidFlags(item, keys, `on plugin ${JSON.stringify(name)}`);\n        let plugin = {\n          name,\n          onResolve: [],\n          onLoad: []\n        };\n        i++;\n        let resolve = (path, options = {}) => {\n          if (!isSetupDone)\n            throw new Error('Cannot call \"resolve\" before plugin setup has completed');\n          if (typeof path !== \"string\")\n            throw new Error(`The path to resolve must be a string`);\n          let keys2 = /* @__PURE__ */ Object.create(null);\n          let pluginName = getFlag(options, keys2, \"pluginName\", mustBeString);\n          let importer = getFlag(options, keys2, \"importer\", mustBeString);\n          let namespace = getFlag(options, keys2, \"namespace\", mustBeString);\n          let resolveDir = getFlag(options, keys2, \"resolveDir\", mustBeString);\n          let kind = getFlag(options, keys2, \"kind\", mustBeString);\n          let pluginData = getFlag(options, keys2, \"pluginData\", canBeAnything);\n          checkForInvalidFlags(options, keys2, \"in resolve() call\");\n          return new Promise((resolve2, reject) => {\n            const request = {\n              command: \"resolve\",\n              path,\n              key: buildKey,\n              pluginName: name\n            };\n            if (pluginName != null)\n              request.pluginName = pluginName;\n            if (importer != null)\n              request.importer = importer;\n            if (namespace != null)\n              request.namespace = namespace;\n            if (resolveDir != null)\n              request.resolveDir = resolveDir;\n            if (kind != null)\n              request.kind = kind;\n            if (pluginData != null)\n              request.pluginData = stash.store(pluginData);\n            sendRequest(refs, request, (error, response) => {\n              if (error !== null)\n                reject(new Error(error));\n              else\n                resolve2({\n                  errors: replaceDetailsInMessages(response.errors, stash),\n                  warnings: replaceDetailsInMessages(response.warnings, stash),\n                  path: response.path,\n                  external: response.external,\n                  sideEffects: response.sideEffects,\n                  namespace: response.namespace,\n                  suffix: response.suffix,\n                  pluginData: stash.load(response.pluginData)\n                });\n            });\n          });\n        };\n        let promise = setup({\n          initialOptions,\n          resolve,\n          onStart(callback2) {\n            let registeredText = `This error came from the \"onStart\" callback registered here:`;\n            let registeredNote = extractCallerV8(new Error(registeredText), streamIn, \"onStart\");\n            onStartCallbacks.push({ name, callback: callback2, note: registeredNote });\n          },\n          onEnd(callback2) {\n            let registeredText = `This error came from the \"onEnd\" callback registered here:`;\n            let registeredNote = extractCallerV8(new Error(registeredText), streamIn, \"onEnd\");\n            onEndCallbacks.push({ name, callback: callback2, note: registeredNote });\n          },\n          onResolve(options, callback2) {\n            let registeredText = `This error came from the \"onResolve\" callback registered here:`;\n            let registeredNote = extractCallerV8(new Error(registeredText), streamIn, \"onResolve\");\n            let keys2 = {};\n            let filter = getFlag(options, keys2, \"filter\", mustBeRegExp);\n            let namespace = getFlag(options, keys2, \"namespace\", mustBeString);\n            checkForInvalidFlags(options, keys2, `in onResolve() call for plugin ${JSON.stringify(name)}`);\n            if (filter == null)\n              throw new Error(`onResolve() call is missing a filter`);\n            let id = nextCallbackID++;\n            onResolveCallbacks[id] = { name, callback: callback2, note: registeredNote };\n            plugin.onResolve.push({ id, filter: filter.source, namespace: namespace || \"\" });\n          },\n          onLoad(options, callback2) {\n            let registeredText = `This error came from the \"onLoad\" callback registered here:`;\n            let registeredNote = extractCallerV8(new Error(registeredText), streamIn, \"onLoad\");\n            let keys2 = {};\n            let filter = getFlag(options, keys2, \"filter\", mustBeRegExp);\n            let namespace = getFlag(options, keys2, \"namespace\", mustBeString);\n            checkForInvalidFlags(options, keys2, `in onLoad() call for plugin ${JSON.stringify(name)}`);\n            if (filter == null)\n              throw new Error(`onLoad() call is missing a filter`);\n            let id = nextCallbackID++;\n            onLoadCallbacks[id] = { name, callback: callback2, note: registeredNote };\n            plugin.onLoad.push({ id, filter: filter.source, namespace: namespace || \"\" });\n          },\n          esbuild: streamIn.esbuild\n        });\n        if (promise)\n          yield promise;\n        requestPlugins.push(plugin);\n      } catch (e) {\n        return { ok: false, error: e, pluginName: name };\n      }\n    }\n    const callback = (request) => __async(this, null, function* () {\n      switch (request.command) {\n        case \"on-start\": {\n          let response = { errors: [], warnings: [] };\n          yield Promise.all(onStartCallbacks.map((_0) => __async(this, [_0], function* ({ name, callback: callback2, note }) {\n            try {\n              let result = yield callback2();\n              if (result != null) {\n                if (typeof result !== \"object\")\n                  throw new Error(`Expected onStart() callback in plugin ${JSON.stringify(name)} to return an object`);\n                let keys = {};\n                let errors = getFlag(result, keys, \"errors\", mustBeArray);\n                let warnings = getFlag(result, keys, \"warnings\", mustBeArray);\n                checkForInvalidFlags(result, keys, `from onStart() callback in plugin ${JSON.stringify(name)}`);\n                if (errors != null)\n                  response.errors.push(...sanitizeMessages(errors, \"errors\", stash, name));\n                if (warnings != null)\n                  response.warnings.push(...sanitizeMessages(warnings, \"warnings\", stash, name));\n              }\n            } catch (e) {\n              response.errors.push(extractErrorMessageV8(e, streamIn, stash, note && note(), name));\n            }\n          })));\n          return response;\n        }\n        case \"on-resolve\": {\n          let response = {}, name = \"\", callback2, note;\n          for (let id of request.ids) {\n            try {\n              ({ name, callback: callback2, note } = onResolveCallbacks[id]);\n              let result = yield callback2({\n                path: request.path,\n                importer: request.importer,\n                namespace: request.namespace,\n                resolveDir: request.resolveDir,\n                kind: request.kind,\n                pluginData: stash.load(request.pluginData)\n              });\n              if (result != null) {\n                if (typeof result !== \"object\")\n                  throw new Error(`Expected onResolve() callback in plugin ${JSON.stringify(name)} to return an object`);\n                let keys = {};\n                let pluginName = getFlag(result, keys, \"pluginName\", mustBeString);\n                let path = getFlag(result, keys, \"path\", mustBeString);\n                let namespace = getFlag(result, keys, \"namespace\", mustBeString);\n                let suffix = getFlag(result, keys, \"suffix\", mustBeString);\n                let external = getFlag(result, keys, \"external\", mustBeBoolean);\n                let sideEffects = getFlag(result, keys, \"sideEffects\", mustBeBoolean);\n                let pluginData = getFlag(result, keys, \"pluginData\", canBeAnything);\n                let errors = getFlag(result, keys, \"errors\", mustBeArray);\n                let warnings = getFlag(result, keys, \"warnings\", mustBeArray);\n                let watchFiles = getFlag(result, keys, \"watchFiles\", mustBeArray);\n                let watchDirs = getFlag(result, keys, \"watchDirs\", mustBeArray);\n                checkForInvalidFlags(result, keys, `from onResolve() callback in plugin ${JSON.stringify(name)}`);\n                response.id = id;\n                if (pluginName != null)\n                  response.pluginName = pluginName;\n                if (path != null)\n                  response.path = path;\n                if (namespace != null)\n                  response.namespace = namespace;\n                if (suffix != null)\n                  response.suffix = suffix;\n                if (external != null)\n                  response.external = external;\n                if (sideEffects != null)\n                  response.sideEffects = sideEffects;\n                if (pluginData != null)\n                  response.pluginData = stash.store(pluginData);\n                if (errors != null)\n                  response.errors = sanitizeMessages(errors, \"errors\", stash, name);\n                if (warnings != null)\n                  response.warnings = sanitizeMessages(warnings, \"warnings\", stash, name);\n                if (watchFiles != null)\n                  response.watchFiles = sanitizeStringArray(watchFiles, \"watchFiles\");\n                if (watchDirs != null)\n                  response.watchDirs = sanitizeStringArray(watchDirs, \"watchDirs\");\n                break;\n              }\n            } catch (e) {\n              return { id, errors: [extractErrorMessageV8(e, streamIn, stash, note && note(), name)] };\n            }\n          }\n          return response;\n        }\n        case \"on-load\": {\n          let response = {}, name = \"\", callback2, note;\n          for (let id of request.ids) {\n            try {\n              ({ name, callback: callback2, note } = onLoadCallbacks[id]);\n              let result = yield callback2({\n                path: request.path,\n                namespace: request.namespace,\n                suffix: request.suffix,\n                pluginData: stash.load(request.pluginData)\n              });\n              if (result != null) {\n                if (typeof result !== \"object\")\n                  throw new Error(`Expected onLoad() callback in plugin ${JSON.stringify(name)} to return an object`);\n                let keys = {};\n                let pluginName = getFlag(result, keys, \"pluginName\", mustBeString);\n                let contents = getFlag(result, keys, \"contents\", mustBeStringOrUint8Array);\n                let resolveDir = getFlag(result, keys, \"resolveDir\", mustBeString);\n                let pluginData = getFlag(result, keys, \"pluginData\", canBeAnything);\n                let loader = getFlag(result, keys, \"loader\", mustBeString);\n                let errors = getFlag(result, keys, \"errors\", mustBeArray);\n                let warnings = getFlag(result, keys, \"warnings\", mustBeArray);\n                let watchFiles = getFlag(result, keys, \"watchFiles\", mustBeArray);\n                let watchDirs = getFlag(result, keys, \"watchDirs\", mustBeArray);\n                checkForInvalidFlags(result, keys, `from onLoad() callback in plugin ${JSON.stringify(name)}`);\n                response.id = id;\n                if (pluginName != null)\n                  response.pluginName = pluginName;\n                if (contents instanceof Uint8Array)\n                  response.contents = contents;\n                else if (contents != null)\n                  response.contents = encodeUTF8(contents);\n                if (resolveDir != null)\n                  response.resolveDir = resolveDir;\n                if (pluginData != null)\n                  response.pluginData = stash.store(pluginData);\n                if (loader != null)\n                  response.loader = loader;\n                if (errors != null)\n                  response.errors = sanitizeMessages(errors, \"errors\", stash, name);\n                if (warnings != null)\n                  response.warnings = sanitizeMessages(warnings, \"warnings\", stash, name);\n                if (watchFiles != null)\n                  response.watchFiles = sanitizeStringArray(watchFiles, \"watchFiles\");\n                if (watchDirs != null)\n                  response.watchDirs = sanitizeStringArray(watchDirs, \"watchDirs\");\n                break;\n              }\n            } catch (e) {\n              return { id, errors: [extractErrorMessageV8(e, streamIn, stash, note && note(), name)] };\n            }\n          }\n          return response;\n        }\n        default:\n          throw new Error(`Invalid command: ` + request.command);\n      }\n    });\n    let runOnEndCallbacks = (result, logPluginError, done) => done();\n    if (onEndCallbacks.length > 0) {\n      runOnEndCallbacks = (result, logPluginError, done) => {\n        (() => __async(this, null, function* () {\n          for (const { name, callback: callback2, note } of onEndCallbacks) {\n            try {\n              yield callback2(result);\n            } catch (e) {\n              result.errors.push(yield new Promise((resolve) => logPluginError(e, name, note && note(), resolve)));\n            }\n          }\n        }))().then(done);\n      };\n    }\n    isSetupDone = true;\n    let refCount = 0;\n    return {\n      ok: true,\n      requestPlugins,\n      runOnEndCallbacks,\n      pluginRefs: {\n        ref() {\n          if (++refCount === 1)\n            pluginCallbacks.set(buildKey, callback);\n        },\n        unref() {\n          if (--refCount === 0)\n            pluginCallbacks.delete(buildKey);\n        }\n      }\n    };\n  });\n  let buildServeData = (refs, options, request, key) => {\n    let keys = {};\n    let port = getFlag(options, keys, \"port\", mustBeInteger);\n    let host = getFlag(options, keys, \"host\", mustBeString);\n    let servedir = getFlag(options, keys, \"servedir\", mustBeString);\n    let onRequest = getFlag(options, keys, \"onRequest\", mustBeFunction);\n    let onWait;\n    let wait = new Promise((resolve, reject) => {\n      onWait = (error) => {\n        serveCallbacks.delete(key);\n        if (error !== null)\n          reject(new Error(error));\n        else\n          resolve();\n      };\n    });\n    request.serve = {};\n    checkForInvalidFlags(options, keys, `in serve() call`);\n    if (port !== void 0)\n      request.serve.port = port;\n    if (host !== void 0)\n      request.serve.host = host;\n    if (servedir !== void 0)\n      request.serve.servedir = servedir;\n    serveCallbacks.set(key, {\n      onRequest,\n      onWait\n    });\n    return {\n      wait,\n      stop() {\n        sendRequest(refs, { command: \"serve-stop\", key }, () => {\n        });\n      }\n    };\n  };\n  const buildLogLevelDefault = \"warning\";\n  const transformLogLevelDefault = \"silent\";\n  let buildOrServe = (args) => {\n    let key = nextBuildKey++;\n    const details = createObjectStash();\n    let plugins;\n    let { refs, options, isTTY, callback } = args;\n    if (typeof options === \"object\") {\n      let value = options.plugins;\n      if (value !== void 0) {\n        if (!Array.isArray(value))\n          throw new Error(`\"plugins\" must be an array`);\n        plugins = value;\n      }\n    }\n    let logPluginError = (e, pluginName, note, done) => {\n      let flags = [];\n      try {\n        pushLogFlags(flags, options, {}, isTTY, buildLogLevelDefault);\n      } catch (e2) {\n      }\n      const message = extractErrorMessageV8(e, streamIn, details, note, pluginName);\n      sendRequest(refs, { command: \"error\", flags, error: message }, () => {\n        message.detail = details.load(message.detail);\n        done(message);\n      });\n    };\n    let handleError = (e, pluginName) => {\n      logPluginError(e, pluginName, void 0, (error) => {\n        callback(failureErrorWithLog(\"Build failed\", [error], []), null);\n      });\n    };\n    if (plugins && plugins.length > 0) {\n      if (streamIn.isSync)\n        return handleError(new Error(\"Cannot use plugins in synchronous API calls\"), \"\");\n      handlePlugins(options, plugins, key, details, refs).then((result) => {\n        if (!result.ok) {\n          handleError(result.error, result.pluginName);\n        } else {\n          try {\n            buildOrServeContinue(__spreadProps(__spreadValues({}, args), {\n              key,\n              details,\n              logPluginError,\n              requestPlugins: result.requestPlugins,\n              runOnEndCallbacks: result.runOnEndCallbacks,\n              pluginRefs: result.pluginRefs\n            }));\n          } catch (e) {\n            handleError(e, \"\");\n          }\n        }\n      }, (e) => handleError(e, \"\"));\n    } else {\n      try {\n        buildOrServeContinue(__spreadProps(__spreadValues({}, args), {\n          key,\n          details,\n          logPluginError,\n          requestPlugins: null,\n          runOnEndCallbacks: (result, logPluginError2, done) => done(),\n          pluginRefs: null\n        }));\n      } catch (e) {\n        handleError(e, \"\");\n      }\n    }\n  };\n  let buildOrServeContinue = ({\n    callName,\n    refs: callerRefs,\n    serveOptions,\n    options,\n    isTTY,\n    defaultWD,\n    callback,\n    key,\n    details,\n    logPluginError,\n    requestPlugins,\n    runOnEndCallbacks,\n    pluginRefs\n  }) => {\n    const refs = {\n      ref() {\n        if (pluginRefs)\n          pluginRefs.ref();\n        if (callerRefs)\n          callerRefs.ref();\n      },\n      unref() {\n        if (pluginRefs)\n          pluginRefs.unref();\n        if (callerRefs)\n          callerRefs.unref();\n      }\n    };\n    let writeDefault = !streamIn.isWriteUnavailable;\n    let {\n      entries,\n      flags,\n      write,\n      stdinContents,\n      stdinResolveDir,\n      absWorkingDir,\n      incremental,\n      nodePaths,\n      watch,\n      mangleCache\n    } = flagsForBuildOptions(callName, options, isTTY, buildLogLevelDefault, writeDefault);\n    let request = {\n      command: \"build\",\n      key,\n      entries,\n      flags,\n      write,\n      stdinContents,\n      stdinResolveDir,\n      absWorkingDir: absWorkingDir || defaultWD,\n      incremental,\n      nodePaths\n    };\n    if (requestPlugins)\n      request.plugins = requestPlugins;\n    if (mangleCache)\n      request.mangleCache = mangleCache;\n    let serve2 = serveOptions && buildServeData(refs, serveOptions, request, key);\n    let rebuild;\n    let stop;\n    let copyResponseToResult = (response, result) => {\n      if (response.outputFiles)\n        result.outputFiles = response.outputFiles.map(convertOutputFiles);\n      if (response.metafile)\n        result.metafile = JSON.parse(response.metafile);\n      if (response.mangleCache)\n        result.mangleCache = response.mangleCache;\n      if (response.writeToStdout !== void 0)\n        console.log(decodeUTF8(response.writeToStdout).replace(/\\n$/, \"\"));\n    };\n    let buildResponseToResult = (response, callback2) => {\n      let result = {\n        errors: replaceDetailsInMessages(response.errors, details),\n        warnings: replaceDetailsInMessages(response.warnings, details)\n      };\n      copyResponseToResult(response, result);\n      runOnEndCallbacks(result, logPluginError, () => {\n        if (result.errors.length > 0) {\n          return callback2(failureErrorWithLog(\"Build failed\", result.errors, result.warnings), null);\n        }\n        if (response.rebuild) {\n          if (!rebuild) {\n            let isDisposed = false;\n            rebuild = () => new Promise((resolve, reject) => {\n              if (isDisposed || closeData)\n                throw new Error(\"Cannot rebuild\");\n              sendRequest(refs, { command: \"rebuild\", key }, (error2, response2) => {\n                if (error2) {\n                  const message = { id: \"\", pluginName: \"\", text: error2, location: null, notes: [], detail: void 0 };\n                  return callback2(failureErrorWithLog(\"Build failed\", [message], []), null);\n                }\n                buildResponseToResult(response2, (error3, result3) => {\n                  if (error3)\n                    reject(error3);\n                  else\n                    resolve(result3);\n                });\n              });\n            });\n            refs.ref();\n            rebuild.dispose = () => {\n              if (isDisposed)\n                return;\n              isDisposed = true;\n              sendRequest(refs, { command: \"rebuild-dispose\", key }, () => {\n              });\n              refs.unref();\n            };\n          }\n          result.rebuild = rebuild;\n        }\n        if (response.watch) {\n          if (!stop) {\n            let isStopped = false;\n            refs.ref();\n            stop = () => {\n              if (isStopped)\n                return;\n              isStopped = true;\n              watchCallbacks.delete(key);\n              sendRequest(refs, { command: \"watch-stop\", key }, () => {\n              });\n              refs.unref();\n            };\n            if (watch) {\n              watchCallbacks.set(key, (serviceStopError, watchResponse) => {\n                if (serviceStopError) {\n                  if (watch.onRebuild)\n                    watch.onRebuild(serviceStopError, null);\n                  return;\n                }\n                let result2 = {\n                  errors: replaceDetailsInMessages(watchResponse.errors, details),\n                  warnings: replaceDetailsInMessages(watchResponse.warnings, details)\n                };\n                copyResponseToResult(watchResponse, result2);\n                runOnEndCallbacks(result2, logPluginError, () => {\n                  if (result2.errors.length > 0) {\n                    if (watch.onRebuild)\n                      watch.onRebuild(failureErrorWithLog(\"Build failed\", result2.errors, result2.warnings), null);\n                    return;\n                  }\n                  if (watchResponse.rebuildID !== void 0)\n                    result2.rebuild = rebuild;\n                  result2.stop = stop;\n                  if (watch.onRebuild)\n                    watch.onRebuild(null, result2);\n                });\n              });\n            }\n          }\n          result.stop = stop;\n        }\n        callback2(null, result);\n      });\n    };\n    if (write && streamIn.isWriteUnavailable)\n      throw new Error(`The \"write\" option is unavailable in this environment`);\n    if (incremental && streamIn.isSync)\n      throw new Error(`Cannot use \"incremental\" with a synchronous build`);\n    if (watch && streamIn.isSync)\n      throw new Error(`Cannot use \"watch\" with a synchronous build`);\n    sendRequest(refs, request, (error, response) => {\n      if (error)\n        return callback(new Error(error), null);\n      if (serve2) {\n        let serveResponse = response;\n        let isStopped = false;\n        refs.ref();\n        let result = {\n          port: serveResponse.port,\n          host: serveResponse.host,\n          wait: serve2.wait,\n          stop() {\n            if (isStopped)\n              return;\n            isStopped = true;\n            serve2.stop();\n            refs.unref();\n          }\n        };\n        refs.ref();\n        serve2.wait.then(refs.unref, refs.unref);\n        return callback(null, result);\n      }\n      return buildResponseToResult(response, callback);\n    });\n  };\n  let transform2 = ({ callName, refs, input, options, isTTY, fs, callback }) => {\n    const details = createObjectStash();\n    let start = (inputPath) => {\n      try {\n        if (typeof input !== \"string\")\n          throw new Error('The input to \"transform\" must be a string');\n        let {\n          flags,\n          mangleCache\n        } = flagsForTransformOptions(callName, options, isTTY, transformLogLevelDefault);\n        let request = {\n          command: \"transform\",\n          flags,\n          inputFS: inputPath !== null,\n          input: inputPath !== null ? inputPath : input\n        };\n        if (mangleCache)\n          request.mangleCache = mangleCache;\n        sendRequest(refs, request, (error, response) => {\n          if (error)\n            return callback(new Error(error), null);\n          let errors = replaceDetailsInMessages(response.errors, details);\n          let warnings = replaceDetailsInMessages(response.warnings, details);\n          let outstanding = 1;\n          let next = () => {\n            if (--outstanding === 0) {\n              let result = { warnings, code: response.code, map: response.map };\n              if (response.mangleCache)\n                result.mangleCache = response == null ? void 0 : response.mangleCache;\n              callback(null, result);\n            }\n          };\n          if (errors.length > 0)\n            return callback(failureErrorWithLog(\"Transform failed\", errors, warnings), null);\n          if (response.codeFS) {\n            outstanding++;\n            fs.readFile(response.code, (err, contents) => {\n              if (err !== null) {\n                callback(err, null);\n              } else {\n                response.code = contents;\n                next();\n              }\n            });\n          }\n          if (response.mapFS) {\n            outstanding++;\n            fs.readFile(response.map, (err, contents) => {\n              if (err !== null) {\n                callback(err, null);\n              } else {\n                response.map = contents;\n                next();\n              }\n            });\n          }\n          next();\n        });\n      } catch (e) {\n        let flags = [];\n        try {\n          pushLogFlags(flags, options, {}, isTTY, transformLogLevelDefault);\n        } catch (e2) {\n        }\n        const error = extractErrorMessageV8(e, streamIn, details, void 0, \"\");\n        sendRequest(refs, { command: \"error\", flags, error }, () => {\n          error.detail = details.load(error.detail);\n          callback(failureErrorWithLog(\"Transform failed\", [error], []), null);\n        });\n      }\n    };\n    if (typeof input === \"string\" && input.length > 1024 * 1024) {\n      let next = start;\n      start = () => fs.writeFile(input, next);\n    }\n    start(null);\n  };\n  let formatMessages2 = ({ callName, refs, messages, options, callback }) => {\n    let result = sanitizeMessages(messages, \"messages\", null, \"\");\n    if (!options)\n      throw new Error(`Missing second argument in ${callName}() call`);\n    let keys = {};\n    let kind = getFlag(options, keys, \"kind\", mustBeString);\n    let color = getFlag(options, keys, \"color\", mustBeBoolean);\n    let terminalWidth = getFlag(options, keys, \"terminalWidth\", mustBeInteger);\n    checkForInvalidFlags(options, keys, `in ${callName}() call`);\n    if (kind === void 0)\n      throw new Error(`Missing \"kind\" in ${callName}() call`);\n    if (kind !== \"error\" && kind !== \"warning\")\n      throw new Error(`Expected \"kind\" to be \"error\" or \"warning\" in ${callName}() call`);\n    let request = {\n      command: \"format-msgs\",\n      messages: result,\n      isWarning: kind === \"warning\"\n    };\n    if (color !== void 0)\n      request.color = color;\n    if (terminalWidth !== void 0)\n      request.terminalWidth = terminalWidth;\n    sendRequest(refs, request, (error, response) => {\n      if (error)\n        return callback(new Error(error), null);\n      callback(null, response.messages);\n    });\n  };\n  let analyzeMetafile2 = ({ callName, refs, metafile, options, callback }) => {\n    if (options === void 0)\n      options = {};\n    let keys = {};\n    let color = getFlag(options, keys, \"color\", mustBeBoolean);\n    let verbose = getFlag(options, keys, \"verbose\", mustBeBoolean);\n    checkForInvalidFlags(options, keys, `in ${callName}() call`);\n    let request = {\n      command: \"analyze-metafile\",\n      metafile\n    };\n    if (color !== void 0)\n      request.color = color;\n    if (verbose !== void 0)\n      request.verbose = verbose;\n    sendRequest(refs, request, (error, response) => {\n      if (error)\n        return callback(new Error(error), null);\n      callback(null, response.result);\n    });\n  };\n  return {\n    readFromStdout,\n    afterClose,\n    service: {\n      buildOrServe,\n      transform: transform2,\n      formatMessages: formatMessages2,\n      analyzeMetafile: analyzeMetafile2\n    }\n  };\n}\nfunction createObjectStash() {\n  const map = /* @__PURE__ */ new Map();\n  let nextID = 0;\n  return {\n    load(id) {\n      return map.get(id);\n    },\n    store(value) {\n      if (value === void 0)\n        return -1;\n      const id = nextID++;\n      map.set(id, value);\n      return id;\n    }\n  };\n}\nfunction extractCallerV8(e, streamIn, ident) {\n  let note;\n  let tried = false;\n  return () => {\n    if (tried)\n      return note;\n    tried = true;\n    try {\n      let lines = (e.stack + \"\").split(\"\\n\");\n      lines.splice(1, 1);\n      let location = parseStackLinesV8(streamIn, lines, ident);\n      if (location) {\n        note = { text: e.message, location };\n        return note;\n      }\n    } catch (e2) {\n    }\n  };\n}\nfunction extractErrorMessageV8(e, streamIn, stash, note, pluginName) {\n  let text = \"Internal error\";\n  let location = null;\n  try {\n    text = (e && e.message || e) + \"\";\n  } catch (e2) {\n  }\n  try {\n    location = parseStackLinesV8(streamIn, (e.stack + \"\").split(\"\\n\"), \"\");\n  } catch (e2) {\n  }\n  return { id: \"\", pluginName, text, location, notes: note ? [note] : [], detail: stash ? stash.store(e) : -1 };\n}\nfunction parseStackLinesV8(streamIn, lines, ident) {\n  let at = \"    at \";\n  if (streamIn.readFileSync && !lines[0].startsWith(at) && lines[1].startsWith(at)) {\n    for (let i = 1; i < lines.length; i++) {\n      let line = lines[i];\n      if (!line.startsWith(at))\n        continue;\n      line = line.slice(at.length);\n      while (true) {\n        let match = /^(?:new |async )?\\S+ \\((.*)\\)$/.exec(line);\n        if (match) {\n          line = match[1];\n          continue;\n        }\n        match = /^eval at \\S+ \\((.*)\\)(?:, \\S+:\\d+:\\d+)?$/.exec(line);\n        if (match) {\n          line = match[1];\n          continue;\n        }\n        match = /^(\\S+):(\\d+):(\\d+)$/.exec(line);\n        if (match) {\n          let contents;\n          try {\n            contents = streamIn.readFileSync(match[1], \"utf8\");\n          } catch (e) {\n            break;\n          }\n          let lineText = contents.split(/\\r\\n|\\r|\\n|\\u2028|\\u2029/)[+match[2] - 1] || \"\";\n          let column = +match[3] - 1;\n          let length = lineText.slice(column, column + ident.length) === ident ? ident.length : 0;\n          return {\n            file: match[1],\n            namespace: \"file\",\n            line: +match[2],\n            column: encodeUTF8(lineText.slice(0, column)).length,\n            length: encodeUTF8(lineText.slice(column, column + length)).length,\n            lineText: lineText + \"\\n\" + lines.slice(1).join(\"\\n\"),\n            suggestion: \"\"\n          };\n        }\n        break;\n      }\n    }\n  }\n  return null;\n}\nfunction failureErrorWithLog(text, errors, warnings) {\n  let limit = 5;\n  let summary = errors.length < 1 ? \"\" : ` with ${errors.length} error${errors.length < 2 ? \"\" : \"s\"}:` + errors.slice(0, limit + 1).map((e, i) => {\n    if (i === limit)\n      return \"\\n...\";\n    if (!e.location)\n      return `\nerror: ${e.text}`;\n    let { file, line, column } = e.location;\n    let pluginText = e.pluginName ? `[plugin: ${e.pluginName}] ` : \"\";\n    return `\n${file}:${line}:${column}: ERROR: ${pluginText}${e.text}`;\n  }).join(\"\");\n  let error = new Error(`${text}${summary}`);\n  error.errors = errors;\n  error.warnings = warnings;\n  return error;\n}\nfunction replaceDetailsInMessages(messages, stash) {\n  for (const message of messages) {\n    message.detail = stash.load(message.detail);\n  }\n  return messages;\n}\nfunction sanitizeLocation(location, where) {\n  if (location == null)\n    return null;\n  let keys = {};\n  let file = getFlag(location, keys, \"file\", mustBeString);\n  let namespace = getFlag(location, keys, \"namespace\", mustBeString);\n  let line = getFlag(location, keys, \"line\", mustBeInteger);\n  let column = getFlag(location, keys, \"column\", mustBeInteger);\n  let length = getFlag(location, keys, \"length\", mustBeInteger);\n  let lineText = getFlag(location, keys, \"lineText\", mustBeString);\n  let suggestion = getFlag(location, keys, \"suggestion\", mustBeString);\n  checkForInvalidFlags(location, keys, where);\n  return {\n    file: file || \"\",\n    namespace: namespace || \"\",\n    line: line || 0,\n    column: column || 0,\n    length: length || 0,\n    lineText: lineText || \"\",\n    suggestion: suggestion || \"\"\n  };\n}\nfunction sanitizeMessages(messages, property, stash, fallbackPluginName) {\n  let messagesClone = [];\n  let index = 0;\n  for (const message of messages) {\n    let keys = {};\n    let id = getFlag(message, keys, \"id\", mustBeString);\n    let pluginName = getFlag(message, keys, \"pluginName\", mustBeString);\n    let text = getFlag(message, keys, \"text\", mustBeString);\n    let location = getFlag(message, keys, \"location\", mustBeObjectOrNull);\n    let notes = getFlag(message, keys, \"notes\", mustBeArray);\n    let detail = getFlag(message, keys, \"detail\", canBeAnything);\n    let where = `in element ${index} of \"${property}\"`;\n    checkForInvalidFlags(message, keys, where);\n    let notesClone = [];\n    if (notes) {\n      for (const note of notes) {\n        let noteKeys = {};\n        let noteText = getFlag(note, noteKeys, \"text\", mustBeString);\n        let noteLocation = getFlag(note, noteKeys, \"location\", mustBeObjectOrNull);\n        checkForInvalidFlags(note, noteKeys, where);\n        notesClone.push({\n          text: noteText || \"\",\n          location: sanitizeLocation(noteLocation, where)\n        });\n      }\n    }\n    messagesClone.push({\n      id: id || \"\",\n      pluginName: pluginName || fallbackPluginName,\n      text: text || \"\",\n      location: sanitizeLocation(location, where),\n      notes: notesClone,\n      detail: stash ? stash.store(detail) : -1\n    });\n    index++;\n  }\n  return messagesClone;\n}\nfunction sanitizeStringArray(values, property) {\n  const result = [];\n  for (const value of values) {\n    if (typeof value !== \"string\")\n      throw new Error(`${JSON.stringify(property)} must be an array of strings`);\n    result.push(value);\n  }\n  return result;\n}\nfunction convertOutputFiles({ path, contents }) {\n  let text = null;\n  return {\n    path,\n    contents,\n    get text() {\n      if (text === null)\n        text = decodeUTF8(contents);\n      return text;\n    }\n  };\n}\n\n// lib/npm/browser.ts\nvar version = \"0.14.49\";\nvar build = (options) => ensureServiceIsRunning().build(options);\nvar serve = () => {\n  throw new Error(`The \"serve\" API only works in node`);\n};\nvar transform = (input, options) => ensureServiceIsRunning().transform(input, options);\nvar formatMessages = (messages, options) => ensureServiceIsRunning().formatMessages(messages, options);\nvar analyzeMetafile = (metafile, options) => ensureServiceIsRunning().analyzeMetafile(metafile, options);\nvar buildSync = () => {\n  throw new Error(`The \"buildSync\" API only works in node`);\n};\nvar transformSync = () => {\n  throw new Error(`The \"transformSync\" API only works in node`);\n};\nvar formatMessagesSync = () => {\n  throw new Error(`The \"formatMessagesSync\" API only works in node`);\n};\nvar analyzeMetafileSync = () => {\n  throw new Error(`The \"analyzeMetafileSync\" API only works in node`);\n};\nvar initializePromise;\nvar longLivedService;\nvar ensureServiceIsRunning = () => {\n  if (longLivedService)\n    return longLivedService;\n  if (initializePromise)\n    throw new Error('You need to wait for the promise returned from \"initialize\" to be resolved before calling this');\n  throw new Error('You need to call \"initialize\" before calling this');\n};\nvar initialize = (options) => {\n  options = validateInitializeOptions(options || {});\n  let wasmURL = options.wasmURL;\n  let wasmModule = options.wasmModule;\n  let useWorker = options.worker !== false;\n  if (!wasmURL && !wasmModule)\n    throw new Error('Must provide either the \"wasmURL\" option or the \"wasmModule\" option');\n  if (initializePromise)\n    throw new Error('Cannot call \"initialize\" more than once');\n  initializePromise = startRunningService(wasmURL || \"\", wasmModule, useWorker);\n  initializePromise.catch(() => {\n    initializePromise = void 0;\n  });\n  return initializePromise;\n};\nvar startRunningService = (wasmURL, wasmModule, useWorker) => __async(void 0, null, function* () {\n  let wasm;\n  if (wasmModule) {\n    wasm = wasmModule;\n  } else {\n    let res = yield fetch(wasmURL);\n    if (!res.ok)\n      throw new Error(`Failed to download ${JSON.stringify(wasmURL)}`);\n    wasm = yield res.arrayBuffer();\n  }\n  let worker;\n  if (useWorker) {\n    let blob = new Blob([`onmessage=${'((postMessage) => {\\n      // Copyright 2018 The Go Authors. All rights reserved.\\n      // Use of this source code is governed by a BSD-style\\n      // license that can be found in the LICENSE file.\\n      var __async = (__this, __arguments, generator) => {\\n        return new Promise((resolve, reject) => {\\n          var fulfilled = (value) => {\\n            try {\\n              step(generator.next(value));\\n            } catch (e) {\\n              reject(e);\\n            }\\n          };\\n          var rejected = (value) => {\\n            try {\\n              step(generator.throw(value));\\n            } catch (e) {\\n              reject(e);\\n            }\\n          };\\n          var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);\\n          step((generator = generator.apply(__this, __arguments)).next());\\n        });\\n      };\\n      let onmessage;\\n      let globalThis = {};\\n      for (let o = self; o; o = Object.getPrototypeOf(o))\\n        for (let k of Object.getOwnPropertyNames(o))\\n          if (!(k in globalThis))\\n            Object.defineProperty(globalThis, k, { get: () => self[k] });\\n      \"use strict\";\\n      (() => {\\n        const enosys = () => {\\n          const err = new Error(\"not implemented\");\\n          err.code = \"ENOSYS\";\\n          return err;\\n        };\\n        if (!globalThis.fs) {\\n          let outputBuf = \"\";\\n          globalThis.fs = {\\n            constants: { O_WRONLY: -1, O_RDWR: -1, O_CREAT: -1, O_TRUNC: -1, O_APPEND: -1, O_EXCL: -1 },\\n            writeSync(fd, buf) {\\n              outputBuf += decoder.decode(buf);\\n              const nl = outputBuf.lastIndexOf(\"\\\\n\");\\n              if (nl != -1) {\\n                console.log(outputBuf.substr(0, nl));\\n                outputBuf = outputBuf.substr(nl + 1);\\n              }\\n              return buf.length;\\n            },\\n            write(fd, buf, offset, length, position, callback) {\\n              if (offset !== 0 || length !== buf.length || position !== null) {\\n                callback(enosys());\\n                return;\\n              }\\n              const n = this.writeSync(fd, buf);\\n              callback(null, n);\\n            },\\n            chmod(path, mode, callback) {\\n              callback(enosys());\\n            },\\n            chown(path, uid, gid, callback) {\\n              callback(enosys());\\n            },\\n            close(fd, callback) {\\n              callback(enosys());\\n            },\\n            fchmod(fd, mode, callback) {\\n              callback(enosys());\\n            },\\n            fchown(fd, uid, gid, callback) {\\n              callback(enosys());\\n            },\\n            fstat(fd, callback) {\\n              callback(enosys());\\n            },\\n            fsync(fd, callback) {\\n              callback(null);\\n            },\\n            ftruncate(fd, length, callback) {\\n              callback(enosys());\\n            },\\n            lchown(path, uid, gid, callback) {\\n              callback(enosys());\\n            },\\n            link(path, link, callback) {\\n              callback(enosys());\\n            },\\n            lstat(path, callback) {\\n              callback(enosys());\\n            },\\n            mkdir(path, perm, callback) {\\n              callback(enosys());\\n            },\\n            open(path, flags, mode, callback) {\\n              callback(enosys());\\n            },\\n            read(fd, buffer, offset, length, position, callback) {\\n              callback(enosys());\\n            },\\n            readdir(path, callback) {\\n              callback(enosys());\\n            },\\n            readlink(path, callback) {\\n              callback(enosys());\\n            },\\n            rename(from, to, callback) {\\n              callback(enosys());\\n            },\\n            rmdir(path, callback) {\\n              callback(enosys());\\n            },\\n            stat(path, callback) {\\n              callback(enosys());\\n            },\\n            symlink(path, link, callback) {\\n              callback(enosys());\\n            },\\n            truncate(path, length, callback) {\\n              callback(enosys());\\n            },\\n            unlink(path, callback) {\\n              callback(enosys());\\n            },\\n            utimes(path, atime, mtime, callback) {\\n              callback(enosys());\\n            }\\n          };\\n        }\\n        if (!globalThis.process) {\\n          globalThis.process = {\\n            getuid() {\\n              return -1;\\n            },\\n            getgid() {\\n              return -1;\\n            },\\n            geteuid() {\\n              return -1;\\n            },\\n            getegid() {\\n              return -1;\\n            },\\n            getgroups() {\\n              throw enosys();\\n            },\\n            pid: -1,\\n            ppid: -1,\\n            umask() {\\n              throw enosys();\\n            },\\n            cwd() {\\n              throw enosys();\\n            },\\n            chdir() {\\n              throw enosys();\\n            }\\n          };\\n        }\\n        if (!globalThis.crypto) {\\n          throw new Error(\"globalThis.crypto is not available, polyfill required (crypto.getRandomValues only)\");\\n        }\\n        if (!globalThis.performance) {\\n          throw new Error(\"globalThis.performance is not available, polyfill required (performance.now only)\");\\n        }\\n        if (!globalThis.TextEncoder) {\\n          throw new Error(\"globalThis.TextEncoder is not available, polyfill required\");\\n        }\\n        if (!globalThis.TextDecoder) {\\n          throw new Error(\"globalThis.TextDecoder is not available, polyfill required\");\\n        }\\n        const encoder = new TextEncoder(\"utf-8\");\\n        const decoder = new TextDecoder(\"utf-8\");\\n        globalThis.Go = class {\\n          constructor() {\\n            this.argv = [\"js\"];\\n            this.env = {};\\n            this.exit = (code) => {\\n              if (code !== 0) {\\n                console.warn(\"exit code:\", code);\\n              }\\n            };\\n            this._exitPromise = new Promise((resolve) => {\\n              this._resolveExitPromise = resolve;\\n            });\\n            this._pendingEvent = null;\\n            this._scheduledTimeouts = /* @__PURE__ */ new Map();\\n            this._nextCallbackTimeoutID = 1;\\n            const setInt64 = (addr, v) => {\\n              this.mem.setUint32(addr + 0, v, true);\\n              this.mem.setUint32(addr + 4, Math.floor(v / 4294967296), true);\\n            };\\n            const getInt64 = (addr) => {\\n              const low = this.mem.getUint32(addr + 0, true);\\n              const high = this.mem.getInt32(addr + 4, true);\\n              return low + high * 4294967296;\\n            };\\n            const loadValue = (addr) => {\\n              const f = this.mem.getFloat64(addr, true);\\n              if (f === 0) {\\n                return void 0;\\n              }\\n              if (!isNaN(f)) {\\n                return f;\\n              }\\n              const id = this.mem.getUint32(addr, true);\\n              return this._values[id];\\n            };\\n            const storeValue = (addr, v) => {\\n              const nanHead = 2146959360;\\n              if (typeof v === \"number\" && v !== 0) {\\n                if (isNaN(v)) {\\n                  this.mem.setUint32(addr + 4, nanHead, true);\\n                  this.mem.setUint32(addr, 0, true);\\n                  return;\\n                }\\n                this.mem.setFloat64(addr, v, true);\\n                return;\\n              }\\n              if (v === void 0) {\\n                this.mem.setFloat64(addr, 0, true);\\n                return;\\n              }\\n              let id = this._ids.get(v);\\n              if (id === void 0) {\\n                id = this._idPool.pop();\\n                if (id === void 0) {\\n                  id = this._values.length;\\n                }\\n                this._values[id] = v;\\n                this._goRefCounts[id] = 0;\\n                this._ids.set(v, id);\\n              }\\n              this._goRefCounts[id]++;\\n              let typeFlag = 0;\\n              switch (typeof v) {\\n                case \"object\":\\n                  if (v !== null) {\\n                    typeFlag = 1;\\n                  }\\n                  break;\\n                case \"string\":\\n                  typeFlag = 2;\\n                  break;\\n                case \"symbol\":\\n                  typeFlag = 3;\\n                  break;\\n                case \"function\":\\n                  typeFlag = 4;\\n                  break;\\n              }\\n              this.mem.setUint32(addr + 4, nanHead | typeFlag, true);\\n              this.mem.setUint32(addr, id, true);\\n            };\\n            const loadSlice = (addr) => {\\n              const array = getInt64(addr + 0);\\n              const len = getInt64(addr + 8);\\n              return new Uint8Array(this._inst.exports.mem.buffer, array, len);\\n            };\\n            const loadSliceOfValues = (addr) => {\\n              const array = getInt64(addr + 0);\\n              const len = getInt64(addr + 8);\\n              const a = new Array(len);\\n              for (let i = 0; i < len; i++) {\\n                a[i] = loadValue(array + i * 8);\\n              }\\n              return a;\\n            };\\n            const loadString = (addr) => {\\n              const saddr = getInt64(addr + 0);\\n              const len = getInt64(addr + 8);\\n              return decoder.decode(new DataView(this._inst.exports.mem.buffer, saddr, len));\\n            };\\n            const timeOrigin = Date.now() - performance.now();\\n            this.importObject = {\\n              go: {\\n                \"runtime.wasmExit\": (sp) => {\\n                  sp >>>= 0;\\n                  const code = this.mem.getInt32(sp + 8, true);\\n                  this.exited = true;\\n                  delete this._inst;\\n                  delete this._values;\\n                  delete this._goRefCounts;\\n                  delete this._ids;\\n                  delete this._idPool;\\n                  this.exit(code);\\n                },\\n                \"runtime.wasmWrite\": (sp) => {\\n                  sp >>>= 0;\\n                  const fd = getInt64(sp + 8);\\n                  const p = getInt64(sp + 16);\\n                  const n = this.mem.getInt32(sp + 24, true);\\n                  globalThis.fs.writeSync(fd, new Uint8Array(this._inst.exports.mem.buffer, p, n));\\n                },\\n                \"runtime.resetMemoryDataView\": (sp) => {\\n                  sp >>>= 0;\\n                  this.mem = new DataView(this._inst.exports.mem.buffer);\\n                },\\n                \"runtime.nanotime1\": (sp) => {\\n                  sp >>>= 0;\\n                  setInt64(sp + 8, (timeOrigin + performance.now()) * 1e6);\\n                },\\n                \"runtime.walltime\": (sp) => {\\n                  sp >>>= 0;\\n                  const msec = new Date().getTime();\\n                  setInt64(sp + 8, msec / 1e3);\\n                  this.mem.setInt32(sp + 16, msec % 1e3 * 1e6, true);\\n                },\\n                \"runtime.scheduleTimeoutEvent\": (sp) => {\\n                  sp >>>= 0;\\n                  const id = this._nextCallbackTimeoutID;\\n                  this._nextCallbackTimeoutID++;\\n                  this._scheduledTimeouts.set(id, setTimeout(() => {\\n                    this._resume();\\n                    while (this._scheduledTimeouts.has(id)) {\\n                      console.warn(\"scheduleTimeoutEvent: missed timeout event\");\\n                      this._resume();\\n                    }\\n                  }, getInt64(sp + 8) + 1));\\n                  this.mem.setInt32(sp + 16, id, true);\\n                },\\n                \"runtime.clearTimeoutEvent\": (sp) => {\\n                  sp >>>= 0;\\n                  const id = this.mem.getInt32(sp + 8, true);\\n                  clearTimeout(this._scheduledTimeouts.get(id));\\n                  this._scheduledTimeouts.delete(id);\\n                },\\n                \"runtime.getRandomData\": (sp) => {\\n                  sp >>>= 0;\\n                  crypto.getRandomValues(loadSlice(sp + 8));\\n                },\\n                \"syscall/js.finalizeRef\": (sp) => {\\n                  sp >>>= 0;\\n                  const id = this.mem.getUint32(sp + 8, true);\\n                  this._goRefCounts[id]--;\\n                  if (this._goRefCounts[id] === 0) {\\n                    const v = this._values[id];\\n                    this._values[id] = null;\\n                    this._ids.delete(v);\\n                    this._idPool.push(id);\\n                  }\\n                },\\n                \"syscall/js.stringVal\": (sp) => {\\n                  sp >>>= 0;\\n                  storeValue(sp + 24, loadString(sp + 8));\\n                },\\n                \"syscall/js.valueGet\": (sp) => {\\n                  sp >>>= 0;\\n                  const result = Reflect.get(loadValue(sp + 8), loadString(sp + 16));\\n                  sp = this._inst.exports.getsp() >>> 0;\\n                  storeValue(sp + 32, result);\\n                },\\n                \"syscall/js.valueSet\": (sp) => {\\n                  sp >>>= 0;\\n                  Reflect.set(loadValue(sp + 8), loadString(sp + 16), loadValue(sp + 32));\\n                },\\n                \"syscall/js.valueDelete\": (sp) => {\\n                  sp >>>= 0;\\n                  Reflect.deleteProperty(loadValue(sp + 8), loadString(sp + 16));\\n                },\\n                \"syscall/js.valueIndex\": (sp) => {\\n                  sp >>>= 0;\\n                  storeValue(sp + 24, Reflect.get(loadValue(sp + 8), getInt64(sp + 16)));\\n                },\\n                \"syscall/js.valueSetIndex\": (sp) => {\\n                  sp >>>= 0;\\n                  Reflect.set(loadValue(sp + 8), getInt64(sp + 16), loadValue(sp + 24));\\n                },\\n                \"syscall/js.valueCall\": (sp) => {\\n                  sp >>>= 0;\\n                  try {\\n                    const v = loadValue(sp + 8);\\n                    const m = Reflect.get(v, loadString(sp + 16));\\n                    const args = loadSliceOfValues(sp + 32);\\n                    const result = Reflect.apply(m, v, args);\\n                    sp = this._inst.exports.getsp() >>> 0;\\n                    storeValue(sp + 56, result);\\n                    this.mem.setUint8(sp + 64, 1);\\n                  } catch (err) {\\n                    sp = this._inst.exports.getsp() >>> 0;\\n                    storeValue(sp + 56, err);\\n                    this.mem.setUint8(sp + 64, 0);\\n                  }\\n                },\\n                \"syscall/js.valueInvoke\": (sp) => {\\n                  sp >>>= 0;\\n                  try {\\n                    const v = loadValue(sp + 8);\\n                    const args = loadSliceOfValues(sp + 16);\\n                    const result = Reflect.apply(v, void 0, args);\\n                    sp = this._inst.exports.getsp() >>> 0;\\n                    storeValue(sp + 40, result);\\n                    this.mem.setUint8(sp + 48, 1);\\n                  } catch (err) {\\n                    sp = this._inst.exports.getsp() >>> 0;\\n                    storeValue(sp + 40, err);\\n                    this.mem.setUint8(sp + 48, 0);\\n                  }\\n                },\\n                \"syscall/js.valueNew\": (sp) => {\\n                  sp >>>= 0;\\n                  try {\\n                    const v = loadValue(sp + 8);\\n                    const args = loadSliceOfValues(sp + 16);\\n                    const result = Reflect.construct(v, args);\\n                    sp = this._inst.exports.getsp() >>> 0;\\n                    storeValue(sp + 40, result);\\n                    this.mem.setUint8(sp + 48, 1);\\n                  } catch (err) {\\n                    sp = this._inst.exports.getsp() >>> 0;\\n                    storeValue(sp + 40, err);\\n                    this.mem.setUint8(sp + 48, 0);\\n                  }\\n                },\\n                \"syscall/js.valueLength\": (sp) => {\\n                  sp >>>= 0;\\n                  setInt64(sp + 16, parseInt(loadValue(sp + 8).length));\\n                },\\n                \"syscall/js.valuePrepareString\": (sp) => {\\n                  sp >>>= 0;\\n                  const str = encoder.encode(String(loadValue(sp + 8)));\\n                  storeValue(sp + 16, str);\\n                  setInt64(sp + 24, str.length);\\n                },\\n                \"syscall/js.valueLoadString\": (sp) => {\\n                  sp >>>= 0;\\n                  const str = loadValue(sp + 8);\\n                  loadSlice(sp + 16).set(str);\\n                },\\n                \"syscall/js.valueInstanceOf\": (sp) => {\\n                  sp >>>= 0;\\n                  this.mem.setUint8(sp + 24, loadValue(sp + 8) instanceof loadValue(sp + 16) ? 1 : 0);\\n                },\\n                \"syscall/js.copyBytesToGo\": (sp) => {\\n                  sp >>>= 0;\\n                  const dst = loadSlice(sp + 8);\\n                  const src = loadValue(sp + 32);\\n                  if (!(src instanceof Uint8Array || src instanceof Uint8ClampedArray)) {\\n                    this.mem.setUint8(sp + 48, 0);\\n                    return;\\n                  }\\n                  const toCopy = src.subarray(0, dst.length);\\n                  dst.set(toCopy);\\n                  setInt64(sp + 40, toCopy.length);\\n                  this.mem.setUint8(sp + 48, 1);\\n                },\\n                \"syscall/js.copyBytesToJS\": (sp) => {\\n                  sp >>>= 0;\\n                  const dst = loadValue(sp + 8);\\n                  const src = loadSlice(sp + 16);\\n                  if (!(dst instanceof Uint8Array || dst instanceof Uint8ClampedArray)) {\\n                    this.mem.setUint8(sp + 48, 0);\\n                    return;\\n                  }\\n                  const toCopy = src.subarray(0, dst.length);\\n                  dst.set(toCopy);\\n                  setInt64(sp + 40, toCopy.length);\\n                  this.mem.setUint8(sp + 48, 1);\\n                },\\n                \"debug\": (value) => {\\n                  console.log(value);\\n                }\\n              }\\n            };\\n          }\\n          run(instance) {\\n            return __async(this, null, function* () {\\n              if (!(instance instanceof WebAssembly.Instance)) {\\n                throw new Error(\"Go.run: WebAssembly.Instance expected\");\\n              }\\n              this._inst = instance;\\n              this.mem = new DataView(this._inst.exports.mem.buffer);\\n              this._values = [\\n                NaN,\\n                0,\\n                null,\\n                true,\\n                false,\\n                globalThis,\\n                this\\n              ];\\n              this._goRefCounts = new Array(this._values.length).fill(Infinity);\\n              this._ids = /* @__PURE__ */ new Map([\\n                [0, 1],\\n                [null, 2],\\n                [true, 3],\\n                [false, 4],\\n                [globalThis, 5],\\n                [this, 6]\\n              ]);\\n              this._idPool = [];\\n              this.exited = false;\\n              let offset = 4096;\\n              const strPtr = (str) => {\\n                const ptr = offset;\\n                const bytes = encoder.encode(str + \"\\\\0\");\\n                new Uint8Array(this.mem.buffer, offset, bytes.length).set(bytes);\\n                offset += bytes.length;\\n                if (offset % 8 !== 0) {\\n                  offset += 8 - offset % 8;\\n                }\\n                return ptr;\\n              };\\n              const argc = this.argv.length;\\n              const argvPtrs = [];\\n              this.argv.forEach((arg) => {\\n                argvPtrs.push(strPtr(arg));\\n              });\\n              argvPtrs.push(0);\\n              const keys = Object.keys(this.env).sort();\\n              keys.forEach((key) => {\\n                argvPtrs.push(strPtr(`${key}=${this.env[key]}`));\\n              });\\n              argvPtrs.push(0);\\n              const argv = offset;\\n              argvPtrs.forEach((ptr) => {\\n                this.mem.setUint32(offset, ptr, true);\\n                this.mem.setUint32(offset + 4, 0, true);\\n                offset += 8;\\n              });\\n              const wasmMinDataAddr = 4096 + 8192;\\n              if (offset >= wasmMinDataAddr) {\\n                throw new Error(\"total length of command line and environment variables exceeds limit\");\\n              }\\n              this._inst.exports.run(argc, argv);\\n              if (this.exited) {\\n                this._resolveExitPromise();\\n              }\\n              yield this._exitPromise;\\n            });\\n          }\\n          _resume() {\\n            if (this.exited) {\\n              throw new Error(\"Go program has already exited\");\\n            }\\n            this._inst.exports.resume();\\n            if (this.exited) {\\n              this._resolveExitPromise();\\n            }\\n          }\\n          _makeFuncWrapper(id) {\\n            const go = this;\\n            return function() {\\n              const event = { id, this: this, args: arguments };\\n              go._pendingEvent = event;\\n              go._resume();\\n              return event.result;\\n            };\\n          }\\n        };\\n      })();\\n      onmessage = ({ data: wasm }) => {\\n        let decoder = new TextDecoder();\\n        let fs = globalThis.fs;\\n        let stderr = \"\";\\n        fs.writeSync = (fd, buffer) => {\\n          if (fd === 1) {\\n            postMessage(buffer);\\n          } else if (fd === 2) {\\n            stderr += decoder.decode(buffer);\\n            let parts = stderr.split(\"\\\\n\");\\n            if (parts.length > 1)\\n              console.log(parts.slice(0, -1).join(\"\\\\n\"));\\n            stderr = parts[parts.length - 1];\\n          } else {\\n            throw new Error(\"Bad write\");\\n          }\\n          return buffer.length;\\n        };\\n        let stdin = [];\\n        let resumeStdin;\\n        let stdinPos = 0;\\n        onmessage = ({ data }) => {\\n          if (data.length > 0) {\\n            stdin.push(data);\\n            if (resumeStdin)\\n              resumeStdin();\\n          }\\n        };\\n        fs.read = (fd, buffer, offset, length, position, callback) => {\\n          if (fd !== 0 || offset !== 0 || length !== buffer.length || position !== null) {\\n            throw new Error(\"Bad read\");\\n          }\\n          if (stdin.length === 0) {\\n            resumeStdin = () => fs.read(fd, buffer, offset, length, position, callback);\\n            return;\\n          }\\n          let first = stdin[0];\\n          let count = Math.max(0, Math.min(length, first.length - stdinPos));\\n          buffer.set(first.subarray(stdinPos, stdinPos + count), offset);\\n          stdinPos += count;\\n          if (stdinPos === first.length) {\\n            stdin.shift();\\n            stdinPos = 0;\\n          }\\n          callback(null, count);\\n        };\\n        let go = new globalThis.Go();\\n        go.argv = [\"\", `--service=${\"0.14.49\"}`];\\n        if (wasm instanceof WebAssembly.Module) {\\n          WebAssembly.instantiate(wasm, go.importObject).then((instance) => go.run(instance));\\n        } else {\\n          WebAssembly.instantiate(wasm, go.importObject).then(({ instance }) => go.run(instance));\\n        }\\n      };\\n      return (m) => onmessage(m);\\n    })'}(postMessage)`], { type: \"text/javascript\" });\n    worker = new Worker(URL.createObjectURL(blob));\n  } else {\n    let onmessage = ((postMessage) => {\n      // Copyright 2018 The Go Authors. All rights reserved.\n      // Use of this source code is governed by a BSD-style\n      // license that can be found in the LICENSE file.\n      var __async = (__this, __arguments, generator) => {\n        return new Promise((resolve, reject) => {\n          var fulfilled = (value) => {\n            try {\n              step(generator.next(value));\n            } catch (e) {\n              reject(e);\n            }\n          };\n          var rejected = (value) => {\n            try {\n              step(generator.throw(value));\n            } catch (e) {\n              reject(e);\n            }\n          };\n          var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);\n          step((generator = generator.apply(__this, __arguments)).next());\n        });\n      };\n      let onmessage;\n      let globalThis = {};\n      for (let o = self; o; o = Object.getPrototypeOf(o))\n        for (let k of Object.getOwnPropertyNames(o))\n          if (!(k in globalThis))\n            Object.defineProperty(globalThis, k, { get: () => self[k] });\n      \"use strict\";\n      (() => {\n        const enosys = () => {\n          const err = new Error(\"not implemented\");\n          err.code = \"ENOSYS\";\n          return err;\n        };\n        if (!globalThis.fs) {\n          let outputBuf = \"\";\n          globalThis.fs = {\n            constants: { O_WRONLY: -1, O_RDWR: -1, O_CREAT: -1, O_TRUNC: -1, O_APPEND: -1, O_EXCL: -1 },\n            writeSync(fd, buf) {\n              outputBuf += decoder.decode(buf);\n              const nl = outputBuf.lastIndexOf(\"\\n\");\n              if (nl != -1) {\n                console.log(outputBuf.substr(0, nl));\n                outputBuf = outputBuf.substr(nl + 1);\n              }\n              return buf.length;\n            },\n            write(fd, buf, offset, length, position, callback) {\n              if (offset !== 0 || length !== buf.length || position !== null) {\n                callback(enosys());\n                return;\n              }\n              const n = this.writeSync(fd, buf);\n              callback(null, n);\n            },\n            chmod(path, mode, callback) {\n              callback(enosys());\n            },\n            chown(path, uid, gid, callback) {\n              callback(enosys());\n            },\n            close(fd, callback) {\n              callback(enosys());\n            },\n            fchmod(fd, mode, callback) {\n              callback(enosys());\n            },\n            fchown(fd, uid, gid, callback) {\n              callback(enosys());\n            },\n            fstat(fd, callback) {\n              callback(enosys());\n            },\n            fsync(fd, callback) {\n              callback(null);\n            },\n            ftruncate(fd, length, callback) {\n              callback(enosys());\n            },\n            lchown(path, uid, gid, callback) {\n              callback(enosys());\n            },\n            link(path, link, callback) {\n              callback(enosys());\n            },\n            lstat(path, callback) {\n              callback(enosys());\n            },\n            mkdir(path, perm, callback) {\n              callback(enosys());\n            },\n            open(path, flags, mode, callback) {\n              callback(enosys());\n            },\n            read(fd, buffer, offset, length, position, callback) {\n              callback(enosys());\n            },\n            readdir(path, callback) {\n              callback(enosys());\n            },\n            readlink(path, callback) {\n              callback(enosys());\n            },\n            rename(from, to, callback) {\n              callback(enosys());\n            },\n            rmdir(path, callback) {\n              callback(enosys());\n            },\n            stat(path, callback) {\n              callback(enosys());\n            },\n            symlink(path, link, callback) {\n              callback(enosys());\n            },\n            truncate(path, length, callback) {\n              callback(enosys());\n            },\n            unlink(path, callback) {\n              callback(enosys());\n            },\n            utimes(path, atime, mtime, callback) {\n              callback(enosys());\n            }\n          };\n        }\n        if (!globalThis.process) {\n          globalThis.process = {\n            getuid() {\n              return -1;\n            },\n            getgid() {\n              return -1;\n            },\n            geteuid() {\n              return -1;\n            },\n            getegid() {\n              return -1;\n            },\n            getgroups() {\n              throw enosys();\n            },\n            pid: -1,\n            ppid: -1,\n            umask() {\n              throw enosys();\n            },\n            cwd() {\n              throw enosys();\n            },\n            chdir() {\n              throw enosys();\n            }\n          };\n        }\n        if (!globalThis.crypto) {\n          throw new Error(\"globalThis.crypto is not available, polyfill required (crypto.getRandomValues only)\");\n        }\n        if (!globalThis.performance) {\n          throw new Error(\"globalThis.performance is not available, polyfill required (performance.now only)\");\n        }\n        if (!globalThis.TextEncoder) {\n          throw new Error(\"globalThis.TextEncoder is not available, polyfill required\");\n        }\n        if (!globalThis.TextDecoder) {\n          throw new Error(\"globalThis.TextDecoder is not available, polyfill required\");\n        }\n        const encoder = new TextEncoder(\"utf-8\");\n        const decoder = new TextDecoder(\"utf-8\");\n        globalThis.Go = class {\n          constructor() {\n            this.argv = [\"js\"];\n            this.env = {};\n            this.exit = (code) => {\n              if (code !== 0) {\n                console.warn(\"exit code:\", code);\n              }\n            };\n            this._exitPromise = new Promise((resolve) => {\n              this._resolveExitPromise = resolve;\n            });\n            this._pendingEvent = null;\n            this._scheduledTimeouts = /* @__PURE__ */ new Map();\n            this._nextCallbackTimeoutID = 1;\n            const setInt64 = (addr, v) => {\n              this.mem.setUint32(addr + 0, v, true);\n              this.mem.setUint32(addr + 4, Math.floor(v / 4294967296), true);\n            };\n            const getInt64 = (addr) => {\n              const low = this.mem.getUint32(addr + 0, true);\n              const high = this.mem.getInt32(addr + 4, true);\n              return low + high * 4294967296;\n            };\n            const loadValue = (addr) => {\n              const f = this.mem.getFloat64(addr, true);\n              if (f === 0) {\n                return void 0;\n              }\n              if (!isNaN(f)) {\n                return f;\n              }\n              const id = this.mem.getUint32(addr, true);\n              return this._values[id];\n            };\n            const storeValue = (addr, v) => {\n              const nanHead = 2146959360;\n              if (typeof v === \"number\" && v !== 0) {\n                if (isNaN(v)) {\n                  this.mem.setUint32(addr + 4, nanHead, true);\n                  this.mem.setUint32(addr, 0, true);\n                  return;\n                }\n                this.mem.setFloat64(addr, v, true);\n                return;\n              }\n              if (v === void 0) {\n                this.mem.setFloat64(addr, 0, true);\n                return;\n              }\n              let id = this._ids.get(v);\n              if (id === void 0) {\n                id = this._idPool.pop();\n                if (id === void 0) {\n                  id = this._values.length;\n                }\n                this._values[id] = v;\n                this._goRefCounts[id] = 0;\n                this._ids.set(v, id);\n              }\n              this._goRefCounts[id]++;\n              let typeFlag = 0;\n              switch (typeof v) {\n                case \"object\":\n                  if (v !== null) {\n                    typeFlag = 1;\n                  }\n                  break;\n                case \"string\":\n                  typeFlag = 2;\n                  break;\n                case \"symbol\":\n                  typeFlag = 3;\n                  break;\n                case \"function\":\n                  typeFlag = 4;\n                  break;\n              }\n              this.mem.setUint32(addr + 4, nanHead | typeFlag, true);\n              this.mem.setUint32(addr, id, true);\n            };\n            const loadSlice = (addr) => {\n              const array = getInt64(addr + 0);\n              const len = getInt64(addr + 8);\n              return new Uint8Array(this._inst.exports.mem.buffer, array, len);\n            };\n            const loadSliceOfValues = (addr) => {\n              const array = getInt64(addr + 0);\n              const len = getInt64(addr + 8);\n              const a = new Array(len);\n              for (let i = 0; i < len; i++) {\n                a[i] = loadValue(array + i * 8);\n              }\n              return a;\n            };\n            const loadString = (addr) => {\n              const saddr = getInt64(addr + 0);\n              const len = getInt64(addr + 8);\n              return decoder.decode(new DataView(this._inst.exports.mem.buffer, saddr, len));\n            };\n            const timeOrigin = Date.now() - performance.now();\n            this.importObject = {\n              go: {\n                \"runtime.wasmExit\": (sp) => {\n                  sp >>>= 0;\n                  const code = this.mem.getInt32(sp + 8, true);\n                  this.exited = true;\n                  delete this._inst;\n                  delete this._values;\n                  delete this._goRefCounts;\n                  delete this._ids;\n                  delete this._idPool;\n                  this.exit(code);\n                },\n                \"runtime.wasmWrite\": (sp) => {\n                  sp >>>= 0;\n                  const fd = getInt64(sp + 8);\n                  const p = getInt64(sp + 16);\n                  const n = this.mem.getInt32(sp + 24, true);\n                  globalThis.fs.writeSync(fd, new Uint8Array(this._inst.exports.mem.buffer, p, n));\n                },\n                \"runtime.resetMemoryDataView\": (sp) => {\n                  sp >>>= 0;\n                  this.mem = new DataView(this._inst.exports.mem.buffer);\n                },\n                \"runtime.nanotime1\": (sp) => {\n                  sp >>>= 0;\n                  setInt64(sp + 8, (timeOrigin + performance.now()) * 1e6);\n                },\n                \"runtime.walltime\": (sp) => {\n                  sp >>>= 0;\n                  const msec = new Date().getTime();\n                  setInt64(sp + 8, msec / 1e3);\n                  this.mem.setInt32(sp + 16, msec % 1e3 * 1e6, true);\n                },\n                \"runtime.scheduleTimeoutEvent\": (sp) => {\n                  sp >>>= 0;\n                  const id = this._nextCallbackTimeoutID;\n                  this._nextCallbackTimeoutID++;\n                  this._scheduledTimeouts.set(id, setTimeout(() => {\n                    this._resume();\n                    while (this._scheduledTimeouts.has(id)) {\n                      console.warn(\"scheduleTimeoutEvent: missed timeout event\");\n                      this._resume();\n                    }\n                  }, getInt64(sp + 8) + 1));\n                  this.mem.setInt32(sp + 16, id, true);\n                },\n                \"runtime.clearTimeoutEvent\": (sp) => {\n                  sp >>>= 0;\n                  const id = this.mem.getInt32(sp + 8, true);\n                  clearTimeout(this._scheduledTimeouts.get(id));\n                  this._scheduledTimeouts.delete(id);\n                },\n                \"runtime.getRandomData\": (sp) => {\n                  sp >>>= 0;\n                  crypto.getRandomValues(loadSlice(sp + 8));\n                },\n                \"syscall/js.finalizeRef\": (sp) => {\n                  sp >>>= 0;\n                  const id = this.mem.getUint32(sp + 8, true);\n                  this._goRefCounts[id]--;\n                  if (this._goRefCounts[id] === 0) {\n                    const v = this._values[id];\n                    this._values[id] = null;\n                    this._ids.delete(v);\n                    this._idPool.push(id);\n                  }\n                },\n                \"syscall/js.stringVal\": (sp) => {\n                  sp >>>= 0;\n                  storeValue(sp + 24, loadString(sp + 8));\n                },\n                \"syscall/js.valueGet\": (sp) => {\n                  sp >>>= 0;\n                  const result = Reflect.get(loadValue(sp + 8), loadString(sp + 16));\n                  sp = this._inst.exports.getsp() >>> 0;\n                  storeValue(sp + 32, result);\n                },\n                \"syscall/js.valueSet\": (sp) => {\n                  sp >>>= 0;\n                  Reflect.set(loadValue(sp + 8), loadString(sp + 16), loadValue(sp + 32));\n                },\n                \"syscall/js.valueDelete\": (sp) => {\n                  sp >>>= 0;\n                  Reflect.deleteProperty(loadValue(sp + 8), loadString(sp + 16));\n                },\n                \"syscall/js.valueIndex\": (sp) => {\n                  sp >>>= 0;\n                  storeValue(sp + 24, Reflect.get(loadValue(sp + 8), getInt64(sp + 16)));\n                },\n                \"syscall/js.valueSetIndex\": (sp) => {\n                  sp >>>= 0;\n                  Reflect.set(loadValue(sp + 8), getInt64(sp + 16), loadValue(sp + 24));\n                },\n                \"syscall/js.valueCall\": (sp) => {\n                  sp >>>= 0;\n                  try {\n                    const v = loadValue(sp + 8);\n                    const m = Reflect.get(v, loadString(sp + 16));\n                    const args = loadSliceOfValues(sp + 32);\n                    const result = Reflect.apply(m, v, args);\n                    sp = this._inst.exports.getsp() >>> 0;\n                    storeValue(sp + 56, result);\n                    this.mem.setUint8(sp + 64, 1);\n                  } catch (err) {\n                    sp = this._inst.exports.getsp() >>> 0;\n                    storeValue(sp + 56, err);\n                    this.mem.setUint8(sp + 64, 0);\n                  }\n                },\n                \"syscall/js.valueInvoke\": (sp) => {\n                  sp >>>= 0;\n                  try {\n                    const v = loadValue(sp + 8);\n                    const args = loadSliceOfValues(sp + 16);\n                    const result = Reflect.apply(v, void 0, args);\n                    sp = this._inst.exports.getsp() >>> 0;\n                    storeValue(sp + 40, result);\n                    this.mem.setUint8(sp + 48, 1);\n                  } catch (err) {\n                    sp = this._inst.exports.getsp() >>> 0;\n                    storeValue(sp + 40, err);\n                    this.mem.setUint8(sp + 48, 0);\n                  }\n                },\n                \"syscall/js.valueNew\": (sp) => {\n                  sp >>>= 0;\n                  try {\n                    const v = loadValue(sp + 8);\n                    const args = loadSliceOfValues(sp + 16);\n                    const result = Reflect.construct(v, args);\n                    sp = this._inst.exports.getsp() >>> 0;\n                    storeValue(sp + 40, result);\n                    this.mem.setUint8(sp + 48, 1);\n                  } catch (err) {\n                    sp = this._inst.exports.getsp() >>> 0;\n                    storeValue(sp + 40, err);\n                    this.mem.setUint8(sp + 48, 0);\n                  }\n                },\n                \"syscall/js.valueLength\": (sp) => {\n                  sp >>>= 0;\n                  setInt64(sp + 16, parseInt(loadValue(sp + 8).length));\n                },\n                \"syscall/js.valuePrepareString\": (sp) => {\n                  sp >>>= 0;\n                  const str = encoder.encode(String(loadValue(sp + 8)));\n                  storeValue(sp + 16, str);\n                  setInt64(sp + 24, str.length);\n                },\n                \"syscall/js.valueLoadString\": (sp) => {\n                  sp >>>= 0;\n                  const str = loadValue(sp + 8);\n                  loadSlice(sp + 16).set(str);\n                },\n                \"syscall/js.valueInstanceOf\": (sp) => {\n                  sp >>>= 0;\n                  this.mem.setUint8(sp + 24, loadValue(sp + 8) instanceof loadValue(sp + 16) ? 1 : 0);\n                },\n                \"syscall/js.copyBytesToGo\": (sp) => {\n                  sp >>>= 0;\n                  const dst = loadSlice(sp + 8);\n                  const src = loadValue(sp + 32);\n                  if (!(src instanceof Uint8Array || src instanceof Uint8ClampedArray)) {\n                    this.mem.setUint8(sp + 48, 0);\n                    return;\n                  }\n                  const toCopy = src.subarray(0, dst.length);\n                  dst.set(toCopy);\n                  setInt64(sp + 40, toCopy.length);\n                  this.mem.setUint8(sp + 48, 1);\n                },\n                \"syscall/js.copyBytesToJS\": (sp) => {\n                  sp >>>= 0;\n                  const dst = loadValue(sp + 8);\n                  const src = loadSlice(sp + 16);\n                  if (!(dst instanceof Uint8Array || dst instanceof Uint8ClampedArray)) {\n                    this.mem.setUint8(sp + 48, 0);\n                    return;\n                  }\n                  const toCopy = src.subarray(0, dst.length);\n                  dst.set(toCopy);\n                  setInt64(sp + 40, toCopy.length);\n                  this.mem.setUint8(sp + 48, 1);\n                },\n                \"debug\": (value) => {\n                  console.log(value);\n                }\n              }\n            };\n          }\n          run(instance) {\n            return __async(this, null, function* () {\n              if (!(instance instanceof WebAssembly.Instance)) {\n                throw new Error(\"Go.run: WebAssembly.Instance expected\");\n              }\n              this._inst = instance;\n              this.mem = new DataView(this._inst.exports.mem.buffer);\n              this._values = [\n                NaN,\n                0,\n                null,\n                true,\n                false,\n                globalThis,\n                this\n              ];\n              this._goRefCounts = new Array(this._values.length).fill(Infinity);\n              this._ids = /* @__PURE__ */ new Map([\n                [0, 1],\n                [null, 2],\n                [true, 3],\n                [false, 4],\n                [globalThis, 5],\n                [this, 6]\n              ]);\n              this._idPool = [];\n              this.exited = false;\n              let offset = 4096;\n              const strPtr = (str) => {\n                const ptr = offset;\n                const bytes = encoder.encode(str + \"\\0\");\n                new Uint8Array(this.mem.buffer, offset, bytes.length).set(bytes);\n                offset += bytes.length;\n                if (offset % 8 !== 0) {\n                  offset += 8 - offset % 8;\n                }\n                return ptr;\n              };\n              const argc = this.argv.length;\n              const argvPtrs = [];\n              this.argv.forEach((arg) => {\n                argvPtrs.push(strPtr(arg));\n              });\n              argvPtrs.push(0);\n              const keys = Object.keys(this.env).sort();\n              keys.forEach((key) => {\n                argvPtrs.push(strPtr(`${key}=${this.env[key]}`));\n              });\n              argvPtrs.push(0);\n              const argv = offset;\n              argvPtrs.forEach((ptr) => {\n                this.mem.setUint32(offset, ptr, true);\n                this.mem.setUint32(offset + 4, 0, true);\n                offset += 8;\n              });\n              const wasmMinDataAddr = 4096 + 8192;\n              if (offset >= wasmMinDataAddr) {\n                throw new Error(\"total length of command line and environment variables exceeds limit\");\n              }\n              this._inst.exports.run(argc, argv);\n              if (this.exited) {\n                this._resolveExitPromise();\n              }\n              yield this._exitPromise;\n            });\n          }\n          _resume() {\n            if (this.exited) {\n              throw new Error(\"Go program has already exited\");\n            }\n            this._inst.exports.resume();\n            if (this.exited) {\n              this._resolveExitPromise();\n            }\n          }\n          _makeFuncWrapper(id) {\n            const go = this;\n            return function() {\n              const event = { id, this: this, args: arguments };\n              go._pendingEvent = event;\n              go._resume();\n              return event.result;\n            };\n          }\n        };\n      })();\n      onmessage = ({ data: wasm }) => {\n        let decoder = new TextDecoder();\n        let fs = globalThis.fs;\n        let stderr = \"\";\n        fs.writeSync = (fd, buffer) => {\n          if (fd === 1) {\n            postMessage(buffer);\n          } else if (fd === 2) {\n            stderr += decoder.decode(buffer);\n            let parts = stderr.split(\"\\n\");\n            if (parts.length > 1)\n              console.log(parts.slice(0, -1).join(\"\\n\"));\n            stderr = parts[parts.length - 1];\n          } else {\n            throw new Error(\"Bad write\");\n          }\n          return buffer.length;\n        };\n        let stdin = [];\n        let resumeStdin;\n        let stdinPos = 0;\n        onmessage = ({ data }) => {\n          if (data.length > 0) {\n            stdin.push(data);\n            if (resumeStdin)\n              resumeStdin();\n          }\n        };\n        fs.read = (fd, buffer, offset, length, position, callback) => {\n          if (fd !== 0 || offset !== 0 || length !== buffer.length || position !== null) {\n            throw new Error(\"Bad read\");\n          }\n          if (stdin.length === 0) {\n            resumeStdin = () => fs.read(fd, buffer, offset, length, position, callback);\n            return;\n          }\n          let first = stdin[0];\n          let count = Math.max(0, Math.min(length, first.length - stdinPos));\n          buffer.set(first.subarray(stdinPos, stdinPos + count), offset);\n          stdinPos += count;\n          if (stdinPos === first.length) {\n            stdin.shift();\n            stdinPos = 0;\n          }\n          callback(null, count);\n        };\n        let go = new globalThis.Go();\n        go.argv = [\"\", `--service=${\"0.14.49\"}`];\n        if (wasm instanceof WebAssembly.Module) {\n          WebAssembly.instantiate(wasm, go.importObject).then((instance) => go.run(instance));\n        } else {\n          WebAssembly.instantiate(wasm, go.importObject).then(({ instance }) => go.run(instance));\n        }\n      };\n      return (m) => onmessage(m);\n    })((data) => worker.onmessage({ data }));\n    worker = {\n      onmessage: null,\n      postMessage: (data) => setTimeout(() => onmessage({ data })),\n      terminate() {\n      }\n    };\n  }\n  worker.postMessage(wasm);\n  worker.onmessage = ({ data }) => readFromStdout(data);\n  let { readFromStdout, service } = createChannel({\n    writeToStdin(bytes) {\n      worker.postMessage(bytes);\n    },\n    isSync: false,\n    isWriteUnavailable: true,\n    esbuild: browser_exports\n  });\n  longLivedService = {\n    build: (options) => new Promise((resolve, reject) => service.buildOrServe({\n      callName: \"build\",\n      refs: null,\n      serveOptions: null,\n      options,\n      isTTY: false,\n      defaultWD: \"/\",\n      callback: (err, res) => err ? reject(err) : resolve(res)\n    })),\n    transform: (input, options) => new Promise((resolve, reject) => service.transform({\n      callName: \"transform\",\n      refs: null,\n      input,\n      options: options || {},\n      isTTY: false,\n      fs: {\n        readFile(_, callback) {\n          callback(new Error(\"Internal error\"), null);\n        },\n        writeFile(_, callback) {\n          callback(null);\n        }\n      },\n      callback: (err, res) => err ? reject(err) : resolve(res)\n    })),\n    formatMessages: (messages, options) => new Promise((resolve, reject) => service.formatMessages({\n      callName: \"formatMessages\",\n      refs: null,\n      messages,\n      options,\n      callback: (err, res) => err ? reject(err) : resolve(res)\n    })),\n    analyzeMetafile: (metafile, options) => new Promise((resolve, reject) => service.analyzeMetafile({\n      callName: \"analyzeMetafile\",\n      refs: null,\n      metafile: typeof metafile === \"string\" ? metafile : JSON.stringify(metafile),\n      options,\n      callback: (err, res) => err ? reject(err) : resolve(res)\n    }))\n  };\n});\nvar browser_default = browser_exports;\n})(typeof module===\"object\"?module:{set exports(x){(typeof self!==\"undefined\"?self:this).esbuild=x}});\n"],"names":[],"mappings":"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"}