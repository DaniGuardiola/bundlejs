{"version":3,"file":"mod-983296e5.mjs","sources":["../../core/src/deno/lz4/mod.ts"],"sourcesContent":["// https://deno.land/x/lz4@v0.1.2/mod.ts\n// Copyright 2020-present the denosaurs team. All rights reserved. MIT license.\n\n// import init, {\n//     source,\n//     lz4_compress,\n//     lz4_decompress,\n// } from \"./wasm\";\n\nlet initialized = false;\nlet initWASM: typeof import(\"./wasm\");\nexport const getWASM = async () => {\n    if (initWASM) return initWASM;\n\n    const wasm = await import(\"./wasm\");\n    const { default: init, source } = wasm;\n    \n    if (!initialized) await init(await source());\n    return (initWASM = wasm);\n}\n\n/**\n * Compress a byte array using lz4.\n *\n * ```typescript\n * import { compress } from \"https://deno.land/x/lz4/mod.ts\";\n * const text = new TextEncoder().encode(\"X\".repeat(64));\n * console.log(text.length);                   // 64 Bytes\n * console.log(compress(text).length);         // 6  Bytes\n * ```\n *\n * @param input Input data.\n */\nexport async function compress(input: Uint8Array): Promise<Uint8Array> {\n    const { lz4_compress } = await getWASM();\n    return lz4_compress(input);\n}\n\n/**\n * Decompress a byte array using lz4.\n *\n * ```typescript\n * import { decompress } from \"https://deno.land/x/lz4/mod.ts\";\n * const compressed = Uint8Array.from([ 31, 88, 1, 0, 44, 0 ]);\n * console.log(compressed.length);             // 6 Bytes\n * console.log(decompress(compressed).length); // 64 Bytes\n * ```\n *\n * @param input Input data.\n */\nexport async function decompress(input: Uint8Array): Promise<Uint8Array> {\n    const { lz4_decompress } = await getWASM();\n    return lz4_decompress(input);\n}"],"names":[],"mappings":"AAUA,IAAI;AACG,MAAM,UAAU,YAAY;AAC3B,MAAA;AAAiB,WAAA;AAEf,QAAA,OAAO,MAAM,OAAO;AACpB,QAAA,EAAE,SAAS,MAAM,WAAW;AAEV,QAAA,KAAK,MAAM,OAAA,CAAQ;AAC3C,SAAQ,WAAW;AACvB;AAcA,wBAA+B,OAAwC;AAC7D,QAAA,EAAE,iBAAiB,MAAM;AAC/B,SAAO,aAAa,KAAK;AAC7B;AAcA,0BAAiC,OAAwC;AAC/D,QAAA,EAAE,mBAAmB,MAAM;AACjC,SAAO,eAAe,KAAK;AAC/B;;"}