{"version":3,"file":"index.mjs","sources":["../../../node_modules/.pnpm/nanoid@4.0.0/node_modules/nanoid/non-secure/index.js","../src/plugin/module-mapper.ts","../src/utils/is-module-tree.ts","../src/plugin/data.ts","../src/plugin/build-stats.ts","../src/plugin/compress.ts","../src/plugin/index.ts","../src/index.ts"],"sourcesContent":["let urlAlphabet =\n  'useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict'\nexport let customAlphabet = (alphabet, defaultSize = 21) => {\n  return (size = defaultSize) => {\n    let id = ''\n    let i = size\n    while (i--) {\n      id += alphabet[(Math.random() * alphabet.length) | 0]\n    }\n    return id\n  }\n}\nexport let nanoid = (size = 21) => {\n  let id = ''\n  let i = size\n  while (i--) {\n    id += urlAlphabet[(Math.random() * 64) | 0]\n  }\n  return id\n}\n","import { customAlphabet } from \"nanoid/non-secure\";\n\nimport type { ModuleImport, ModuleMeta, ModulePart, ModuleLengths, ModuleUID } from \"../types/types\";\n\nconst nanoid = customAlphabet(\"1234567890abcdef\", 4);\n\nconst UNIQUE_PREFIX = nanoid();\nlet COUNTER = 0;\n\nconst uniqueId = (): ModuleUID => `${UNIQUE_PREFIX}-${COUNTER++}`;\n\ntype ModuleIdStorage = {\n  uid: ModuleUID;\n  meta: Omit<ModuleMeta, \"imported\" | \"importedBy\"> & { imported: Set<string>; importedBy: Set<string> };\n};\n\nexport class ModuleMapper {\n  private nodeParts: Record<ModuleUID, ModulePart> = {};\n  private nodeMetas: Record<string, ModuleIdStorage> = {};\n\n  constructor(private projectRoot: string | RegExp) {}\n\n  trimProjectRootId(moduleId: string): string {\n    return moduleId.replace(this.projectRoot, \"\");\n  }\n\n  getModuleUid(moduleId: string): ModuleUID {\n    if (!(moduleId in this.nodeMetas)) {\n      this.nodeMetas[moduleId] = {\n        uid: uniqueId(),\n        meta: { id: this.trimProjectRootId(moduleId), moduleParts: {}, imported: new Set(), importedBy: new Set() },\n      };\n    }\n\n    return this.nodeMetas[moduleId].uid;\n  }\n\n  getBundleModuleUid(bundleId: string, moduleId: string): ModuleUID {\n    if (!(moduleId in this.nodeMetas)) {\n      this.nodeMetas[moduleId] = {\n        uid: uniqueId(),\n        meta: { id: this.trimProjectRootId(moduleId), moduleParts: {}, imported: new Set(), importedBy: new Set() },\n      };\n    }\n    if (!(bundleId in this.nodeMetas[moduleId].meta.moduleParts)) {\n      this.nodeMetas[moduleId].meta.moduleParts[bundleId] = uniqueId();\n    }\n\n    return this.nodeMetas[moduleId].meta.moduleParts[bundleId];\n  }\n\n  setNodePart(bundleId: string, moduleId: string, value: ModuleLengths): ModuleUID {\n    const uid = this.getBundleModuleUid(bundleId, moduleId);\n    if (uid in this.nodeParts) {\n      throw new Error(\n        `Override module: bundle id ${bundleId}, module id ${moduleId}, value ${JSON.stringify(\n          value\n        )}, existing value: ${JSON.stringify(this.nodeParts[uid])}`\n      );\n    }\n    this.nodeParts[uid] = { ...value, mainUid: this.getModuleUid(moduleId) };\n    return uid;\n  }\n\n  setNodeMeta(moduleId: string, value: { isEntry?: boolean; isExternal?: boolean }): void {\n    this.getModuleUid(moduleId);\n    this.nodeMetas[moduleId].meta.isEntry = value.isEntry;\n    this.nodeMetas[moduleId].meta.isExternal = value.isExternal;\n  }\n\n  hasNodePart(bundleId: string, moduleId: string): boolean {\n    if (!(moduleId in this.nodeMetas)) {\n      return false;\n    }\n    if (!(bundleId in this.nodeMetas[moduleId].meta.moduleParts)) {\n      return false;\n    }\n    if (!(this.nodeMetas[moduleId].meta.moduleParts[bundleId] in this.nodeParts)) {\n      return false;\n    }\n    return true;\n  }\n\n  getNodeParts(): ModuleMapper[\"nodeParts\"] {\n    return this.nodeParts;\n  }\n\n  getNodeMetas(): Record<ModuleUID, ModuleMeta> {\n    const nodeMetas: Record<ModuleUID, ModuleMeta> = {};\n    for (const { uid, meta } of Object.values(this.nodeMetas)) {\n      nodeMetas[uid] = {\n        ...meta,\n        imported: [...meta.imported].map((rawImport) => {\n          const [uid, dynamic] = rawImport.split(\",\");\n          const importData: ModuleImport = { uid };\n          if (dynamic === \"true\") {\n            importData.dynamic = true;\n          }\n          return importData;\n        }),\n        importedBy: [...meta.importedBy].map((rawImport) => {\n          const [uid, dynamic] = rawImport.split(\",\");\n          const importData: ModuleImport = { uid };\n          if (dynamic === \"true\") {\n            importData.dynamic = true;\n          }\n          return importData;\n        }),\n      };\n    }\n    return nodeMetas;\n  }\n\n  addImportedByLink(targetId: string, sourceId: string): void {\n    const sourceUid = this.getModuleUid(sourceId);\n    this.getModuleUid(targetId);\n    this.nodeMetas[targetId].meta.importedBy.add(sourceUid);\n  }\n\n  addImportedLink(sourceId: string, targetId: string, dynamic = false): void {\n    const targetUid = this.getModuleUid(targetId);\n    this.getModuleUid(sourceId);\n    this.nodeMetas[sourceId].meta.imported.add(String([targetUid, dynamic]));\n  }\n}","import type { ModuleTree, ModuleTreeLeaf } from \"../types/types\";\n\nexport const isModuleTree = (mod: ModuleTree | ModuleTreeLeaf): mod is ModuleTree => \"children\" in mod;","import type { GetModuleInfo } from \"../types/rollup\";\nimport type { ModuleLengths, ModuleTree, ModuleTreeLeaf } from \"../types/types\";\n\nimport { isModuleTree } from \"../utils/is-module-tree\";\nimport { ModuleMapper } from \"./module-mapper\";\n\ninterface MappedNode {\n  uid: string;\n}\n\nconst addToPath = (moduleId: string, tree: ModuleTree, modulePath: string[], node: MappedNode): void => {\n  if (modulePath.length === 0) {\n    throw new Error(`Error adding node to path ${moduleId}`);\n  }\n\n  const [head, ...rest] = modulePath;\n\n  if (rest.length === 0) {\n    tree.children.push({ ...node, name: head });\n    return;\n  } else {\n    let newTree = tree.children.find((folder): folder is ModuleTree => folder.name === head && isModuleTree(folder));\n\n    if (!newTree) {\n      newTree = { name: head, children: [] };\n      tree.children.push(newTree);\n    }\n    addToPath(moduleId, newTree, rest, node);\n    return;\n  }\n};\n\n// TODO try to make it without recursion, but still typesafe\nconst mergeSingleChildTrees = (tree: ModuleTree): ModuleTree | ModuleTreeLeaf => {\n  if (tree.children.length === 1) {\n    const child = tree.children[0];\n    const name = `${tree.name}/${child.name}`;\n    if (isModuleTree(child)) {\n      tree.name = name;\n      tree.children = child.children;\n      return mergeSingleChildTrees(tree);\n    } else {\n      return {\n        name,\n        uid: child.uid,\n      };\n    }\n  } else {\n    tree.children = tree.children.map((node) => {\n      if (isModuleTree(node)) {\n        return mergeSingleChildTrees(node);\n      } else {\n        return node;\n      }\n    });\n    return tree;\n  }\n};\n\nexport const buildTree = (\n  bundleId: string,\n  modules: Array<ModuleLengths & { id: string }>,\n  mapper: ModuleMapper\n): ModuleTree => {\n  const tree: ModuleTree = {\n    name: bundleId,\n    children: [],\n  };\n\n  for (const { id, renderedLength, gzipLength, brotliLength } of modules) {\n    const bundleModuleUid = mapper.setNodePart(bundleId, id, { renderedLength, gzipLength, brotliLength });\n\n    const trimmedModuleId = mapper.trimProjectRootId(id);\n\n    const pathParts = trimmedModuleId.split(/\\\\|\\//).filter((p) => p !== \"\");\n    addToPath(trimmedModuleId, tree, pathParts, { uid: bundleModuleUid });\n  }\n\n  tree.children = tree.children.map((node) => {\n    if (isModuleTree(node)) {\n      return mergeSingleChildTrees(node);\n    } else {\n      return node;\n    }\n  });\n\n  return tree;\n};\n\nexport const mergeTrees = (trees: Array<ModuleTree | ModuleTreeLeaf>): ModuleTree => {\n  const newTree = {\n    name: \"root\",\n    children: trees,\n    isRoot: true,\n  };\n\n  return newTree;\n};\n\nexport const addLinks = (startModuleId: string, getModuleInfo: GetModuleInfo, mapper: ModuleMapper): void => {\n  const processedNodes: Record<string, boolean> = {};\n\n  const moduleIds = [startModuleId];\n\n  while (moduleIds.length > 0) {\n    const moduleId = moduleIds.shift() as string;\n\n    if (processedNodes[moduleId]) {\n      continue;\n    } else {\n      processedNodes[moduleId] = true;\n    }\n\n    const moduleInfo = getModuleInfo(moduleId);\n\n    if (!moduleInfo) {\n      return;\n    }\n\n    if (moduleInfo.isEntry) {\n      mapper.setNodeMeta(moduleId, { isEntry: true });\n    }\n    if (moduleInfo.isExternal) {\n      mapper.setNodeMeta(moduleId, { isExternal: true });\n    }\n\n    for (const importedId of moduleInfo.importedIds) {\n      mapper.addImportedByLink(importedId, moduleId);\n      mapper.addImportedLink(moduleId, importedId);\n\n      moduleIds.push(importedId);\n    }\n    for (const importedId of moduleInfo.dynamicallyImportedIds) {\n      mapper.addImportedByLink(importedId, moduleId);\n      mapper.addImportedLink(moduleId, importedId, true);\n\n      moduleIds.push(importedId);\n    }\n  }\n};","import type { VisualizerData } from \"../types/types\";\nimport type { TemplateType } from \"../types/template-types\";\n\nconst htmlEscape = (str: string) =>\n  str\n    .replace(/&/g, \"&amp;\")\n    .replace(/\"/g, \"&quot;\")\n    .replace(/'/g, \"&#39;\")\n    .replace(/</g, \"&lt;\")\n    .replace(/>/g, \"&gt;\");\n\ninterface BuildHtmlOptions {\n  title: string;\n  data: VisualizerData;\n  template: TemplateType;\n}\n\nexport async function buildHtml({ title, data, template }: BuildHtmlOptions): Promise<string> {\n  return `\n    <!DOCTYPE html>\n    <html lang=\"en\">\n      <head>\n        <meta charset=\"UTF-8\" />\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n        <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\" />\n        <title>${htmlEscape(title)}</title>\n        <link rel='stylesheet' href='/js/${template}.min.css' />\n      </head>\n      <body>\n        <main></main>\n        <script type=\"module\" defer>\n          import * as drawChart from \"/js/${template}.min.js\";\n          const data = ${JSON.stringify(data)};\n          \n          const run = () => {\n            const width = window.innerWidth;\n            const height = window.innerHeight;\n            const chartNode = document.querySelector(\"main\");\n            drawChart.default(chartNode, data, width, height);\n          };\n      \n          window.addEventListener('resize', run);\n      \n          document.addEventListener('DOMContentLoaded', run);\n        </script>\n      </body>\n    </html>\n  `;\n}\n","// import { gzip, getWASM } from \"../../../deno/denoflate/mod\";\n// import { compress } from \"@bundlejs/core/src/deno/denoflate/mod\";\n\nexport type SizeGetter = (code: Uint8Array) => Promise<number>;\n\nexport const emptySizeGetter: SizeGetter = () => Promise.resolve(0);\nexport const gzipSizeGetter: SizeGetter = async (code: Uint8Array) => {\n    // @bundlejs/core/src/deno/denoflate/mod.ts\n    // ../../../core/src/deno/denoflate/mod\n    const { gzip, getWASM } = await import(\"@bundlejs/core/src/deno/denoflate/mod\");\n    await getWASM();\n\n    const data = await gzip(code, 9);\n    // const data = [];\n    return data.length;\n};\n\nexport const brotliSizeGetter: SizeGetter = async (code: Uint8Array) => {\n    // @bundlejs/core/deno/brotli/mod.ts\n    // ../../../core/src/deno/brotli/mod\n    const { compress } = await import(\"@bundlejs/core/src/deno/brotli/mod\");\n    const data = await compress(code, code.length, 11);\n    return data.length;\n};","import type { TemplateType } from \"../types/template-types\";\nimport type { ModuleLengths, ModuleTree, ModuleTreeLeaf, VisualizerData } from \"../types/types\";\nimport type { Metadata, MetadataOutput } from \"../types/metafile\";\nimport type { ModuleInfo } from \"../types/rollup\";\nimport type { OutputFile } from \"esbuild-wasm\";\n\nimport { ModuleMapper } from \"./module-mapper\";\nimport { addLinks, buildTree, mergeTrees } from \"./data\";\nimport { buildHtml } from \"./build-stats\";\n\nimport { gzipSizeGetter, brotliSizeGetter, emptySizeGetter } from \"./compress\";\n\n/**\n * Analyzer options\n */\nexport interface AnalyzerOptions {\n  title?: string;\n  template?: TemplateType | boolean;\n  gzipSize?: boolean;\n  brotliSize?: boolean;\n}\n\nexport const visualizer = async (metadata: Metadata, outputFiles: OutputFile[], opts: AnalyzerOptions = {}): Promise<string> => {\n  const title = opts.title ?? \"Esbuild Visualizer\";\n  const template = (opts.template == true ? \"treemap\" : opts.template as TemplateType) ?? \"treemap\";\n  const projectRoot = \"\";\n\n  let outputFilesMap = new Map<string, Uint8Array>();\n  outputFiles.forEach(({ path, contents }) => {\n    outputFilesMap.set(path, contents);\n  });\n  // console.log(metadata, outputFiles, Array.from(outputFilesMap.entries()));\n\n  const gzipSize = !!opts.gzipSize;\n  const brotliSize = !!opts.brotliSize;\n  const gzip = gzipSize ? gzipSizeGetter : emptySizeGetter;\n  const brotli = brotliSize ? brotliSizeGetter : emptySizeGetter;\n\n  const ModuleLengths = async ({\n    id,\n    mod\n  }: {\n    id: string;\n    mod: { bytesInOutput: number };\n  }): Promise<ModuleLengths & { id: string }> => {\n    const code = outputFilesMap.get(id);\n    let faultyCode = code == null || code == undefined || code?.length == 0;\n    let [gzipLength, brotliLength, renderedLength] = await Promise.all(faultyCode ? [0, 0, mod.bytesInOutput] : [gzip(code), brotli(code), code?.length])\n    const result = {\n      id,\n      gzipLength,\n      brotliLength,\n      renderedLength\n    };\n    return result;\n  };\n\n  const roots: Array<ModuleTree | ModuleTreeLeaf> = [];\n  const mapper = new ModuleMapper(projectRoot);\n\n  // collect trees\n  for (const [bundleId, bundle] of Object.entries(metadata.outputs)) {\n    const modules = await Promise.all(\n      Object\n        .entries(bundle.inputs)\n        .map(([id, mod]) => ModuleLengths({ id, mod }))\n    );\n    const tree = buildTree(bundleId, modules, mapper);\n\n    const code = outputFilesMap.get(bundleId);\n    if (tree.children.length === 0 && code) {\n      const bundleSizes = await ModuleLengths({\n        id: bundleId,\n        mod: { bytesInOutput: code?.length }\n      });\n\n      const facadeModuleId = `${bundleId}-unknown`;\n      const bundleUid = mapper.setNodePart(bundleId, facadeModuleId, bundleSizes);\n      mapper.setNodeMeta(facadeModuleId, { isEntry: true });\n      const leaf: ModuleTreeLeaf = { name: bundleId, uid: bundleUid };\n      roots.push(leaf);\n    } else {\n      roots.push(tree);\n    }\n  }\n\n  const getModuleInfo = (bundle: MetadataOutput) => (moduleId: string): ModuleInfo => {\n    const input = metadata.inputs?.[moduleId];\n\n    const imports = input?.imports.map((i) => i.path);\n\n    const code = outputFilesMap.get(moduleId);\n\n    return {\n      renderedLength: code?.length ?? bundle.inputs?.[moduleId]?.bytesInOutput ?? 0,\n      importedIds: imports ?? [],\n      dynamicallyImportedIds: [],\n      isEntry: bundle.entryPoint === moduleId,\n      isExternal: false,\n    };\n  };\n\n  for (const [bundleId, bundle] of Object.entries(metadata.outputs)) {\n    if (bundle.entryPoint == null) continue;\n\n    addLinks(bundleId, getModuleInfo(bundle), mapper);\n  }\n\n  const tree = mergeTrees(roots);\n\n  const data: VisualizerData = {\n    version: 3.0,\n    tree,\n    nodeParts: mapper.getNodeParts(),\n    nodeMetas: mapper.getNodeMetas(),\n    env: {},\n    options: {\n      gzip: gzipSize,\n      brotli: brotliSize\n    },\n  };\n\n  const fileContent: string = await buildHtml({\n    title,\n    data,\n    template,\n  });\n\n  return fileContent;\n};\n","// Based off of https://github.com/btd/esbuild-visualizer\nimport type { TemplateType } from \"./types/template-types\";\nimport type { ModuleMeta, ModulePart, ModuleTree, ModuleUID, VisualizerData } from \"./types/types\";\n\nimport type { Metadata } from \"./types/metafile\";\nimport type { OutputFile } from \"esbuild-wasm\";\nimport { AnalyzerOptions, visualizer } from \"./plugin/index\";\n\n\n/**\n * Generates interactive zoomable charts displaing the size of output files. \n * It's a great way to determine what causes the bundle size to be so large. \n */\n//  analysis?: TemplateType | boolean,\n//  metafile: Boolean(CONFIG.analysis),\nexport const analyze = async (metadata: Metadata, outputFiles: OutputFile[], opts: AnalyzerOptions = {}, logger = console.log) => {\n  try {\n    return await visualizer(metadata, outputFiles, {\n      title: \"Bundle Analysis\",\n      ...opts\n    });\n  } catch (err) {\n    let { stack } = (err as Error);\n    logger([`[Analyzer] ${err}`, stack], \"warning\");\n    console.warn(err, stack);\n  }\n};\n"],"names":[],"mappings":"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"}