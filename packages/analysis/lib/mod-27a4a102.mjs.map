{"version":3,"file":"mod-27a4a102.mjs","sources":["../../core/src/deno/brotli/mod.ts"],"sourcesContent":["// https://deno.land/x/brotli@v0.1.4/mod.ts\n// Copyright 2020-present the denosaurs team. All rights reserved. MIT license.\n// import init, {\n//     source,\n//     compress as wasm_compress,\n//     decompress as wasm_decompress,\n// } from \"./wasm\";\n\nlet initialized = false;\nlet initWASM: typeof import(\"./wasm\");\nexport const getWASM = async () => {\n    if (initWASM) return initWASM;\n\n    const wasm = await import(\"./wasm\");\n    const { default: init, source } = wasm;\n    \n    if (!initialized) await init(await source());\n    return (initWASM = wasm);\n}\n\n/**\n * Compress a byte array.\n *\n * ```typescript\n * import { compress } from \"https://deno.land/x/brotli/mod.ts\";\n * const text = new TextEncoder().encode(\"X\".repeat(64));\n * console.log(text.length);                   // 64 Bytes\n * console.log(compress(text).length);         // 10 Bytes\n * ```\n *\n * @param input Input data.\n * @param bufferSize Read buffer size\n * @param quality Controls the compression-speed vs compression-\n * density tradeoff. The higher the quality, the slower the compression.\n * @param lgwin Base 2 logarithm of the sliding window size.\n */\nexport async function compress(\n    input: Uint8Array,\n    bufferSize: number = 4096,\n    quality: number = 6,\n    lgwin: number = 22,\n): Promise<Uint8Array> {\n    const { compress } = await getWASM();\n    return compress(input, bufferSize, quality, lgwin);\n}\n\n/**\n * Decompress a byte array.\n *\n * ```typescript\n * import { decompress } from \"https://deno.land/x/brotli/mod.ts\";\n * const compressed = Uint8Array.from([ 27, 63, 0, 0, 36, 176, 226, 153, 64, 18 ]);\n * console.log(compressed.length);             // 10 Bytes\n * console.log(decompress(compressed).length); // 64 Bytes\n * ```\n *\n * @param input Input data.\n * @param bufferSize Read buffer size\n */\nexport async function decompress(\n    input: Uint8Array,\n    bufferSize: number = 4096,\n): Promise<Uint8Array> {\n    const { decompress } = await getWASM();\n    return decompress(input, bufferSize);\n}"],"names":["initWASM","getWASM","wasm","init","source","compress","input","bufferSize","quality","lgwin","decompress"],"mappings":"AASA,IAAIA;AACG,MAAMC,IAAU,YAAY;AAC3B,MAAAD;AAAiB,WAAAA;AAEf,QAAAE,IAAO,MAAM,OAAO,wBACpB,EAAE,SAASC,GAAM,QAAAC,EAAA,IAAWF;AAEV,eAAAC,EAAK,MAAMC,EAAA,CAAQ,GACnCJ,IAAWE;AACvB;AAkBA,eAAsBG,EAClBC,GACAC,IAAqB,MACrBC,IAAkB,GAClBC,IAAgB,IACG;AACnB,QAAM,EAAE,UAAAJ,MAAa,MAAMJ,EAAQ;AACnC,SAAOI,EAASC,GAAOC,GAAYC,GAASC,CAAK;AACrD;AAesB,eAAAC,EAClBJ,GACAC,IAAqB,MACF;AACnB,QAAM,EAAE,YAAAG,MAAe,MAAMT,EAAQ;AAC9BS,SAAAA,EAAWJ,GAAOC,CAAU;AACvC;"}