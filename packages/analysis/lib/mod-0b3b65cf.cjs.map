{"version":3,"file":"mod-0b3b65cf.cjs","sources":["../../core/src/deno/brotli/mod.ts"],"sourcesContent":["// https://deno.land/x/brotli@v0.1.4/mod.ts\n// Copyright 2020-present the denosaurs team. All rights reserved. MIT license.\n// import init, {\n//     source,\n//     compress as wasm_compress,\n//     decompress as wasm_decompress,\n// } from \"./wasm\";\n\nlet initialized = false;\nlet initWASM: typeof import(\"./wasm\");\nexport const getWASM = async () => {\n    if (initWASM) return initWASM;\n\n    const wasm = await import(\"./wasm\");\n    const { default: init, source } = wasm;\n    \n    if (!initialized) await init(await source());\n    return (initWASM = wasm);\n}\n\n/**\n * Compress a byte array.\n *\n * ```typescript\n * import { compress } from \"https://deno.land/x/brotli/mod.ts\";\n * const text = new TextEncoder().encode(\"X\".repeat(64));\n * console.log(text.length);                   // 64 Bytes\n * console.log(compress(text).length);         // 10 Bytes\n * ```\n *\n * @param input Input data.\n * @param bufferSize Read buffer size\n * @param quality Controls the compression-speed vs compression-\n * density tradeoff. The higher the quality, the slower the compression.\n * @param lgwin Base 2 logarithm of the sliding window size.\n */\nexport async function compress(\n    input: Uint8Array,\n    bufferSize: number = 4096,\n    quality: number = 6,\n    lgwin: number = 22,\n): Promise<Uint8Array> {\n    const { compress } = await getWASM();\n    return compress(input, bufferSize, quality, lgwin);\n}\n\n/**\n * Decompress a byte array.\n *\n * ```typescript\n * import { decompress } from \"https://deno.land/x/brotli/mod.ts\";\n * const compressed = Uint8Array.from([ 27, 63, 0, 0, 36, 176, 226, 153, 64, 18 ]);\n * console.log(compressed.length);             // 10 Bytes\n * console.log(decompress(compressed).length); // 64 Bytes\n * ```\n *\n * @param input Input data.\n * @param bufferSize Read buffer size\n */\nexport async function decompress(\n    input: Uint8Array,\n    bufferSize: number = 4096,\n): Promise<Uint8Array> {\n    const { decompress } = await getWASM();\n    return decompress(input, bufferSize);\n}"],"names":[],"mappings":"gFASA,GAAI,GACG,KAAM,GAAU,SAAY,CAC3B,GAAA,EAAiB,MAAA,GAEf,KAAA,GAAO,KAAM,SAAO,QAAA,EAAA,KAAA,UAAA,CAAA,MAAA,SAAA,qBAAA,IACpB,CAAE,QAAS,EAAM,UAAW,EAEV,YAAA,GAAK,KAAM,GAAA,CAAQ,EACnC,EAAW,CACvB,EAkBA,iBACI,EACA,EAAqB,KACrB,EAAkB,EAClB,EAAgB,GACG,CACb,KAAA,CAAE,SAAa,GAAA,KAAM,GAAQ,EACnC,MAAO,GAAS,EAAO,EAAY,EAAS,CAAK,CACrD,CAgBI,iBAAA,EACA,EAAqB,KACF,CACb,KAAA,CAAE,WAAe,GAAA,KAAM,GAAQ,EAC9B,MAAA,GAAW,EAAO,CAAU,CACvC"}