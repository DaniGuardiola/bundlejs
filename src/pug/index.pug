extends /layouts/layout.pug

block content
  .container
    header
      h1 bundle
      p 
        | a quick npm package size checker 
        strong#visit-counter 


    .search
      i.icon search
      input#search-input(type="text" autocomplete="off" placeholder="Type a package name...")

    .search-results
      .card
        section.content
          h3.font-semibold.text-lg
            a(href='....href' target='_blank')
              | @okikio/animate
          p An animation library for the modern web which utilizes the Web Animation API (WAAPI) to create butter smooth animation.
          p.updated-time
            | Updated 2 days ago by 
            a(href='..._authorHref' target='_blank')
              | @okikio
            | .
        //- section.file-size
          .self-center.uppercase
            .loading
            p Minified + Gzipped


    .push-to-side
      #bundle-time
      .flex.flex-1
      button.btn#run(type='button') Run
      .file-size ...
    #app
      .center-container
        .loading
      #editor
      
    a#product-hunt.place-content-center(href='https://www.producthunt.com/posts/bundle-6?utm_source=badge-featured&utm_medium=badge&utm_souce=badge-bundle-6', target='_blank')
      img(src='https://api.producthunt.com/widgets/embed-image/v1/featured.svg?post_id=300568&theme=dark', alt='bundle - An online npm package bundle size checker | Product Hunt', style='width: 250px; height: 54px;', width='250', height='54')
        
    p * Check the console for error messages and bundled code.
    p * Every 10 results the console will be cleared.
    br
    p * Note: Treeshaking is available, but since esbuild and rollup doesn't have access to each packages package.json, it assumes that there are sideEffects.
    br

    p You can use custom protocols to specify which CDN the module should come from.
    br
    p
      | * esm.run:react   ->   #[a(href="https://esm.run/react" target="_blank" ref="noopener") https://esm.run/react] 
      br
      | * esm.sh:react    ->   #[a(href="https://cdn.esm.sh/react" target="_blank" ref="noopener") https://cdn.esm.sh/react] 
      br
      | * esm:react       ->   #[a(href="https://cdn.esm.sh/react" target="_blank" ref="noopener") https://cdn.esm.sh/react] 
      br
      | * skypack:react   ->   #[a(href="https://cdn.skypack.dev/react" target="_blank" ref="noopener") https://cdn.skypack.dev/react] 
      br
      | * unpkg:react     ->   #[a(href="https://unpkg.com/react" target="_blank" ref="noopener") https://unpkg.com/react] 
      br
      | * jsdelivr:react  ->   #[a(href="https://cdn.jsdelivr.net/npm/react" target="_blank" ref="noopener") https://cdn.jsdelivr.net/npm/react] 
    br
    p e.g.
    :markdown-it(linkify langPrefix='language-')
      ```typescript
      import { toStr } from "skypack:@okikio/animate";
      // or
      export * from "esm:@okikio/animate"; 
      ```
    br
    p.relative
      span="* If an error occurs try using a different CDN, by default "
      strong bundle
      |  uses
      a(href="https://cdn.skypack.dev" target="_blank" rel="noopener")  cdn.skypack.dev
      |  but you can use the others.
      //- ul.list-disc.list-inside.pt-5
        li
          a(href="https://skypack.dev" target="_blank" rel="noopener") skypack.dev
        li
          a(href="https://cdn.jsdelivr.net" target="_blank" rel="noopener") jsdelivr.net
        li
          a(href="https://esm.sh" target="_blank" rel="noopener") esm.sh
        li
          a(href="https://unpkg.com" target="_blank" rel="noopener") unpkg.com
        li
          a(href="https://jspm.dev" target="_blank" rel="noopener") jspm.dev
        

block script
  link(rel='modulepreload' href='./js/monaco.min.js')
  //- link(rel='modulepreload' href='./js/rollup.min.js')
  //- link(rel='modulepreload' href='./js/editor.min.js')
  //- link(rel='modulepreload' href='./js/typescript.min.js')

  script(src='./js/main.min.js' type='module' defer)

  //- link(href="https://unpkg.com/prism-themes@1.8.0/themes/prism-shades-of-purple.css" rel="stylesheet")
  //- script(src="https://unpkg.com/prismjs@1.24.1/components/prism-core.min.js" async)
  //- script(src="https://unpkg.com/prismjs@1.24.1/plugins/autoloader/prism-autoloader.min.js" async)

  //- link(rel='stylesheet', href='https://unpkg.com/@highlightjs/cdn-assets@11.2.0/styles/github-dark-dimmed.min.css')
  script(src='https://unpkg.com/@highlightjs/cdn-assets@11.2.0/highlight.min.js')
  // and it's easy to individually load additional languages
  script(src='https://unpkg.com/@highlightjs/cdn-assets@11.2.0/languages/typescript.min.js')
  script.
    hljs.highlightAll();



  //- link(rel='prefetch' href='./js/editor.min.js')
  //- link(rel='prefetch' href='./js/typescript.min.js')