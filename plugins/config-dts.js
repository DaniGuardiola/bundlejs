// Based on https://medium.com/@martin_hotell/typescript-library-tips-rollup-your-types-995153cc81c7
// ^ This was a great help
import { rollup } from 'rollup';
import dts from 'rollup-plugin-dts';

// optionally pass a base path
const basePath = ".";

let cacheResult;
const generateDTS = async () => {
    if (cacheResult) return cacheResult;

    const bundle = await rollup({
        // path to your declaration files root
        input: `${basePath}/src/ts/configs/bundle-options.ts`, // (await files).flat(),
        // treeshake: true,
        plugins: [dts({
            respectExternal: true
        })],
    });

    const { output } = await bundle.generate({
        file: 'dist/js/config.d.ts',
        format: 'es'
    });

    const result = output?.[0]?.code;
    cacheResult = result;
    return result;
};

export const CONFIG_DTS = () => {
    /**
     * @type {import('esbuild').Plugin}
     */
    return {
        name: "config-dts",
        setup(build) {
            build.onResolve({ filter: /^dts\:/ }, async (args) => {
                // Feel free to remove this logline once you verify that the plugin works for your setup
                console.debug(
                    `The \`config-dts\` plugin matched an import to ${args.path} from ${args.importer}`
                );
                return {
                    path: args.path.replace(/^dts\:/, ""),
                    namespace: "config-dts",
                    pluginData: { importer: args.importer, dts: await generateDTS() },
                };
            });

            build.onLoad(
                { filter: /.*/, namespace: "config-dts" },
                async (args) => {
                    return {
                        contents: `
// This file is generated by esbuild to expose the schema script as a class, like Webpack's schema-loader
export default ${JSON.stringify(args.pluginData.dts)}`,
                    };
                }
            );
        },
    };
};